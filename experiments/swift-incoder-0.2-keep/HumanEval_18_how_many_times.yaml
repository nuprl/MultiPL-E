name: HumanEval_18_how_many_times
language: swift
prompt: "\n/// Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n/// >>>\
  \ how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n/// 3\n\
  func how_many_times(string: String, substring: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(how_many_times(string: \"\", substring:\
  \ \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") ==\
  \ 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
  \ \"john doe\", substring: \"john\") == 1)"
completions: ["    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var start\
    \ = 0\n    var end = count(string)\n    while start < end {\n        start = string.index(substring,\
    \ start) + 1\n        end = string.index(substring, end) + 1\n        count +=\
    \ 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n  \
    \  }\n    if substring == \"\" {\n        return countOccurrences(string, \"\"\
    )\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = string.startIndex\n\
    \    var l = string.endIndex\n    while i < l {\n        if string.hasPrefix(substring,\
    \ k) {\n            count = count + 1\n            k = k + substring.length\n\
    \        }\n        if string.hasSuffix(substring, k) {\n            count = count\
    \ + 1\n            l = l - substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) || string.hasSuffix(substring, k) {\n            count = count + 1\n    \
    \        k = k + substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) {\n            count = count + 1\n            k = k + substring.length\n\
    \        }\n        if string.hasSuffix(substring, k) {\n            count = count\
    \ + 1\n            l = l - substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) || string.hasSuffix(substring, k) {\n            count = count + 1\n    \
    \        k = k + substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) {\n            count = count + 1\n            k = k + substring.length\n\
    \        }\n        if string.hasSuffix(substring, k) {\n            count = count\
    \ + 1\n            l = l - substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) || string.hasSuffix(substring, k) {\n            count = count + 1\n    \
    \        k = k + substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) {\n            count = count + 1\n            k = k + substring.length\n\
    \        }\n        if string.hasSuffix(substring, k) {\n            count = count\
    \ + 1\n            l = l - substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) || string.hasSuffix(substring, k) {\n            count = count + 1\n    \
    \        k = k + substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) {\n            count = count + 1\n            k = k + substring.length\n\
    \        }\n        if string.hasSuffix(substring, k) {\n            count = count\
    \ + 1\n            l = l - substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) || string.hasSuffix(substring, k) {\n            count = count + 1\n    \
    \        k = k + substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) {\n            count = count + 1\n            k = k + substring.length\n\
    \        }\n        if string.hasSuffix(substring, k) {\n            count = count\
    \ + 1\n            l = l - substring.length\n        }\n        if string.hasPrefix(substring,\
    \ k) || string.", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ != substring[j] {\n            count += 1\n        }\n        i += 1\n     \
    \   j += 1\n    }\n    while i < k {\n        if string[i] != substring[k] {\n\
    \            count += 1\n        }\n        i += 1\n        k += 1\n    }\n  \
    \  return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return countOccurrences(string, \"\")\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += k\n        } else {\n            i += 1\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return countOccurrences(string, \"\")\n \
    \   }\n    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n    while\
    \ startIndex < string.count {\n        endIndex = string.index(substring, startIndex)\n\
    \        if endIndex == startIndex {\n            count += 1\n            startIndex\
    \ += 1\n        } else {\n            count += countOccurrences(string, substring[startIndex..<endIndex])\n\
    \            startIndex = endIndex + 1\n        }\n    }\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n            startIndex += 1\n     \
    \   } else {\n            count += endIndex - startIndex + 1\n            startIndex\
    \ = endIndex + 1\n        }\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var last = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.characters[index] == substring.characters[0] {\n      \
    \      count += countOccurrences(string, substring.characters[1..<index])\n  \
    \          last = index\n        }\n    }\n    return count + countOccurrences(string,\
    \ substring.characters[last..<string.characters.count])", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var last = 0\n    for index in 0..<string.characters.count\
    \ {\n        let start = string.index(string.startIndex, offsetBy: index)\n  \
    \      let end = string.index(start, offsetBy: substring.length)\n        if string.substring(with:\
    \ start..<end) == substring {\n            count += 1\n            last = index\n\
    \        }\n    }\n    return count", "    let index = string.firstIndex(of: substring)\n\
    \    if index == nil {\n        return 0\n    }\n    let count = string.distance(from:\
    \ string.startIndex, to: index!)\n    return count", "    let index = string.firstIndex(of:\
    \ substring)\n    if index == nil {\n        return 0\n    }\n    let start =\
    \ index!\n    let end = string.index(start, offsetBy: substring.count)\n    return\
    \ string.distance(from: start, to: end) + 1", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var last = 0\n  \
    \  for index in string.indices(of: substring) {\n        count += 1\n        last\
    \ = index\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return string.count\n    }\n \
    \   var count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[1] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[2] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[3] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[4]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[5] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[6] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[7] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[8] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[9]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[10] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[11] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[12] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[13] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[14]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[15] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[16] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[17] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[18] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[19]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[20] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[21] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[22] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[23] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[24]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[25] {\n            count += 1", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += count(substring)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return string.count\n    }\n \
    \   var count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[1] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[2] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[3] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[4]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[5] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[6] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[7] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[8] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[9]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[10] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[11] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[12] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[13] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[14]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[15] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[16] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[17] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[18] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[19]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[20] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[21] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[22] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[23] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[24]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[25] {\n            count += 1", "    var count\
    \ = 0\n    for c in string.unicodeScalars {\n        if c == substring {\n   \
    \         count += 1\n        }\n    }\n    return count", "    var count = 0\n\
    \    for c in string.unicodeScalars {\n        if c == substring {\n         \
    \   count += 1\n        } else if string.unicodeScalars.contains(substring) {\n\
    \            count += substringCount(substring)\n        }\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = 0\n    var k = 0\n    var last = 0\n    var last2 = 0\n   \
    \ var last3 = 0\n    var last4 = 0\n    var last5 = 0\n    var last6 = 0\n   \
    \ var last7 = 0\n    var last8 = 0\n    var last9 = 0\n    var last10 = 0\n  \
    \  var last11 = 0\n    var last12 = 0\n    var last13 = 0\n    var last14 = 0\n\
    \    var last15 = 0\n    var last16 = 0\n    var last17 = 0\n    var last18 =\
    \ 0\n    var last19 = 0\n    var last20 = 0\n    var last21 = 0\n    var last22\
    \ = 0\n    var last23 = 0\n    var last24 = 0\n    var last25 = 0\n    var last26\
    \ = 0\n    var last27 = 0\n    var last28 = 0\n    var last29 = 0\n    var last30\
    \ = 0\n    var last31 = 0\n    var last32 = 0\n    var last33 = 0\n    var last34\
    \ = 0\n    var last35 = 0\n    var last36 = 0\n    var last37 = 0\n    var last38\
    \ = 0\n    var last39 = 0\n    var last40 = 0\n    var last41 = 0\n    var last42\
    \ = 0\n    var last43 = 0\n    var last44 = 0\n    var last45 = 0\n    var last46\
    \ = 0\n    var last47 = 0\n    var last48 = 0\n    var last49 = 0\n    var last50\
    \ = 0\n    var last51 = 0\n    var last52 = 0\n    var last53 = 0\n    var last54\
    \ = 0\n    var last55 = 0\n    var last56 = 0\n    var last57 = 0\n    var last58\
    \ = 0\n    var last59 = 0\n    var last60 = 0\n    var last61 = 0\n    var last62\
    \ = 0\n    var last63 = 0\n    var last64 = 0\n    var last65 = 0\n    var last66\
    \ = 0\n    var last67 = 0\n    var last68 = 0\n    var last69 = 0\n    var last70\
    \ = 0\n    var last71 = 0\n    var last72 = 0\n    var last73 = 0\n    var last74\
    \ = 0\n    var last75 = 0\n    var last76 = 0\n    var last77 = 0\n    var last78\
    \ = 0\n    var last79 = 0\n    var last80 = 0\n    var last81 = 0\n    var last82\
    \ = 0\n    var last83 = 0\n    var last84 = 0\n    var last85 = 0\n    var last86\
    \ = 0\n    var last87 = 0\n    var last88 = 0\n    var last89 = 0\n    var last90\
    \ = 0\n    var last91 = 0\n    var last92 = 0\n    var last93 = 0\n    var last94\
    \ = 0\n    var last95 = 0\n    var ", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var start = 0\n    var end = count(string)\n    while\
    \ start < end {\n        start = find(string, substring, start)\n        end =\
    \ find(string, substring, end + 1)\n        if start == end {\n            count\
    \ += 1\n        }\n    }\n    return count", "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n \
    \   var k = substring.count\n    while i < j && k < string.count {\n        if\
    \ string[i] == substring[k] {\n            count += 1\n            i += 1\n  \
    \          k += 1\n        } else if string[i] < substring[k] {\n            i\
    \ += 1\n        } else {\n            k += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var last = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] ==\
    \ substring[0] {\n            count++\n            last = i\n        }\n     \
    \   if string[i] == substring[1] {\n            count++\n            last = i\n\
    \        }\n        if string[i] == substring[2] {\n            count++\n    \
    \        last = i\n        }\n        if string[i] == substring[3] {\n       \
    \     count++\n            last = i\n        }\n        if string[i] == substring[4]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[5] {\n            count++\n            last = i\n        }\n  \
    \      if string[i] == substring[6] {\n            count++\n            last =\
    \ i\n        }\n        if string[i] == substring[7] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[8] {\n   \
    \         count++\n            last = i\n        }\n        if string[i] == substring[9]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[10] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[11] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[12] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[13] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[14]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[15] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[16] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[17] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[18] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[19]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[20] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[21] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[22] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[23] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[24]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[25] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[26] {\n            count++", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n\n    var count = 0\n\
    \    var start = 0\n    var end = string.characters.count\n\n    while start <\
    \ end {\n        let index = string.characters.index(of: substring, options: .caseInsensitive)\n\
    \        if index == nil {\n            break\n        }\n\n        if index!\
    \ < start {\n            start = index!\n        }\n\n        if index! > end\
    \ {\n            end = index!\n        }\n\n        count += 1\n    }\n\n    return\
    \ count", "    if string == \"\" || substring == \"\" {\n        return 0\n  \
    \  }\n\n    var count = 0\n    var i = 0\n    var j = string.count\n\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += 1\n  \
    \          i += substring.length - 1\n        } else if string[i] == substring[1]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[2] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[3] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[4] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[5] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[6]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[7] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[8] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[9] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[10] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[11]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[12] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[13] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[14] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[15] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[16]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[17] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[18] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[19] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[20] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[21]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[22] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[23] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[24] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[25] {\n            count += 1\n\
    \            i += substring.length - 1\n        ", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[0] {\n            count = count + 1\n            i = i + 1\n  \
    \          if i == k {\n                return count\n            }\n        }\n\
    \        if string[i] == substring[1] {\n            count = count + 1\n     \
    \       i = i + 1\n            if i == k {\n                return count\n   \
    \         }\n        }\n        if string[i] == substring[2] {\n            count\
    \ = count + 1\n            i = i + 1\n            if i == k {\n              \
    \  return count\n            }\n        }\n        if string[i] == substring[3]\
    \ {\n            count = count + 1\n            i = i + 1\n            if i ==\
    \ k {\n                return count\n            }\n        }\n        if string[i]\
    \ == substring[4] {\n            count = count + 1\n            i = i + 1\n  \
    \          if i == k {\n                return count\n            }\n        }\n\
    \        if string[i] == substring[5] {\n            count = count + 1\n     \
    \       i = i + 1\n            if i == k {\n                return count\n   \
    \         }\n        }\n        if string[i] == substring[6] {\n            count\
    \ = count + 1\n            i = i + 1\n            if i == k {\n              \
    \  return count\n            }\n        }\n        if string[i] == substring[7]\
    \ {\n            count = count + 1\n            i = i + 1\n            if i ==\
    \ k {\n                return count\n            }\n        }\n        if string[i]\
    \ == substring[8] {\n            count = count + 1\n            i = i + 1\n  \
    \          if i == k {\n                return count\n            }\n        }\n\
    \        if string[i] == substring[9] {\n            count = count + 1\n     \
    \       i = i + 1\n            if i == k {\n                return count\n   \
    \         }\n        }\n        if string[i] == substring[10] {\n            count\
    \ = count + 1\n            i = i + 1\n            if i == k {\n              \
    \  return count\n            }\n        }\n        if string[i] == substring[11]\
    \ {\n            count = count + 1\n            i = i + 1\n            if i ==\
    \ k {\n                return count\n            }\n        }\n        if string[i]\
    \ == substring[12] {\n            count = count + 1\n            i = i + 1\n \
    \           if i == k {\n                return count\n            }\n       \
    \ }\n        if string[i] == substring[13] {\n            count = count + 1\n\
    \            i = i + 1\n            if i == k {\n                return count\n\
    \            }\n        }\n        if string[i] == substring[14] {\n         \
    \   count = count + 1\n            i = i + 1\n            if i == k {\n      \
    \          return count\n            }\n        }\n        if string[i] == substring[15]\
    \ {\n            count = count + 1\n            i = i + 1\n            if i ==\
    \ k {\n                return count\n            }\n        }\n        if string[i]\
    \ == substring[16] {\n            count = count + 1\n", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return string.length\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.length - 1\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += 1\n  \
    \          i -= 1\n        } else if string[j] == substring[0] {\n           \
    \ count -= 1\n            j -= 1\n        } else {\n            i += 1\n     \
    \       j += 1\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var start\
    \ = 0\n    var end = string.count\n    while start < end {\n        let index\
    \ = string.index(start, offsetBy: substring.count)\n        if index == nil {\n\
    \            break\n        }\n        start = index!\n        count += 1\n  \
    \  }\n    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(index, string.characters.count) == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ countOccurrences(string, \"\")\n    }\n    var count = 0\n    var start = 0\n\
    \    var end = string.count\n    while start < end {\n        start = string.startIndex.advanced(by:\
    \ start)\n        end = string.endIndex.advanced(by: end)\n        if string.substring(from:\
    \ start, length: substring.length) == substring {\n            count += 1\n  \
    \      }\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return string.count\n    }\n    var\
    \ count = 0\n    var start = 0\n    var end = string.count\n    while start <\
    \ end {\n        let mid = start + (end - start) / 2\n        if string.substring(from:\
    \ mid, length: substring.length) == substring {\n            count += 1\n    \
    \        start = mid + 1\n        } else {\n            end = mid\n        }\n\
    \    }\n    return count", "    var count = 0\n    for c in string.unicodeScalars\
    \ {\n        if c == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.count\n    var k = substring.count\n    while i < j\
    \ {\n        if string[i] != substring[k] {\n            count = count + 1\n \
    \       }\n        i = i + 1\n        k = k + 1\n    }\n    return count", " \
    \   var count = 0\n    for index in 0..<string.characters.count {\n        if\
    \ string.substring(index, string.characters.count) == substring {\n          \
    \  count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[j] {\n            count += 1\n            i += 1\n            j\
    \ += 1\n            k += 1\n        } else if string[i] < substring[j] {\n   \
    \         i += 1\n        } else {\n            j += 1\n        }\n    }\n   \
    \ return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var start\
    \ = 0\n    var end = count(string)\n    while start < end {\n        let mid =\
    \ start + (end - start) / 2\n        if string[mid] == substring[0] {\n      \
    \      start = mid + 1\n            count += 1\n        } else if string[mid]\
    \ == substring[1] {\n            end = mid - 1\n            count += 2\n     \
    \   } else {\n            start = mid + 1\n            end = mid\n        }\n\
    \    }\n    return count", "    var count = 0\n    for c in string.unicodeScalars\
    \ {\n        if c == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    let start = string.startIndex.advancedBy(substring.startIndex)\n\
    \    let end = string.endIndex.advancedBy(substring.endIndex)\n    let index =\
    \ string.index(start, offsetBy: substring.count)\n    return index == end ? 0\
    \ : index - start", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    var count = 0\n    for index\
    \ in 0..<string.characters.count {\n        if string.substring(index, string.characters.count)\
    \ == substring {\n            count += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var last = 0\n    var last2 = 0\n    var last3 = 0\n\
    \    var last4 = 0\n    var last5 = 0\n    var last6 = 0\n    var last7 = 0\n\
    \    var last8 = 0\n    var last9 = 0\n    var last10 = 0\n    var last11 = 0\n\
    \    var last12 = 0\n    var last13 = 0\n    var last14 = 0\n    var last15 =\
    \ 0\n    var last16 = 0\n    var last17 = 0\n    var last18 = 0\n    var last19\
    \ = 0\n    var last20 = 0\n    var last21 = 0\n    var last22 = 0\n    var last23\
    \ = 0\n    var last24 = 0\n    var last25 = 0\n    var last26 = 0\n    var last27\
    \ = 0\n    var last28 = 0\n    var last29 = 0\n    var last30 = 0\n    var last31\
    \ = 0\n    var last32 = 0\n    var last33 = 0\n    var last34 = 0\n    var last35\
    \ = 0\n    var last36 = 0\n    var last37 = 0\n    var last38 = 0\n    var last39\
    \ = 0\n    var last40 = 0\n    var last41 = 0\n    var last42 = 0\n    var last43\
    \ = 0\n    var last44 = 0\n    var last45 = 0\n    var last46 = 0\n    var last47\
    \ = 0\n    var last48 = 0\n    var last49 = 0\n    var last50 = 0\n    var last51\
    \ = 0\n    var last52 = 0\n    var last53 = 0\n    var last54 = 0\n    var last55\
    \ = 0\n    var last56 = 0\n    var last57 = 0\n    var last58 = 0\n    var last59\
    \ = 0\n    var last60 = 0\n    var last61 = 0\n    var last62 = 0\n    var last63\
    \ = 0\n    var last64 = 0\n    var last65 = 0\n    var last66 = 0\n    var last67\
    \ = 0\n    var last68 = 0\n    var last69 = 0\n    var last70 = 0\n    var last71\
    \ = 0\n    var last72 = 0\n    var last73 = 0\n    var last74 = 0\n    var last75\
    \ = 0\n    var last76 = 0\n    var last77 = 0\n    var last78 = 0\n    var last79\
    \ = 0\n    var last80 = 0\n    var last81 = 0\n    var last82 = 0\n    var last83\
    \ = 0\n    var last84 = 0\n    var last85 = 0\n    var last86 = 0\n    var last87\
    \ = 0\n    var last88 = 0\n    var last89 = 0\n    var last90 = 0\n    var last91\
    \ = 0\n    var last92 = 0\n    var last93 = 0\n    var last94 = 0\n    var last95\
    \ = 0\n    var ", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return countOccurrences(string, \"\")\n    }\n    var count\
    \ = 0\n    var last = 0\n    for i := 0; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            count += countOccurrences(string, substring[1:])\n\
    \            last = i + 1\n        }\n    }\n    return count + countOccurrences(string,\
    \ substring[last:])", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return string.length\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = string.length - 1\n    while i < j {\n        if string[i]\
    \ == substring[0] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[j] == substring[0] {\n            count -= 1\n\
    \            j -= 1\n        } else {\n            i += 1\n            j += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for index in 0..<string.characters.count {\n        if string.substring(from:\
    \ index).contains(substring) {\n            count += 1\n        }\n    }\n   \
    \ return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.characters[index] == substring.characters[index] {\n  \
    \          count += 1\n        }\n    }\n    return count", "    if string ==\
    \ \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n  \
    \  var i = 0\n    var j = string.count\n    var k = substring.count\n    while\
    \ i < j {\n        if string[i] == substring[k] {\n            count += 1\n  \
    \          i += 1\n            k += 1\n            if k == substring.count {\n\
    \                k = 0\n            }\n        } else {\n            i += 1\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    var substringLength = substring.count\n    while start < end {\n        let\
    \ index = string.index(start, offsetBy: substringLength)\n        if index ==\
    \ nil {\n            break\n        }\n        if string.substring(with: index)\
    \ == substring {\n            count += 1\n            start = index\n        }\
    \ else {\n            start = index\n        }\n    }\n    return count", "  \
    \  if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var i = 0\n    for c in string {\n        if c == substring {\n            count\
    \ = count + 1\n        }\n        if i == len(string) - 1 {\n            break\n\
    \        }\n        if c == substring[i] {\n            count = count + 1\n  \
    \      }\n        i += 1\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ stringLength = count(string)\n    var substringLength = count(substring)\n \
    \   while i < stringLength && j < substringLength {\n        if string[i] == substring[j]\
    \ {\n            count += 1\n            i += 1\n            j += 1\n        }\
    \ else if string[i] == substring[k] {\n            count += 1\n            i +=\
    \ 1\n            k += 1\n        } else {\n            i += 1\n        }\n   \
    \ }\n    return count", "    if string == \"\" {\n        return 0\n    }\n  \
    \  if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += k\n        } else {\n            i += 1\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return countOccurrences(string, \"\")\n \
    \   }\n    var count = 0\n    var lastIndex = string.startIndex\n    for _ in\
    \ string.unicodeScalars {\n        if string.unicodeScalars.contains(substring)\
    \ {\n            count += 1\n            lastIndex = string.index(lastIndex, offsetBy:\
    \ 1)\n        } else {\n            lastIndex = string.index(lastIndex, offsetBy:\
    \ -1)\n        }\n    }\n    return count", "    if string == \"\" {\n       \
    \ return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n \
    \   var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n  \
    \  var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   \
    \ var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n    var\
    \ F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n    var K\
    \ = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n    var P =\
    \ 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n    var U = 0\n\
    \    var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var Z = 0\n \
    \   var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n  \
    \  var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n   \
    \ var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var\
    \ p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u\
    \ = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z =\
    \ 0\n    var A = 0\n    var B = 0\n    var C = 0\n    var D = 0\n    var E = 0\n\
    \    var F = 0\n    var G = 0\n    var H = 0\n    var I = 0\n    var J = 0\n \
    \   var K = 0\n    var L = 0\n    var M = 0\n    var N = 0\n    var O = 0\n  \
    \  var P = 0\n    var Q = 0\n    var R = 0\n    var S = 0\n    var T = 0\n   \
    \ var U = 0\n    var V = 0\n    var W = 0\n    var X = 0\n    var Y = 0\n    var\
    \ Z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e\
    \ = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j =\
    \ 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n\
    \    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n \
    \   var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n  \
    \  var z = 0\n", '    return count_overlapping_cases(string, substring)', "  \
    \  if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return 1\n    }\n    var count = 0\n    var last = 0\n    for i := 0;\
    \ i < len(string); i++ {\n        if string[i] == substring[0] {\n           \
    \ count++\n            last = i\n        }\n    }\n    for i := 0; i < len(substring);\
    \ i++ {\n        if string[last+i] != substring[i] {\n            count++\n  \
    \      }\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return string.count\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    var k = string.startIndex\n   \
    \ while i < string.count {\n        j = string.startIndex\n        while j < string.count\
    \ && substring[j] == string[i] {\n            j += 1\n        }\n        if j\
    \ == string.startIndex {\n            count += 1\n            i = k\n        }\
    \ else {\n            count += j - k\n            k = j\n        }\n    }\n  \
    \  return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return countOccurrences(string, \"\")\n    }\n    return\
    \ countOccurrences(string, substring)", "    var count = 0\n    for char in string.unicodeScalars\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return count(string)\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = string.startIndex\n    while i < string.endIndex\
    \ {\n        if string[i] == substring[j] {\n            count += 1\n        \
    \    i += 1\n            j += 1\n            if j == substring.endIndex {\n  \
    \              i += 1\n                j = 0\n            }\n        } else {\n\
    \            if j == substring.startIndex {\n                i += 1\n        \
    \        j = 0\n            }\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            i += k\n        } else {\n          \
    \  i += 1\n        }\n    }\n    return count", "    if string == \"\" {\n   \
    \     return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k\
    \ = substring.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            i += k\n        } else if string[i] == substring[1]\
    \ {\n            count += 1\n            i += k\n        } else if string[i] ==\
    \ substring[2] {\n            count += 1\n            i += k\n        } else if\
    \ string[i] == substring[3] {\n            count += 1\n            i += k\n  \
    \      } else if string[i] == substring[4] {\n            count += 1\n       \
    \     i += k\n        } else if string[i] == substring[5] {\n            count\
    \ += 1\n            i += k\n        } else if string[i] == substring[6] {\n  \
    \          count += 1\n            i += k\n        } else if string[i] == substring[7]\
    \ {\n            count += 1\n            i += k\n        } else if string[i] ==\
    \ substring[8] {\n            count += 1\n            i += k\n        } else if\
    \ string[i] == substring[9] {\n            count += 1\n            i += k\n  \
    \      } else if string[i] == substring[10] {\n            count += 1\n      \
    \      i += k\n        } else if string[i] == substring[11] {\n            count\
    \ += 1\n            i += k\n        } else if string[i] == substring[12] {\n \
    \           count += 1\n            i += k\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += k\n        } else if string[i] ==\
    \ substring[14] {\n            count += 1\n            i += k\n        } else\
    \ if string[i] == substring[15] {\n            count += 1\n            i += k\n\
    \        } else if string[i] == substring[16] {\n            count += 1\n    \
    \        i += k\n        } else if string[i] == substring[17] {\n            count\
    \ += 1\n            i += k\n        } else if string[i] == substring[18] {\n \
    \           count += 1\n            i += k\n        } else if string[i] == substring[19]\
    \ {\n            count += 1\n            i += k\n        } else if string[i] ==\
    \ substring[20] {\n            count += 1\n            i += k\n        } else\
    \ if string[i] == substring[21] {\n            count += 1\n            i += k\n\
    \        } else if string[i] == substring[22] {\n            count += 1\n    \
    \        i += k\n        } else if string[i] == substring[23] {\n            count\
    \ += 1\n            i += k\n        } else if string[i] == substring[24] {\n \
    \           count += 1\n            i += k\n        } else if string[i] == substring[25]\
    \ {\n            count += 1\n            i += k\n        } else if string[i] ==\
    \ substring[26] {\n            count += 1\n            i += k\n        } else\
    \ if string[i] == substring[27] {\n            count += 1\n            i += k\n\
    \        } else if string[i] == ", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return countOccurrences(string, \"\
    \")\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = string.startIndex\n\
    \    while i < string.endIndex {\n        if string[k] == substring[j] {\n   \
    \         count += 1\n            i += 1\n            j += 1\n            if j\
    \ == substring.endIndex {\n                j += 1\n                k += 1\n  \
    \          }\n        } else {\n            i = 0\n            j += 1\n      \
    \      k += 1\n        }\n    }\n    return count", "    if string == \"\" ||\
    \ substring == \"\" {\n        return 0\n    }\n    var count = 0\n    var i =\
    \ 0\n    var j = string.count\n    var k = substring.count\n    while i < j {\n\
    \        if string[i] == substring[k] {\n            count = count + 1\n     \
    \       i = i + 1\n            k = k - 1\n        }\n        j = j - 1\n    }\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return 1\n    }\n    var count = 0\n    var last\
    \ = 0\n    for i := 0; i < len(string); i++ {\n        if string[i] == substring[0]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[1] {\n            count++\n            last = i\n        }\n  \
    \      if string[i] == substring[2] {\n            count++\n            last =\
    \ i\n        }\n        if string[i] == substring[3] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[4] {\n   \
    \         count++\n            last = i\n        }\n        if string[i] == substring[5]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[6] {\n            count++\n            last = i\n        }\n  \
    \      if string[i] == substring[7] {\n            count++\n            last =\
    \ i\n        }\n        if string[i] == substring[8] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[9] {\n   \
    \         count++\n            last = i\n        }\n        if string[i] == substring[10]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[11] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[12] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[13] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[14] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[15]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[16] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[17] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[18] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[19] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[20]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[21] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[22] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[23] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[24] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[25]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[26] {\n            count++\n            last = i\n        }", " \
    \   if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var start = 0\n    var end = string.characters.count\n    while\
    \ start < end {\n        let index = string.index(string.startIndex, offsetBy:\
    \ start)\n        let substringIndex = string.index(index, offsetBy: substring.characters.count)\n\
    \        if substringIndex == nil {\n            count += 1\n            start\
    \ = index + 1\n        } else {\n            start = substringIndex!.offsetBy\n\
    \        }\n    }\n    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(index, string.characters.count) == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for index in 0..<string.characters.count {\n        if string.characters.contains(substring,\
    \ at: index) {\n            count += 1\n        }\n    }\n    return count", " \
    \   if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += k\n            k += k\n        }\n        i += 1\n  \
    \  }\n    return count", "    if string == \"\" {\n        return 0\n    }\n \
    \   if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ = count + 1\n            i = i + 1\n            while i < j && string[i] ==\
    \ substring[1] {\n                count = count + 1\n                i = i + 1\n\
    \            }\n        } else {\n            i = i + 1\n        }\n    }\n  \
    \  return count", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n \
    \   var stringLength = string.characters.count\n    var substringLength = substring.characters.count\n\
    \    for (i = 0; i < stringLength && j < substringLength; i++) {\n        if string.characters[i]\
    \ == substring.characters[j] {\n            count++\n            j = j + 1\n \
    \           k = k + 1\n            if k == substringLength {\n               \
    \ j = j + 1\n                k = 0\n            }\n        } else {\n        \
    \    j = j + 1\n            k = 0\n        }\n    }\n    return count", "    let\
    \ startIndex = string.startIndex.advancedBy(substring.startIndex)\n    let endIndex\
    \ = string.endIndex.advancedBy(-substring.endIndex)\n    let range = startIndex..<endIndex\n\
    \    return string.distance(from: range, to: startIndex) + string.distance(from:\
    \ range, to: endIndex)", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(from: index).lowercased() == substring.lowercased()\
    \ {\n            count += 1\n        }\n    }\n    return count", "    var count\
    \ = 0\n    for c in string {\n        if c == substring {\n            count +=\
    \ 1\n        }\n    }\n    return count", "    let startIndex = string.startIndex.advancedBy(substring.startIndex)\n\
    \    let endIndex = string.endIndex.advancedBy(-substring.endIndex)\n    return\
    \ string.distance(from: startIndex, to: endIndex) + 1", "    var count = 0\n \
    \   for c in string.unicodeScalars {\n        if c == substring {\n          \
    \  count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += 1\n  \
    \          i += count(substring)\n        } else {\n            i += 1\n     \
    \   }\n    }\n    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.characters.contains(substring, range: NSMakeRange(index,\
    \ substring.length)) {\n            count += 1\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var start = 0\n    var end = string.characters.count\n    while\
    \ start < end {\n        let index = string.index(string.startIndex, offsetBy:\
    \ start)\n        let substringIndex = string.index(index, offsetBy: substring.characters.count)\n\
    \        if substringIndex != nil {\n            count += 1\n            start\
    \ = substringIndex!.offset\n        } else {\n            start = index!.offset\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var last = 0\n    for i := 0; i < len(string);\
    \ i++ {\n        if string[i] == substring[0] {\n            count += countOccurrences(string,\
    \ substring)\n            last = i + 1\n        }\n    }\n    if last < len(string)\
    \ {\n        count += countOccurrences(string, substring[last:])\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = string.count\n    while start < end {\n        start = string.index(substring,\
    \ start) + 1\n        end = string.index(substring, end) + 1\n        count +=\
    \ 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n  \
    \  }\n    if substring == \"\" {\n        return count(string)\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = string.characters.count\n\
    \    var m = substring.characters.count\n    while i < l && j < m {\n        if\
    \ string[i] == substring[j] {\n            count += 1\n            i += 1\n  \
    \          j += 1\n        } else if string[i] < substring[j] {\n            i\
    \ += 1\n        } else {\n            j += 1\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n    \
    \    if string[i] == substring[0] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[1] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[2] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[3] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[4]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[5] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[6] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[7] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[8] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[9]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[10] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[11] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[12] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[13] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[14]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[15] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[16] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[17] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[18] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[19]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[20] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[21] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[22] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[23] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[24]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[25] {\n            count += 1\n            i\
    \ += substring.length - 1\n        ", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return string.count\n    }\n \
    \   var count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[1] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[2] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[3] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[4]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[5] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[6] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[7] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[8] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[9]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[10] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[11] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[12] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[13] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[14]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[15] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[16] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[17] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[18] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[19]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[20] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[21] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[22] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[23] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[24]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[25] {\n            count += 1", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ countOccurrences(string, \"\")\n    }\n    var count = 0\n    var i = 0\n  \
    \  var j = 0\n    var k = string.startIndex\n    var l = string.endIndex\n   \
    \ while i < l {\n        if string[k] == substring[j] {\n            count +=\
    \ 1\n            i += k\n            k += k\n            j += 1\n            if\
    \ j == substring.count {\n                j = 0\n                k += k\n    \
    \        }\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return countOccurrences(string, \"\")\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ = count + 1\n            i = i + 1\n            k = k - 1\n            if k\
    \ == 0 {\n                break\n            }\n        } else {\n           \
    \ i = i + 1\n        }\n    }\n    return count", "    if string == \"\" {\n \
    \       return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var start = 0\n    var end = count(string)\n  \
    \  while start < end {\n        start = find(string, substring, start)\n     \
    \   end = find(string, substring, end + 1)\n        if start == end {\n      \
    \      count += 1\n        }\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        start = string.startIndex.advanced(by: start)\n\
    \        end = string.endIndex.advanced(by: end)\n        if string.substring(from:\
    \ start) == substring {\n            count += 1\n        }\n    }\n    return\
    \ count", '    return count_occurrences(string, substring)', "    if string ==\
    \ \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n  \
    \  var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[j] {\n            count\
    \ = count + 1\n        }\n        i = i + 1\n        j = j - 1\n    }\n    if\
    \ k > 0 {\n        count = count + how_many_times(string, substring[k-1])\n  \
    \  }\n    return count", "    if string == \"\" {\n        return 0\n    }\n \
    \   if substring == \"\" {\n        return countOccurrences(string, \"\")\n  \
    \  }\n    var count = 0\n    var start = 0\n    var end = string.count\n    while\
    \ start < end {\n        start = string.startIndex.advanced(by: start)\n     \
    \   end = string.endIndex.advanced(by: end)\n        if string.substring(from:\
    \ start, length: substring.length) == substring {\n            count += 1\n  \
    \      }\n    }\n    return count", "    let start = string.startIndex.advancedBy(substring.startIndex)\n\
    \    let end = string.endIndex.advancedBy(-substring.endIndex)\n    let count\
    \ = string.distance(from: start, to: end)\n    return count", "    var count =\
    \ 0\n    for index in 0..<string.characters.count {\n        if string.substring(index,\
    \ string.characters.count) == substring {\n            count += 1\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n        if\
    \ string[i] == substring[0] {\n            count += 1\n            i += count(substring)\n\
    \        } else {\n            i += 1\n        }\n    }\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n            startIndex = endIndex +\
    \ 1\n        } else {\n            count += countOccurrences(string, substring[startIndex..<endIndex])\n\
    \            startIndex = endIndex + 1\n        }\n    }\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var i = 0\n    var j = 0\n    var k = 0\n    var lastCharIndex = 0\n    var\
    \ lastSubstringIndex = 0\n    for i = string.startIndex; lastCharIndex < string.endIndex;\
    \ i++ {\n        if string[i] == substring[k] {\n            count++\n       \
    \     lastCharIndex = i\n            lastSubstringIndex = k\n            k++\n\
    \        } else {\n            if k > 0 {\n                k--\n            }\
    \ else {\n                j++\n            }\n        }\n    }\n    if k > 0 {\n\
    \        count++\n        lastCharIndex = i\n        lastSubstringIndex = k\n\
    \    }\n    if lastCharIndex == string.endIndex {\n        return countOccurrences(string,\
    \ substring)\n    }\n    if lastSubstringIndex == 0 {\n        return countOccurrences(string,\
    \ substring)\n    }\n    return countOccurrences(string, substring) + how_many_times(string.substringFromIndex(lastCharIndex),\
    \ substring) + how_many_times(string.substringFromIndex(lastCharIndex), string.substringFromIndex(lastSubstringIndex))",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return string.count\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            i += substring.length - 1\n        } else\
    \ if string[i] == substring[1] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[2] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[3]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[4] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[5] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[6] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[7] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[8]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[9] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[10] {\n     \
    \       count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[11] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[12] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[13]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[14] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[15] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[16] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[17] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[18]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[19] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[20] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[21] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[22] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[23]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[24] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[25] {\n  \
    \          count += 1", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.characters.contains(substring, at: index) {\n         \
    \   count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    return countOccurrences(string, substring)", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var stringLength = string.characters.count\n\
    \    var substringLength = substring.characters.count\n    for (i; i < stringLength;\
    \ i++ {\n        for (j; j < substringLength; j++ {\n            if string[i]\
    \ == substring[j] {\n                count++\n                k++\n          \
    \  }\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return 1\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += k\n        } else {\n            i += 1\n        }\n\
    \    }\n    return count", "    if string == \"\" || substring == \"\" {\n   \
    \     return 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ == substring[k] {\n            count += 1\n            i += k\n            k\
    \ += 1\n        }\n        i += 1\n    }\n    return count", "    if string ==\
    \ \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ string.length\n    }\n    var count = 0\n    var i = 0\n    var j = string.length\
    \ - 1\n    while i < j {\n        if string[i] == substring[0] {\n           \
    \ count += 1\n            i += substring.length - 1\n        } else if string[j]\
    \ == substring[0] {\n            count -= 1\n            j -= 1\n        } else\
    \ {\n            i += 1\n            j += 1\n        }\n    }\n    return count",
  "    let start = string.startIndex.advancedBy(substring.startIndex)\n    let end\
    \ = string.endIndex.advancedBy(-substring.endIndex)\n    let count = string.distance(from:\
    \ start, to: end)\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += k\n            i += k\n            k = k - 1\n        } else {\n        \
    \    i += 1\n        }\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var startIndex =\
    \ 0\n    var endIndex = string.count\n    while startIndex < endIndex {\n    \
    \    let index = string.index(startIndex, offsetBy: substring.count)\n       \
    \ if index == startIndex {\n            startIndex += substring.count\n      \
    \      continue\n        }\n        if index == endIndex {\n            endIndex\
    \ -= substring.count\n            continue\n        }\n        if string.substring(from:\
    \ index).lowercased() == substring.lowercased() {\n            count += 1\n  \
    \          startIndex = index\n        }\n        startIndex = index\n    }\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return countOccurrences(string, \"\")\n    }\n\
    \    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n    while startIndex\
    \ < string.count {\n        endIndex = string.index(substring, startIndex)\n \
    \       if endIndex == startIndex {\n            count += 1\n            startIndex\
    \ = string.index(substring, startIndex) + 1\n        } else {\n            count\
    \ += 1\n            startIndex = endIndex + 1\n        }\n    }\n    return count",
  "    var count = 0\n    for index in 0..<string.characters.count {\n        if string.characters.contains(substring,\
    \ at: index) {\n            count += 1\n        }\n    }\n    return count", " \
    \   var count = 0\n    for index in 0..<string.characters.count {\n        if\
    \ string.substring(index, string.characters.count) == substring {\n          \
    \  count += 1\n        }\n    }\n    return count", "    var count = 0\n    for\
    \ c in string.unicodeScalars {\n        if c == substring {\n            count\
    \ += 1\n        }\n    }\n    return count", "    if string == \"\" {\n      \
    \  return 0\n    }\n    if substring == \"\" {\n        return string.length\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = string.length\n    while i < l {\n        if string[i] == substring[j] {\n\
    \            count += 1\n            i += substring.length - 1\n            j++\n\
    \        }\n        if j == substring.length {\n            j = 0\n          \
    \  k += 1\n        }\n        if k == substring.length {\n            k = 0\n\
    \            i += 1\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += count(substring)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.startIndex\n    var k =\
    \ string.endIndex\n    while i < k {\n        if string[j] != substring[i] {\n\
    \            count = count + 1\n        }\n        if string[j] == substring[i]\
    \ {\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = count(string)\n    while start < end {\n        start = find(string,\
    \ substring, start)\n        end = find(string, substring, end + 1)\n        if\
    \ start == end {\n            count += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var last = 0\n    for index in 0..<string.characters.count {\n        if string.characters[index]\
    \ == substring.characters[0] {\n            count += 1\n            last = index\n\
    \        }\n    }\n    if last < string.characters.count {\n        count += countOccurrences(string,\
    \ string.characters[last..<string.characters.count])\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += k\n            k -= 1\n        }\n        i += 1\n  \
    \  }\n    return count", "    var count = 0\n    for c in string {\n        if\
    \ c == substring {\n            count += 1\n        }\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var start = 0\n    var end = string.count\n    while start < end {\n       \
    \ let index = string.index(start, offsetBy: substring.length)\n        if index\
    \ == nil {\n            break\n        }\n        start = index!\n        count\
    \ += 1\n    }\n    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(index, string.characters.count) == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ countOccurrences(string, \"\")\n    }\n    var count = 0\n    var startIndex\
    \ = 0\n    var endIndex = string.count\n    while startIndex < endIndex {\n  \
    \      var index = string.index(startIndex, offsetBy: substring.count)\n     \
    \   if index == NSNotFound {\n            break\n        }\n        if string.substring(with:\
    \ index).lowercased() == substring.lowercased() {\n            count += 1\n  \
    \          startIndex = index\n        } else {\n            endIndex = index\n\
    \        }\n    }\n    return count", "    let count = string.characters.filter({\
    \ $0 == substring }).count\n    return count > 0 ? count : 0", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j && k < string.count {\n        if\
    \ string[i] != substring[k] {\n            count = count + 1\n        }\n    \
    \    i += 1\n        k += 1\n    }\n    return count", "    if string == \"\"\
    \ {\n        return 0\n    }\n    if substring == \"\" {\n        return count(string)\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.startIndex\n    while\
    \ i < string.endIndex {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += 1\n            while i < string.endIndex && string[i]\
    \ == substring[1] {\n                i += 1\n            }\n            j = i\n\
    \        } else {\n            j = i\n        }\n    }\n    return count", " \
    \   var count = 0\n    for index in 0..<string.characters.count {\n        if\
    \ string.substring(index, string.characters.count) == substring {\n          \
    \  count += 1\n        }\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return string.count\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k\
    \ = substring.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count = count + 1\n            i = i + 1\n            if i == k {\n\
    \                return count\n            }\n        } else {\n            i\
    \ = i + 1\n        }\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = 0\n    var k = 0\n    var l = string.count\n    var m = substring.count\n\
    \    for (i; i < l; i++ {\n        if string[i] == substring[j] {\n          \
    \  count++\n            j = j + 1\n            if j == m {\n                j\
    \ = 0\n                k = k + 1\n            }\n        }\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return countOccurrences(string, \"\")\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.characters.count\n    var k = substring.characters.count\n\
    \    while i < j {\n        if string[i] != substring[j] {\n            count\
    \ = count + 1\n        }\n        i = i + 1\n        j = j - 1\n    }\n    while\
    \ i < k {\n        if string[i] != substring[k] {\n            count = count +\
    \ 1\n        }\n        i = i + 1\n        k = k - 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var last = 0\n    for index in 0..<string.characters.count {\n        if string.characters[index]\
    \ == substring.characters[0] {\n            count += countOccurrences(string,\
    \ string.characters[index])\n            last = index\n        }\n    }\n    if\
    \ last < string.characters.count {\n        count += countOccurrences(string,\
    \ string.characters[last])\n    }\n    return count", "    var count = 0\n   \
    \ for index in 0..<string.characters.count {\n        if string.substring(from:\
    \ index).lowercased() == substring.lowercased() {\n            count += 1\n  \
    \      }\n    }\n    return count", "    var count = 0\n    for c in string.unicodeScalars\
    \ {\n        if c == substring {\n            count += 1\n        }\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    var k = substring.count\n    while i < j {\n        if\
    \ string[i] == substring[0] {\n            i += 1\n            count += k\n  \
    \          if i < j {\n                if string[i] == substring[1] {\n      \
    \              i += 1\n                    count += k\n                    if\
    \ i < j {\n                        if string[i] == substring[2] {\n          \
    \                  i += 1\n                            count += k\n          \
    \                  if i < j {\n                                if string[i] ==\
    \ substring[3] {\n                                    i += 1\n               \
    \                     count += k\n                                    if i < j\
    \ {\n                                        if string[i] == substring[4] {\n\
    \                                            i += 1\n                        \
    \                    count += k\n                                            if\
    \ i < j {\n                                                if string[i] == substring[5]\
    \ {\n                                                    i += 1\n            \
    \                                        count += k\n                        \
    \                            if i < j {\n                                    \
    \                    if string[i] == substring[6] {\n                        \
    \                                    i += 1\n                                \
    \                            count += k\n                                    \
    \                        if i < j {\n                                        \
    \                        if string[i] == substring[7] {\n                    \
    \                                                i += 1\n                    \
    \                                                count += k\n                \
    \                                                    if i < j {\n            \
    \                                                            if string[i] == substring[8]\
    \ {\n                                                                        i\
    \ += 1\n                                                                     \
    \   count += k\n                                                            if\
    \ i < j {\n                                                                  \
    \          if string[i] == substring[9] {\n                                  \
    \                                              i += 1\n                      \
    \                                                          count += k\n      \
    \                                                                          if\
    \ i < j {\n                                                                  \
    \                  if string[i] == substring[10] {\n                         \
    \                                                               i += 1\n     \
    \                                                                            \
    \       count += k\n                                                         \
    \                               if i < j {\n                                 \
    \                                                           if string[i] == substring[11]\
    \ {\n                                                                        \
    \                        i += 1\n                                            \
    \                                                    count += k\n            \
    \                                                                            \
    \        if i < j {\n                                                        \
    \                                            if string[i] == substring[12] {\n\
    \                                                                            \
    \                            i += 1\n                                        \
    \                                                                count += k\n\
    \                                                                            \
    \                            if i < j {\n                                    \
    \                                                                        if string[i]\
    \ == substring[13] {\n                                                       \
    \                                                         i += 1\n           \
    \                                                                            \
    \                         count += k\n                                       \
    \                                                                         if i\
    \ < j {\n                                                                    \
    \                                                if string[i] == substring[14]\
    \ {\n                                                                        \
    \                                                i += 1\n                    \
    \                                                                            \
    \                        count += k\n                                        \
    \                                                                            \
    \    if i < j {\n                                                            \
    \                                                                if string[i]\
    \ == substring[15] {\n                                                       \
    \                                                                         i +=\
    \ 1\n                                                                        \
    \                                                        count += k\n        \
    \                                                                            \
    \                                                if i < j {\n                \
    \                                                                            \
    \                                            if string[i] == substring[16] {\n\
    \                                                                            \
    \                                                                i += 1\n    \
    \                                                                            \
    \                                                            count += k\n    \
    \                                                                            \
    \                                                    if i < j {\n            \
    \                                                                            \
    \                                                if string[i] == substring[17]\
    \ {\n                                                                        \
    \                                                                    i += 1\n\
    \                                                                            \
    \                                                                count += k\n\
    \                                                                            \
    \                                                        if i < j {\n        \
    \                                                                            \
    \                                                    if string[i] == substring[18]\
    \ {\n                                                                        \
    \                                                                    i += 1\n\
    \                                                                            \
    \                                                                count += k\n\
    \                                                                            \
    \                                                        if i < j", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ string.count\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    for\
    \ i < string.count {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += substring.length - 1\n        } else {\n            count\
    \ = 0\n        }\n        if j == substring.count {\n            count += 1\n\
    \            j = 0\n        } else {\n            j += 1\n        }\n    }\n \
    \   return count", "    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k += k\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" || substring == \"\" {\n        return 0\n    }\n    var count = 0\n\
    \    var startIndex = 0\n    var endIndex = 0\n    while startIndex < string.count\
    \ {\n        endIndex = string.index(substring, startIndex)\n        if endIndex\
    \ == startIndex {\n            count += 1\n            startIndex = string.index(substring,\
    \ startIndex) + 1\n        } else {\n            count += endIndex - startIndex\n\
    \            startIndex = endIndex + 1\n        }\n    }\n    return count", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var i = 0\n    var j = string.count\n    var k = substring.count\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += countOccurrences(&string[i+1],\
    \ substring[1:])\n            i += k\n        } else {\n            count += countOccurrences(&string[i],\
    \ substring)\n            i += 1\n        }\n    }\n    return count", "    if\
    \ string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n    \
    \    return count(string)\n    }\n    var count = 0\n    var start = 0\n    var\
    \ end = count(string)\n    while start < end {\n        let mid = start + (end\
    \ - start) / 2\n        if string[mid] == substring {\n            count += 1\n\
    \            start = mid + 1\n        } else {\n            if string[mid] > substring\
    \ {\n                end = mid\n            } else {\n                start =\
    \ mid + 1\n            }\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ countOccurrences(string, \"\")\n    }\n    var count = 0\n    var last = 0\n\
    \    for index in 0..<string.characters.count {\n        if string.characters[index]\
    \ == substring.characters[0] {\n            count++\n            last = index\n\
    \        }\n    }\n    if last < string.characters.count {\n        for index\
    \ in last..<string.characters.count {\n            if string.characters[index]\
    \ == substring.characters[0] {\n                count++\n            }\n     \
    \   }\n    }\n    return count", '    return count_overlapping_cases(string, substring)',
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var startIndex = 0\n    var endIndex = 0\n    while startIndex\
    \ < string.count {\n        endIndex = string.index(substring, startIndex)\n \
    \       if endIndex == startIndex {\n            count += 1\n            startIndex\
    \ = string.index(substring, startIndex) + 1\n        } else {\n            count\
    \ += 1\n            startIndex = endIndex + 1\n        }\n    }\n    return count",
  '    return count_overlapping_cases(string, substring)', "    let count = string.characters.reduce(0)\
    \ { (sum, character) -> Int in\n        if character == substring {\n        \
    \    sum += 1;\n        }\n        return sum;\n    }\n    return count;", " \
    \   if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    var k = substring.count\n    while i < j {\n        if\
    \ string[i] == substring[0] {\n            count = count + 1\n            i =\
    \ i + 1\n            while i < j && string[i] == substring[1] {\n            \
    \    count = count + 1\n                i = i + 1\n            }\n           \
    \ i = i + 1\n        } else {\n            i = i + 1\n        }\n    }\n    return\
    \ count", "    if string == \"\" || substring == \"\" {\n        return 0\n  \
    \  }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k =\
    \ substring.count\n    while i < j {\n        if string[i] == substring[k] {\n\
    \            count += 1\n            i += k\n            k += k\n        }\n \
    \       i += 1\n    }\n    return count", "    let count = string.countSubstrings(of:\
    \ substring)\n    return count ?? 0", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            i\
    \ += count(substring)\n        } else {\n            i += 1\n        }\n    }\n\
    \    return count", "    let start = string.startIndex.advancedBy(substring.startIndex.distanceTo(string.startIndex))\n\
    \    let end = string.endIndex.advancedBy(substring.endIndex.distanceTo(string.endIndex))\n\
    \    let count = string.distance(from: start, to: end)\n    return count", " \
    \   let start = string.startIndex.advancedBy(substring.startIndex)\n    let end\
    \ = string.endIndex.advancedBy(substring.endIndex)\n    let range = start..<end\n\
    \    return string.distance(from: range, to: end) + 1", "    let count = string.countSubstrings(of:\
    \ substring)\n    return count ?? 0", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n \
    \   var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k += 1\n        }\n\
    \        if k > substring.count {\n            break\n        }\n        i +=\
    \ 1\n    }\n    return count", "    let count = string.characters.reduce(0) {\
    \ (result, character) in\n        if character == substring {\n            result\
    \ + 1\n        }\n        return result\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var last = 0\n    for i := 0; i\
    \ < len(string); i++ {\n        if string[i] == substring[0] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[1] {\n   \
    \         count++\n            last = i\n        }\n        if string[i] == substring[2]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[3] {\n            count++\n            last = i\n        }\n  \
    \      if string[i] == substring[4] {\n            count++\n            last =\
    \ i\n        }\n        if string[i] == substring[5] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[6] {\n   \
    \         count++\n            last = i\n        }\n        if string[i] == substring[7]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[8] {\n            count++\n            last = i\n        }\n  \
    \      if string[i] == substring[9] {\n            count++\n            last =\
    \ i\n        }\n        if string[i] == substring[10] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[11] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[12]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[13] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[14] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[15] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[16] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[17]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[18] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[19] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[20] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[21] {\n  \
    \          count++\n            last = i\n        }\n        if string[i] == substring[22]\
    \ {\n            count++\n            last = i\n        }\n        if string[i]\
    \ == substring[23] {\n            count++\n            last = i\n        }\n \
    \       if string[i] == substring[24] {\n            count++\n            last\
    \ = i\n        }\n        if string[i] == substring[25] {\n            count++\n\
    \            last = i\n        }\n        if string[i] == substring[26] {\n  \
    \          count++\n            last = i", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    var found = false\n    while start < end {\n        found = string.hasPrefix(substring)\n\
    \        if found {\n            start = string.startIndex\n            end =\
    \ string.endIndex\n            count += countOccurrences(string, substring)\n\
    \        }\n        found = string.hasSuffix(substring)\n        if found {\n\
    \            start = string.endIndex\n            end = string.startIndex\n  \
    \          count += countOccurrences(string, substring)\n        }\n        start\
    \ += 1\n        end -= 1\n    }\n    return count", "    if string == \"\" {\n\
    \        return 0\n    }\n    if substring == \"\" {\n        return string.count\n\
    \    }\n    var count = 0\n    var last = 0\n    for index in string.indices(of:\
    \ substring) {\n        count = count + 1\n        if index != last {\n      \
    \      count = count - 1\n        }\n        last = index\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var last = 0\n    for index in 0..<string.characters.count {\n        if string[index]\
    \ == substring[0] {\n            count += countOccurrences(string, substring)\n\
    \            last = index\n        }\n        if string[index] == substring[substring.length\
    \ - 1] {\n            count += countOccurrences(string, substring)\n         \
    \   last = index\n        }\n    }\n    return count + countOccurrences(string,\
    \ substring[last..<string.characters.count])", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = string.count\n    while start < end {\n        let index = string.index(start,\
    \ offsetBy: substring.count)\n        if index == nil {\n            break\n \
    \       }\n        start = index!\n        count += 1\n    }\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.count\n    while i < j {\n        if string[i] == substring[0] {\n\
    \            count += 1\n            i += count(substring)\n        } else {\n\
    \            i += 1\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return string.count\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.count\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += 1\n  \
    \          i += substring.length - 1\n        } else if string[i] == substring[1]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[2] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[3] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[4] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[5] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[6]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[7] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[8] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[9] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[10] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[11]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[12] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[13] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[14] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[15] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[16]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[17] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[18] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[19] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[20] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[21]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[22] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[23] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[24] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[25] {\n            count += 1",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.characters.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            i += count(substring)\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return count", "    if string ==\
    \ \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var start = 0\n    var end = count(string)\n\
    \    while start < end {\n        start = string.index(substring, start) + 1\n\
    \        end = string.index(substring, end) + 1\n        count += 1\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return string.count\n    }\n    var count = 0\n    var startIndex\
    \ = 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex)\n        if endIndex == startIndex {\n\
    \            count += 1\n        } else {\n            count += endIndex - startIndex\n\
    \        }\n        startIndex = endIndex + 1\n    }\n    return count", "   \
    \ if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n \
    \       return 1\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count = count + 1\n            i = i + 1\n            while i\
    \ < j && string[i] == substring[1] {\n                count = count + 1\n    \
    \            i = i + 1\n            }\n        } else {\n            i = i + 1\n\
    \        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return count(string)\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[1] {\n   \
    \         count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[2] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[3] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[4]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[5] {\n            count += 1\n            i +=\
    \ substring.length - 1\n        } else if string[i] == substring[6] {\n      \
    \      count += 1\n            i += substring.length - 1\n        } else if string[i]\
    \ == substring[7] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[8] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[9]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[10] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[11] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[12] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[13] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[14]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[15] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[16] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[17] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[18] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[19]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[20] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else if string[i] == substring[21] {\n  \
    \          count += 1\n            i += substring.length - 1\n        } else if\
    \ string[i] == substring[22] {\n            count += 1\n            i += substring.length\
    \ - 1\n        } else if string[i] == substring[23] {\n            count += 1\n\
    \            i += substring.length - 1\n        } else if string[i] == substring[24]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[i] == substring[25] {\n            count += 1", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    while i < j {\n        if string[i] == substring[0] {\n            count\
    \ += 1\n            i += count(substring)\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    return count", "    if string == \"\" {\n        return\
    \ 0\n    }\n    if substring == \"\" {\n        return string.count\n    }\n \
    \   var count = 0\n    var i = 0\n    var j = string.count\n    while i < j {\n\
    \        if string[i] == substring[0] {\n            count += 1\n            i\
    \ += substring.length - 1\n        } else {\n            i += 1\n        }\n \
    \   }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return count(string)\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.startIndex\n    while i < string.endIndex\
    \ && j < string.endIndex {\n        if string[j] == substring[0] {\n         \
    \   count += 1\n            j += 1\n            if j == string.endIndex {\n  \
    \              j += 1\n                i += 1\n            }\n        } else {\n\
    \            j += 1\n        }\n    }\n    return count", "    if string == \"\
    \" {\n        return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var last = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.characters[index] == substring.characters[0] {\n      \
    \      count += countOccurrences(string, string.characters[index])\n         \
    \   last = index\n        }\n    }\n    if last < string.characters.count {\n\
    \        count += countOccurrences(string, string.characters[last])\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return 1\n    }\n    var count = 0\n    var startIndex =\
    \ 0\n    var endIndex = 0\n    while startIndex < string.count {\n        endIndex\
    \ = string.index(substring, startIndex) ?? string.endIndex\n        if endIndex\
    \ == startIndex {\n            count += 1\n        }\n        startIndex = endIndex\
    \ + 1\n    }\n    return count", "    if string == \"\" {\n        return 0\n\
    \    }\n    if substring == \"\" {\n        return count(string)\n    }\n    var\
    \ count = 0\n    var start = 0\n    var end = count(string)\n    while start <\
    \ end {\n        start = find_first_index(string, substring, start)\n        end\
    \ = find_last_index(string, substring, end)\n        if start == end {\n     \
    \       count += 1\n        }\n    }\n    return count", '    return count_overlapping_cases(string,
    substring)', "    var count = 0\n    var i = 0\n    var j = 0\n    while i < string.count\
    \ && j < substring.count {\n        if string[i] == substring[j] {\n         \
    \   count += 1\n            i += 1\n            j += 1\n        } else if string[i]\
    \ < substring[j] {\n            i += 1\n        } else {\n            j += 1\n\
    \        }\n    }\n    return count", "    var count = 0\n    for char in string\
    \ {\n        if char == substring {\n            count += 1\n        }\n    }\n\
    \    return count", "    var count = 0\n    for index in 0..<string.characters.count\
    \ {\n        if string.substring(index, string.characters.count) == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ countOccurrences(string, \"\")\n    }\n    return countOccurrences(string, substring)",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return countOccurrences(string, \"\")\n    }\n    var count = 0\n   \
    \ var start = 0\n    var end = string.count\n    var substring_start = string.startIndex\n\
    \    var substring_end = string.endIndex\n    while start < end {\n        if\
    \ string.hasPrefix(substring) {\n            count = countOccurrences(string,\
    \ substring)\n            start = substring_start\n            end = substring_end\n\
    \            substring_start = string.startIndex\n            substring_end =\
    \ string.endIndex\n            continue\n        }\n        if string.hasSuffix(substring)\
    \ {\n            count = countOccurrences(string, substring)\n            start\
    \ = substring_start\n            end = substring_end\n            substring_start\
    \ = string.startIndex\n            substring_end = string.endIndex\n         \
    \   continue\n        }\n        if string.hasPrefix(substring) {\n          \
    \  count = countOccurrences(string, substring)\n            start = substring_start\n\
    \            end = substring_end\n            substring_start = string.startIndex\n\
    \            substring_end = string.endIndex\n            continue\n        }\n\
    \        if string.hasSuffix(substring) {\n            count = countOccurrences(string,\
    \ substring)\n            start = substring_start\n            end = substring_end\n\
    \            substring_start = string.startIndex\n            substring_end =\
    \ string.endIndex\n            continue\n        }\n        if string.hasPrefix(substring)\
    \ {\n            count = countOccurrences(string, substring)\n            start\
    \ = substring_start\n            end = substring_end\n            substring_start\
    \ = string.startIndex\n            substring_end = string.endIndex\n         \
    \   continue\n        }\n        if string.hasSuffix(substring) {\n          \
    \  count = countOccurrences(string, substring)\n            start = substring_start\n\
    \            end = substring_end\n            substring_start = string.startIndex\n\
    \            substring_end = string.endIndex\n            continue\n        }\n\
    \        if string.hasPrefix(substring) {\n            count = countOccurrences(string,\
    \ substring)\n            start = substring_start\n            end = substring_end\n\
    \            substring_start = string.startIndex\n            substring_end =\
    \ string.endIndex\n            continue\n        }\n        if string.hasSuffix(substring)\
    \ {\n            count = countOccurrences(string, substring)\n            start\
    \ = substring_start\n            end = substring_end\n            substring_start\
    \ = string.startIndex\n            substring_end = string.endIndex\n         \
    \   continue\n        }\n        if string.hasPrefix(substring) {\n          \
    \  count = countOccurrences(string, substring)\n            start = substring_start\n\
    \            end = substring_end\n            substring_start = string.startIndex\n\
    \            substring_end = string.endIndex\n            continue\n        }\n\
    \        if string.hasSuffix(substring) {\n            count = countOccurrences(string,\
    \ substring)\n            ", "    if string == \"\" || substring == \"\" {\n \
    \       return 0\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n\
    \    var k = substring.count\n    while i < j {\n        if string[i] == substring[k]\
    \ {\n            count += 1\n            i += k\n            k -= 1\n        }\n\
    \        i += 1\n    }\n    return count", "    if string == \"\" || substring\
    \ == \"\" {\n        return 0\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = string.count\n    var substring_start = string.startIndex\n    var\
    \ substring_end = string.endIndex\n    while start < end {\n        if string.substring(start,\
    \ start + substring.length) == substring {\n            count += 1\n         \
    \   start += substring.length\n        } else {\n            if start < substring_end\
    \ {\n                start = substring_start\n                substring_start\
    \ = string.startIndex\n            } else {\n                start = end\n   \
    \             substring_end = string.endIndex\n            }\n        }\n    }\n\
    \    return count", "    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = string.count\n \
    \   var k = substring.count\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += countOccurrences(&string[i+1], substring[1:])\n    \
    \        i += k\n        } else {\n            i += k\n        }\n    }\n    return\
    \ count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return count(string)\n    }\n    var count = 0\n    var i\
    \ = 0\n    var j = string.count\n    var k = substring.count\n    while i < j\
    \ {\n        if string[i] != substring[j] {\n            count = count + 1\n \
    \       }\n        i += 1\n        j += 1\n    }\n    while k < substring.count\
    \ {\n        if string[k] != substring[j] {\n            count = count + 1\n \
    \       }\n        k += 1\n        j += 1\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ string.count\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        start = string.index(substring, start) + 1\n\
    \        end = string.index(substring, end) + 1\n        count += 1\n    }\n \
    \   return count", "    if string == \"\" {\n        return 0\n    }\n    if substring\
    \ == \"\" {\n        return countOccurrences(string, \"\")\n    }\n    var count\
    \ = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ = count + 1\n            i = i + 1\n            k = k - 1\n            if k\
    \ == -1 {\n                j = j - 1\n                k = k + string.count\n \
    \           }\n        } else {\n            i = i + 1\n        }\n    }\n   \
    \ return count", "    if string == \"\" || substring == \"\" {\n        return\
    \ 0\n    }\n    var count = 0\n    var start = 0\n    var end = string.count\n\
    \    while start < end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    var count = 0\n    for index\
    \ in 0..<string.characters.count {\n        if string.substring(from: index).lowercased()\
    \ == substring.lowercased() {\n            count += 1\n        }\n    }\n    return\
    \ count", "    var count = 0\n    for index in 0..<string.characters.count {\n\
    \        if string.substring(index, string.characters.count) == substring {\n\
    \            count += 1\n        }\n    }\n    return count", "    let start =\
    \ string.startIndex.advancedBy(substring.startIndex)\n    let end = string.endIndex.advancedBy(substring.endIndex)\n\
    \    let count = string.distance(from: start, to: end).magnitude\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return string.length\n    }\n    var count = 0\n    var i = 0\n    var\
    \ j = string.length - 1\n    while i < j {\n        if string[i] == substring[0]\
    \ {\n            count += 1\n            i += substring.length - 1\n        }\
    \ else if string[j] == substring[0] {\n            count -= 1\n            j -=\
    \ 1\n        } else {\n            i += 1\n            j += 1\n        }\n   \
    \ }\n    return count", "    if string == \"\" {\n        return 0\n    }\n  \
    \  if substring == \"\" {\n        return countOccurrences(string, \"\")\n   \
    \ }\n    var count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j && k < string.count {\n        if string[i] == substring[k] {\n\
    \            count = count + 1\n            i = i + 1\n            k = k + 1\n\
    \        }\n        if k == substring.count {\n            j = j - 1\n       \
    \ }\n    }\n    return count", "    if string == \"\" {\n        return 0\n  \
    \  }\n    if substring == \"\" {\n        return string.count\n    }\n    var\
    \ count = 0\n    var start = 0\n    var end = string.count\n    while start <\
    \ end {\n        let index = string.index(start, offsetBy: substring.count)\n\
    \        if index == nil {\n            break\n        }\n        start = index!\n\
    \        count += 1\n    }\n    return count", "    if string == \"\" {\n    \
    \    return 0\n    }\n    if substring == \"\" {\n        return countOccurrences(string,\
    \ \"\")\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n\
    \    var found = false\n    for ; i < len(string); i++ {\n        if string[i]\
    \ == substring[0] {\n            found = true\n            for ; j < len(substring);\
    \ j++ {\n                if string[i + j] != substring[j] {\n                \
    \    found = false\n                    break\n                }\n           \
    \ }\n            if found {\n                count += countOccurrences(string,\
    \ substring)\n                found = false\n            }\n        }\n    }\n\
    \    return count", "    if string == \"\" {\n        return 0\n    }\n    if\
    \ substring == \"\" {\n        return countOccurrences(string, \"\")\n    }\n\
    \    var count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j {\n        if string[i] == substring[k] {\n            count\
    \ += 1\n            i += k\n            k += 1\n            if k == substring.count\
    \ {\n                i += 1\n                k = 0\n            }\n        } else\
    \ {\n            i += 1\n            k = 0\n        }\n    }\n    return count",
  "    if string == \"\" || substring == \"\" {\n        return 0\n    }\n    var\
    \ count = 0\n    var i = 0\n    var j = string.count\n    var k = substring.count\n\
    \    while i < j && k < string.count {\n        if string[i] == substring[k] {\n\
    \            count += 1\n            i += 1\n            k += 1\n        }\n \
    \       if string[i] == substring[k] {\n            i += 1\n            k += 1\n\
    \        }\n        if string[i] == substring[k] {\n            i += 1\n     \
    \       k += 1\n        }\n        if string[i] == substring[k] {\n          \
    \  i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring[k] {\n            i += 1\n            k += 1\n        }\n        if\
    \ string[i] == substring[k] {\n            i += 1\n            k += 1\n      \
    \  }\n        if string[i] == substring[k] {\n            i += 1\n           \
    \ k += 1\n        }\n        if string[i] == substring[k] {\n            i +=\
    \ 1\n            k += 1\n        }\n        if string[i] == substring[k] {\n \
    \           i += 1\n            k += 1\n        }\n        if string[i] == substring[k]\
    \ {\n            i += 1\n            k += 1\n        }\n        if string[i] ==\
    \ substring", "    var count = 0\n    for c in string {\n        if c == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = 0\n    var\
    \ k = 0\n    var last = 0\n    var last2 = 0\n    var last3 = 0\n    var last4\
    \ = 0\n    var last5 = 0\n    var last6 = 0\n    var last7 = 0\n    var last8\
    \ = 0\n    var last9 = 0\n    var last10 = 0\n    var last11 = 0\n    var last12\
    \ = 0\n    var last13 = 0\n    var last14 = 0\n    var last15 = 0\n    var last16\
    \ = 0\n    var last17 = 0\n    var last18 = 0\n    var last19 = 0\n    var last20\
    \ = 0\n    var last21 = 0\n    var last22 = 0\n    var last23 = 0\n    var last24\
    \ = 0\n    var last25 = 0\n    var last26 = 0\n    var last27 = 0\n    var last28\
    \ = 0\n    var last29 = 0\n    var last30 = 0\n    var last31 = 0\n    var last32\
    \ = 0\n    var last33 = 0\n    var last34 = 0\n    var last35 = 0\n    var last36\
    \ = 0\n    var last37 = 0\n    var last38 = 0\n    var last39 = 0\n    var last40\
    \ = 0\n    var last41 = 0\n    var last42 = 0\n    var last43 = 0\n    var last44\
    \ = 0\n    var last45 = 0\n    var last46 = 0\n    var last47 = 0\n    var last48\
    \ = 0\n    var last49 = 0\n    var last50 = 0\n    var last51 = 0\n    var last52\
    \ = 0\n    var last53 = 0\n    var last54 = 0\n    var last55 = 0\n    var last56\
    \ = 0\n    var last57 = 0\n    var last58 = 0\n    var last59 = 0\n    var last60\
    \ = 0\n    var last61 = 0\n    var last62 = 0\n    var last63 = 0\n    var last64\
    \ = 0\n    var last65 = 0\n    var last66 = 0\n    var last67 = 0\n    var last68\
    \ = 0\n    var last69 = 0\n    var last70 = 0\n    var last71 = 0\n    var last72\
    \ = 0\n    var last73 = 0\n    var last74 = 0\n    var last75 = 0\n    var last76\
    \ = 0\n    var last77 = 0\n    var last78 = 0\n    var last79 = 0\n    var last80\
    \ = 0\n    var last81 = 0\n    var last82 = 0\n    var last83 = 0\n    var last84\
    \ = 0\n    var last85 = 0\n    var last86 = 0\n    var last87 = 0\n    var last88\
    \ = 0\n    var last89 = 0\n    var last90 = 0\n    var last91 = 0\n    var last92\
    \ = 0\n    var last93 = 0\n    var last94 = 0\n    var last95 = 0\n    var ",
  "    var count = 0\n    for c in string.unicodeScalars {\n        if c == substring\
    \ {\n            count += 1\n        }\n    }\n    return count", "    if string\
    \ == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n        return\
    \ count(string)\n    }\n    var count = 0\n    var i = 0\n    var j = string.characters.count\n\
    \    var k = substring.characters.count\n    while i < j {\n        if string[i]\
    \ != substring[k] {\n            count = count + 1\n        }\n        i = i +\
    \ 1\n        k = k + 1\n    }\n    return count", "    if string == \"\" {\n \
    \       return 0\n    }\n    if substring == \"\" {\n        return string.count\n\
    \    }\n    var count = 0\n    var i = 0\n    for c in string {\n        if c\
    \ == substring {\n            count = count + 1\n        } else {\n          \
    \  count = count + how_many_times(string[i..<string.endIndex], substring)\n  \
    \      }\n        i = i + 1\n    }\n    return count", "    var count = 0\n  \
    \  for index in 0..<string.characters.count {\n        if string.characters.contains(substring,\
    \ at: index) {\n            count += 1\n        }\n    }\n    return count", " \
    \   let start = string.startIndex.advancedBy(substring.startIndex)\n    let end\
    \ = string.endIndex.advancedBy(substring.endIndex)\n    let range = start..<end\n\
    \    return string.distance(from: range, to: end) + 1", "    let start = string.startIndex.advancedBy(substring.startIndex)\n\
    \    let end = string.startIndex.advancedBy(substring.endIndex)\n    return string.distance(from:\
    \ start) - string.distance(from: end)", "    if string == \"\" || substring ==\
    \ \"\" {\n        return 0\n    }\n    var count = 0\n    var last = 0\n    for\
    \ index in 0..<string.characters.count {\n        if string.characters[index]\
    \ == substring.characters[last] {\n            count += 1\n            last =\
    \ index\n        }\n    }\n    return count", "    if string == \"\" {\n     \
    \   return 0\n    }\n    if substring == \"\" {\n        return string.length\n\
    \    }\n    var count = 0\n    var i = 0\n    var j = string.length - 1\n    while\
    \ i < j {\n        if string[i] == substring[0] {\n            count += 1\n  \
    \          i -= 1\n            if i == 0 {\n                j -= 1\n         \
    \   }\n        } else if string[j] == substring[1] {\n            count -= 1\n\
    \            j -= 1\n            if j == 0 {\n                i += 1\n       \
    \     }\n        } else {\n            i += 1\n            j += 1\n        }\n\
    \    }\n    return count", "    if string == \"\" {\n        return 0\n    }\n\
    \    if substring == \"\" {\n        return countOccurrences(string, \"\")\n \
    \   }\n    var count = 0\n    var startIndex = 0\n    var endIndex = 0\n    while\
    \ startIndex < string.count {\n        endIndex = string.index(substring, startIndex)\n\
    \        if endIndex == startIndex {\n            count += 1\n            startIndex\
    \ += 1\n            continue\n        }\n        if endIndex == string.count {\n\
    \            count += 1\n            startIndex += 1\n            continue\n \
    \       }\n        if string.substring(startIndex, endIndex) == substring {\n\
    \            count += 1\n            startIndex = endIndex + 1\n            continue\n\
    \        }\n        if string.substring(startIndex, endIndex).lowercased() ==\
    \ substring.lowercased() {\n            count += 1\n            startIndex = endIndex\
    \ + 1\n            continue\n        }\n        if string.substring(startIndex,\
    \ endIndex).uppercased() == substring.uppercased() {\n            count += 1\n\
    \            startIndex = endIndex + 1\n            continue\n        }\n    \
    \    if string.substring(startIndex, endIndex).capitalized() == substring.capitalized()\
    \ {\n            count += 1\n            startIndex = endIndex + 1\n         \
    \   continue\n        }\n        if string.substring(startIndex, endIndex).range(of:\
    \ substring) != nil {\n            count += 1\n            startIndex = endIndex\
    \ + 1\n            continue\n        }\n        if string.substring(startIndex,\
    \ endIndex).range(of: substring.lowercased()) != nil {\n            count += 1\n\
    \            startIndex = endIndex + 1\n            continue\n        }\n    \
    \    if string.substring(startIndex, endIndex).range(of: substring.uppercased())\
    \ != nil {\n            count += 1\n            startIndex = endIndex + 1\n  \
    \          continue\n        }\n        if string.substring(startIndex, endIndex).range(of:\
    \ substring.capitalized()) != nil {\n            count += 1\n            startIndex\
    \ = endIndex + 1\n            continue\n        }\n        if string.substring(startIndex,\
    \ endIndex).range(of: substring.lowercased(), options: .anchored) != nil {\n \
    \           count += 1\n            startIndex = endIndex + 1\n            continue\n\
    \        }\n        if string.substring(startIndex, endIndex).range(of: substring.uppercased(),\
    \ options: .anchored) != nil {\n            count += 1\n            startIndex\
    \ = endIndex + 1\n            continue\n        }\n        if string.substring(startIndex,\
    \ endIndex).range(of: substring.capitalized(), options: .anchored) != nil {\n\
    \            count += 1\n            startIndex = endIndex + 1\n            continue\n\
    \        }\n        if string.substring(startIndex, endIndex).range(of: substring.lowercased(),\
    \ options: .backwards) != nil {\n            count += 1\n            startIndex\
    \ = endIndex + 1\n            continue\n        }\n        if string.substring(startIndex,\
    \ endIndex).range(of: substring.uppercased(), options: .backwards) != nil {\n\
    \            count += 1\n            startIndex = endIndex + 1\n            continue\n\
    \        }\n", "    let startIndex = string.startIndex.advancedBy(substring.startIndex)\n\
    \    let endIndex = string.startIndex.advancedBy(substring.endIndex)\n    let\
    \ count = string.distance(from: startIndex, to: endIndex)\n    return count",
  "    if string == \"\" {\n        return 0\n    }\n    if substring == \"\" {\n\
    \        return count(string)\n    }\n    var count = 0\n    var start = 0\n \
    \   var end = count(string)\n    while start < end {\n        start = find(string,\
    \ substring, start)\n        end = find(string, substring, end + 1)\n        if\
    \ start == end {\n            count += 1\n        }\n    }\n    return count"]
stop_tokens:
- "\n}"
