language: swift
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBracketIndex\
    \ < brackets.endIndex && closingBracketIndex < brackets.endIndex {\n         \
    \   if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx1b0kpsr.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpx1b0kpsr.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpx1b0kpsr.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpx1b0kpsr.swift:19:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        while closingBracketIndex\
    \ < closingBrackets.count {\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                return false\n            }\n            closingBracketIndex\
    \ += 1\n        }\n        openingBracketIndex += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6w8yihmu.swift:18:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmp6w8yihmu.swift:23:59: error:\
    \ single-quoted string literal found, use '\"'\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                                                          ^~~\n\
    \                                                          \")\"\n/tmp/tmp6w8yihmu.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp6w8yihmu.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6w8yihmu.swift:18:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6w8yihmu.swift:23:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6w8yihmu.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    if openingBracketsCount\
    \ == 0 {\n        return true\n    }\n\n    if openingBracketsCount == 1 {\n \
    \       return closingBracketsCount == 1\n    }\n\n    if openingBracketsCount\
    \ == 2 {\n        return closingBracketsCount == 2\n    }\n\n    if openingBracketsCount\
    \ == 3 {\n        return closingBracketsCount == 3\n    }\n\n    if openingBracketsCount\
    \ == 4 {\n        return closingBracketsCount == 4\n    }\n\n    if openingBracketsCount\
    \ == 5 {\n        return closingBracketsCount == 5\n    }\n\n    if openingBracketsCount\
    \ == 6 {\n        return closingBracketsCount == 6\n    }\n\n    if openingBracketsCount\
    \ == 7 {\n        return closingBracketsCount == 7\n    }\n\n    if openingBracketsCount\
    \ == 8 {\n        return closingBracketsCount == 8\n    }\n\n    if openingBracketsCount\
    \ == 9 {\n        return closingBracketsCount == 9\n    }\n\n    if openingBracketsCount\
    \ == 10 {\n        return closingBracketsCount == 10\n    }\n\n    if openingBracketsCount\
    \ == 11 {\n        return closingBracketsCount == 11\n    }\n\n    if openingBracketsCount\
    \ == 12 {\n        return closingBracketsCount == 12\n    }\n\n    if openingBracketsCount\
    \ == 13 {\n        return closingBracketsCount == 13\n    }\n\n    if openingBracketsCount\
    \ == 14 {\n        return closingBracketsCount == 14\n    }\n\n    if openingBracketsCount\
    \ == 15 {\n        return closingBracketsCount == 15\n    }\n\n    if openingBracketsCount\
    \ == 16 {\n        return closingBracketsCount == 16\n    }\n\n    if openingBracketsCount\
    \ == 17 {\n        return closingBracketsCount == 17\n    }\n\n    if openingBracketsCount\
    \ == 18 {\n        return closingBracketsCount == 18\n    }\n\n    if openingBracketsCount\
    \ == 19 {\n        return closingBracketsCount == 19\n    }\n\n    if openingBracketsCount\
    \ == 20 {\n        return closingBracketsCount == 20\n    }\n\n    if openingBracketsCount\
    \ == 21 {\n        return closingBracketsCount == 21\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ihb3rhu.swift:130:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp1ihb3rhu.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmp1ihb3rhu.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1ihb3rhu.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1ihb3rhu.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp1ihb3rhu.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp1ihb3rhu.swift:107:6: error: operator functions\
    \ can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp1ihb3rhu.swift:13:9: warning:\
    \ initialization of variable 'openingBrackets' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var openingBrackets = brackets.characters\n\
    \    ~~~~^~~~~~~~"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    for openingBracket in openingBrackets {\n        if let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket) {\n            closingBrackets.remove(at:\
    \ closingBracket)\n        }\n    }\n    \n    return !closingBrackets.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv_lpz7m8.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpv_lpz7m8.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return true\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.first\
    \ {\n        return false\n    }\n    return openingBrackets.first == closingBrackets.last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0eonyka4.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0eonyka4.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_brackets_index\
    \ = opening_brackets.startIndex\n    var closing_brackets_index = closing_brackets.startIndex\n\
    \    while opening_brackets_index < opening_brackets.endIndex {\n        if opening_brackets[opening_brackets_index]\
    \ == \")\" {\n            opening_brackets_index++\n            closing_brackets_index--\n\
    \            if closing_brackets_index < closing_brackets.endIndex {\n       \
    \         closing_brackets[closing_brackets_index] = \"(\"\n                closing_brackets_count--\n\
    \            }\n        } else if opening_brackets[opening_brackets_index] !=\
    \ \"(\" {\n            opening_brackets_count--\n        }\n        opening_brackets_index++\n\
    \    }\n    return opening_brackets_count == closing_brackets_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa6beqjb4.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa6beqjb4.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpa6beqjb4.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpa6beqjb4.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa6beqjb4.swift:21:35:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  opening_brackets_index++\n                                  ^~\n/tmp/tmpa6beqjb4.swift:22:35:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  closing_brackets_index--\n                                  ^~\n/tmp/tmpa6beqjb4.swift:24:33:\
    \ error: cannot assign through subscript: subscript is get-only\n            \
    \    closing_brackets[closing_brackets_index] = \"(\"\n                ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpa6beqjb4.swift:25:39: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n                closing_brackets_count--\n                   \
    \                   ^~\n/tmp/tmpa6beqjb4.swift:28:35"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    if openingBrackets.count > 0 {\n       \
    \ var lastOpeningBracket = openingBrackets.last\n        var lastClosingBracket\
    \ = closingBrackets.first\n        if lastOpeningBracket != lastClosingBracket\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp571pz_el.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp571pz_el.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp571pz_el.swift:17:9: warning: variable 'openingBracketsCount'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBracketsCount\
    \ = openingBrackets.count\n    ~~~ ^\n    let\n/tmp/tmp571pz_el.swift:18:9: warning:\
    \ variable 'closingBracketsCount' was never mutated; consider changing to 'let'\
    \ constant\n    var closingBracketsCount = closingBrackets.count\n    ~~~ ^\n\
    \    let\n/tmp/tmp571pz_el.swift:23:13: warning: variable 'lastOpeningBracket'\
    \ was never mutated; consider changing to 'let' constant\n        var lastOpeningBracket\
    \ = openingBrackets.last\n        ~~~ ^\n        let\n/tmp/tmp571pz_el.swift:24:13:\
    \ warning: variable 'lastClosingBracket' was never mutated; consider changing\
    \ to 'let' constant\n        var lastClosingBracket = closingBrackets.first\n\
    \        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ let closingBracket = closingBrackets.firstIndex(of: openingBracket) {\n    \
    \        closingBrackets.remove(at: closingBracket)\n        }\n    }\n    \n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgjy8m4zd.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgjy8m4zd.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    if brackets.isEmpty {\n        return true\n    }\n\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \n    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n\n    for\
    \ openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBracketsCount += 1\n        } else {\n            openingBracketsCount\
    \ += 1\n        }\n    }\n\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpemz7nnrm.swift:17:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpemz7nnrm.swift:18:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpemz7nnrm.swift:17:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpemz7nnrm.swift:18:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5_6ustm6.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5_6ustm6.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeFirst()\n    closing.removeLast()\n \
    \   if opening.isEmpty {\n        return closing.isEmpty && closing.count == 0\n\
    \    }\n    if closing.isEmpty {\n        return closing.count == 0\n    }\n \
    \   if opening.count != closing.count {\n        return false\n    }\n    for\
    \ index in 0..<opening.count {\n        if opening[index] != closing[index] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps_iekrhu.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmps_iekrhu.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmps_iekrhu.swift:27:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening[index] != closing[index] {\n\
    \           ^~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmps_iekrhu.swift:27:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if opening[index] != closing[index] {\n                             ^~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeFirst()\n    closing_brackets.removeLast()\n\
    \    var opening_brackets_count = opening_brackets.count\n    var closing_brackets_count\
    \ = closing_brackets.count\n    if opening_brackets_count != closing_brackets_count\
    \ {\n        return false\n    }\n    for index in 0..<opening_brackets_count\
    \ {\n        if opening_brackets[index] != closing_brackets[index] {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_hhw1mpi.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_hhw1mpi.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_hhw1mpi.swift:23:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ opening_brackets[index] != closing_brackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_hhw1mpi.swift:23:39:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening_brackets[index] != closing_brackets[index]\
    \ {\n                                      ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_hhw1mpi.swift:17:9:\
    \ warning: variable 'opening_brackets_count' was never mutated; consider changing\
    \ to 'let' constant\n    var opening_brackets_count = opening_brackets.count\n\
    \    ~~~ ^\n    let\n/tmp/tmp_hhw1mpi.swift:18:9: warning: variable 'closing_brackets_count'\
    \ was never mutated; consider changing to 'let' constant\n    var closing_brackets_count\
    \ = closing_brackets.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    for index in 0..<brackets.characters.count {\n        let char = brackets.characters[index]\n\
    \        if char == \"(\" {\n            openingBracketsCount += 1\n        }\
    \ else if char == \")\" {\n            closingBracketsCount += 1\n        }\n\
    \        if openingBracketsCount > closingBracketsCount {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr4c6tzu5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr4c6tzu5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr4c6tzu5.swift:17:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr4c6tzu5.swift:18:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ char = brackets.characters[index]\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpr4c6tzu5.swift:18:29:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ char = brackets.characters[index]\n                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpr4c6tzu5.swift:13:9:\
    \ warning: initialization of variable 'openingBrackets' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var openingBrackets = brackets.characters\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpr4c6tzu5.swift:14:9: warning: initialization\
    \ of variable 'closingBrackets' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var closingBrackets = brackets.characte"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for char in brackets {\n        if char == opening {\n            opening\
    \ += char\n        } else if char == closing {\n            closing += char\n\
    \        } else {\n            return false\n        }\n    }\n    return opening\
    \ == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfs527i3n.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpfs527i3n.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfs527i3n.swift:17:21:\
    \ error: binary operator '+=' cannot be applied to two 'Character' operands\n\
    \            opening += char\n            ~~~~~~~ ^  ~~~~\n/tmp/tmpfs527i3n.swift:19:21:\
    \ error: binary operator '+=' cannot be applied to two 'Character' operands\n\
    \            closing += char\n            ~~~~~~~ ^  ~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0)\
    \ })\n    let closingBrackets = brackets.characters\n        .filter({ $0 != \"\
    (\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0) })\n    return\
    \ openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqk_vhyn7.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqk_vhyn7.swift:17:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      let closingBracket = closingBrackets.first(where: { $0 == openingBracket\
    \ })\n        if closingBracket == nil {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuu9vjjwa.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpuu9vjjwa.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0b75w6v_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0b75w6v_.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        let current = brackets[index]\n\
    \        if opening != current {\n            return false\n        }\n      \
    \  opening = current\n    }\n    return opening == closing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnkedkr93.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpnkedkr93.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnkedkr93.swift:16:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let current = brackets[index]\n       \
    \               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpnkedkr93.swift:14:9: warning: variable 'closing'\
    \ was never mutated; consider changing to 'let' constant\n    var closing = brackets[1]\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"(\" {\n            openingBracketsCount += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketsCount -= 1\n        }\n    }\n\n    for\
    \ closingBracket in closingBrackets {\n        if closingBracket == \"(\" {\n\
    \            closingBracketsCount += 1\n        } else if closingBracket == \"\
    )\" {\n            closingBracketsCount -= 1\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplknv8jv9.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplknv8jv9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplknv8jv9.swift:13:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmplknv8jv9.swift:14:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n  \
    \  var openingBracketsString = \"\"\n    var closingBracketsString = \"\"\n\n\
    \    while openingBracketsIndex < openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[openingBracketsIndex]\n        openingBracketsString += String(openingBracket)\n\
    \        openingBracketsIndex += 1\n\n        if openingBracketsIndex < openingBrackets.count\
    \ {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk_kjnrn9.swift:90:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpk_kjnrn9.swift:22:56:\
    \ note: to match this opening '{'\n    while openingBracketsIndex < openingBrackets.count\
    \ {\n                                                       ^\n/tmp/tmpk_kjnrn9.swift:90:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpk_kjnrn9.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpk_kjnrn9.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk_kjnrn9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk_kjnrn9.swift:23:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n                   \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpk_kjnrn9.swift:28:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            let closingBracket = openingBrackets[openingBracketsIndex]\n    \
    \                             ^~~~~~~~"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n\n    var opening_brackets_index = opening_brackets.startIndex\n\
    \    var closing_brackets_index = closing_brackets.startIndex\n\n    while opening_brackets_index\
    \ < opening_brackets.endIndex {\n        if opening_brackets[opening_brackets_index]\
    \ != '(' {\n            opening_brackets_index++\n            continue\n     \
    \   }\n\n        if closing_brackets_index >= closing_brackets.endIndex {\n  \
    \          return false\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == ')' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == ')' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index++\n            closing_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3xe9odqx.swift:20:56: error: single-quoted string literal found,\
    \ use '\"'\n        if opening_brackets[opening_brackets_index] != '(' {\n   \
    \                                                    ^~~\n                   \
    \                                    \"(\"\n/tmp/tmp3xe9odqx.swift:29:56: error:\
    \ single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == ')' {\n                                                       ^~~\n     \
    \                                                  \")\"\n/tmp/tmp3xe9odqx.swift:35:56:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n                                                       ^~~\n     \
    \                                                  \"(\"\n/tmp/tmp3xe9odqx.swift:41:56:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == ')' {\n                                                       ^~~\n     \
    \                                                  \")\"\n/tmp/tmp3xe9odqx.swift:47:56:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n                                                       ^~~\n     \
    \                                                  \"(\"\n/tmp/tmp3xe9odqx.swift:53:56:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n                                                       ^~~\n     \
    \                                                  \"(\"\n/tmp/tmp3xe9odqx.swift:59:56:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n                                                       ^~~\n     \
    \                                                  \"(\"\n/tmp/tmp3xe9odqx.swift:65:56:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n                                                       ^~~\n     \
    \                      "
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 0..<brackets.count - 1 {\n        let openingIndex = brackets.index(opening,\
    \ range: NSRange(location: index, length: 1))\n        let closingIndex = brackets.index(closing,\
    \ range: NSRange(location: openingIndex + 1, length: 1))\n        if openingIndex\
    \ == closingIndex {\n            opening = brackets[openingIndex + 1]\n      \
    \      closing = brackets[closingIndex + 1]\n        } else {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9jaba8vo.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp9jaba8vo.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9jaba8vo.swift:16:59:\
    \ error: cannot find 'NSRange' in scope\n        let openingIndex = brackets.index(opening,\
    \ range: NSRange(location: index, length: 1))\n                              \
    \                            ^~~~~~~\n/tmp/tmp9jaba8vo.swift:16:37: error: no\
    \ exact matches in call to instance method 'index'\n        let openingIndex =\
    \ brackets.index(opening, range: NSRange(location: index, length: 1))\n      \
    \                              ^\n/tmp/tmp9jaba8vo.swift:16:37: note: found candidate\
    \ with type '(String.Index, Int) -> String.Index'\n        let openingIndex =\
    \ brackets.index(opening, range: NSRange(location: index, length: 1))\n      \
    \                              ^\n/tmp/tmp9jaba8vo.swift:17:59: error: cannot\
    \ find 'NSRange' in scope\n        let closingIndex = brackets.index(closing,\
    \ range: NSRange(location: openingIndex + 1, length: 1))\n                   \
    \                                       ^~~~~~~\n/tmp/tmp9jaba8vo.swift:17:37:\
    \ error: no exact matches in call to instance method 'index'\n        let closingIndex\
    \ = brackets.index(closing, range: NSRange(location: openingIndex + 1, length:\
    \ 1))\n                                    ^\n/tmp/tmp9jaba8vo.swift:17:37: note:\
    \ found candidate with type '(String.Index, Int) -> String.Index'\n        let\
    \ closingIndex = brackets.index(closing, range: NSRange(location: openingIndex\
    \ + 1, length: 1))\n "
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == '(' {\n            openingBracketCount\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '[' {\n    \
    \        openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '{' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '.' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '!' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '?' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '$' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '%' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '&' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '*' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '+' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '-' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '.' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '/' {\n            openingBracketCount += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == ';' {\n            openingBracketCount += 1\n        } else if openingBracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsg8ia7z4.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpsg8ia7z4.swift:23:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '[' {\n                                                          ^~~\n  \
    \                                                        \"[\"\n/tmp/tmpsg8ia7z4.swift:25:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '{' {\n                                                          ^~~\n  \
    \                                                        \"{\"\n/tmp/tmpsg8ia7z4.swift:27:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '<' {\n                                                          ^~~\n  \
    \                                                        \"<\"\n/tmp/tmpsg8ia7z4.swift:29:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                          ^~~\n  \
    \                                                        \">\"\n/tmp/tmpsg8ia7z4.swift:31:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '.' {\n                                                          ^~~\n  \
    \                                                        \".\"\n/tmp/tmpsg8ia7z4.swift:33:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '!' {\n                                                          ^~~\n  \
    \                                                        \"!\"\n/tmp/tmpsg8ia7z4.swift:35:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '?' {\n                                         "
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        opening = brackets[index]\n  \
    \      closing = brackets[brackets.count - index - 1]\n    }\n    return opening\
    \ == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7e3_hez.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpe7e3_hez.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe7e3_hez.swift:16:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        opening = brackets[index]\n           \
    \       ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpe7e3_hez.swift:17:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        closing\
    \ = brackets[brackets.count - index - 1]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex <\
    \ closingBracketsCount {\n        closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \        closingBracketsIndex += 1\n    }\n\n    if openingBracketsString == closingBracketsString\
    \ {\n        return true\n    }\n\n    if openingBracketsString == \"(\" && closingBracketsString\
    \ == \")\" {\n        return true\n    }\n\n    if openingBracketsString == \"\
    (\" && closingBracketsString == \"}\" {\n        return true\n    }\n\n    if\
    \ openingBracketsString == \"{\" && closingBracketsString == \"}\" {\n       \
    \ return true\n    }\n\n    if openingBracketsString == \"[\" && closingBracketsString\
    \ == \"]\" {\n        return true\n    }\n\n    if openingBracketsString == \"\
    <\" && closingBracketsString == \">\" {\n        return true\n    }\n\n    if\
    \ openingBracketsString == \"(\" && closingBracketsString == \"(\" {\n       \
    \ return true\n    }\n\n    if openingBracketsString == \"(\" && closingBracketsString\
    \ == \")(\" {\n        return true\n    }\n\n    if openingBracketsString == \"\
    (\" && closingBracketsString == \"()\" {\n        return true\n    }\n\n    if\
    \ openingBracketsString == \"(\" && closingBracketsString == \"(()\" {\n     \
    \   return true\n    }\n\n    if openingBracketsString == \"(\" && closingBracketsString\
    \ == \"(()()\" {\n        return true\n    }\n\n    if openingBracketsString ==\
    \ \"(\" && closingBracketsString == \"(()()()\" {\n        return true\n    }\n\
    \n    if openingBracketsString == \"(\" && closingBracketsString == \"(()()()()\"\
    \ {\n        return true\n    }\n\n    if openingBracketsString == \"(\" && closingBracketsString\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_h25mven.swift:84:61: error: expected '{' after 'if' condition\n\
    \    if openingBracketsString == \"(\" && closingBracketsString \n           \
    \                                                 ^\n/tmp/tmp_h25mven.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_h25mven.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_h25mven.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_h25mven.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_h25mven.swift:23:41: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_h25mven.swift:28:41:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index inste"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw7pomgs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbw7pomgs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_bracket = brackets.characters\n    var\
    \ closing_bracket = brackets.characters\n    var opening_paren = brackets.characters\n\
    \    var closing_paren = brackets.characters\n\n    var opening_brackets_index\
    \ = opening_brackets.startIndex\n    var closing_brackets_index = closing_brackets.startIndex\n\
    \    var opening_brackets_end = opening_brackets.endIndex\n    var closing_brackets_end\
    \ = closing_brackets.endIndex\n    var opening_paren_index = opening_paren.startIndex\n\
    \    var closing_paren_index = closing_paren.startIndex\n\n    while opening_brackets_index\
    \ < opening_brackets_end {\n        if opening_brackets[opening_brackets_index]\
    \ == \")\" {\n            opening_brackets_index++\n            closing_brackets_index--\n\
    \        } else {\n            opening_brackets_index++\n        }\n    }\n\n\
    \    while closing_brackets_index > closing_brackets_end {\n        if closing_brackets[closing_brackets_index]\
    \ == \")\" {\n            closing_brackets_index--\n            opening_brackets_index++\n\
    \        } else {\n            closing_brackets_index--\n        }\n    }\n\n\
    \    while opening_paren_index < opening_paren.endIndex {\n        if opening_paren[opening_paren_index]\
    \ == \")\" {\n            opening_paren_index++\n            closing_paren_index--\n\
    \        } else {\n            opening_paren_index++\n        }\n    }\n\n   \
    \ while closing_paren_index > closing_paren.startIndex {\n        if closing_paren[closing_paren_index]\
    \ == \")\" {\n            closing_paren_index--\n            opening_paren_index++\n\
    \        } else {\n            closing_paren_index--\n        }\n    }\n\n   \
    \ return opening_brackets_index == closing_brackets_index\n        && opening_paren_index\
    \ == closing_paren_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_9q2isn7.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_9q2isn7.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_9q2isn7.swift:15:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_bracket = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_9q2isn7.swift:16:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_bracket = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_9q2isn7.swift:17:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_paren = brackets.characters\n  \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_9q2isn7.swift:18:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_paren = brackets.characters\n  \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_9q2isn7.swift:29:35: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            opening_brackets_index++\n     \
    \                             ^~\n/tmp/t"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ closingBrackets.contains(where: { $0 == openingBracket }) == false {\n     \
    \       return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwgux87m1.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpwgux87m1.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n    var openingBracketsStringIndex = 0\n\
    \    var closingBracketsStringIndex = 0\n    var openingBracketsStringCount =\
    \ 0\n    var closingBracketsStringCount = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n    var openingBracketsStringCountIndex\
    \ = 0\n    var closingBracketsStringCountIndex = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeqroivw2.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeqroivw2.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeqroivw2.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpeqroivw2.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpeqroivw2.swift:27:9: error: invalid redeclaration\
    \ of 'openingBracketsStringCountIndex'\n    var openingBracketsStringCountIndex\
    \ = 0\n        ^\n/tmp/tmpeqroivw2.swift:25:9: note: 'openingBracketsStringCountIndex'\
    \ previously declared here\n    var openingBracketsStringCountIndex = 0\n    \
    \    ^\n/tmp/tmpeqroivw2.swift:28:9: error: invalid redeclaration of 'closingBracketsStringCountIndex'\n\
    \    var closingBracketsStringCountIndex = 0\n        ^\n/tmp/tmpeqroivw2.swift:26:9:\
    \ note: 'closingBracketsStringCountIndex' previously declared here\n    var closingBracketsStringCountIndex\
    \ = 0\n        ^\n/tmp/tmpeqroivw2.swift:29:9: error: invalid redeclaration of\
    \ 'openingBracketsStringCountIndex'\n    var openingBracketsStringCountIndex =\
    \ 0\n        ^\n/tmp/tmpeqroivw2.swif"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter{\
    \ $0 != \"(\" && $0 != \")\" }\n        .count\n    let closingBrackets = brackets.characters\n\
    \        .filter{ $0 == \"(\" || $0 == \")\" }\n        .count\n    return openingBrackets\
    \ == closingBrackets\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyhdjn61i.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyhdjn61i.swift:16:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == ')' {\n            closingBracketCount--\n\
    \            if closingBracketCount == 0 {\n                openingBracketCount++\n\
    \            }\n        } else {\n            openingBracketCount++\n        }\n\
    \        openingBracketIndex++\n    }\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        if closingBrackets[closingBracketIndex] == '(' {\n            openingBracketCount++\n\
    \        } else {\n            closingBracketCount++\n        }\n        closingBracketIndex++\n\
    \    }\n    return openingBracketCount == closingBracketCount\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3k75tpq3.swift:20:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == ')' {\n       \
    \                                            ^~~\n                           \
    \                        \")\"\n/tmp/tmp3k75tpq3.swift:31:52: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '(' {\n                                                   ^~~\n         \
    \                                          \"(\"\n/tmp/tmp3k75tpq3.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3k75tpq3.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3k75tpq3.swift:21:32: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            closingBracketCount--\n        \
    \                       ^~\n/tmp/tmp3k75tpq3.swift:23:36: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n                openingBracketCount++\n\
    \                                   ^~\n/tmp/tmp3k75tpq3.swift:26:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmp3k75tpq3.swift:28:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmp3k75tpq3.swift:32:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmp3k75tpq3.swift:34:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBra"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ !closingBrackets.contains(where: { $0 == openingBracket }) {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfgphd5z2.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpfgphd5z2.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n\n  \
    \  while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '(' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == ')' {\n            openingBracketCount -= 1\n        }\n        if openingBracketCount\
    \ < 0 {\n            return false\n        }\n        openingBracketIndex += 1\n\
    \    }\n\n    while closingBracketIndex < closingBrackets.count {\n        if\
    \ closingBrackets[closingBracketIndex] == '(' {\n            closingBracketCount\
    \ += 1\n        }\n        if closingBrackets[closingBracketIndex] == ')' {\n\
    \            closingBracketCount -= 1\n        }\n        if closingBracketCount\
    \ < 0 {\n            return false\n        }\n        closingBracketIndex += 1\n\
    \    }\n\n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfoth0n5c.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpfoth0n5c.swift:24:52: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmpfoth0n5c.swift:34:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '(' {\n                                                   ^~~\n         \
    \                                          \"(\"\n/tmp/tmpfoth0n5c.swift:37:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmpfoth0n5c.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpfoth0n5c.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfoth0n5c.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfoth0n5c.swift:24:12:\
    \ error: 'subsc"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = 1\n    var closingCount = 1\n  \
    \  var openingIndex = 0\n    var closingIndex = 0\n    var openingChar = opening[openingIndex]\n\
    \    var closingChar = closing[closingIndex]\n    while openingIndex < opening.count\
    \ {\n        openingIndex++\n        openingChar = opening[openingIndex]\n   \
    \     if openingChar == \")\" {\n            closingIndex++\n            closingChar\
    \ = closing[closingIndex]\n            if closingChar == \")\" {\n           \
    \     closingIndex++\n                closingChar = closing[closingIndex]\n  \
    \              if closingChar == \")\" {\n                    closingIndex++\n\
    \                    closingChar = closing[closingIndex]\n                   \
    \ if closingChar == \")\" {\n                        closingIndex++\n        \
    \                closingChar = closing[closingIndex]\n                       \
    \ if closingChar == \")\" {\n                            closingIndex++\n    \
    \                        closingChar = closing[closingIndex]\n               \
    \             if closingChar == \")\" {\n                                closingIndex++\n\
    \                                closingChar = closing[closingIndex]\n       \
    \                         if closingChar == \")\" {\n                        \
    \            closingIndex++\n                                    closingChar =\
    \ closing[closingIndex]\n                                    if closingChar ==\
    \ \")\" {\n                                        closingIndex++\n          \
    \                              closingChar = closing[closingIndex]\n         \
    \                               if closingChar == \")\" {\n                  \
    \                          closingIndex++\n                                  \
    \          closingChar = closing[closingIndex]\n                             \
    \               if closingChar == \")\" {\n                                  \
    \              closingIndex++\n                                              \
    \  closingChar = closing[closingIndex]\n                                     \
    \           if closingChar == \")\" {\n                                      \
    \              closingIndex++\n                                              \
    \      closingChar = closing[closingIndex]\n                                 \
    \                   if closingChar == \")\" {\n                              \
    \                          closingIndex++\n                                  \
    \                      closingChar = closing[closingIndex]\n                 \
    \                                       if closingChar == \")\" {\n          \
    \                                                  closingIndex++\n          \
    \                                                  closingChar = closing[closingIndex]\n\
    \                                                            if closingChar ==\
    \ \")\" {\n                                                                openingCount\
    \ = openingCount - 1\n                                                       \
    \         closingCount = closingCount - 1\n                                  \
    \                              openingIndex = openingIndex - 1\n             \
    \                                                   closingIndex = closingIndex\
    \ - 1\n                                                                openingChar\
    \ = opening[openingIndex]\n                                                  \
    \              closingChar = closing[closingIndex]\n                         \
    \                                       if openingChar == \")\" {\n          \
    \                                                          openingCount = openingCount\
    \ - 1\n                                                                    closingCount\
    \ = closingCount - 1\n                                                       \
    \             openingIndex = openingIndex - 1\n                              \
    \                                      closingIndex = closingIndex - 1\n     \
    \                                                               openingChar =\
    \ opening[openingIndex]\n                                                    \
    \                closingChar = closing[closingIndex]\n                       \
    \                                             if \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjm3n147i.swift:77:71: error: expected expression, var, or let in\
    \ 'if' condition\n                                                           \
    \         if \n                                                              \
    \        ^\n/tmp/tmpjm3n147i.swift:104:66: error: expected '}' at end of brace\
    \ statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n\
    \                                                                 ^\n/tmp/tmpjm3n147i.swift:63:83:\
    \ note: to match this opening '{'\n                                          \
    \                  if closingChar == \")\" {\n                               \
    \                                                   ^\n/tmp/tmpjm3n147i.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpjm3n147i.swift:60:79: note: to match this opening\
    \ '{'\n                                                        if closingChar\
    \ == \")\" {\n                                                               \
    \               ^\n/tmp/tmpjm3n147i.swift:104:66: error: expected '}' at end of\
    \ brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\") ==\
    \ false)\n                                                                 ^\n\
    /tmp/tmpjm3n147i.swift:57:75: note: to match this opening '{'\n              \
    \                                      if closingChar == \")\" {\n           \
    \                                                               ^\n/tmp/tmpjm3n147i.swift:104:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpjm3n147i.swift:54:71: note: to match this opening\
    \ '{'\n                                                if closingChar == \")\"\
    \ {\n                                                                      ^\n\
    /tmp/tmpjm3n147i.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(b"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5_6ustm6.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5_6ustm6.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5_6ustm6.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5_6ustm6.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        opening = brackets[index]\n  \
    \      closing = brackets[index+1]\n        if opening != closing {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpztpmu8ev.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpztpmu8ev.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpztpmu8ev.swift:16:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        opening = brackets[index]\n           \
    \       ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpztpmu8ev.swift:17:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        closing\
    \ = brackets[index+1]\n                  ^~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsString += openingBrackets[openingBracketsIndex]\n\
    \        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex <\
    \ closingBracketsCount {\n        closingBracketsString += closingBrackets[closingBracketsIndex]\n\
    \        closingBracketsIndex += 1\n    }\n\n    if openingBracketsString == closingBracketsString\
    \ {\n        return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnogxeu9h.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnogxeu9h.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnogxeu9h.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpnogxeu9h.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpnogxeu9h.swift:23:49: error: no exact matches\
    \ in call to subscript \n        openingBracketsString += openingBrackets[openingBracketsIndex]\n\
    \                                                ^\nSwift.String:3:12: note: candidate\
    \ expects value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n \
    \   public subscript(r: Range<String.Index>) -> Substring { get }\n          \
    \ ^\nSwift.Collection:3:23: note: candidate expects value of type '(UnboundedRange_)\
    \ -> ()' for parameter #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_)\
    \ -> ()) -> Self.SubSequence { get }\n                      ^\n/tmp/tmpnogxeu9h.swift:28:49:\
    \ error: no exact matches in call to subscript \n        closingBracketsString\
    \ += closingBrackets[closingBracketsIndex]\n     "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    guard openingBrackets.count == closingBrackets.count else {\n        return\
    \ false\n    }\n    for openingBracket in openingBrackets {\n        guard let\
    \ closingBracket = closingBrackets.first else {\n            return false\n  \
    \      }\n        if openingBracket != closingBracket {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcpqbj7cg.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpcpqbj7cg.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n\n        if openingBracketIndex\
    \ == brackets.endIndex {\n            openingBracketIndex = brackets.startIndex\n\
    \        }\n\n        if closingBracketIndex == brackets.endIndex {\n        \
    \    closingBracketIndex = brackets.startIndex\n        }\n\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1mbk418u.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1mbk418u.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1mbk418u.swift:19:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmp1mbk418u.swift:20:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter\
    \ {\n            brackets.characters.contains($0)\n        }\n        .map {\n\
    \            $0\n        }\n    let closingBrackets = brackets.characters\n  \
    \      .filter {\n            brackets.characters.count > brackets.characters.indexOf($0)\n\
    \        }\n        .map {\n            $0\n        }\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptb17luir.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptb17luir.swift:15:22: error: 'characters' is unavailable:\
    \ Please use String directly\n            brackets.characters.contains($0)\n \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptb17luir.swift:22:61: error: value of type 'String' has no member\
    \ 'indexOf'\n            brackets.characters.count > brackets.characters.indexOf($0)\n\
    \                                        ~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      let closingBracketIndex = openingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracketIndex == nil {\n            return false\n        }\n\
    \        let openingBracketIndex = openingBrackets.firstIndex(of: openingBracket)\n\
    \        let closingBracket = closingBrackets[closingBracketIndex!]\n        if\
    \ openingBracket != closingBracket {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvdbnws7a.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpvdbnws7a.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] != '(' {\n            return\
    \ false\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        closingBracketIndex = closingBracketIndex + 1\n        if closingBrackets[closingBracketIndex]\
    \ != ')' {\n            return false\n        }\n    }\n\n    if openingBracketIndex\
    \ == closingBracketIndex {\n        return true\n    }\n\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv0dltd56.swift:20:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] != '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpv0dltd56.swift:27:52: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ != ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmpv0dltd56.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpv0dltd56.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv0dltd56.swift:19:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpv0dltd56.swift:19:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpv0dltd56.swift:26:51: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        closingBracketIndex =\
    \ closingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n/tmp/tmpv0dltd56.swift:26:51: note: overloads for '+' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        closingBracketIndex = closingBracketIndex\
    \ + 1\n                                                  ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets\n    var closing_brackets\
    \ = brackets\n    for opening_bracket in brackets {\n        if opening_bracket\
    \ == \"(\" {\n            opening_brackets = opening_brackets.replacingOccurrences(of:\
    \ \"(\", with: \"\")\n        }\n        if opening_bracket == \")\" {\n     \
    \       opening_brackets = opening_brackets.replacingOccurrences(of: \")\", with:\
    \ \"\")\n        }\n    }\n    for closing_bracket in brackets {\n        if closing_bracket\
    \ == \"(\" {\n            closing_brackets = closing_brackets.replacingOccurrences(of:\
    \ \"(\", with: \"\")\n        }\n        if closing_bracket == \")\" {\n     \
    \       closing_brackets = closing_brackets.replacingOccurrences(of: \")\", with:\
    \ \"\")\n        }\n    }\n    return opening_brackets == closing_brackets\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3xj3d043.swift:17:49: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n            opening_brackets = opening_brackets.replacingOccurrences(of:\
    \ \"(\", with: \"\")\n                               ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3xj3d043.swift:20:49: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \            opening_brackets = opening_brackets.replacingOccurrences(of: \")\"\
    , with: \"\")\n                               ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3xj3d043.swift:25:49: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \            closing_brackets = closing_brackets.replacingOccurrences(of: \"(\"\
    , with: \"\")\n                               ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3xj3d043.swift:28:49: error: value of type 'String' has no member 'replacingOccurrences'\n\
    \            closing_brackets = closing_brackets.replacingOccurrences(of: \")\"\
    , with: \"\")\n                               ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n\n    for index in\
    \ 0..<opening_brackets_count {\n        if opening_brackets[index] == '(' {\n\
    \            opening_brackets.remove(at: index)\n            opening_brackets_count\
    \ -= 1\n        }\n        if opening_brackets[index] == ')' {\n            opening_brackets.remove(at:\
    \ index)\n            opening_brackets_count -= 1\n        }\n    }\n\n    for\
    \ index in 0..<closing_brackets_count {\n        if closing_brackets[index] ==\
    \ '(' {\n            closing_brackets.remove(at: index)\n            closing_brackets_count\
    \ -= 1\n        }\n        if closing_brackets[index] == ')' {\n            closing_brackets.remove(at:\
    \ index)\n            closing_brackets_count -= 1\n        }\n    }\n\n    return\
    \ opening_brackets_count == closing_brackets_count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk2asfykt.swift:19:39: error: single-quoted string literal found,\
    \ use '\"'\n        if opening_brackets[index] == '(' {\n                    \
    \                  ^~~\n                                      \"(\"\n/tmp/tmpk2asfykt.swift:23:39:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[index]\
    \ == ')' {\n                                      ^~~\n                      \
    \                \")\"\n/tmp/tmpk2asfykt.swift:30:39: error: single-quoted string\
    \ literal found, use '\"'\n        if closing_brackets[index] == '(' {\n     \
    \                                 ^~~\n                                      \"\
    (\"\n/tmp/tmpk2asfykt.swift:34:39: error: single-quoted string literal found,\
    \ use '\"'\n        if closing_brackets[index] == ')' {\n                    \
    \                  ^~~\n                                      \")\"\n/tmp/tmpk2asfykt.swift:13:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_brackets\
    \ = brackets.characters\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpk2asfykt.swift:14:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk2asfykt.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpk2asfykt.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was ob"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for index in 0..<openingBrackets.count {\n        if openingBrackets[index]\
    \ != closingBrackets[index] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe8o989r5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe8o989r5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe8o989r5.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] != closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe8o989r5.swift:21:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] != closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketIndex\
    \ = 0\n    var closingBracketIndex = 0\n    var openingBracketCount = 0\n    var\
    \ closingBracketCount = 0\n    var isCorrectBracketing = true\n    while openingBracketIndex\
    \ < openingBracketsCount {\n        openingBracketCount = openingBrackets.count\n\
    \        while closingBracketIndex < closingBracketsCount {\n            closingBracketCount\
    \ = closingBrackets.count\n            if openingBracketIndex < openingBracketCount\
    \ {\n                if openingBrackets[openingBracketIndex] == closingBrackets[closingBracketIndex]\
    \ {\n                    openingBracketIndex += 1\n                    closingBracketIndex\
    \ += 1\n                } else {\n                    isCorrectBracketing = false\n\
    \                    break\n                }\n            } else {\n        \
    \        isCorrectBracketing = false\n                break\n            }\n \
    \       }\n        if isCorrectBracketing {\n            openingBracketIndex +=\
    \ 1\n        } else {\n            isCorrectBracketing = false\n            break\n\
    \        }\n    }\n    return isCorrectBracketing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcmsn66pf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcmsn66pf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcmsn66pf.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpcmsn66pf.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpcmsn66pf.swift:27:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                if openingBrackets[openingBracketIndex] == closingBrackets[closingBracketIndex]\
    \ {\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcmsn66pf.swift:27:60:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                if openingBrackets[openingBracketIndex]\
    \ == closingBrackets[closingBracketIndex] {\n                                \
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        guard closingBrackets[closingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        closingBracketIndex += 1\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp649dacnv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp649dacnv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp649dacnv.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp649dacnv.swift:23:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp649dacnv.swift:30:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp649dacnv.swift:31:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp649dacnv.swift:38:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmp649dacnv.swift:39:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n        closingBracketIndex +=\
    \ 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split(separator:\
    \ \"(\").map(String.init)\n    let closingBrackets = brackets.characters.split(separator:\
    \ \")\").map(String.init)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiqeoxlws.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split(separator:\
    \ \"(\").map(String.init)\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpiqeoxlws.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    let closingBrackets = brackets.characters.split(separator:\
    \ \")\").map(String.init)\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    while openingBrackets.count > closingBrackets.count {\n        if\
    \ openingBrackets[openingBrackets.startIndex] != closingBrackets[closingBrackets.startIndex]\
    \ {\n            return false\n        }\n\n        openingBracketsCount++\n \
    \       closingBracketsCount++\n    }\n\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4xyw5eh5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4xyw5eh5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4xyw5eh5.swift:24:29: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketsCount++\n           \
    \                 ^~\n/tmp/tmp4xyw5eh5.swift:25:29: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketsCount++\n      \
    \                      ^~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.first(where: { $0 == openingBracket })\n        if closingBracket\
    \ == nil {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpc8t8xoai.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpc8t8xoai.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split(separator:\
    \ CharacterSet.openingParenthesis)\n    let closingBrackets = brackets.characters.split(separator:\
    \ CharacterSet.closingParenthesis)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq96ktd47.swift:13:64: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.characters.split(separator: CharacterSet.openingParenthesis)\n\
    \                                                               ^~~~~~~~~~~~\n\
    /tmp/tmpq96ktd47.swift:14:64: error: cannot find 'CharacterSet' in scope\n   \
    \ let closingBrackets = brackets.characters.split(separator: CharacterSet.closingParenthesis)\n\
    \                                                               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == '(' {\n            openingBracketCount++\n\
    \        }\n        if openingBrackets[openingBracketIndex] == ')' {\n       \
    \     openingBracketCount--\n        }\n        if openingBracketCount < 0 {\n\
    \            return false\n        }\n        if openingBracketCount > 0 {\n \
    \           openingBracketIndex++\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        if closingBrackets[closingBracketIndex] == '('\
    \ {\n            closingBracketCount++\n        }\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n            closingBracketCount--\n        }\n        if closingBracketCount\
    \ < 0 {\n            return false\n        }\n        if closingBracketCount >\
    \ 0 {\n            closingBracketIndex++\n        }\n    }\n\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxlynb6ai.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpxlynb6ai.swift:24:52: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmpxlynb6ai.swift:36:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '(' {\n                                                   ^~~\n         \
    \                                          \"(\"\n/tmp/tmpxlynb6ai.swift:39:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmpxlynb6ai.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpxlynb6ai.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxlynb6ai.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpxlynb6ai.swift:25:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpxlynb6ai.swift:31:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0b75w6v_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0b75w6v_.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(openingBrackets.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz15dfj7y.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz15dfj7y.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpz15dfj7y.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(openingBrackets.dropFirst())\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    if brackets.isEmpty() {\n        return true\n    }\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = brackets.startIndex\n    var closingBracketIndex\
    \ = brackets.startIndex\n    var openingBracketCount = 0\n    var closingBracketCount\
    \ = 0\n    while openingBracketIndex < brackets.endIndex {\n        let openingBracket\
    \ = brackets[openingBracketIndex]\n        if openingBracket == \"(\" {\n    \
    \        openingBracketCount++\n        } else if openingBracket == \")\" {\n\
    \            openingBracketCount--\n        }\n        openingBracketIndex++\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n        if closingBracket == \"(\" {\n    \
    \        closingBracketCount++\n        } else if closingBracket == \")\" {\n\
    \            closingBracketCount--\n        }\n        closingBracketIndex++\n\
    \    }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    if openingBracketCount > 0 {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgs0221jq.swift:13:17: error: cannot call value of non-function\
    \ type 'Bool'\n    if brackets.isEmpty() {\n                ^      ~~\n      \
    \                 \n/tmp/tmpgs0221jq.swift:16:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgs0221jq.swift:17:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpgs0221jq.swift:25:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpgs0221jq.swift:27:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpgs0221jq.swift:29:28: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingBracketIndex++\n\
    \                           ^~\n/tmp/tmpgs0221jq.swift:34:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmpgs0221jq.swift:36:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmpgs0221jq.swift:38:28: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n\
    \                           ^~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjmul31wz.swift:109:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpjmul31wz.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpjmul31wz.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjmul31wz.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjmul31wz.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpjmul31wz.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpjmul31wz.swift:36:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpjmul31wz.swift:43:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpjmul31wz.swift:50:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpjmul31wz.swift:57:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n\n    while openingIndex < openingCount {\n        opening\
    \ = brackets[openingIndex..<openingIndex].characters\n        openingIndex +=\
    \ 1\n\n        while closingIndex < closingCount {\n            closing = brackets[closingIndex..<closingIndex].characters\n\
    \            closingIndex += 1\n\n            if opening == closing {\n      \
    \          openingCount -= 1\n                closingCount -= 1\n            }\
    \ else {\n                break\n            }\n        }\n    }\n\n    return\
    \ openingCount == closingCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj4pjhu_0.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpj4pjhu_0.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpj4pjhu_0.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpj4pjhu_0.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4pjhu_0.swift:21:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        opening = brackets[openingIndex..<openingIndex].characters\n        \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpj4pjhu_0.swift:21:57: error: 'characters' is unavailable: Please use String\
    \ directly\n        opening = brackets[openingIndex..<openingIndex].characters\n\
    \                                                        ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tm"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        if brackets[index] != opening\
    \ {\n            return false\n        }\n        opening = brackets[index + 1]\n\
    \    }\n    return opening == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnw54gy4c.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpnw54gy4c.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnw54gy4c.swift:16:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if brackets[index] != opening {\n     \
    \      ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpnw54gy4c.swift:19:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        opening\
    \ = brackets[index + 1]\n                  ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnw54gy4c.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets[1]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        open\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcd8rueh5.swift:105:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpcd8rueh5.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpcd8rueh5.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcd8rueh5.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcd8rueh5.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcd8rueh5.swift:26:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpcd8rueh5.swift:30:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcd8rueh5.swift:34:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpcd8rueh5.swift:38:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpcd8rueh5.swift:42:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = brackets.characters\n    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \    var openingBracketCount = 0\n    var closingBracketCount = 0\n    var openingBracketFound\
    \ = false\n    var closingBracketFound = false\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] == '('\
    \ {\n            openingBracketFound = true\n            openingBracketCount++\n\
    \        }\n        if openingBrackets[openingBracketIndex] == ')' {\n       \
    \     openingBracketFound = false\n            openingBracketCount--\n       \
    \ }\n        if openingBracketFound {\n            stack[openingBracketIndex]\
    \ = openingBrackets[openingBracketIndex]\n        }\n        if closingBracketFound\
    \ {\n            closingBrackets[closingBracketIndex] = closingBrackets[closingBracketIndex]\n\
    \        }\n        if openingBracketCount < 0 {\n            openingBracketIndex\
    \ = brackets.startIndex\n            openingBracketFound = false\n        }\n\
    \        if closingBracketCount < 0 {\n            closingBracketIndex = brackets.startIndex\n\
    \            closingBracketFound = false\n        }\n        openingBracketIndex++\n\
    \        closingBracketIndex++\n    }\n    return openingBracketIndex == brackets.endIndex\
    \ && closingBracketIndex == brackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpppcw_v0f.swift:24:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpppcw_v0f.swift:28:52: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmpppcw_v0f.swift:13:26:\
    \ error: 'characters' is unavailable: Please use String directly\n    var stack\
    \ = brackets.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpppcw_v0f.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpppcw_v0f.swift:15:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpppcw_v0f.swift:26:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpppcw_v0f.swift:30:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmpppcw_v0f.swift:33:18: error: cannot assign\
    \ through subscript: subscript is get-only\n            stack[openingBracketIndex]\
    \ = openingBrackets[openingBracketIndex]\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpppcw_v0f.swift:36:28: error: cannot assign through subscript: subscript\
    \ is get-only\n        "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    if brackets.isEmpty {\n        return true\n    }\n \
    \   var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        if closingBracketIndex < closingBrackets.count\
    \ {\n            if openingBrackets[openingBracketIndex] == closingBrackets[closingBracketIndex]\
    \ {\n                openingBracketIndex += 1\n                closingBracketIndex\
    \ += 1\n            } else {\n                return false\n            }\n  \
    \      } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkjpk954e.swift:16:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkjpk954e.swift:17:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkjpk954e.swift:22:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if openingBrackets[openingBracketIndex] == closingBrackets[closingBracketIndex]\
    \ {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpkjpk954e.swift:22:56: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n            if openingBrackets[openingBracketIndex] == closingBrackets[closingBracketIndex]\
    \ {\n                                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpkjpk954e.swift:16:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpkjpk954e.swift:17:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsa4ijl.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxrsa4ijl.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpphiexybz.swift:108:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpphiexybz.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpphiexybz.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpphiexybz.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpphiexybz.swift:21:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpphiexybz.swift:28:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpphiexybz.swift:35:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpphiexybz.swift:42:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpphiexybz.swift:49:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpphiexybz.swift:56:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_brackets_index\
    \ = opening_brackets.startIndex\n    var closing_brackets_index = closing_brackets.startIndex\n\
    \    var opening_brackets_end = opening_brackets.endIndex\n    var closing_brackets_end\
    \ = closing_brackets.endIndex\n\n    while opening_brackets_index < opening_brackets_end\
    \ {\n        if opening_brackets[opening_brackets_index] == \")\" {\n        \
    \    opening_brackets_index++\n            closing_brackets_index--\n        \
    \    if closing_brackets_index == closing_brackets_end {\n                opening_brackets_index--\n\
    \                closing_brackets_index = opening_brackets_index\n           \
    \ }\n        }\n        if opening_brackets[opening_brackets_index] != \"(\" {\n\
    \            return false\n        }\n        opening_brackets_index++\n     \
    \   closing_brackets_index--\n        if closing_brackets_index == closing_brackets_end\
    \ {\n            opening_brackets_index--\n            closing_brackets_index\
    \ = opening_brackets_index\n        }\n    }\n    return opening_brackets_count\
    \ == closing_brackets_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_eob1lns.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_eob1lns.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_eob1lns.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_eob1lns.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_eob1lns.swift:24:35:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  opening_brackets_index++\n                                  ^~\n/tmp/tmp_eob1lns.swift:25:35:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \  closing_brackets_index--\n                                  ^~\n/tmp/tmp_eob1lns.swift:27:39:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      opening_brackets_index--\n                                      ^~\n/tmp/tmp_eob1lns.swift:34:31:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        opening_brackets_index++\n\
    \                              ^~\n/tmp/tmp_eob1lns.swift:35:31: error: cannot\
    \ find operator '--' in scope; did you"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first == \")\" {\n   \
    \     if closingBrackets.first == \"(\" {\n            return true\n        }\n\
    \        return false\n    }\n    if closingBrackets.first == \"(\" {\n      \
    \  if openingBrackets.first == \")\" {\n            return true\n        }\n \
    \       return false\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9q1vb427.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9q1vb427.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_rnnl61c.swift:89:17: error: expected ':' after 'case'\n      \
    \  case \"[\"\n                ^\n/tmp/tmp_rnnl61c.swift:116:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp_rnnl61c.swift:19:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmp_rnnl61c.swift:116:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp_rnnl61c.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp_rnnl61c.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_rnnl61c.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_rnnl61c.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmp_rnnl61c.swift:24:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n   \
    \                            ^~\n/tmp/tmp_rnnl61c.swift:26:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmp_rnnl61c.swift:28:32: error: cannot\
    \ find operator '++' in scope; did you mean "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsa4ijl.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxrsa4ijl.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        let current = brackets[index]\n\
    \        if opening != current {\n            return false\n        }\n      \
    \  opening = current\n    }\n    return opening == closing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnkedkr93.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpnkedkr93.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnkedkr93.swift:16:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let current = brackets[index]\n       \
    \               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpnkedkr93.swift:14:9: warning: variable 'closing'\
    \ was never mutated; consider changing to 'let' constant\n    var closing = brackets[1]\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingIndex = 0\n    var closingIndex = 0\n  \
    \  while openingIndex < opening.count {\n        openingIndex += 1\n        if\
    \ opening[openingIndex] == '(' {\n            openingIndex += 1\n            while\
    \ openingIndex < opening.count && opening[openingIndex] != ')' {\n           \
    \     openingIndex += 1\n            }\n            if openingIndex == opening.count\
    \ {\n                return false\n            }\n            openingIndex +=\
    \ 1\n        }\n    }\n    while closingIndex < closing.count {\n        closingIndex\
    \ += 1\n        if closing[closingIndex] == '(' {\n            closingIndex +=\
    \ 1\n            while closingIndex < closing.count && closing[closingIndex] !=\
    \ ')' {\n                closingIndex += 1\n            }\n            if closingIndex\
    \ == closing.count {\n                return false\n            }\n          \
    \  closingIndex += 1\n        }\n    }\n    return opening.count == closing.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpty1g1xa0.swift:19:37: error: single-quoted string literal found,\
    \ use '\"'\n        if opening[openingIndex] == '(' {\n                      \
    \              ^~~\n                                    \"(\"\n/tmp/tmpty1g1xa0.swift:21:76:\
    \ error: single-quoted string literal found, use '\"'\n            while openingIndex\
    \ < opening.count && opening[openingIndex] != ')' {\n                        \
    \                                                   ^~~\n                    \
    \                                                       \")\"\n/tmp/tmpty1g1xa0.swift:32:37:\
    \ error: single-quoted string literal found, use '\"'\n        if closing[closingIndex]\
    \ == '(' {\n                                    ^~~\n                        \
    \            \"(\"\n/tmp/tmpty1g1xa0.swift:34:76: error: single-quoted string\
    \ literal found, use '\"'\n            while closingIndex < closing.count && closing[closingIndex]\
    \ != ')' {\n                                                                 \
    \          ^~~\n                                                             \
    \              \")\"\n/tmp/tmpty1g1xa0.swift:13:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening = brackets.characters\n        \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpty1g1xa0.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var closing = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpty1g1xa0.swift:19:12: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n        if opening[openingIndex]\
    \ == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpty1g1xa0.swift:21:51: error: 'subscript(_:)"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"}\":\n            openingBracketCount += 1\n        case\
    \ \"[\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"}\":\n            openingBracketCount\
    \ += 1\n        case \"[\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"}\":\n            openingBracketCount += 1\n        case\
    \ \"[\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"}\":\n            openingBracketCount\
    \ += 1\n        case \"[\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpow1dftau.swift:89:9: error: 'case' label in a 'switch' must have\
    \ at least one executable statement\n        case \"(\":\n        ^~~~~~~~~\n\
    \                  break\n/tmp/tmpow1dftau.swift:116:66: error: expected '}' at\
    \ end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpow1dftau.swift:19:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmpow1dftau.swift:116:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpow1dftau.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpow1dftau.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpow1dftau.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpow1dftau.swift:27:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"(\":\n   \
    \          ^~~\n/tmp/tmpow1dftau.swift:21:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"(\":\n             ^~~\n/tmp/tmpow1dftau.swift:31:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"[\":\n             ^~~\n/tmp/tmpow1dftau.swift:23:14: note:\
    \ first occurrence of identical literal patter"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex + 1\n\
    \        if openingBrackets[openingBracketIndex] == '(' {\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n            if openingBracketIndex < brackets.endIndex\
    \ && openingBrackets[openingBracketIndex] == ')' {\n                openingBracketIndex\
    \ = openingBracketIndex + 1\n            }\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        closingBracketIndex = closingBracketIndex + 1\n\
    \        if closingBrackets[closingBracketIndex] == '(' {\n            closingBracketIndex\
    \ = closingBracketIndex + 1\n            if closingBracketIndex < brackets.endIndex\
    \ && closingBrackets[closingBracketIndex] == ')' {\n                closingBracketIndex\
    \ = closingBracketIndex + 1\n            }\n        }\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsn0zont8.swift:20:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmpsn0zont8.swift:22:99: error: single-quoted\
    \ string literal found, use '\"'\n            if openingBracketIndex < brackets.endIndex\
    \ && openingBrackets[openingBracketIndex] == ')' {\n                         \
    \                                                                         ^~~\n\
    \                                                                            \
    \                      \")\"\n/tmp/tmpsn0zont8.swift:30:52: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '(' {\n                                                   ^~~\n         \
    \                                          \"(\"\n/tmp/tmpsn0zont8.swift:32:99:\
    \ error: single-quoted string literal found, use '\"'\n            if closingBracketIndex\
    \ < brackets.endIndex && closingBrackets[closingBracketIndex] == ')' {\n     \
    \                                                                            \
    \                 ^~~\n                                                      \
    \                                            \")\"\n/tmp/tmpsn0zont8.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpsn0zont8.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsn0zont8.swift:19:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    for openingBracket in openingBrackets {\n        for closingBracket\
    \ in closingBrackets {\n            if openingBracket == closingBracket {\n  \
    \              return false\n            }\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm61i_f_0.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpm61i_f_0.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n\
    \    if opening_brackets.isEmpty {\n        return false\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return true\n    }\n    if opening_brackets.first != closing_brackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(opening_brackets.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp48dr95am.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48dr95am.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp48dr95am.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(opening_brackets.dropFirst())\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw7pomgs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbw7pomgs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      let closingBracket = closingBrackets.first(where: { $0 == openingBracket\
    \ })\n        if closingBracket == nil {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuu9vjjwa.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpuu9vjjwa.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"{\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"[\":\n            openingBracketCount += 1\n        case \"{\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"[\":\n            openingBracketCount += 1\n        case\
    \ \"{\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"{\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"[\":\n            openingBracketCount += 1\n        case \"{\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"[\":\n            openingBracketCount += 1\n        case\
    \ \"{\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"{\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"[\":\n            openingBracketCount += 1\n        case \"{\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"[\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw3admhq.swift:90:17: error: expected ':' after 'case'\n      \
    \  case \"[\"\n                ^\n/tmp/tmpbw3admhq.swift:117:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpbw3admhq.swift:20:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmpbw3admhq.swift:117:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpbw3admhq.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpbw3admhq.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpbw3admhq.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbw3admhq.swift:28:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"(\":\n   \
    \          ^~~\n/tmp/tmpbw3admhq.swift:22:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"(\":\n             ^~~\n/tmp/tmpbw3admhq.swift:30:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"[\":\n             ^~~\n/tmp/tmpbw3admhq.swift:24:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"[\":\n\
    \             ^~~\n/tmp/tmpbw3admhq.swift:3"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    var isOpeningBracket = brackets.characters.count > 0\n    var isClosingBracket\
    \ = brackets.characters.count > 0\n\n    for index in 0..<brackets.characters.count\
    \ {\n        if openingBrackets[index] == '(' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == ')' {\n            openingBracketsCount\
    \ -= 1\n        } else if openingBrackets[index] == '[' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == ']' {\n            openingBracketsCount\
    \ -= 1\n        } else if openingBrackets[index] == '{' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '}' {\n            openingBracketsCount\
    \ -= 1\n        } else if openingBrackets[index] == '<' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '>' {\n            openingBracketsCount\
    \ -= 1\n        } else if openingBrackets[index] == '.' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '!' {\n            openingBracketsCount\
    \ -= 1\n        } else if openingBrackets[index] == '?' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '*' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '+' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '-' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '/' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '%' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '^' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '|' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '~' {\n            openingBracketsCount\
    \ += 1\n        } else if openingBrackets[index] == '(' ||\n            openingBrackets[index]\
    \ == '[' ||\n            openingBra\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz18te6gn.swift:21:38: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[index] == '(' {\n                     \
    \                ^~~\n                                     \"(\"\n/tmp/tmpz18te6gn.swift:23:45:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[index]\
    \ == ')' {\n                                            ^~~\n                \
    \                            \")\"\n/tmp/tmpz18te6gn.swift:25:45: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[index] ==\
    \ '[' {\n                                            ^~~\n                   \
    \                         \"[\"\n/tmp/tmpz18te6gn.swift:27:45: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[index] ==\
    \ ']' {\n                                            ^~~\n                   \
    \                         \"]\"\n/tmp/tmpz18te6gn.swift:29:45: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[index] ==\
    \ '{' {\n                                            ^~~\n                   \
    \                         \"{\"\n/tmp/tmpz18te6gn.swift:31:45: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[index] ==\
    \ '}' {\n                                            ^~~\n                   \
    \                         \"}\"\n/tmp/tmpz18te6gn.swift:33:45: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[index] ==\
    \ '<' {\n                                            ^~~\n                   \
    \                         \"<\"\n/tmp/tmpz18te6gn.swift:35:45: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[index] ==\
    \ '>' {\n                                            ^~~\n                   \
    \                         \">\"\n/tmp/tmpz18te6gn.swift:37:45: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[index] ==\
    \ '.' {\n                                            ^~~\n                   \
    \                         \".\"\n/tmp/tmpz18te6gn.swift:39:"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    \n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    \n    for i in 0..<openingBrackets.count\
    \ {\n        if openingBrackets[i] != closingBrackets[i] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpng5gk2jd.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpng5gk2jd.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \")\":\n   \
    \         closingBracketCount++\n            if closingBracketCount > 1 {\n  \
    \              openingBracketCount--\n            }\n        case \")\":\n   \
    \         openingBracketCount++\n            if openingBracketCount > 1 {\n  \
    \              closingBracketCount--\n            }\n        default:\n      \
    \      openingBracketCount = 0\n            closingBracketCount = 0\n        }\n\
    \        openingBracketIndex++\n    }\n    return openingBracketCount == closingBracketCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9sbxda25.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9sbxda25.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9sbxda25.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracketCount++\n        \
    \                       ^~\n/tmp/tmp9sbxda25.swift:24:36: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n                openingBracketCount--\n\
    \                                   ^~\n/tmp/tmp9sbxda25.swift:27:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmp9sbxda25.swift:29:36: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                closingBracketCount--\n\
    \                                   ^~\n/tmp/tmp9sbxda25.swift:26:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \")\":\n             ^~~\n/tmp/tmp9sbxda25.swift:21:14: note: first\
    \ occurrence of identical literal pattern is here\n        case \")\":\n     \
    \        ^~~\n/tmp/tmp9sbxda25.swift:35:28: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        openingBracketIndex++\n               \
    \            ^~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        while closingBracketIndex\
    \ < closingBrackets.count {\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                return false\n            }\n            closingBracketIndex\
    \ += 1\n        }\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ = 0\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqmj3aizd.swift:18:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmpqmj3aizd.swift:23:59: error:\
    \ single-quoted string literal found, use '\"'\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                                                          ^~~\n\
    \                                                          \")\"\n/tmp/tmpqmj3aizd.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpqmj3aizd.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqmj3aizd.swift:18:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqmj3aizd.swift:23:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqmj3aizd.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \        openingBracketsIndex += 1\n    }\n\n    while closingBracketsIndex <\
    \ closingBracketsCount {\n        closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \        closingBracketsIndex += 1\n    }\n\n    if openingBracketsString == closingBracketsString\
    \ {\n        return true\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw9_vkck3.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw9_vkck3.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw9_vkck3.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpw9_vkck3.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpw9_vkck3.swift:23:41: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        openingBracketsString += String(openingBrackets[openingBracketsIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpw9_vkck3.swift:28:41:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        closingBracketsString += String(closingBrackets[closingBracketsIndex])\n\
    \                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscrip"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n    var openingBracketIndex\
    \ = 0\n    var closingBracketIndex = 0\n    var openingBracketFound = false\n\
    \    var closingBracketFound = false\n\n    while openingBracketIndex < openingBracketCount\
    \ {\n        if openingBrackets[openingBracketIndex] == '(' { // opening bracket\n\
    \            openingBracketFound = true\n            openingBracketIndex += 1\n\
    \        } else if openingBrackets[openingBracketIndex] == '[' { // opening square\
    \ bracket\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '{' { // opening\
    \ curly bracket\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '<' { // opening\
    \ angle bracket\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '>' { // opening\
    \ angle bracket\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '!' { // opening\
    \ exclamation mark\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '?' { // opening\
    \ question mark\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '.' { // opening\
    \ period\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '$' { // opening\
    \ dollar sign\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '@' { // opening\
    \ at sign\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[openingBracketIndex] == '#' { // opening\
    \ pound sign\n            openingBracketFound = true\n            openingBracketIndex\
    \ += 1\n        } else if openingBrackets[\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_jb6djt2.swift:23:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' { // opening\
    \ bracket\n                                                   ^~~\n          \
    \                                         \"(\"\n/tmp/tmp_jb6djt2.swift:26:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '[' { // opening square bracket\n                                       \
    \                   ^~~\n                                                    \
    \      \"[\"\n/tmp/tmp_jb6djt2.swift:29:59: error: single-quoted string literal\
    \ found, use '\"'\n        } else if openingBrackets[openingBracketIndex] == '{'\
    \ { // opening curly bracket\n                                               \
    \           ^~~\n                                                          \"\
    {\"\n/tmp/tmp_jb6djt2.swift:32:59: error: single-quoted string literal found,\
    \ use '\"'\n        } else if openingBrackets[openingBracketIndex] == '<' { //\
    \ opening angle bracket\n                                                    \
    \      ^~~\n                                                          \"<\"\n\
    /tmp/tmp_jb6djt2.swift:35:59: error: single-quoted string literal found, use '\"\
    '\n        } else if openingBrackets[openingBracketIndex] == '>' { // opening\
    \ angle bracket\n                                                          ^~~\n\
    \                                                          \">\"\n/tmp/tmp_jb6djt2.swift:38:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '!' { // opening exclamation mark\n                                     \
    \                     ^~~\n                                                  \
    \        \"!\"\n/tmp/tmp_jb6djt2.swift:41:59: error: single-quoted string literal\
    \ found, use '\"'\n        } else if openingBrackets[openingBracketIndex] == '?'\
    \ { // opening question mark\n                                               \
    \           ^~~\n                                                          \"\
    ?\"\n/tmp/tmp_jb6d"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"(\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        }\n\n        openingBrackets[openingBracket\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3pdrz7m.swift:72:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmpd3pdrz7m.swift:71:24: note: to match this opening '['\n        openingBrackets[openingBracket\n\
    \                       ^\n/tmp/tmpd3pdrz7m.swift:98:66: error: expected '}' at\
    \ end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpd3pdrz7m.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmpd3pdrz7m.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpd3pdrz7m.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3pdrz7m.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpd3pdrz7m.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpd3pdrz7m.swift:26:33: error: binary operator '-=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ -= 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpd3pdrz7m.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpd3pdrz7m.swift:29:33: error: binary operator '-=' cannot be a"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"(\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \"[\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"]\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \"[\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"]\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n            openingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjq4xqp93.swift:99:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpjq4xqp93.swift:18:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmpjq4xqp93.swift:99:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpjq4xqp93.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpjq4xqp93.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjq4xqp93.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjq4xqp93.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpjq4xqp93.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpjq4xqp93.swift:26:33: error: binary operator '-=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ -= 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpjq4xqp93.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        opening = brackets[index]\n  \
    \      closing = brackets[index+1]\n        if opening != closing {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpztpmu8ev.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpztpmu8ev.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpztpmu8ev.swift:16:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        opening = brackets[index]\n           \
    \       ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpztpmu8ev.swift:17:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        closing\
    \ = brackets[index+1]\n                  ^~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split(separator:\
    \ \"(\").map(String.init)\n    let closingBrackets = brackets.characters.split(separator:\
    \ \")\").map(String.init)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiqeoxlws.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split(separator:\
    \ \"(\").map(String.init)\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpiqeoxlws.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    let closingBrackets = brackets.characters.split(separator:\
    \ \")\").map(String.init)\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = false\n   \
    \ for c in brackets {\n        if c == '(' {\n            stack.append(c)\n  \
    \          opening = true\n        } else if c == ')' {\n            if opening{\n\
    \                opening = false\n            } else {\n                stack.removeLast()\n\
    \            }\n        } else if opening {\n            opening = false\n   \
    \     }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfb0a6iye.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpfb0a6iye.swift:19:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpfb0a6iye.swift:17:26: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            stack.append(c)\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    guard openingBrackets.count != closingBrackets.count else {\n        return\
    \ false\n    }\n    for openingBracket in openingBrackets {\n        if let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket) {\n            closingBrackets.remove(at:\
    \ closingBracket)\n        }\n    }\n    return openingBrackets.count == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy8t3kvbr.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpy8t3kvbr.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.isEmpty {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnscv4gsm.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnscv4gsm.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for index in 0..<openingBrackets.count {\n        if openingBrackets[index]\
    \ != closingBrackets[index] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe8o989r5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe8o989r5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe8o989r5.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] != closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe8o989r5.swift:21:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] != closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] !=\
    \ \"(\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ guard closingBrackets[closingBracketIndex] != \")\" else {\n            return\
    \ false\n        }\n        closingBracketIndex += 1\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmk2kol3_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmk2kol3_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmk2kol3_.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpmk2kol3_.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = brackets.characters\n    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketIndex = brackets.startIndex\n    var closingBracketIndex = brackets.startIndex\n\
    \    var openingBracketCount = 0\n    var closingBracketCount = 0\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] == '('\
    \ {\n            openingBracketCount++\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == ')' {\n            openingBracketCount--\n        }\n        if openingBracketCount\
    \ < 0 {\n            return false\n        }\n        if openingBracketCount >\
    \ 0 {\n            openingBracketIndex++\n        }\n    }\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        if closingBrackets[closingBracketIndex] == '('\
    \ {\n            closingBracketCount++\n        }\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n            closingBracketCount--\n        }\n        if closingBracketCount\
    \ < 0 {\n            return false\n        }\n        if closingBracketCount >\
    \ 0 {\n            closingBracketIndex++\n        }\n    }\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n    if openingBracketCount\
    \ > 0 {\n        stack.removeSubrange(openingBracketIndex, openingBracketIndex\
    \ + openingBracketCount)\n    }\n    if closingBracketCount > 0 {\n        stack.removeSubrange(closingBracketIndex,\
    \ closingBracketIndex + closingBracketCount)\n    }\n    if stack.count != 0 {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3xep4rpr.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmp3xep4rpr.swift:24:52: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmp3xep4rpr.swift:35:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '(' {\n                                                   ^~~\n         \
    \                                          \"(\"\n/tmp/tmp3xep4rpr.swift:38:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmp3xep4rpr.swift:13:26:\
    \ error: 'characters' is unavailable: Please use String directly\n    var stack\
    \ = brackets.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp3xep4rpr.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3xep4rpr.swift:15:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3xep4rpr.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n         "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack()\n    var opening = false\n    var\
    \ closing = false\n    for c in brackets {\n        if c == '(' {\n          \
    \  stack.push(c)\n            opening = true\n        } else if c == ')' {\n \
    \           if opening = true {\n                opening = false\n           \
    \     closing = true\n            } else {\n                closing = false\n\
    \            }\n        } else if opening = true {\n            stack.push(c)\n\
    \        } else if closing = true {\n            if stack.top() == '(' {\n   \
    \             stack.pop()\n            } else {\n                closing = false\n\
    \            }\n        }\n    }\n    return stack.empty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzf5grs0x.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpzf5grs0x.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpzf5grs0x.swift:30:31: error: single-quoted string literal\
    \ found, use '\"'\n            if stack.top() == '(' {\n                     \
    \         ^~~\n                              \"(\"\n/tmp/tmpzf5grs0x.swift:13:17:\
    \ error: cannot find 'Stack' in scope\n    var stack = Stack()\n             \
    \   ^~~~~\n/tmp/tmpzf5grs0x.swift:21:24: error: use of '=' in a boolean context,\
    \ did you mean '=='?\n            if opening = true {\n               ~~~~~~~\
    \ ^ ~~~~\n                       ==\n/tmp/tmpzf5grs0x.swift:27:27: error: use\
    \ of '=' in a boolean context, did you mean '=='?\n        } else if opening =\
    \ true {\n                  ~~~~~~~ ^ ~~~~\n                          ==\n/tmp/tmpzf5grs0x.swift:29:27:\
    \ error: use of '=' in a boolean context, did you mean '=='?\n        } else if\
    \ closing = true {\n                  ~~~~~~~ ^ ~~~~\n                       \
    \   ==\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    guard openingBrackets.count == closingBrackets.count else {\n        return\
    \ false\n    }\n    for openingBracket in openingBrackets {\n        guard closingBrackets.contains(where:\
    \ { $0 == openingBracket }) else {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpogdvykv8.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpogdvykv8.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] != \"\
    )\" {\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        openingBracketIndex += 1\n        if openingBracketIndex >= brackets.endIndex\
    \ {\n            return false\n        }\n\n        if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex += 1\n            continue\n   \
    \     }\n\n        if openingBrackets[openingBracketIndex] != \")\" {\n      \
    \      return false\n        }\n\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ += 1\n    }\n\n    return openingBracketIndex == brackets.endIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpopus1d4s.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpopus1d4s.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpopus1d4s.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpopus1d4s.swift:24:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpopus1d4s.swift:30:33: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n            closingBracketIndex +=\
    \ 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpopus1d4s.swift:38:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpopus1d4s.swift:39:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        closingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        opening = brackets[index]\n  \
    \      closing = brackets[index+1]\n        if opening != closing {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpztpmu8ev.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpztpmu8ev.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpztpmu8ev.swift:16:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        opening = brackets[index]\n           \
    \       ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpztpmu8ev.swift:17:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        closing\
    \ = brackets[index+1]\n                  ^~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.count\n    let closingBrackets = brackets.characters.split{$0 == \"(\"\
    }.count\n    return openingBrackets == closingBrackets\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpctug137e.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.count\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpctug137e.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.count\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter({\
    \ $0 == \"(\" })\n        .map({ String($0) })\n    let closingBrackets = brackets.characters\n\
    \        .filter({ $0 == \")\" })\n        .map({ String($0) })\n    return openingBrackets.count\
    \ == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiz2q0kr8.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiz2q0kr8.swift:16:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ closingBrackets.contains(where: { $0 == openingBracket }) {\n            return\
    \ true\n        }\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3lhv_l8u.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp3lhv_l8u.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    if brackets.isEmpty() {\n        return true\n    }\n\
    \    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketIndex = 0\n    var closingBracketIndex = 0\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < openingBrackets.count\
    \ {\n        openingBracketCount = 0\n        while openingBracketCount < openingBrackets.count\
    \ && openingBracketIndex < openingBrackets.count {\n            if openingBrackets[openingBracketIndex]\
    \ == '(' {\n                openingBracketCount += 1\n            }\n        \
    \    openingBracketIndex += 1\n        }\n        if openingBracketCount != openingBrackets.count\
    \ {\n            return false\n        }\n        openingBracketIndex = 0\n  \
    \      while closingBracketIndex < closingBrackets.count && closingBracketIndex\
    \ < closingBrackets.count {\n            if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                closingBracketCount += 1\n            }\n        \
    \    closingBracketIndex += 1\n        }\n        if closingBracketCount != closingBrackets.count\
    \ {\n            return false\n        }\n        openingBracketIndex = 0\n  \
    \      while openingBracketIndex < openingBrackets.count && openingBracketIndex\
    \ < openingBrackets.count {\n            if openingBrackets[openingBracketIndex]\
    \ == '(' {\n                openingBracketIndex += 1\n            }\n        \
    \    openingBracketIndex += 1\n        }\n        if openingBracketIndex != openingBrackets.count\
    \ {\n            return false\n        }\n        closingBracketIndex = 0\n  \
    \      while closingBracketIndex < closingBrackets.count && closingBracketIndex\
    \ < closingBrackets.count {\n            if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                closingBracketIndex += 1\n            }\n        \
    \    closingBracketIndex += 1\n        }\n        if closingBracketIndex != closingBrackets.count\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcm4sasfw.swift:25:56: error: single-quoted string literal found,\
    \ use '\"'\n            if openingBrackets[openingBracketIndex] == '(' {\n   \
    \                                                    ^~~\n                   \
    \                                    \"(\"\n/tmp/tmpcm4sasfw.swift:35:56: error:\
    \ single-quoted string literal found, use '\"'\n            if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                                                       ^~~\n     \
    \                                                  \")\"\n/tmp/tmpcm4sasfw.swift:45:56:\
    \ error: single-quoted string literal found, use '\"'\n            if openingBrackets[openingBracketIndex]\
    \ == '(' {\n                                                       ^~~\n     \
    \                                                  \"(\"\n/tmp/tmpcm4sasfw.swift:55:56:\
    \ error: single-quoted string literal found, use '\"'\n            if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                                                       ^~~\n     \
    \                                                  \")\"\n/tmp/tmpcm4sasfw.swift:13:17:\
    \ error: cannot call value of non-function type 'Bool'\n    if brackets.isEmpty()\
    \ {\n                ^      ~~\n                       \n/tmp/tmpcm4sasfw.swift:16:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcm4sasfw.swift:17:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcm4sasfw.swift:25:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if openingBrackets[openingBracketIndex] == '(' {\n               ^~~~~~~~~~~"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsa4ijl.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxrsa4ijl.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8zu5apxl.swift:119:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp8zu5apxl.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp8zu5apxl.swift:119:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmp8zu5apxl.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp8zu5apxl.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8zu5apxl.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8zu5apxl.swift:92:13: error: cannot find 'openingBracket'\
    \ in scope\n            openingBracket\n            ^~~~~~~~~~~~~~\n/tmp/tmp8zu5apxl.swift:27:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"(\":\n             ^~~\n/tmp/tmp8zu5apxl.swift:21:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"(\":\n\
    \             ^~~\n/tmp/tmp8zu5apxl.swift:31:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"[\":\n   \
    \          ^~~\n/tmp/tmp8zu5apxl.swift:23:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"[\":\n          "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = false\n   \
    \ var closing = false\n    for c in brackets {\n        if c == '(' {\n      \
    \      opening = true\n            stack.append(c)\n        } else if c == ')'\
    \ {\n            closing = true\n            if opening {\n                opening\
    \ = false\n            } else {\n                stack.removeLast()\n        \
    \    }\n        } else if opening {\n            stack.append(c)\n        } else\
    \ {\n            if closing {\n                closing = false\n            }\
    \ else {\n                return false\n            }\n        }\n    }\n    return\
    \ stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpatakmra1.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpatakmra1.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n/tmp/tmpatakmra1.swift:19:26: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n            stack.append(c)\n\
    \                         ^\n/tmp/tmpatakmra1.swift:28:26: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            stack.append(c)\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = 1\n    var closingCount = 1\n  \
    \  var openingIndex = 0\n    var closingIndex = 0\n    var openingChar = opening[openingIndex]\n\
    \    var closingChar = closing[closingIndex]\n    while openingIndex < opening.count\
    \ {\n        openingIndex++\n        openingChar = opening[openingIndex]\n   \
    \     if openingChar == \")\" {\n            closingIndex++\n            closingChar\
    \ = closing[closingIndex]\n            if closingChar == \"(\" {\n           \
    \     openingCount--\n                closingCount++\n            }\n        }\n\
    \    }\n    return openingCount == closingCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm5tzl_py.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpm5tzl_py.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpm5tzl_py.swift:19:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var openingChar = opening[openingIndex]\n \
    \                     ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpm5tzl_py.swift:20:23: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closingChar = closing[closingIndex]\n                      ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpm5tzl_py.swift:22:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        openingIndex++\n\
    \                    ^~\n/tmp/tmpm5tzl_py.swift:23:23: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        openingChar = opening[openingIndex]\n                      ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpm5tzl_py.swift:25:25:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  closingIndex++\n                        ^~\n/tmp/tmpm5tzl_py.swift:26:27: error:\
    \ 'subscript(_:)' is "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < brackets.endIndex {\n       \
    \ guard closingBrackets[closingBracketIndex] != \"(\" else {\n            return\
    \ false\n        }\n        closingBracketIndex += 1\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2gtkldus.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2gtkldus.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2gtkldus.swift:22:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2gtkldus.swift:29:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] == \"\
    )\" {\n            closingBracketIndex = openingBracketIndex + 1\n        } else\
    \ if openingBrackets[openingBracketIndex] != \"(\" {\n            return false\n\
    \        }\n\n        openingBracketIndex += 1\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        if closingBrackets[closingBracketIndex] == \"\
    )\" {\n            openingBracketIndex = closingBracketIndex + 1\n        } else\
    \ if closingBrackets[closingBracketIndex] != \"(\" {\n            return false\n\
    \        }\n\n        closingBracketIndex += 1\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps8qtzi5c.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps8qtzi5c.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps8qtzi5c.swift:20:55: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmps8qtzi5c.swift:20:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmps8qtzi5c.swift:25:29: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmps8qtzi5c.swift:30:55: error:\
    \ binary operator '+' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex = closingBracketIndex + 1\n         \
    \                         ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmps8qtzi5c.swift:30:55:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Int, Int)\n            openingBracketIndex = closingBracketIndex + 1\n    \
    \                                                  ^\n/tmp/tmps8qtzi5c.swift:35:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] != \"\
    )\" {\n            openingBracketIndex += 1\n            continue\n        }\n\
    \n        if closingBracketIndex < brackets.endIndex {\n            if closingBrackets[closingBracketIndex]\
    \ != \")\" {\n                closingBracketIndex += 1\n                continue\n\
    \            }\n        }\n\n        if openingBracketIndex < closingBracketIndex\
    \ {\n            openingBracketIndex += 1\n            closingBracketIndex +=\
    \ 1\n            continue\n        }\n\n        return false\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxc5dim6s.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxc5dim6s.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxc5dim6s.swift:20:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpxc5dim6s.swift:26:37: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n                closingBracketIndex += 1\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpxc5dim6s.swift:32:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpxc5dim6s.swift:33:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        if openingBracketIndex == brackets.endIndex {\n            break\n  \
    \      }\n        openingBrackets[openingBracketIndex] = openingBrackets[openingBracketIndex].successor()\n\
    \    }\n    while closingBracketIndex < brackets.endIndex {\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n        if closingBracketIndex == brackets.endIndex\
    \ {\n            break\n        }\n        closingBrackets[closingBracketIndex]\
    \ = closingBrackets[closingBracketIndex].predecessor()\n    }\n    return openingBrackets\
    \ == closingBrackets\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj4p9i42j.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4p9i42j.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj4p9i42j.swift:18:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpj4p9i42j.swift:22:24:\
    \ error: cannot assign through subscript: subscript is get-only\n        openingBrackets[openingBracketIndex]\
    \ = openingBrackets[openingBracketIndex].successor()\n        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj4p9i42j.swift:22:85: error: value of type 'Character' has no member 'successor'\n\
    \        openingBrackets[openingBracketIndex] = openingBrackets[openingBracketIndex].successor()\n\
    \                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n/tmp/tmpj4p9i42j.swift:25:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        closingBracketIndex = closingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpj4p9i42j.swift:29:24:\
    \ error: cannot assign through subscript: subscript is get-only\n        closingBrackets[closingBracketIndex]\
    \ = closingBrackets[closingBracketIndex].predecessor()\n        ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj4p9i42j.swift:29:85: error: value of type 'Character' has no member 'predecessor'\n\
    \        closingBrackets[closingBracketIndex] = closingBrackets[closingBracketIndex].predecessor()\n\
    \                                               ~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n\n    if openingBracketCount\
    \ == 0 {\n        return true\n    }\n\n    if openingBracketCount > 1 {\n   \
    \     openingBracketCount = openingBracketCount - 1\n        closingBracketCount\
    \ = brackets.characters.count - 1\n    }\n\n    if openingBracketCount != closingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount > 1 {\n       \
    \ openingBracketCount = openingBracketCount - 1\n        openingBracketCount =\
    \ openingBracketCount - 1\n        closingBracketCount = brackets.characters.count\
    \ - 1\n    }\n\n    if openingBracketCount != closingBracketCount {\n        return\
    \ false\n    }\n\n    if openingBracketCount != openingBracketCount {\n      \
    \  return false\n    }\n\n    if openingBracketCount != openingBracketCount {\n\
    \        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount != openingBracketCount\
    \ {\n        return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp96iiq29k.swift:137:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp96iiq29k.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmp96iiq29k.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp96iiq29k.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp96iiq29k.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp96iiq29k.swift:16:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp96iiq29k.swift:24:40: error: 'characters' is unavailable:\
    \ Please use String directly\n        closingBracketCount = brackets.characters.count\
    \ - 1\n                                       ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp96iiq29k.swift:34:40: error: 'characters'\
    \ is unavaila"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"}\":\n            openingBracketCount--\n\
    \        case \"[\":\n            openingBracketCount--\n        case \"}\":\n\
    \            openingBracketCount--\n        default:\n            break\n    \
    \    }\n        if openingBracketCount < 0 {\n            openingBracketCount\
    \ = 0\n        }\n        if openingBracketCount > 0 {\n            openingBracketIndex++\n\
    \        }\n    }\n    while closingBracketIndex < brackets.endIndex {\n     \
    \   switch brackets[closingBracketIndex] {\n        case \"(\":\n            closingBracketCount++\n\
    \        case \"[\":\n            closingBracketCount++\n        case \"{\":\n\
    \            closingBracketCount++\n        case \"(\":\n            closingBracketCount++\n\
    \        case \"}\":\n            closingBracketCount--\n        case \"[\":\n\
    \            closingBracketCount--\n        case \"}\":\n            closingBracketCount--\n\
    \        default:\n            break\n        }\n        if closingBracketCount\
    \ < 0 {\n            closingBracketCount = 0\n        }\n        if closingBracketCount\
    \ > 0 {\n            closingBracketIndex++\n        }\n    }\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1gw4j6m.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw1gw4j6m.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw1gw4j6m.swift:22:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmpw1gw4j6m.swift:24:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n   \
    \                            ^~\n/tmp/tmpw1gw4j6m.swift:26:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpw1gw4j6m.swift:28:32: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmpw1gw4j6m.swift:30:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n\
    \                               ^~\n/tmp/tmpw1gw4j6m.swift:32:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n\
    \                               ^~\n/tmp/tmpw1gw4j6m.swift:34:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n\
    \                               ^~\n/tmp/tmpw1gw4j6m.swift:27:14: warning: literal\
    \ value is already handled by previous pattern; consider removing it\n       \
    \ case \"(\":\n             ^~~\n/tmp/tmpw1gw4j6m.swift:21:14: note: first occurrence\
    \ of identical literal pattern is here\n        case \"(\":\n             ^~~\n\
    /tmp/tmpw1gw4j"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n\n    if opening_brackets_count\
    \ > 0 && closing_brackets_count > 0 {\n        if opening_brackets_count == closing_brackets_count\
    \ {\n            if opening_brackets[opening_brackets_count - 1] == \")\" {\n\
    \                opening_brackets_count -= 1\n                closing_brackets_count\
    \ -= 1\n            }\n        }\n    }\n\n    if opening_brackets_count != closing_brackets_count\
    \ {\n        return false\n    }\n\n    if opening_brackets_count == 0 {\n   \
    \     return true\n    }\n\n    for opening_bracket in opening_brackets {\n  \
    \      if closing_brackets[closing_brackets.startIndexOfString(opening_bracket)]\
    \ != nil {\n            return false\n        }\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv_q5hlvk.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv_q5hlvk.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpv_q5hlvk.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpv_q5hlvk.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpv_q5hlvk.swift:20:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if opening_brackets[opening_brackets_count\
    \ - 1] == \")\" {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpv_q5hlvk.swift:36:46:\
    \ error: value of type 'String' has no member 'startIndexOfString'\n        if\
    \ closing_brackets[closing_brackets.startIndexOfString(opening_bracket)] != nil\
    \ {\n                            ~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == '(' {\n            openingBracketIndex += 1\n        } else {\n         \
    \   openingBracketIndex += 1\n            closingBracketIndex += 1\n        }\n\
    \    }\n\n    while closingBracketIndex < closingBrackets.count {\n        if\
    \ closingBrackets[closingBracketIndex] == ')' {\n            closingBracketIndex\
    \ += 1\n        } else {\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8wqbk7ku.swift:19:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmp8wqbk7ku.swift:28:52: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n                                                   ^~~\n         \
    \                                          \")\"\n/tmp/tmp8wqbk7ku.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp8wqbk7ku.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8wqbk7ku.swift:19:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8wqbk7ku.swift:28:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if closingBrackets[closingBracketIndex]\
    \ == ')' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8wqbk7ku.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = bracke"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_index = brackets.startIndex\n\
    \    var closing_brackets_index = brackets.startIndex\n    var opening_brackets_length\
    \ = brackets.characters.count\n    var closing_brackets_length = brackets.characters.count\n\
    \    var opening_brackets_index = 0\n    var closing_brackets_index = 0\n    var\
    \ opening_brackets_character: Character?\n    var closing_brackets_character:\
    \ Character?\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n    var opening_brackets_character_index = 0\n    var closing_brackets_character_index\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2_an0c4t.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2_an0c4t.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2_an0c4t.swift:17:44: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_length = brackets.characters.count\n\
    \                                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2_an0c4t.swift:18:44: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_length\
    \ = brackets.characters.count\n                                           ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2_an0c4t.swift:19:9:\
    \ error: invalid redeclaration of 'opening_brackets_index'\n    var opening_brackets_index\
    \ = 0\n        ^\n/tmp/tmp2_an0c4t.swift:15:9: note: 'opening_brackets_index'\
    \ previously declared here\n    var opening_brackets_index = brackets.startIndex\n\
    \        ^\n/tmp/tmp2_an0c4t.swift:20:9: error: invalid redeclaration of 'closing_brackets_index'\n\
    \    var closing_brackets_index = 0\n        ^\n/tmp/tmp2_an0c4t.swift:16:9: note:\
    \ 'closing_brackets_index' previously declared here\n    var closing_brackets_index\
    \ = brackets.startIndex\n        ^\n/tmp/tmp2_an0c4t.swift:25:9: error: invalid\
    \ redeclaration of 'opening_brackets_character_index'\n    var opening_brackets_character_index\
    \ = 0\n        ^\n/tmp/tmp2_an0c4t.swift:23:9: note: 'ope"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBracketsCount {\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n        openingBracketIndex += 1\n        closingBracketIndex += 1\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplyosmkkl.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplyosmkkl.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplyosmkkl.swift:25:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmplyosmkkl.swift:25:52: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmplyosmkkl.swift:17:9:\
    \ warning: variable 'openingBracketsCount' was never mutated; consider changing\
    \ to 'let' constant\n    var openingBracketsCount = openingBrackets.count\n  \
    \  ~~~ ^\n    let\n/tmp/tmplyosmkkl.swift:18:9: warning: variable 'closingBracketsCount'\
    \ was never mutated; consider changing to 'let' constant\n    var closingBracketsCount\
    \ = closingBrackets.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split(separator:\
    \ CharacterSet.openingParenthesis)\n    let closingBrackets = brackets.characters.split(separator:\
    \ CharacterSet.closingParenthesis)\n    \n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n    \n    for i in 0..<openingBrackets.count\
    \ {\n        if openingBrackets[i] != closingBrackets[i] {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd4z8nbrk.swift:13:64: error: cannot find 'CharacterSet' in scope\n\
    \    let openingBrackets = brackets.characters.split(separator: CharacterSet.openingParenthesis)\n\
    \                                                               ^~~~~~~~~~~~\n\
    /tmp/tmpd4z8nbrk.swift:14:64: error: cannot find 'CharacterSet' in scope\n   \
    \ let closingBrackets = brackets.characters.split(separator: CharacterSet.closingParenthesis)\n\
    \                                                               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == '(' {\n            opening = true\n       \
    \ } else if c == ')' {\n            closing = true\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdk13ta0q.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpdk13ta0q.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0)\
    \ })\n    let closingBrackets = brackets.characters\n        .filter({ $0 != \"\
    (\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0) })\n    return\
    \ openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqk_vhyn7.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqk_vhyn7.swift:17:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n \
    \   while openingBracketsIndex < openingBrackets.count {\n        if openingBrackets[openingBracketsIndex]\
    \ != closingBrackets[closingBracketsIndex] {\n            return false\n     \
    \   }\n        openingBracketsIndex += 1\n        closingBracketsIndex += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmmcqoddd.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmmcqoddd.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmmcqoddd.swift:23:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketsIndex] != closingBrackets[closingBracketsIndex]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpmmcqoddd.swift:23:53: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if openingBrackets[openingBracketsIndex] != closingBrackets[closingBracketsIndex]\
    \ {\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n\
    \    while openingBracketsIndex < openingBrackets.count {\n        openingBracketsCount\
    \ += openingBrackets[openingBracketsIndex] == '(' ? 1 : -1\n        openingBracketsIndex\
    \ += 1\n    }\n\n    while closingBracketsIndex < closingBrackets.count {\n  \
    \      closingBracketsCount += closingBrackets[closingBracketsIndex] == ')' ?\
    \ 1 : -1\n        closingBracketsIndex += 1\n    }\n\n    return openingBracketsCount\
    \ == closingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9_xfc4qw.swift:21:74: error: single-quoted string literal found,\
    \ use '\"'\n        openingBracketsCount += openingBrackets[openingBracketsIndex]\
    \ == '(' ? 1 : -1\n                                                          \
    \               ^~~\n                                                        \
    \                 \"(\"\n/tmp/tmp9_xfc4qw.swift:26:74: error: single-quoted string\
    \ literal found, use '\"'\n        closingBracketsCount += closingBrackets[closingBracketsIndex]\
    \ == ')' ? 1 : -1\n                                                          \
    \               ^~~\n                                                        \
    \                 \")\"\n/tmp/tmp9_xfc4qw.swift:13:36: error: 'characters' is\
    \ unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9_xfc4qw.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9_xfc4qw.swift:21:33: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        openingBracketsCount\
    \ += openingBrackets[openingBracketsIndex] == '(' ? 1 : -1\n                 \
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp9_xfc4qw.swift:26:33: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        closingBracketsCount += closingBrackets[closingBracketsIndex]\
    \ == ')' ? 1 : -1\n                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been ex"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    if openingBrackets.first == \")\" {\n   \
    \     openingBrackets.removeFirst()\n        return correct_bracketing(String(brackets))\
    \ == true\n    }\n    if closingBrackets.first == \"(\" {\n        closingBrackets.removeLast()\n\
    \        return correct_bracketing(String(brackets)) == true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxt_jhrs0.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxt_jhrs0.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxt_jhrs0.swift:28:35: error: missing argument label\
    \ 'brackets:' in call\n        return correct_bracketing(String(brackets)) ==\
    \ true\n                                  ^\n                                \
    \  brackets: \n/tmp/tmpxt_jhrs0.swift:32:35: error: missing argument label 'brackets:'\
    \ in call\n        return correct_bracketing(String(brackets)) == true\n     \
    \                             ^\n                                  brackets: \n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter({\
    \ $0 == \"(\" || $0 == \")\" })\n        .map({ String($0) })\n    let closingBrackets\
    \ = brackets.characters\n        .filter({ $0 == \")\" || $0 == \"(\" })\n   \
    \     .map({ String($0) })\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1a4e0zvj.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1a4e0zvj.swift:16:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < closingBrackets.count {\n   \
    \     if closingBrackets[closingBracketIndex] == \")\" {\n            openingBracketIndex\
    \ -= 1\n        } else if closingBrackets[closingBracketIndex] != \"(\" {\n  \
    \          return false\n        }\n\n        closingBracketIndex += 1\n    }\n\
    \n    return openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb4ypi99i.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb4ypi99i.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb4ypi99i.swift:19:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb4ypi99i.swift:21:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb4ypi99i.swift:29:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if closingBrackets[closingBracketIndex]\
    \ == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpb4ypi99i.swift:31:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"}\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"}\":\n            openingBracketCount += 1\n        case\
    \ \"{\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"{\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"[\":\n        \
    \    openingBracketCount += 1\n        case \"{\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"{\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"{\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"{\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"{\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0h4eljy2.swift:116:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp0h4eljy2.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp0h4eljy2.swift:116:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmp0h4eljy2.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp0h4eljy2.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0h4eljy2.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0h4eljy2.swift:27:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"(\":\n   \
    \          ^~~\n/tmp/tmp0h4eljy2.swift:21:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"(\":\n             ^~~\n/tmp/tmp0h4eljy2.swift:31:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"[\":\n             ^~~\n/tmp/tmp0h4eljy2.swift:23:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"[\":\n\
    \             ^~~\n/tmp/tmp0h4eljy2.swift:33:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"(\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8zu5apxl.swift:119:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp8zu5apxl.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp8zu5apxl.swift:119:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmp8zu5apxl.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp8zu5apxl.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8zu5apxl.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8zu5apxl.swift:92:13: error: cannot find 'openingBracket'\
    \ in scope\n            openingBracket\n            ^~~~~~~~~~~~~~\n/tmp/tmp8zu5apxl.swift:27:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"(\":\n             ^~~\n/tmp/tmp8zu5apxl.swift:21:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"(\":\n\
    \             ^~~\n/tmp/tmp8zu5apxl.swift:31:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"[\":\n   \
    \          ^~~\n/tmp/tmp8zu5apxl.swift:23:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"[\":\n          "
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        openingBracketCount\
    \ += 1\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketCount += 1\n            if closingBracketCount\
    \ == openingBracketCount {\n                openingBracketIndex += 1\n       \
    \         closingBracketCount = 0\n            }\n        } else {\n         \
    \   return false\n        }\n    }\n\n    return openingBracketIndex == brackets.endIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiqefld0z.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiqefld0z.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiqefld0z.swift:24:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpiqefld0z.swift:26:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpiqefld0z.swift:29:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyxkoztat.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyxkoztat.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyxkoztat.swift:19:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpyxkoztat.swift:20:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw7pomgs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbw7pomgs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuxjdts_s.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpuxjdts_s.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketCount = 1\n    var closingBracketCount = 1\n    for char\
    \ in openingBrackets {\n        if char == closingBrackets[closingBracketCount\
    \ - 1] {\n            openingBracketCount++\n        } else {\n            openingBracketCount\
    \ = 0\n        }\n        if openingBracketCount > 1 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_f0f8o3_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_f0f8o3_.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_f0f8o3_.swift:20:20: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ char == closingBrackets[closingBracketCount - 1] {\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_f0f8o3_.swift:21:32:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  openingBracketCount++\n                               ^~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsa4ijl.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxrsa4ijl.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    guard openingBrackets.count == closingBrackets.count else {\n        return\
    \ false\n    }\n    for openingBracket in openingBrackets {\n        guard closingBrackets.contains(where:\
    \ { $0 == openingBracket }) else {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpogdvykv8.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpogdvykv8.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        openingBracketCount\
    \ += 1\n        openingBracketIndex = openingBracketIndex + 1\n\n        if openingBracket\
    \ == \"(\" {\n            openingBracketIndex = openingBracketIndex + 1\n    \
    \        openingBracketCount += 1\n        } else if openingBracket == \")\" {\n\
    \            openingBracketIndex = openingBracketIndex + 1\n            openingBracketCount\
    \ -= 1\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        let closingBracket = brackets[closingBracketIndex]\n        closingBracketCount\
    \ += 1\n        closingBracketIndex = closingBracketIndex + 1\n\n        if closingBracket\
    \ == \"(\" {\n            closingBracketIndex = closingBracketIndex + 1\n    \
    \        closingBracketCount += 1\n        } else if closingBracket == \")\" {\n\
    \            closingBracketIndex = closingBracketIndex + 1\n            closingBracketCount\
    \ -= 1\n        }\n    }\n\n    if openingBracketCount != closingBracketCount\
    \ {\n        return false\n    }\n\n    if openingBracketCount == 0 {\n      \
    \  return true\n    }\n\n    if openingBracketCount > 1 {\n        return false\n\
    \    }\n\n    if openingBracketIndex < brackets.startIndex {\n        return false\n\
    \    }\n\n    if closingBracketIndex < brackets.startIndex {\n        return false\n\
    \    }\n\n    return brackets[openingBracketIndex] == brackets[closingBracketIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw8yk4iyi.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8yk4iyi.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw8yk4iyi.swift:23:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpw8yk4iyi.swift:23:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpw8yk4iyi.swift:26:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpw8yk4iyi.swift:26:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmpw8yk4iyi.swift:29:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpw8yk4iyi.swift:29:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmpw8yk4iyi.swift:37:51: erro"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = false\n   \
    \ for c in brackets {\n        if c == \"(\" {\n            stack.append(c)\n\
    \            opening = true\n        } else if c == \")\" {\n            if opening\
    \ = true {\n                opening = false\n            } else {\n          \
    \      stack.removeLast()\n            }\n        } else {\n            return\
    \ false\n        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppxk0doci.swift:17:26: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            stack.append(c)\n          \
    \               ^\n/tmp/tmppxk0doci.swift:20:24: error: use of '=' in a boolean\
    \ context, did you mean '=='?\n            if opening = true {\n             \
    \  ~~~~~~~ ^ ~~~~\n                       ==\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ == '(' {\n            openingBracketsIndex += 1\n            if openingBracketsIndex\
    \ < openingBracketsCount {\n                openingBracketsIndex += 1\n      \
    \      }\n        }\n    }\n\n    while closingBracketsIndex < closingBracketsCount\
    \ {\n        closingBracketsIndex += 1\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsIndex += 1\n            if closingBracketsIndex\
    \ < closingBracketsCount {\n                closingBracketsIndex += 1\n      \
    \      }\n        }\n    }\n\n    return openingBracketsIndex == closingBracketsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy5wq4tlf.swift:22:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmpy5wq4tlf.swift:32:53: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                    ^~~\n        \
    \                                            \")\"\n/tmp/tmpy5wq4tlf.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpy5wq4tlf.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy5wq4tlf.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpy5wq4tlf.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpy5wq4tlf.swift:22:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: no"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    if openingBracketsCount\
    \ == 0 {\n        return true\n    }\n\n    if openingBracketsCount > closingBracketsCount\
    \ {\n        return false\n    }\n\n    for openingBracket in 0..<openingBracketsCount\
    \ {\n        if openingBrackets[openingBracket] != closingBrackets[openingBracket]\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqny43ssf.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqny43ssf.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqny43ssf.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqny43ssf.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqny43ssf.swift:27:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracket] != closingBrackets[openingBracket]\
    \ {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpqny43ssf.swift:27:47: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracket] != closingBrackets[openingBracket]\
    \ {\n                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0b75w6v_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0b75w6v_.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for index in 0..<openingBrackets.count {\n        if openingBrackets[index]\
    \ != closingBrackets[index] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe8o989r5.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe8o989r5.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe8o989r5.swift:21:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] != closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe8o989r5.swift:21:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] != closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsa4ijl.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxrsa4ijl.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        if opening != brackets[index]\
    \ {\n            return false\n        }\n        opening = brackets[index]\n\
    \    }\n    return opening == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpse2ni6n3.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpse2ni6n3.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpse2ni6n3.swift:16:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening != brackets[index] {\n     \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpse2ni6n3.swift:19:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        opening = brackets[index]\n                  ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpse2ni6n3.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets[1]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n    }\n    while closingBracketIndex\
    \ < closingBrackets.count {\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n    if openingBracketIndex == closingBracketIndex {\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfepmc7el.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfepmc7el.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfepmc7el.swift:18:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfepmc7el.swift:24:15:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        guard closingBrackets[closingBracketIndex]\
    \ == \")\" else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfepmc7el.swift:13:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpfepmc7el.swift:14:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] == '(' {\n            openingBracketCount\
    \ += 1\n        }\n        if openingBrackets[openingBracketIndex] == '[' {\n\
    \            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '{' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '>' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '!' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '?' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '.' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '$' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '%' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '^' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '&' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '*' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '+' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '-' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '.' {\n            openingBracketCount += 1\n        }\n        if openingBrackets[openingBracketIndex]\
    \ == '/' {\n            openingBracketCount += 1\n        }\n        if openingBracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps5q8ta2d.swift:21:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == '(' {\n       \
    \                                            ^~~\n                           \
    \                        \"(\"\n/tmp/tmps5q8ta2d.swift:24:52: error: single-quoted\
    \ string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '[' {\n                                                   ^~~\n         \
    \                                          \"[\"\n/tmp/tmps5q8ta2d.swift:27:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '{' {\n                                                   ^~~\n         \
    \                                          \"{\"\n/tmp/tmps5q8ta2d.swift:30:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '<' {\n                                                   ^~~\n         \
    \                                          \"<\"\n/tmp/tmps5q8ta2d.swift:33:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '>' {\n                                                   ^~~\n         \
    \                                          \">\"\n/tmp/tmps5q8ta2d.swift:36:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '!' {\n                                                   ^~~\n         \
    \                                          \"!\"\n/tmp/tmps5q8ta2d.swift:39:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '?' {\n                                                   ^~~\n         \
    \                                          \"?\"\n/tmp/tmps5q8ta2d.swift:42:52:\
    \ error: single-quoted string literal found, use '\"'\n        if openingBrackets[openingBracketIndex]\
    \ == '.' {\n                                                   ^~~\n         \
    \                                          \".\"\n/tmp/tmps5q8ta2d.swift:45:52:\
    \ error: single-quoted string litera"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_brackets_index\
    \ = brackets.startIndex\n    var closing_brackets_index = brackets.startIndex\n\
    \    var opening_brackets_end = brackets.endIndex\n    var closing_brackets_end\
    \ = brackets.endIndex\n    var opening_brackets_last_index = opening_brackets_index\n\
    \    var closing_brackets_last_index = closing_brackets_index\n    var opening_brackets_last_char\
    \ = opening_brackets[opening_brackets_last_index]\n    var closing_brackets_last_char\
    \ = closing_brackets[closing_brackets_last_index]\n    var opening_brackets_last_char_next\
    \ = opening_brackets[opening_brackets_last_index + 1]\n    var closing_brackets_last_char_next\
    \ = closing_brackets[closing_brackets_last_index + 1]\n    var opening_brackets_last_char_prev\
    \ = opening_brackets[opening_brackets_last_index - 1]\n    var closing_brackets_last_char_prev\
    \ = closing_brackets[closing_brackets_last_index - 1]\n\n    while opening_brackets_index\
    \ < opening_brackets_count {\n        opening_brackets_last_index = opening_brackets_index\n\
    \        opening_brackets_last_char = opening_brackets[opening_brackets_last_index]\n\
    \        opening_brackets_last_char_next = opening_brackets[opening_brackets_last_index\
    \ + 1]\n        opening_brackets_last_char_prev = opening_brackets[opening_brackets_last_index\
    \ - 1]\n\n        if opening_brackets_last_char == opening_brackets_last_char_prev\
    \ && opening_brackets_last_char == opening_brackets_last_char_next {\n       \
    \     opening_brackets_index++\n            continue\n        }\n\n        if\
    \ opening_brackets_last_char == opening_brackets_last_char_prev {\n          \
    \  opening_brackets_index++\n            continue\n        }\n\n        if opening_brackets_last_char\
    \ == opening_brackets_last_char_next {\n            opening_brackets_index++\n\
    \            continue\n        }\n\n        if opening_brackets_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbonqcwg1.swift:51:29: error: expected '{' after 'if' condition\n\
    \        if opening_brackets_\n                            ^\n/tmp/tmpbonqcwg1.swift:78:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpbonqcwg1.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpbonqcwg1.swift:13:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    var opening_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbonqcwg1.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbonqcwg1.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpbonqcwg1.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbonqcwg1.swift:25:60:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n    var opening_brackets_last_char_next = opening_brackets[opening_brackets_last_index\
    \ + 1]\n                                          "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = brackets.characters\n    var opening = false\n\
    \    var closing = false\n    var openingCount = 0\n    var closingCount = 0\n\
    \    for _ in 0..<brackets.characters.count {\n        if opening {\n        \
    \    if stack[openingCount] == '(' {\n                openingCount += 1\n    \
    \        } else if stack[openingCount] == '[' {\n                openingCount\
    \ += 1\n            } else if stack[openingCount] == '{' {\n                openingCount\
    \ += 1\n            } else if stack[openingCount] == '<' {\n                openingCount\
    \ += 1\n            } else if stack[openingCount] == '>' {\n                openingCount\
    \ += 1\n            } else if stack[openingCount] == '\"' {\n                openingCount\
    \ += 1\n            } else if stack[openingCount] == '\\'' {\n               \
    \ openingCount += 1\n            } else if stack[openingCount] == '`' {\n    \
    \            openingCount += 1\n            } else if stack[openingCount] == '-'\
    \ {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '.' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '!' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '?' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '-' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '+' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '*' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '/' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '%' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '&' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '|' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '=' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '+' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '-' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '.' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '!' {\n                openingCount += 1\n            } else if stack[openingCount]\
    \ == '?' {\n                openingCount += 1\n            \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt54f6_zx.swift:20:39: error: single-quoted string literal found,\
    \ use '\"'\n            if stack[openingCount] == '(' {\n                    \
    \                  ^~~\n                                      \"(\"\n/tmp/tmpt54f6_zx.swift:22:46:\
    \ error: single-quoted string literal found, use '\"'\n            } else if stack[openingCount]\
    \ == '[' {\n                                             ^~~\n               \
    \                              \"[\"\n/tmp/tmpt54f6_zx.swift:24:46: error: single-quoted\
    \ string literal found, use '\"'\n            } else if stack[openingCount] ==\
    \ '{' {\n                                             ^~~\n                  \
    \                           \"{\"\n/tmp/tmpt54f6_zx.swift:26:46: error: single-quoted\
    \ string literal found, use '\"'\n            } else if stack[openingCount] ==\
    \ '<' {\n                                             ^~~\n                  \
    \                           \"<\"\n/tmp/tmpt54f6_zx.swift:28:46: error: single-quoted\
    \ string literal found, use '\"'\n            } else if stack[openingCount] ==\
    \ '>' {\n                                             ^~~\n                  \
    \                           \">\"\n/tmp/tmpt54f6_zx.swift:30:46: error: single-quoted\
    \ string literal found, use '\"'\n            } else if stack[openingCount] ==\
    \ '\"' {\n                                             ^~~\n                 \
    \                            \"\\\"\"\n/tmp/tmpt54f6_zx.swift:32:46: error: single-quoted\
    \ string literal found, use '\"'\n            } else if stack[openingCount] ==\
    \ '\\'' {\n                                             ^~~~\n               \
    \                              \"'\"\n/tmp/tmpt54f6_zx.swift:34:46: error: single-quoted\
    \ string literal found, use '\"'\n            } else if stack[openingCount] ==\
    \ '`' {\n                                             ^~~\n                  \
    \                           \"`\"\n/tmp/tmpt54f6_zx.swift:36:46: error: single-quoted\
    \ string literal found, use '\"'\n            } else if stack[openingCount] ==\
    \ '-' {\n                                             ^~~\n                  \
    \                           "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = brackets.characters\n    var opening = true\n\
    \    var closing = true\n    for c in brackets {\n        if opening {\n     \
    \       if c == \"(\" {\n                stack.removeLast()\n                opening\
    \ = false\n            } else if c == \")\" {\n                opening = true\n\
    \            } else if c == \"{\" {\n                stack.removeLast()\n    \
    \            opening = false\n                closing = false\n            } else\
    \ if c == \"}\" {\n                opening = true\n                closing = false\n\
    \            } else if c == \"[\" {\n                stack.removeLast()\n    \
    \            opening = false\n                closing = false\n            } else\
    \ if c == \"]\" {\n                opening = true\n                closing = false\n\
    \            } else if c == \"<\" {\n                stack.removeLast()\n    \
    \            opening = false\n                closing = false\n            } else\
    \ if c == \">\" {\n                opening = true\n                closing = false\n\
    \            } else if c == \"/\" {\n                stack.removeLast()\n    \
    \            opening = false\n                closing = false\n            } else\
    \ if c == \"\\\\\" {\n                stack.removeLast()\n                opening\
    \ = false\n                closing = false\n            } else if c == \"^\" {\n\
    \                stack.removeLast()\n                opening = false\n       \
    \         closing = false\n            } else if c == \"~\" {\n              \
    \  stack.removeLast()\n                opening = false\n                closing\
    \ = false\n            } else if c == \"|\" {\n                stack.removeLast()\n\
    \                opening = false\n                closing = false\n          \
    \  } else if c == \"?\" {\n                stack.removeLast()\n              \
    \  opening = false\n                closing = false\n            } else if c ==\
    \ \"*\" {\n                stack.removeLast()\n                opening = false\n\
    \                closing = false\n            } else if c == \"+\" {\n       \
    \         stack.removeLast()\n                opening = false\n              \
    \  closing = false\n            } else if c == \"=\" {\n                stack.removeLast()\n\
    \                opening = false\n                closing = false\n          \
    \  } else if c == \"!\" {\n                stack.removeLast()\n              \
    \  opening = false\n                closing = false\n            } else if c ==\
    \ \"%\" {\n                stack.removeLast()\n                opening = false\n\
    \                closing = false\n            } else if c == \"$\" {\n       \
    \         stack.removeLast()\n                opening = false\n              \
    \  closing = false\n            } else if c == \"&\" {\n                stack.removeLast()\n\
    \                opening = false\n                closing = false\n          \
    \  } else if c == \"|\" {\n                stack.removeLast()\n              \
    \  opening = false\n                closing = false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7h9pmdce.swift:126:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp7h9pmdce.swift:17:20:\
    \ note: to match this opening '{'\n        if opening {\n                   ^\n\
    /tmp/tmp7h9pmdce.swift:126:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp7h9pmdce.swift:16:23:\
    \ note: to match this opening '{'\n    for c in brackets {\n                 \
    \     ^\n/tmp/tmp7h9pmdce.swift:126:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp7h9pmdce.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmp7h9pmdce.swift:13:26:\
    \ error: 'characters' is unavailable: Please use String directly\n    var stack\
    \ = brackets.characters\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7h9pmdce.swift:103:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp7h9pmdce.swift:15:9:\
    \ warning: variable 'closing' was written to, but never read\n    var closing\
    \ = true\n        ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == ')' {\n            closingBracketIndex += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '(' { // openingBracketIndex is now pointing to the closing bracket\n   \
    \         openingBracketIndex += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '[' {\n            closingBracketIndex += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ == '{' {\n            openingBracketIndex += 1\n        } else {\n         \
    \   return false\n        }\n    }\n\n    while closingBracketIndex < closingBrackets.count\
    \ {\n        if closingBrackets[closingBracketIndex] == '(' {\n            openingBracketIndex\
    \ += 1\n        } else if closingBrackets[closingBracketIndex] == '[' {\n    \
    \        closingBracketIndex += 1\n        } else if closingBrackets[closingBracketIndex]\
    \ == '{' {\n            openingBracketIndex += 1\n        } else if closingBrackets[closingBracketIndex]\
    \ == ')' {\n            closingBracketIndex += 1\n        } else {\n         \
    \   return false\n        }\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5rt2igs2.swift:19:52: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketIndex] == ')' {\n       \
    \                                            ^~~\n                           \
    \                        \")\"\n/tmp/tmp5rt2igs2.swift:21:59: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '(' { // openingBracketIndex is now pointing to the closing bracket\n   \
    \                                                       ^~~\n                \
    \                                          \"(\"\n/tmp/tmp5rt2igs2.swift:23:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '[' {\n                                                          ^~~\n  \
    \                                                        \"[\"\n/tmp/tmp5rt2igs2.swift:25:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketIndex]\
    \ == '{' {\n                                                          ^~~\n  \
    \                                                        \"{\"\n/tmp/tmp5rt2igs2.swift:33:52:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketIndex]\
    \ == '(' {\n                                                   ^~~\n         \
    \                                          \"(\"\n/tmp/tmp5rt2igs2.swift:35:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == '[' {\n                                                          ^~~\n  \
    \                                                        \"[\"\n/tmp/tmp5rt2igs2.swift:37:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == '{' {\n                                                          ^~~\n  \
    \                                                        \"{\"\n/tmp/tmp5rt2igs2.swift:39:59:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketIndex]\
    \ == ')' {\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for i in 0..<openingBracketCount {\n       \
    \ let openingBracket = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n\
    \        if openingBracket != closingBracket {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuv_3dv66.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpuv_3dv66.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n\n    for opening_bracket\
    \ in opening_brackets {\n        if opening_brackets_count > 1 {\n           \
    \ if opening_brackets_count == closing_brackets_count {\n                opening_brackets_count\
    \ -= 1\n                closing_brackets_count -= 1\n            } else {\n  \
    \              opening_brackets_count -= 1\n                closing_brackets_count\
    \ += 1\n            }\n        } else {\n            opening_brackets_count -=\
    \ 1\n        }\n    }\n\n    return opening_brackets_count == closing_brackets_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2e8e2zb3.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2e8e2zb3.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2e8e2zb3.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2e8e2zb3.swift:16:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2e8e2zb3.swift:13:9:\
    \ warning: variable 'opening_brackets' was never mutated; consider changing to\
    \ 'let' constant\n    var opening_brackets = brackets.characters\n    ~~~ ^\n\
    \    let\n/tmp/tmp2e8e2zb3.swift:14:9: warning: initialization of variable 'closing_brackets'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closing_brackets = brackets.characters\n    ~~~~^~~~~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmp2e8e2zb3.swift:18:9: warning: immutable value 'opening_bracket' was\
    \ never used; consider replacing with '_' or removing it\n    for opening_bracket\
    \ in opening_brackets {\n        ^~~~~~~~~~~~~~~\n        _\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_bracket = brackets.characters[0]\n  \
    \  var closing_bracket = brackets.characters[brackets.characters.count - 1]\n\
    \    for index in 0..<brackets.characters.count {\n        if opening_bracket\
    \ == closing_bracket {\n            opening_brackets.removeAtIndex(index)\n  \
    \          closing_brackets.removeAtIndex(index)\n        }\n    }\n    return\
    \ opening_brackets.count == 0 && closing_brackets.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpggpgj3a_.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpggpgj3a_.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpggpgj3a_.swift:15:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var opening_bracket\
    \ = brackets.characters[0]\n                          ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpggpgj3a_.swift:15:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_bracket\
    \ = brackets.characters[0]\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpggpgj3a_.swift:16:27: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing_bracket = brackets.characters[brackets.characters.count - 1]\n\
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpggpgj3a_.swift:16:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var closing_bracket\
    \ = brackets.characters[brackets.characters.count - 1]\n                     \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    p"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"(\":\n            openingBracketCount += 1\n        case\
    \ \"}\":\n            openingBracketCount += 1\n        case \"(\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"(\":\n            openingBracketCount += 1\n        case \"}\":\n        \
    \    openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9_v9zwbp.swift:116:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp9_v9zwbp.swift:19:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmp9_v9zwbp.swift:116:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmp9_v9zwbp.swift:12:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmp9_v9zwbp.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9_v9zwbp.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9_v9zwbp.swift:27:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"(\":\n   \
    \          ^~~\n/tmp/tmp9_v9zwbp.swift:21:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"(\":\n             ^~~\n/tmp/tmp9_v9zwbp.swift:31:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"[\":\n             ^~~\n/tmp/tmp9_v9zwbp.swift:23:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"[\":\n\
    \             ^~~\n/tmp/tmp9_v9zwbp.swift:33:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw7pomgs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbw7pomgs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[1]\n\
    \    for index in 1..<brackets.count {\n        opening = brackets[index]\n  \
    \      closing = brackets[brackets.count - index - 1]\n    }\n    return opening\
    \ == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7e3_hez.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpe7e3_hez.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[1]\n                  ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe7e3_hez.swift:16:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        opening = brackets[index]\n           \
    \       ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpe7e3_hez.swift:17:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        closing\
    \ = brackets[brackets.count - index - 1]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    guard openingBrackets.count == closingBrackets.count else {\n        return\
    \ false\n    }\n    for openingBracket in openingBrackets {\n        guard closingBrackets.contains(openingBracket)\
    \ else {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmu6o1fyy.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmu6o1fyy.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = false\n   \
    \ for ch in brackets {\n        if ch == '(' {\n            opening = true\n \
    \       } else if ch == ')' {\n            opening = false\n        } else if\
    \ opening {\n            stack.append(String(ch))\n        }\n    }\n    return\
    \ stack.count == brackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt7cs75fp.swift:16:18: error: single-quoted string literal found,\
    \ use '\"'\n        if ch == '(' {\n                 ^~~\n                 \"\
    (\"\n/tmp/tmpt7cs75fp.swift:18:25: error: single-quoted string literal found,\
    \ use '\"'\n        } else if ch == ')' {\n                        ^~~\n     \
    \                   \")\"\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = false\n   \
    \ var closing = false\n    var openingBracket = \"\"\n    var closingBracket =\
    \ \"\"\n    for c in brackets {\n        if c == \"(\" {\n            opening\
    \ = true\n            openingBracket = c\n        } else if c == \")\" {\n   \
    \         closing = true\n            closingBracket = c\n        } else if opening\
    \ {\n            stack.append(c)\n        } else if closing {\n            if\
    \ stack.isEmpty {\n                return false\n            }\n            opening\
    \ = false\n            closing = false\n            openingBracket = \"\"\n  \
    \          closingBracket = \"\"\n            stack.removeLast()\n        }\n\
    \    }\n    return !stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7gtgg31z.swift:21:30: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            openingBracket = c\n                         \
    \    ^\n/tmp/tmp7gtgg31z.swift:24:30: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closingBracket = c\n                         \
    \    ^\n/tmp/tmp7gtgg31z.swift:26:26: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            stack.append(c)\n          \
    \               ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      if let closingBracket = closingBrackets.first {\n            if openingBracket\
    \ != closingBracket {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiow7v_12.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpiow7v_12.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(String(openingBrackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpizzrdtj3.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpizzrdtj3.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpizzrdtj3.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] == \"\
    )\" {\n            closingBracketIndex = openingBracketIndex + 1\n        } else\
    \ {\n            openingBracketIndex += 1\n        }\n    }\n\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        if closingBrackets[closingBracketIndex] == \"\
    )\" {\n            openingBracketIndex = closingBracketIndex + 1\n        } else\
    \ {\n            closingBracketIndex += 1\n        }\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp302mgvek.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp302mgvek.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp302mgvek.swift:20:55: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmp302mgvek.swift:20:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            closingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmp302mgvek.swift:22:33: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp302mgvek.swift:28:55: error:\
    \ binary operator '+' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex = closingBracketIndex + 1\n         \
    \                         ~~~~~~~~~~~~~~~~~~~ ^ ~\n/tmp/tmp302mgvek.swift:28:55:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Int, Int)\n            openingBracketIndex = closingBracketIndex + 1\n    \
    \                                                  ^\n/tmp/tmp302mgvek.swift:30:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0)\
    \ })\n    let closingBrackets = brackets.characters\n        .filter({ $0 != \"\
    (\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0) })\n    return\
    \ openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqk_vhyn7.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqk_vhyn7.swift:17:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch brackets[openingBracketIndex] {\n        case \"(\":\n   \
    \         openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\":\n            openingBracketCount++\n\
    \        case \"{\":\n            openingBracketCount++\n        case \"(\":\n\
    \            openingBracketCount++\n        case \"[\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp67ozw6_e.swift:90:17: error: expected ':' after 'case'\n      \
    \  case \"[\"\n                ^\n/tmp/tmp67ozw6_e.swift:117:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp67ozw6_e.swift:20:51: note: to match this opening '{'\n    while\
    \ openingBracketIndex < brackets.endIndex {\n                                \
    \                  ^\n/tmp/tmp67ozw6_e.swift:117:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmp67ozw6_e.swift:12:51: note: to match this opening '{'\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n                                                  ^\n/tmp/tmp67ozw6_e.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp67ozw6_e.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp67ozw6_e.swift:23:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmp67ozw6_e.swift:25:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n   \
    \                            ^~\n/tmp/tmp67ozw6_e.swift:27:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketCount++\n\
    \                               ^~\n/tmp/tmp67ozw6_e.swift:29:32: error: cannot\
    \ find operator '++' in scope; did you mean "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoo6uzffv.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoo6uzffv.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoo6uzffv.swift:21:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpoo6uzffv.swift:22:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0b75w6v_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0b75w6v_.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        if openingBracketIndex >= brackets.endIndex {\n            return\
    \ true\n        }\n        guard openingBrackets[openingBracketIndex] == ')' else\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       if openingBracketIndex >= brackets.endIndex {\n            return true\n\
    \        }\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \            return false\n        }\n        openingBracketIndex += 1\n     \
    \   if openingBracketIndex >= brackets.endIndex {\n            return true\n \
    \       }\n        guard openingBrackets[openingBracketIndex] == ')' else {\n\
    \            return false\n        }\n        openingBracketIndex += 1\n     \
    \   if openingBracketIndex >= brackets.endIndex {\n            return true\n \
    \       }\n        guard openingBrackets[openingBracketIndex] == ')' else {\n\
    \            return false\n        }\n        openingBracketIndex += 1\n     \
    \   if openingBracketIndex >= brackets.endIndex {\n            return true\n \
    \       }\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \            return false\n        }\n        openingBracketIndex += 1\n     \
    \   if openingBracketIndex >= brackets.endIndex {\n            return true\n \
    \       }\n        guard openingBrackets[openingBracketIndex] == ')' else {\n\
    \            return false\n        }\n        openingBracketIndex += 1\n     \
    \   if openingBracketIndex >= brackets.endIndex {\n            return true\n \
    \       }\n        guard openingBrackets[openingBracketIndex] == ')' else {\n\
    \            return false\n        }\n        openingBracketIndex += 1\n     \
    \   if openingBracketIndex >= brackets.endIndex {\n            return true\n \
    \       }\n        guard openingBrackets[openingBracketIndex] == ')' else {\n\
    \            return false\n        }\n        openingBracketIndex += 1\n     \
    \   if openingBracketIndex >= brackets.endIndex {\n            return true\n \
    \       }\n        guard openingBrackets[openingBracketIndex] == ')' else {\n\
    \            return false\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe26l4rg5.swift:18:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmpe26l4rg5.swift:25:55: error:\
    \ single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpe26l4rg5.swift:32:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n                                                      ^~~\n \
    \                                                     \"(\"\n/tmp/tmpe26l4rg5.swift:39:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpe26l4rg5.swift:46:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpe26l4rg5.swift:53:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n                                                      ^~~\n \
    \                                                     \"(\"\n/tmp/tmpe26l4rg5.swift:60:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpe26l4rg5.swift:67:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \         "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = opening[openingIndex]\n    var closingChar\
    \ = closing[closingIndex]\n    while openingIndex < openingCount {\n        openingIndex++\n\
    \        openingChar = opening[openingIndex]\n        if openingChar == \")\"\
    \ {\n            closingIndex++\n            closingChar = closing[closingIndex]\n\
    \            if closingChar == \"(\" {\n                openingIndex++\n     \
    \           openingChar = opening[openingIndex]\n            }\n        }\n  \
    \  }\n    return openingIndex == openingCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_um44f90.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp_um44f90.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_um44f90.swift:15:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp_um44f90.swift:16:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_um44f90.swift:19:23: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var openingChar\
    \ = opening[openingIndex]\n                      ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_um44f90.swift:20:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var closingChar = closing[closingIndex]\n \
    \                     ^~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp_um44f90.swift:22:21: error: cannot\
    \ find operator '++' in scope; did you mean '+"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBrackets.count {\n        if openingBrackets[openingBracketIndex]\
    \ == \")\" {\n            closingBracketIndex = openingBracketIndex\n        \
    \    openingBracketIndex += 1\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n            return false\n        }\n\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < closingBrackets.count {\n   \
    \     if closingBrackets[closingBracketIndex] == \")\" {\n            openingBracketIndex\
    \ = closingBracketIndex\n            closingBracketIndex += 1\n        } else\
    \ if closingBrackets[closingBracketIndex] != \"(\" {\n            return false\n\
    \        }\n\n        closingBracketIndex += 1\n    }\n\n    if openingBracketIndex\
    \ != closingBracketIndex {\n        return false\n    }\n\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1pjv78fq.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1pjv78fq.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1pjv78fq.swift:19:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketIndex] == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1pjv78fq.swift:22:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if openingBrackets[openingBracketIndex]\
    \ != \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1pjv78fq.swift:30:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if closingBrackets[closingBracketIndex]\
    \ == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1pjv78fq.swift:33:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if closingBrackets[closingBracketIndex]\
    \ != \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter\
    \ {\n            !brackets.isEmpty && brackets.startIndex.advancedBy($0) != brackets.endIndex\n\
    \        }\n        .map {\n            String($0)\n        }\n        .sorted()\n\
    \n    let closingBrackets = brackets.characters\n        .filter {\n         \
    \   !brackets.isEmpty && brackets.startIndex.advancedBy($0) != brackets.endIndex\n\
    \        }\n        .map {\n            String($0)\n        }\n        .sorted()\n\
    \n    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8dznl5xy.swift:15:54: error: value of type 'String.Index' has no\
    \ member 'advancedBy'\n            !brackets.isEmpty && brackets.startIndex.advancedBy($0)\
    \ != brackets.endIndex\n                                 ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmp8dznl5xy.swift:24:54: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n            !brackets.isEmpty && brackets.startIndex.advancedBy($0)\
    \ != brackets.endIndex\n                                 ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = false\n   \
    \ for ch in brackets {\n        if ch == \"(\" {\n            stack.append(ch)\n\
    \            opening = true\n        } else if ch == \")\" {\n            if opening\
    \ = true {\n                opening = false\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\
    \ else {\n            return false\n        }\n    }\n    return stack.count ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm58lyxh_.swift:17:26: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            stack.append(ch)\n         \
    \                ^\n/tmp/tmpm58lyxh_.swift:20:24: error: use of '=' in a boolean\
    \ context, did you mean '=='?\n            if opening = true {\n             \
    \  ~~~~~~~ ^ ~~~~\n                       ==\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsa4ijl.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxrsa4ijl.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        let closingBracket\
    \ = closingBrackets.firstIndex(of: openingBracket)\n        if closingBracket\
    \ == nil {\n            return false\n        }\n        if openingBracket !=\
    \ closingBracket {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp07z_ei3_.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp07z_ei3_.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = brackets.characters\n    var opening = false\n\
    \    var closing = false\n    var openBracket: Character?\n    var closeBracket:\
    \ Character?\n    for char in stack {\n        switch char {\n        case '(':\n\
    \            opening = true\n            openBracket = char\n        case ')':\n\
    \            closing = true\n            closeBracket = char\n        default:\n\
    \            if opening {\n                opening = false\n                openBracket\
    \ = nil\n            }\n            if closing {\n                closing = false\n\
    \                closeBracket = nil\n            }\n        }\n    }\n    return\
    \ opening == closing && openBracket != nil && closeBracket != nil\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptdy07bom.swift:20:14: error: single-quoted string literal found,\
    \ use '\"'\n        case '(':\n             ^~~\n             \"(\"\n/tmp/tmptdy07bom.swift:23:14:\
    \ error: single-quoted string literal found, use '\"'\n        case ')':\n   \
    \          ^~~\n             \")\"\n/tmp/tmptdy07bom.swift:13:26: error: 'characters'\
    \ is unavailable: Please use String directly\n    var stack = brackets.characters\n\
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmptdy07bom.swift:13:9: warning: variable 'stack' was never\
    \ mutated; consider changing to 'let' constant\n    var stack = brackets.characters\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        openingBracketCount\
    \ += 1\n\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketCount += 1\n            if closingBracketCount\
    \ > 1 {\n                closingBracketIndex += 1\n                closingBracketCount\
    \ = 0\n            }\n        } else {\n            openingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n            openingBracketCount = 0\n \
    \           closingBracketCount = 0\n        }\n    }\n\n    return openingBracketIndex\
    \ == brackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp34sfj8wk.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp34sfj8wk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp34sfj8wk.swift:25:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp34sfj8wk.swift:27:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp34sfj8wk.swift:30:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                closingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp34sfj8wk.swift:34:33:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp34sfj8wk.swift:35:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      let closingBracket = closingBrackets.first(where: { $0 == openingBracket\
    \ })\n        if closingBracket == nil {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuu9vjjwa.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpuu9vjjwa.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ let closingBracket = closingBrackets.firstIndex(of: openingBracket) {\n    \
    \        closingBrackets.remove(at: closingBracket)\n        }\n    }\n    \n\
    \    return openingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgjy8m4zd.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpgjy8m4zd.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters.split{$0 ==\
    \ \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0b75w6v_.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp0b75w6v_.swift:14:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    let closingBrackets\
    \ = brackets.characters.split{$0 == \"(\"}.map(String.init)\n                \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824907
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbw7pomgs.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbw7pomgs.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n    let closingBrackets =\
    \ brackets.characters\n        .filter({ $0 != \"(\" })\n        .filter({ $0\
    \ != \")\" })\n    return openingBrackets.count == closingBrackets.count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ft2ibtx.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3ft2ibtx.swift:16:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = brackets[openingBracketIndex]\n\
    \        let closingBracket = brackets[closingBracketIndex]\n\n        if openingBracket\
    \ == \"(\" {\n            openingBracketIndex += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        }\n\n        if openingBracketIndex >= brackets.endIndex {\n \
    \           break\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if closingBracket == \"(\" {\n  \
    \          closingBracketIndex += 1\n        } else if closingBracket == \")\"\
    \ {\n            closingBracketIndex += 1\n            openingBracketIndex +=\
    \ 1\n        } else {\n            closingBracketIndex += 1\n            openingBracketIndex\
    \ += 1\n        }\n\n        if closingBracketIndex >= brackets.endIndex {\n \
    \           break\n        }\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb89hsgrk.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb89hsgrk.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpb89hsgrk.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpb89hsgrk.swift:25:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpb89hsgrk.swift:26:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpb89hsgrk.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpb89hsgrk.swift:29:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpb89hsgrk.swift:42:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpb89hsgrk.swift:44:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpb89hsgrk.swift:45:33: error:\
    \ binary operator '+='"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n    var openingBracketIndex\
    \ = 0\n    var closingBracketIndex = 0\n    while openingBracketIndex < openingBracketCount\
    \ {\n        openingBracketIndex = openingBrackets.indexOf('(', openingBracketIndex)\n\
    \        if openingBracketIndex == NSNotFound {\n            return false\n  \
    \      }\n        openingBracketCount = openingBrackets.count\n        closingBracketIndex\
    \ = openingBrackets.indexOf(')', openingBracketIndex)\n        if closingBracketIndex\
    \ == NSNotFound {\n            return false\n        }\n        openingBrackets[openingBracketIndex]\
    \ = '('\n        closingBrackets[closingBracketIndex] = ')'\n        openingBracketIndex++\n\
    \        closingBracketIndex++\n    }\n    return openingBracketIndex == openingBracketCount\
    \ && closingBracketIndex == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1umzabry.swift:20:55: error: single-quoted string literal found,\
    \ use '\"'\n        openingBracketIndex = openingBrackets.indexOf('(', openingBracketIndex)\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmp1umzabry.swift:25:55: error:\
    \ single-quoted string literal found, use '\"'\n        closingBracketIndex =\
    \ openingBrackets.indexOf(')', openingBracketIndex)\n                        \
    \                              ^~~\n                                         \
    \             \")\"\n/tmp/tmp1umzabry.swift:29:48: error: single-quoted string\
    \ literal found, use '\"'\n        openingBrackets[openingBracketIndex] = '('\n\
    \                                               ^~~\n                        \
    \                       \"(\"\n/tmp/tmp1umzabry.swift:30:48: error: single-quoted\
    \ string literal found, use '\"'\n        closingBrackets[closingBracketIndex]\
    \ = ')'\n                                               ^~~\n                \
    \                               \")\"\n/tmp/tmp1umzabry.swift:13:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1umzabry.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1umzabry.swift:15:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1umzabry.swift:16:40: error: 'characters' is unavailable:\
    \ Please "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_brackets_index\
    \ = 0\n    var closing_brackets_index = 0\n    var opening_brackets_index_count\
    \ = 0\n    var closing_brackets_index_count = 0\n\n    while opening_brackets_index\
    \ < opening_brackets_count {\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index_count += 1\n        }\n       \
    \ if opening_brackets[opening_brackets_index] == ')' {\n            opening_brackets_index_count\
    \ -= 1\n        }\n        if opening_brackets_index_count == 0 {\n          \
    \  opening_brackets_index++\n            opening_brackets_index_count = 0\n  \
    \      }\n    }\n\n    while closing_brackets_index < closing_brackets_count {\n\
    \        if closing_brackets[closing_brackets_index] == '(' {\n            closing_brackets_index_count\
    \ += 1\n        }\n        if closing_brackets[closing_brackets_index] == ')'\
    \ {\n            closing_brackets_index_count -= 1\n        }\n        if closing_brackets_index_count\
    \ == 0 {\n            closing_brackets_index++\n            closing_brackets_index_count\
    \ = 0\n        }\n    }\n\n    return opening_brackets_count == 0 && closing_brackets_count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqaod6hya.swift:23:56: error: single-quoted string literal found,\
    \ use '\"'\n        if opening_brackets[opening_brackets_index] == '(' {\n   \
    \                                                    ^~~\n                   \
    \                                    \"(\"\n/tmp/tmpqaod6hya.swift:26:56: error:\
    \ single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == ')' {\n                                                       ^~~\n     \
    \                                                  \")\"\n/tmp/tmpqaod6hya.swift:36:56:\
    \ error: single-quoted string literal found, use '\"'\n        if closing_brackets[closing_brackets_index]\
    \ == '(' {\n                                                       ^~~\n     \
    \                                                  \"(\"\n/tmp/tmpqaod6hya.swift:39:56:\
    \ error: single-quoted string literal found, use '\"'\n        if closing_brackets[closing_brackets_index]\
    \ == ')' {\n                                                       ^~~\n     \
    \                                                  \")\"\n/tmp/tmpqaod6hya.swift:13:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_brackets\
    \ = brackets.characters\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpqaod6hya.swift:14:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqaod6hya.swift:15:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpqaod6hya.swift:16:43: error: 'charact"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n\
    \    if opening_brackets.isEmpty {\n        return false\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return true\n    }\n    if opening_brackets.first != closing_brackets.first\
    \ {\n        return false\n    }\n    return correct_bracketing(opening_brackets.dropFirst())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxilwxcvx.swift:13:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxilwxcvx.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpxilwxcvx.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(opening_brackets.dropFirst())\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    if brackets.isEmpty {\n        return true\n    }\n \
    \   var openingBrackets = brackets.characters\n    var closingBrackets = [Character]()\n\
    \    var openingBracketIndex = -1\n    var closingBracketIndex = -1\n    for index\
    \ in 0..<openingBrackets.count {\n        let openingBracket = openingBrackets[index]\n\
    \        if openingBracket == \"(\" {\n            if openingBracketIndex >= 0\
    \ {\n                closingBracketIndex = openingBracketIndex\n             \
    \   openingBracketIndex = -1\n            } else {\n                openingBracketIndex\
    \ = index\n            }\n        } else if openingBracket == \")\" {\n      \
    \      if closingBracketIndex >= 0 {\n                openingBracketIndex = closingBracketIndex\n\
    \                closingBracketIndex = -1\n            } else {\n            \
    \    closingBracketIndex = index\n            }\n        } else {\n          \
    \  fatalError(\"Unexpected opening bracket: \\(openingBracket)\")\n        }\n\
    \    }\n    if openingBracketIndex >= 0 {\n        fatalError(\"Unexpected closing\
    \ bracket: \\(closingBrackets[openingBracketIndex])\")\n    }\n    return openingBracketIndex\
    \ == -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe_vwgkn8.swift:16:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe_vwgkn8.swift:21:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[index]\n                             ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpe_vwgkn8.swift:16:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpe_vwgkn8.swift:17:9: warning: variable 'closingBrackets' was\
    \ never mutated; consider changing to 'let' constant\n    var closingBrackets\
    \ = [Character]()\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = brackets.characters.count\n\n    while openingBracketIndex < openingBracketCount\
    \ {\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n    \
    \        return false\n        }\n        openingBracketIndex += 1\n    }\n\n\
    \    while openingBracketIndex < openingBracketCount {\n        guard openingBrackets[openingBracketIndex]\
    \ != \"(\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < closingBrackets.characters.count\
    \ {\n        guard closingBrackets[closingBracketIndex] == \")\" else {\n    \
    \        return false\n        }\n        closingBracketIndex += 1\n    }\n\n\
    \    while closingBracketIndex < closingBrackets.characters.count {\n        guard\
    \ closingBrackets[closingBracketIndex] != \"(\" else {\n            return false\n\
    \        }\n        closingBracketIndex += 1\n    }\n\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdm11a6on.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdm11a6on.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdm11a6on.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdm11a6on.swift:19:31: error: referencing operator function\
    \ '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \    while openingBracketIndex < openingBracketCount {\n                     \
    \         ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmpdm11a6on.swift:23:29: error: binary operator\
    \ '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n      \
    \  openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpdm11a6on.swift:26:31:\
    \ error: referencing operator function '<' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n    while openingBracketIndex < openingBracketCount\
    \ {\n                              ^\nSwift.BinaryInteger:1:11: note: where 'Self'\
    \ = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmpdm11a6on.swift:30:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpdm11a6on.swift:33:31: error: referencing operator"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = true\n    for\
    \ c in brackets {\n        if opening{\n            stack.append(c)\n        \
    \    opening = false\n        }else{\n            if stack.isEmpty {\n       \
    \         return false\n            }\n            if c == stack.removeLast()\
    \ {\n                opening = true\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf2fuy0is.swift:17:26: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            stack.append(c)\n          \
    \               ^\n/tmp/tmpf2fuy0is.swift:23:18: error: binary operator '==' cannot\
    \ be applied to operands of type 'Character' and 'String'\n            if c ==\
    \ stack.removeLast() {\n               ~ ^  ~~~~~~~~~~~~~~~~~~\n/tmp/tmpf2fuy0is.swift:23:18:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if c == stack.removeLast()\
    \ {\n                 ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0)\
    \ })\n    let closingBrackets = brackets.characters\n        .filter({ $0 != \"\
    (\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0) })\n    let\
    \ openingBracketCount = openingBrackets.count\n    let closingBracketCount = closingBrackets.count\n\
    \    if openingBracketCount != closingBracketCount {\n        return false\n \
    \   }\n    for openingBracket in openingBrackets {\n        for closingBracket\
    \ in closingBrackets {\n            if openingBracket == closingBracket {\n  \
    \              continue\n            }\n            if openingBracket == \"(\"\
    \ && closingBracket == \")\" {\n                continue\n            }\n    \
    \        if openingBracket == \")\" && closingBracket == \"(\" {\n           \
    \     continue\n            }\n            if openingBracket == \"(\" && closingBracket\
    \ == \"(\" {\n                continue\n            }\n            if openingBracket\
    \ == \")\" && closingBracket == \")\" {\n                continue\n          \
    \  }\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplcbgj_8v.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplcbgj_8v.swift:17:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    let closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[brackets.count\
    \ - 1]\n    for index in 1..<brackets.count {\n        let openingIndex = brackets.index(brackets,\
    \ startIndex: index)\n        let closingIndex = brackets.index(brackets, startIndex:\
    \ index + 1)\n        if opening != closing, opening == \"(\" && closing == \"\
    )\" {\n            opening = brackets[openingIndex - 1]\n            closing =\
    \ brackets[closingIndex - 1]\n        }\n    }\n    return opening == closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmt24zt6k.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpmt24zt6k.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[brackets.count - 1]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmt24zt6k.swift:16:37:\
    \ error: no exact matches in call to instance method 'index'\n        let openingIndex\
    \ = brackets.index(brackets, startIndex: index)\n                            \
    \        ^\n/tmp/tmpmt24zt6k.swift:16:37: note: candidate has partially matching\
    \ parameter list (String.Index, offsetBy: Int)\n        let openingIndex = brackets.index(brackets,\
    \ startIndex: index)\n                                    ^\n/tmp/tmpmt24zt6k.swift:16:37:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let openingIndex = brackets.index(brackets, startIndex: index)\n\
    \                                    ^\n/tmp/tmpmt24zt6k.swift:16:37: note: candidate\
    \ has partially matching parameter list (String.Index, offsetBy: Int)\n      \
    \  let openingIndex = brackets.index(brackets, startIndex: index)\n          \
    \                          ^\n/tmp/tmpmt24zt6k.swift:17:37: error: no exact matches\
    \ in call to instance method 'index'\n        let closingIndex = brackets.index(brackets,\
    \ startIndex: index + 1)\n                                    ^\n/tmp/tmpmt24zt6k.swift:17:37:\
    \ note: candidate has partially matching parameter list (String.Index, offsetBy:\
    \ Int)\n        let closingIndex = brackets.index(brackets, startIndex: index\
    \ + 1)\n                                    ^\n/tmp/tmpmt24zt6k.swift:17:37: note"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    var opening = false\n   \
    \ for c in brackets {\n        if c == \"(\" {\n            stack.append(c)\n\
    \            opening = true\n        } else if c == \")\" {\n            if opening\
    \ = true {\n                opening = false\n                stack.pop()\n   \
    \         } else {\n                return false\n            }\n        } else\
    \ {\n            return false\n        }\n    }\n    return stack.count == 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7flxbi3.swift:17:26: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            stack.append(c)\n          \
    \               ^\n/tmp/tmpe7flxbi3.swift:20:24: error: use of '=' in a boolean\
    \ context, did you mean '=='?\n            if opening = true {\n             \
    \  ~~~~~~~ ^ ~~~~\n                       ==\n/tmp/tmpe7flxbi3.swift:22:23: error:\
    \ value of type '[String]' has no member 'pop'\n                stack.pop()\n\
    \                ~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return true\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(String(openingBrackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu40ck1_9.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu40ck1_9.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu40ck1_9.swift:26:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    for openingBracket in openingBrackets {\n     \
    \   if closingBrackets.contains(openingBracket) {\n            closingBrackets.remove(openingBracket)\n\
    \        } else {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpujy40c5g.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpujy40c5g.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpujy40c5g.swift:18:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpujy40c5g.swift:18:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpujy40c5g.swift:18:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeFirst()\n    opening.removeLast()\n \
    \   closing.removeFirst()\n    closing.removeLast()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty\n    }\n    if closing.isEmpty {\n        return\
    \ opening.isEmpty\n    }\n    if opening.first != closing.first {\n        return\
    \ false\n    }\n    if opening.last != closing.last {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi0lv9vac.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpi0lv9vac.swift:14:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    var openingChar = brackets.characters[openingIndex]\n\
    \    var closingChar = brackets.characters[closingIndex]\n\n    while openingIndex\
    \ < openingCount {\n        openingIndex++\n        openingChar = brackets.characters[openingIndex]\n\
    \        if openingChar == \")\" {\n            closingIndex++\n            closingChar\
    \ = brackets.characters[closingIndex]\n            if closingChar == \")\" {\n\
    \                openingIndex++\n                openingChar = brackets.characters[openingIndex]\n\
    \                if openingChar == \")\" {\n                    closingIndex++\n\
    \                    closingChar = brackets.characters[closingIndex]\n       \
    \             if closingChar == \")\" {\n                        openingIndex++\n\
    \                        openingChar = brackets.characters[openingIndex]\n   \
    \                     if openingChar == \")\" {\n                            closingIndex++\n\
    \                            closingChar = brackets.characters[closingIndex]\n\
    \                            if closingChar == \")\" {\n                     \
    \           openingIndex++\n                                openingChar = brackets.characters[openingIndex]\n\
    \                                if openingChar == \")\" {\n                 \
    \                   closingIndex++\n                                    closingChar\
    \ = brackets.characters[closingIndex]\n                                    if\
    \ closingChar == \")\" {\n                                        openingIndex++\n\
    \                                        openingChar = brackets.characters[openingIndex]\n\
    \                                        if openingChar == \")\" {\n         \
    \                                   closingIndex++\n                         \
    \                   closingChar = brackets.characters[closingIndex]\n        \
    \                                    if closingChar == \")\" {\n             \
    \                                   openingIndex++\n                         \
    \                       openingChar = brackets.characters[openingIndex]\n    \
    \                                            if openingChar == \")\" {\n     \
    \                                               closingIndex++\n             \
    \                                       closingChar = brackets.characters[closingIndex]\n\
    \                                                    if closingChar == \")\" {\n\
    \                                                        openingIndex++\n    \
    \                                                    openingChar = brackets.characters[openingIndex]\n\
    \                                                        if openingChar == \"\
    )\" {\n                                                            closingIndex++\n\
    \                                                            closingChar = brackets.characters[closingIndex]\n\
    \                                                            if closingChar ==\
    \ \")\" {\n                                                                openingIndex++\n\
    \                                                                openingChar =\
    \ brackets.characters[openingIndex]\n                                        \
    \                        if openingChar == \")\" {\n                         \
    \                                           closingIndex++\n                 \
    \                                                   closingChar = brackets.characters[closingIndex]\n\
    \                                                                    if closingChar\
    \ == \")\" {\n                                                               \
    \         openingIndex++\n                                \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxa5ln3qm.swift:99:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpxa5ln3qm.swift:67:87:\
    \ note: to match this opening '{'\n                                          \
    \                      if openingChar == \")\" {\n                           \
    \                                                           ^\n/tmp/tmpxa5ln3qm.swift:99:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpxa5ln3qm.swift:64:83: note: to match this opening\
    \ '{'\n                                                            if closingChar\
    \ == \")\" {\n                                                               \
    \                   ^\n/tmp/tmpxa5ln3qm.swift:99:66: error: expected '}' at end\
    \ of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpxa5ln3qm.swift:61:79: note: to match this opening '{'\n         \
    \                                               if openingChar == \")\" {\n  \
    \                                                                            ^\n\
    /tmp/tmpxa5ln3qm.swift:99:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpxa5ln3qm.swift:58:75:\
    \ note: to match this opening '{'\n                                          \
    \          if closingChar == \")\" {\n                                       \
    \                                   ^\n/tmp/tmpxa5ln3qm.swift:99:66: error: expected\
    \ '}' at end of brace statement\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)\n                                                                \
    \ ^\n/tmp/tmpxa5ln3qm.swift:55:71: note: to match this opening '{'\n         \
    \                            "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        openingBracketCount++\n\
    \n        if openingBracket == \"(\" {\n            openingBracketIndex++\n  \
    \      } else if openingBracket == \")\" {\n            openingBracketIndex++\n\
    \            closingBracketCount--\n            if closingBracketCount == 0 {\n\
    \                closingBracketIndex--\n            }\n        } else {\n    \
    \        return false\n        }\n    }\n\n    return openingBracketIndex == brackets.endIndex\
    \ && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppdbjmqje.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppdbjmqje.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmppdbjmqje.swift:22:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketCount++\n            \
    \               ^~\n/tmp/tmppdbjmqje.swift:25:32: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n   \
    \                            ^~\n/tmp/tmppdbjmqje.swift:27:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            openingBracketIndex++\n\
    \                               ^~\n/tmp/tmppdbjmqje.swift:28:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n/tmp/tmppdbjmqje.swift:30:36: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                closingBracketIndex--\n\
    \                                   ^~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == \")\" else {\n            return\
    \ false\n        }\n        open\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdxhdsd18.swift:104:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpdxhdsd18.swift:12:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpdxhdsd18.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpdxhdsd18.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdxhdsd18.swift:21:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpdxhdsd18.swift:25:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpdxhdsd18.swift:29:29: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n        openingBracketIndex += 1\n\
    \        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpdxhdsd18.swift:33:29: error: binary\
    \ operator '+=' cannot be applied to operands of type 'String.Index' and 'Int'\n\
    \        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpdxhdsd18.swift:37:29:\
    \ error: binary operator '+=' cannot be applied to operands of type 'String.Index'\
    \ and 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^ \
    \ ~\n/tmp/tmpdxhdsd18.swift:41:29: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' "
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = brackets[openingBracketIndex]\n        let closingBracket\
    \ = brackets[closingBracketIndex]\n\n        if openingBracket == \"(\" {\n  \
    \          openingBracketCount += 1\n        } else if openingBracket == \")\"\
    \ {\n            closingBracketCount += 1\n        }\n\n        if openingBracketCount\
    \ == closingBracketCount {\n            openingBracketIndex += 1\n           \
    \ closingBracketIndex += 1\n        } else {\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n            closingBracketIndex = closingBracketIndex\
    \ + 1\n        }\n    }\n\n    return openingBracketCount == closingBracketCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2l7syme1.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l7syme1.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l7syme1.swift:31:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2l7syme1.swift:32:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp2l7syme1.swift:34:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmp2l7syme1.swift:34:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmp2l7syme1.swift:35:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ = closingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmp2l7syme1.swift:35:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            closingBracketIndex\
    \ = closingBracketIndex + 1\n                                                \
    \      ^\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n\n        if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n            return false\n      \
    \  }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyxkoztat.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyxkoztat.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyxkoztat.swift:19:51: error: value of type 'String.Index'\
    \ has no member 'successor'\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \                              ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpyxkoztat.swift:20:51:\
    \ error: value of type 'String.Index' has no member 'successor'\n        closingBracketIndex\
    \ = closingBracketIndex.successor()\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex++\n    \
    \    closingBracketIndex++\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy6r9mvhc.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy6r9mvhc.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy6r9mvhc.swift:22:28: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracketIndex++\n            \
    \               ^~\n/tmp/tmpy6r9mvhc.swift:23:28: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingBracketIndex++\n       \
    \                    ^~\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsIndex += 1\n        if openingBrackets[openingBracketsIndex]\
    \ == '(' {\n            openingBracketsIndex += 1\n            if openingBracketsIndex\
    \ < openingBracketsCount {\n                openingBracketsIndex += 1\n      \
    \      }\n        }\n    }\n\n    while closingBracketsIndex < closingBracketsCount\
    \ {\n        closingBracketsIndex += 1\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsIndex += 1\n            if closingBracketsIndex\
    \ < closingBracketsCount {\n                closingBracketsIndex += 1\n      \
    \      }\n        }\n    }\n\n    return openingBracketsIndex == closingBracketsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy5wq4tlf.swift:22:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmpy5wq4tlf.swift:32:53: error: single-quoted\
    \ string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                    ^~~\n        \
    \                                            \")\"\n/tmp/tmpy5wq4tlf.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpy5wq4tlf.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy5wq4tlf.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpy5wq4tlf.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpy5wq4tlf.swift:22:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsIndex] == '(' {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: no"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters.split{$0 == \")\"}.count\n\
    \    var closing = brackets.characters.split{$0 == \"(\"}.count\n    return opening\
    \ == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo025lbtn.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.split{$0 == \")\"\
    }.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo025lbtn.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing = brackets.characters.split{$0 ==\
    \ \"(\"}.count\n                           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpo025lbtn.swift:13:9: warning: variable\
    \ 'opening' was never mutated; consider changing to 'let' constant\n    var opening\
    \ = brackets.characters.split{$0 == \")\"}.count\n    ~~~ ^\n    let\n/tmp/tmpo025lbtn.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets.characters.split{$0 == \"(\"}.count\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsIndex += 1\n        if openingBracketsIndex < openingBracketsCount\
    \ {\n            if openingBrackets[openingBracketsIndex] == '(' {\n         \
    \       openingBracketsIndex += 1\n            }\n        }\n    }\n\n    while\
    \ closingBracketsIndex < closingBracketsCount {\n        closingBracketsIndex\
    \ += 1\n        if closingBracketsIndex < closingBracketsCount {\n           \
    \ if closingBrackets[closingBracketsIndex] == ')' {\n                closingBracketsIndex\
    \ += 1\n            }\n        }\n    }\n\n    return openingBracketsIndex ==\
    \ closingBracketsIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpstyd75qj.swift:23:57: error: single-quoted string literal found,\
    \ use '\"'\n            if openingBrackets[openingBracketsIndex] == '(' {\n  \
    \                                                      ^~~\n                 \
    \                                       \"(\"\n/tmp/tmpstyd75qj.swift:32:57: error:\
    \ single-quoted string literal found, use '\"'\n            if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                        ^~~\n    \
    \                                                    \")\"\n/tmp/tmpstyd75qj.swift:13:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpstyd75qj.swift:14:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpstyd75qj.swift:15:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpstyd75qj.swift:16:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpstyd75qj.swift:23:16: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if openingBrackets[openingBracketsIndex] == '(' {\n             \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets[0]\n    var closing = brackets[brackets.count-1]\n\
    \    for index in 1..<brackets.count {\n        if opening != brackets[index]\
    \ {\n            return false\n        }\n        opening = brackets[index]\n\
    \    }\n    return opening == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmnlu6ly7.swift:13:19: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var opening =\
    \ brackets[0]\n                  ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpmnlu6ly7.swift:14:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var closing = brackets[brackets.count-1]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmnlu6ly7.swift:16:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening != brackets[index] {\n     \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpmnlu6ly7.swift:19:19: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        opening = brackets[index]\n                  ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmnlu6ly7.swift:14:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets[brackets.count-1]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824909
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxrsa4ijl.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpxrsa4ijl.swift:14:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824908
