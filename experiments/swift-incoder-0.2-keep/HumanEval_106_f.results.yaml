language: swift
name: HumanEval_106_f
results:
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        else\
    \ {\n            factorials.append(sum)\n            sum = 1\n        }\n    }\n\
    \    factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6xai8thi/tmp6xai8thi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d077acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d074a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d074a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d074a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xai8thi                        0x000055d4fe0665d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4d07998460 __libc_start_main +
    245

    6    tmp6xai8thi                        0x000055d4fe066209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \       sum += i\n        } else {\n            factorials.append(sum * i)\n \
    \           sum += i + 1\n        }\n    }\n    return factorials\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmph40sumj5/tmph40sumj5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c4065fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c40356b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c40356988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c403557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph40sumj5                        0x0000556657e885d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b1c4084b460 __libc_start_main +
    245

    6    tmph40sumj5                        0x0000556657e88209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \       sum *= i\n        } else {\n            sum += i\n        }\n    }\n \
    \   factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoudhjyq/tmpzoudhjyq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b271cb74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b271c86bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b271c86b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b271c86a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoudhjyq                        0x0000564798cf55d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b271cd60460 __libc_start_main +
    245

    6    tmpzoudhjyq                        0x0000564798cf5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \       sum *= i\n        } else {\n            sum += i\n        }\n    }\n \
    \   factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpzoudhjyq/tmpzoudhjyq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b271cb74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b271c86bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b271c86b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b271c86a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzoudhjyq                        0x0000564798cf55d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b271cd60460 __libc_start_main +
    245

    6    tmpzoudhjyq                        0x0000564798cf5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i * factorial[i - 1]!)\n     \
    \   } else {\n            factorial.append(factorial[i - 1]! + i)\n        }\n\
    \    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpydw3v1fv.swift:13:50: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorial.append(i * factorial[i - 1]!)\n          \
    \                       ~~~~~~~~~~~~~~~~^\n                                  \
    \               \n/tmp/tmpydw3v1fv.swift:15:46: error: cannot force unwrap value\
    \ of non-optional type 'Int'\n            factorial.append(factorial[i - 1]! +\
    \ i)\n                             ~~~~~~~~~~~~~~~~^\n                       \
    \                      \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i * 1)\n        } else {\n   \
    \         factorial.append(i + 1)\n        }\n    }\n    return factorial\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp82ryp63x/tmp82ryp63x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f901e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f8fedeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f8fede988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f8fedd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82ryp63x                        0x000055da7ccaa5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b6f903d3460 __libc_start_main +
    245

    6    tmp82ryp63x                        0x000055da7ccaa209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorial.append(i)\n        }\
    \ else {\n            sum += i\n        }\n    }\n    return factorial\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpa11ycyw7/tmpa11ycyw7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a78ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a75c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a75c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a75c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa11ycyw7                        0x0000557e37d5f5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b59a7ab8460 __libc_start_main +
    245

    6    tmpa11ycyw7                        0x0000557e37d5f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \       sum *= i\n        } else {\n            sum += i\n        }\n    }\n \
    \   return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6g885mrj/tmp6g885mrj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ccf662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ccf359b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ccf359988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ccf3587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g885mrj                        0x000055d56297e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b2ccf84e460 __libc_start_main +
    245

    6    tmp6g885mrj                        0x000055d56297e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \       sum *= i\n        } else {\n            sum += i\n        }\n    }\n \
    \   return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6g885mrj/tmp6g885mrj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ccf662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ccf359b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ccf359988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ccf3587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g885mrj                        0x000055d56297e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b2ccf84e460 __libc_start_main +
    245

    6    tmp6g885mrj                        0x000055d56297e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \       sum *= i\n        } else {\n            sum += i\n        }\n    }\n \
    \   return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6g885mrj/tmp6g885mrj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ccf662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ccf359b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ccf359988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ccf3587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g885mrj                        0x000055d56297e5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b2ccf84e460 __libc_start_main +
    245

    6    tmp6g885mrj                        0x000055d56297e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        factorials.append(sum)\n\
    \    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpr8kvue44/tmpr8kvue44.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed30ad3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed307cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed307ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed307c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8kvue44                        0x00005559737e55d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed30cbf460 __libc_start_main +
    245

    6    tmpr8kvue44                        0x00005559737e5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \   } else {\n            sum += i\n        }\n    }\n    return factorials\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpy57ank4r/tmpy57ank4r.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad17e075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad17dd6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad17dd6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad17dd6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy57ank4r                        0x0000559235eed5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad17e261460 __libc_start_main +
    245

    6    tmpy57ank4r                        0x0000559235eed209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i)\n        } else {\n       \
    \     factorial.append(i * factorial[factorial.count - 1])\n        }\n    }\n\
    \    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c4fd1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c4fa16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c4fa16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c4fa1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c4fa15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c4f815e83 <unavailable> + 188035

    6    tmpj2hbvzjg                        0x0000562419a82bda <unavailable> + 7130

    7    tmpj2hbvzjg                        0x0000562419a8259b <unavailable> + 5531

    8    libc.so.6                          0x00002b6c4ff0b460 __libc_start_main +
    245

    9    tmpj2hbvzjg                        0x0000562419a822b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * result[i-1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0123262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0122f59561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0122f59286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0122f5913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0122f58bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0122d58e83 <unavailable> + 188035

    6    tmp3pss5hne                        0x0000556f6903ab48 <unavailable> + 6984

    7    tmp3pss5hne                        0x0000556f6903a53b <unavailable> + 5435

    8    libc.so.6                          0x00002b012344e460 __libc_start_main +
    245

    9    tmp3pss5hne                        0x0000556f6903a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i * 1)\n        } else {\n   \
    \         factorial.append(i + 1)\n        }\n    }\n    return factorial\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp82ryp63x/tmp82ryp63x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f901e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f8fedeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f8fede988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f8fedd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82ryp63x                        0x000055da7ccaa5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b6f903d3460 __libc_start_main +
    245

    6    tmp82ryp63x                        0x000055da7ccaa209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i * factorial[i - 1])\n      \
    \  } else {\n            factorial.append(i)\n        }\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7df0790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7df0487561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7df0487286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7df048713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7df0486bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7df0286e83 <unavailable> + 188035

    6    tmp7aja6f69                        0x000055ae8cde6b35 <unavailable> + 6965

    7    tmp7aja6f69                        0x000055ae8cde653b <unavailable> + 5435

    8    libc.so.6                          0x00002b7df097c460 __libc_start_main +
    245

    9    tmp7aja6f69                        0x000055ae8cde6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        else\
    \ {\n            factorial.append(sum)\n            sum = 1\n        }\n    }\n\
    \    factorial.append(sum)\n    return factorial\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpazqxu0qx/tmpazqxu0qx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d215a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d21297b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d21297988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d212967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazqxu0qx                        0x000055a84b0105d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7d2178c460 __libc_start_main +
    245

    6    tmpazqxu0qx                        0x000055a84b010209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        else\
    \ {\n            factorials.append(sum)\n            sum = 1\n        }\n    }\n\
    \    factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6xai8thi/tmp6xai8thi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d077acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d074a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d074a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d074a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xai8thi                        0x000055d4fe0665d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4d07998460 __libc_start_main +
    245

    6    tmp6xai8thi                        0x000055d4fe066209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \   } else {\n            sum += i\n        }\n    }\n    return factorials\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpy57ank4r/tmpy57ank4r.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad17e075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad17dd6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad17dd6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad17dd6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy57ank4r                        0x0000559235eed5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad17e261460 __libc_start_main +
    245

    6    tmpy57ank4r                        0x0000559235eed209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        factorials.append(sum)\n\
    \        sum = 1\n    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6xvc5shh/tmp6xvc5shh.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef66e80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef66b77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef66b77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef66b767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xvc5shh                        0x000055a1126905d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aef6706c460 __libc_start_main +
    245

    6    tmp6xvc5shh                        0x000055a112690209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i * factorial[i - 1]!)\n     \
    \   } else {\n            factorial.append(i)\n        }\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpf886t7au.swift:13:50: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorial.append(i * factorial[i - 1]!)\n          \
    \                       ~~~~~~~~~~~~~~~~^\n                                  \
    \               \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * result[0])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b754e012c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b754dd09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b754dd09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b754dd0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b754dd08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b754db08e83 <unavailable> + 188035

    6    tmpkzb8kga4                        0x00005622e67abb2d <unavailable> + 6957

    7    tmpkzb8kga4                        0x00005622e67ab53b <unavailable> + 5435

    8    libc.so.6                          0x00002b754e1fe460 __libc_start_main +
    245

    9    tmpkzb8kga4                        0x00005622e67ab259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        else\
    \ {\n            factorials.append(sum)\n            sum = 1\n        }\n    }\n\
    \    factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6xai8thi/tmp6xai8thi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d077acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d074a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d074a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d074a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xai8thi                        0x000055d4fe0665d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4d07998460 __libc_start_main +
    245

    6    tmp6xai8thi                        0x000055d4fe066209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        factorials.append(sum)\n\
    \    }\n    return factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(f(n:\
    \ 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpr8kvue44/tmpr8kvue44.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed30ad3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed307cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed307ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed307c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8kvue44                        0x00005559737e55d2 <unavailable> + 5586

    5    libc.so.6                          0x00002aed30cbf460 __libc_start_main +
    245

    6    tmpr8kvue44                        0x00005559737e5209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i)\n        } else {\n       \
    \     factorial.append(i * factorial[factorial.count - 1])\n        }\n    }\n\
    \    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c4fd1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c4fa16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6c4fa16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6c4fa1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6c4fa15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6c4f815e83 <unavailable> + 188035

    6    tmpj2hbvzjg                        0x0000562419a82bda <unavailable> + 7130

    7    tmpj2hbvzjg                        0x0000562419a8259b <unavailable> + 5531

    8    libc.so.6                          0x00002b6c4ff0b460 __libc_start_main +
    245

    9    tmpj2hbvzjg                        0x0000562419a822b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        else\
    \ {\n            factorials.append(sum)\n            sum = 1\n        }\n    }\n\
    \    factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6xai8thi/tmp6xai8thi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d077acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d074a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d074a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d074a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xai8thi                        0x000055d4fe0665d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4d07998460 __libc_start_main +
    245

    6    tmp6xai8thi                        0x000055d4fe066209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 1\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(sum)\n     \
    \   } else {\n            sum += i\n        }\n    }\n    return factorials\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpy57ank4r/tmpy57ank4r.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad17e075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad17dd6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad17dd6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad17dd6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy57ank4r                        0x0000559235eed5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad17e261460 __libc_start_main +
    245

    6    tmpy57ank4r                        0x0000559235eed209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        else\
    \ {\n            factorial.append(sum)\n            sum = 1\n        }\n    }\n\
    \    factorial.append(sum)\n    return factorial\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpazqxu0qx/tmpazqxu0qx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d215a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d21297b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d21297988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d212967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazqxu0qx                        0x000055a84b0105d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7d2178c460 __libc_start_main +
    245

    6    tmpazqxu0qx                        0x000055a84b010209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        }\n        else\
    \ {\n            factorials.append(sum)\n            sum = 1\n        }\n    }\n\
    \    factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp6xai8thi/tmp6xai8thi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d077acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d074a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d074a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d074a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xai8thi                        0x000055d4fe0665d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4d07998460 __libc_start_main +
    245

    6    tmp6xai8thi                        0x000055d4fe066209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorial.append(i)\n        }\
    \ else {\n            sum += i\n        }\n    }\n    return factorial\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpa11ycyw7/tmpa11ycyw7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a78ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a75c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a75c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a75c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa11ycyw7                        0x0000557e37d5f5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b59a7ab8460 __libc_start_main +
    245

    6    tmpa11ycyw7                        0x0000557e37d5f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i)\n        } else {\n     \
    \       factorials.append(i * factorials[i - 1])\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1a55b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1a52b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1a52b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1a52b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1a52afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1a50afe83 <unavailable> + 188035

    6    tmp6c0wo6te                        0x0000562a54e56b48 <unavailable> + 6984

    7    tmp6c0wo6te                        0x0000562a54e5653b <unavailable> + 5435

    8    libc.so.6                          0x00002ab1a57a5460 __libc_start_main +
    245

    9    tmp6c0wo6te                        0x0000562a54e56259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i * factorials[i\
    \ - 1]!)\n        } else {\n            sum += i\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpd9ae3ke8.swift:14:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var factorial = 1\n    for i\
    \ in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n        } else\
    \ {\n            factorial += i\n        }\n        result.append(factorial)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2gakvqfe/tmp2gakvqfe.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4579b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4576afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4576af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4576ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gakvqfe                        0x000055d4fc1e95d2 <unavailable> + 5586

    5    libc.so.6                          0x00002af457ba4460 __libc_start_main +
    245

    6    tmp2gakvqfe                        0x000055d4fc1e9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorial.append(i)\n        \
    \    sum += i\n        } else {\n            factorial.append(sum)\n         \
    \   sum += i\n        }\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpb5nm021b/tmpb5nm021b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4da1359c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4da1050b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4da1050988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4da104f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5nm021b                        0x0000564a450855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4da1545460 __libc_start_main +
    245

    6    tmpb5nm021b                        0x0000564a45085209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i * factorial[i - 1]!)\n     \
    \   } else {\n            factorial.append(i)\n        }\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpf886t7au.swift:13:50: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorial.append(i * factorial[i - 1]!)\n          \
    \                       ~~~~~~~~~~~~~~~~^\n                                  \
    \               \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var factorial = 1\n    for i\
    \ in 1...n {\n        if i % 2 == 0 {\n            result.append(factorial)\n\
    \        } else {\n            result.append(i + factorial)\n        }\n     \
    \   factorial *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp_uxrzniu/tmp_uxrzniu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9cd339c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9cd030b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9cd030988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9cd02f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uxrzniu                        0x0000555d7a8e05d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ad9cd525460 __libc_start_main +
    245

    6    tmp_uxrzniu                        0x0000555d7a8e0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \     sum += i\n        } else {\n            factorials.append(sum)\n       \
    \     sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpk8pb6l1y/tmpk8pb6l1y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfde42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfde126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfde126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfde1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8pb6l1y                        0x0000560f07db45d2 <unavailable> + 5586

    5    libc.so.6                          0x00002abfde61b460 __libc_start_main +
    245

    6    tmpk8pb6l1y                        0x0000560f07db4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i * i)\n        } else {\n         \
    \   result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpjjky09kk/tmpjjky09kk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade56026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade55d1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade55d1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade55d1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjky09kk                        0x0000557ba30bf5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ade56212460 __libc_start_main +
    245

    6    tmpjjky09kk                        0x0000557ba30bf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \     sum += i\n        } else {\n            factorials.append(sum)\n       \
    \     sum += i\n        }\n    }\n    return factorials\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2,\
    \ 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpk8pb6l1y/tmpk8pb6l1y.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfde42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfde126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfde126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfde1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8pb6l1y                        0x0000560f07db45d2 <unavailable> + 5586

    5    libc.so.6                          0x00002abfde61b460 __libc_start_main +
    245

    6    tmpk8pb6l1y                        0x0000560f07db4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * result[0])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b754e012c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b754dd09561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b754dd09286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b754dd0913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b754dd08bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b754db08e83 <unavailable> + 188035

    6    tmpkzb8kga4                        0x00005622e67abb2d <unavailable> + 6957

    7    tmpkzb8kga4                        0x00005622e67ab53b <unavailable> + 5435

    8    libc.so.6                          0x00002b754e1fe460 __libc_start_main +
    245

    9    tmpkzb8kga4                        0x00005622e67ab259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    var factorial = 1\n    for i\
    \ in 1...n {\n        if i % 2 == 0 {\n            factorial *= i\n        } else\
    \ {\n            factorial += i\n        }\n        result.append(factorial)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(f(n: 5) ==\
    \ [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n:\
    \ 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmp2gakvqfe/tmp2gakvqfe.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4579b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4576afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4576af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4576ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gakvqfe                        0x000055d4fc1e95d2 <unavailable> + 5586

    5    libc.so.6                          0x00002af457ba4460 __libc_start_main +
    245

    6    tmp2gakvqfe                        0x000055d4fc1e9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorial = [Int]()\n    for i in 1...n {\n       \
    \ if i % 2 == 0 {\n            factorial.append(i * 1)\n        } else {\n   \
    \         factorial.append(i + 1)\n        }\n    }\n    return factorial\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmp82ryp63x/tmp82ryp63x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f901e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f8fedeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f8fede988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f8fedd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82ryp63x                        0x000055da7ccaa5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b6f903d3460 __libc_start_main +
    245

    6    tmp82ryp63x                        0x000055da7ccaa209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    for i in 1...n {\n      \
    \  if i % 2 == 0 {\n            factorials.append(i * factorials[i - 1]!)\n  \
    \      } else {\n            factorials.append(i)\n        }\n    }\n    return\
    \ factorials\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(f(n: 5) == [1, 2,\
    \ 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) ==\
    \ [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpigkn_ief.swift:13:52: error: cannot force unwrap value of non-optional\
    \ type 'Int'\n            factorials.append(i * factorials[i - 1]!)\n        \
    \                          ~~~~~~~~~~~~~~~~~^\n                              \
    \                     \n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            sum += i\n        } else {\n \
    \           factorials.append(sum)\n            sum = 1\n        }\n    }\n  \
    \  factorials.append(sum)\n    return factorials\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpj3_6u6o5/tmpj3_6u6o5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7137df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7137aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7137aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7137aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3_6u6o5                        0x0000556bd00515d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b7137fe2460 __libc_start_main +
    245

    6    tmpj3_6u6o5                        0x0000556bd0051209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var factorials = [Int]()\n    var sum = 0\n    for i in\
    \ 1...n {\n        if i % 2 == 0 {\n            factorials.append(i)\n       \
    \ } else {\n            sum += i\n        }\n    }\n    return factorials\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1,\
    \ 2, 6])"
  status: Exception
  stderr: 'tmpsykfwnut/tmpsykfwnut.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29f32b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29f2fb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29f2fb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29f2faf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsykfwnut                        0x0000557ff64855d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b29f34a5460 __libc_start_main +
    245

    6    tmpsykfwnut                        0x0000557ff6485209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Implement the function f that takes n as a parameter,\n/// and returns\
    \ a list of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts\
    \ from 1.\n/// the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n/// Example:\n/// f(5) == [1, 2, 6, 24, 15]\nfunc f(n:\
    \ Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if\
    \ i % 2 == 0 {\n            result.append(i)\n        } else {\n            result.append(i\
    \ * i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(f(n: 5) == [1, 2, 6, 24, 15])\nassert(f(n: 7) == [1, 2, 6, 24, 15,\
    \ 720, 28])\nassert(f(n: 1) == [1])\nassert(f(n: 3) == [1, 2, 6])"
  status: Exception
  stderr: 'tmpw2t8460o/tmpw2t8460o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56051fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac560216b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac560216988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5602157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2t8460o                        0x0000559af8e345d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac56070b460 __libc_start_main +
    245

    6    tmpw2t8460o                        0x0000559af8e34209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014002
