name: HumanEval_143_words_in_sentence
language: swift
prompt: "\n/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n/// Output: \"\
  is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\n/// Output:\
  \ \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence\
  \ contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a\
  \ test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\"\
  ) == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
  \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am\
  \ Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for\
  \ it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\"\
  )\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
completions: ["    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in sentence.characters\
    \ {\n        if isPrime(Int(letter)) {\n            result += String(letter)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        if prime > 1 {\n            for letter in sentence.characters {\n\
    \                if prime == letter {\n                    result += String(letter)\n\
    \                }\n            }\n        }\n    }\n    return result", '    return
    sentence', "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return sentence', "    return sentence.componentsSeparatedByString(\"\
    \ \")\n        .filter({ (word) -> Bool in\n            return isPrime(word.characters.count)\n\
    \        })\n        .sorted()\n        .joinWithSeparator(\" \")", "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    guard let sentence = sentence.lowercased() else {\n        return \"\"\n  \
    \  }\n    var result = \"\"\n    var primeNumbers = [1]\n    for character in\
    \ sentence.characters {\n        if primeNumbers.contains(character) {\n     \
    \       primeNumbers.append(primeNumbers.last! * character)\n        } else {\n\
    \            result += String(character)\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return sentence', '    return sentence', "    var result = \"\"\n    for word\
    \ in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", '    return sentence',
  "    var result = \"\"\n    for letter in sentence.characters {\n        if isPrime(letter)\
    \ {\n            result += letter\n        }\n    }\n    return result", "   \
    \ let words = sentence.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let primes = primes(word: word)\n        for\
    \ prime in primes {\n            if prime == word.count {\n                result\
    \ += \" \" + word\n            }\n        }\n    }\n    return result", '    return
    sentence', "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in sentence.characters\
    \ {\n        if isPrime(Int(letter)) {\n            result += letter\n       \
    \ }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", "    var result = \"\"\
    \n    var primes = [1]\n    var primeIndex = 0\n    var currentWord = \"\"\n \
    \   for word in sentence.split(\" \") {\n        if primeIndex == primes.count\
    \ {\n            primes.append(1)\n            primeIndex = 0\n        }\n   \
    \     if primes[primeIndex] == 1 {\n            currentWord = currentWord + word\
    \ + \" \" // append current word\n            primes[primeIndex] = 2 // mark current\
    \ word as prime\n            primeIndex++\n        } else {\n            primes[primeIndex]\
    \ = 1 // mark current word as non-prime\n        }\n    }\n    result = currentWord\n\
    \    return result", "    guard let sentence = sentence.trimmingCharacters(in:\
    \ .whitespaces) else {\n        return \"\"\n    }\n    var result = \"\"\n  \
    \  for word in sentence.components(separatedBy: \" \") {\n        if isPrime(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if isPrime(word: word) {\n            result += \" \" +\
    \ word\n        }\n    }\n    return result.trimmingCharacters(in: .whitespacesAndNewlines)",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        } else {\n            result += String(letter)\n        }\n    }\n  \
    \  return result", "    var result = \"\"\n    var primes = [1]\n    for letter\
    \ in sentence.characters {\n        if primes.contains(letter) {\n           \
    \ primes.append(letter)\n        }\n    }\n    for prime in primes {\n       \
    \ result = result + String(prime)\n    }\n    return result", '    return sentence',
  '    return sentence', "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    let words = sentence.components(separatedBy:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        let length =\
    \ word.characters.count\n        if length == 1 {\n            result += word\n\
    \        } else {\n            for _ in 1...length {\n                result +=\
    \ word\n            }\n        }\n    }\n    return result", "    var result =\
    \ \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for char in sentence\
    \ {\n        if char == \" \" {\n            primeIndex += 1\n            primes.append(primes[primeIndex])\n\
    \        }\n    }\n    for char in sentence {\n        if char == \" \" {\n  \
    \          primeIndex += 1\n            primes.append(primes[primeIndex])\n  \
    \      }\n    }\n    for char in sentence {\n        if char == \" \" {\n    \
    \        primeIndex += 1\n            primes.append(primes[primeIndex])\n    \
    \    }\n    }\n    for char in sentence {\n        if char == \" \" {\n      \
    \      primeIndex += 1\n            primes.append(primes[primeIndex])\n      \
    \  }\n    }\n    for char in sentence {\n        if char == \" \" {\n        \
    \    primeIndex += 1\n            primes.append(primes[primeIndex])\n        }\n\
    \    }\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n            primes.append(primes[primeIndex])\n        }\n    }\n    for\
    \ char in sentence {\n        if char == \" \" {\n            primeIndex += 1\n\
    \            primes.append(primes[primeIndex])\n        }\n    }\n    for char\
    \ in sentence {\n        if char == \" \" {\n            primeIndex += 1\n   \
    \         primes.append(primes[primeIndex])\n        }\n    }\n    for char in\
    \ sentence {\n        if char == \" \" {\n            primeIndex += 1\n      \
    \      primes.append(primes[primeIndex])\n        }\n    }\n    for char in sentence\
    \ {\n        if char == \" \" {\n            primeIndex += 1\n            primes.append(primes[primeIndex])\n\
    \        }\n    }\n    for char in sentence {\n        if char == \" \" {\n  \
    \          primeIndex += 1\n            primes.append(primes[primeIndex])\n  \
    \      }\n    }\n    for char in sentence {\n        if char == \" \" {\n    \
    \        primeIndex += 1\n            primes.append(primes[primeIndex])\n    \
    \    }\n    }\n    for char in sentence {\n        if char == \" \" {\n      \
    \      primeIndex += 1\n            primes.append(primes[primeIndex])\n      \
    \  }\n    }\n    for char in sentence {\n        if char == \" \" {\n        \
    \    primeIndex += 1\n            primes.append(primes[primeIndex])\n        }\n\
    \    }\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n            primes.append(primes[primeIndex])\n        }\n    }\n    for\
    \ char in sentence {\n        if char == \" \" {\n            primeIndex += 1\n\
    \            primes.append(primes[primeIndex])\n        }\n    }\n    for char\
    \ in sentence {\n        if char == \" \" {\n            primeIndex += 1\n   \
    \         ", "    return sentence.components(separatedBy: \" \")\n        .filter{$0.characters.count\
    \ > 0}\n        .filter{$0.characters.count <= 100}\n        .filter{$0.characters.count\
    \ >= 2}\n        .sorted()\n        .joined(separator: \" \")", "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for word in sentence.split(\"\
    \ \") {\n        if primes.contains(word.characters.count) {\n            result\
    \ += \" \" + word\n        }\n        primes.append(word.characters.count)\n \
    \   }\n    return result", "    var result = \"\"\n    var primes = [1]\n    for\
    \ char in sentence.characters {\n        if primes.contains(char.count) {\n  \
    \          primes.append(char.count)\n        }\n    }\n    for prime in primes\
    \ {\n        if prime > result.characters.count {\n            result = result\
    \ + String(char)\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n \
    \           result += \" \" + word\n        }\n    }\n    return result", "  \
    \  let words = sentence.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        if isPrime(word: word) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n \
    \           result += \" \" + word\n        }\n    }\n    return result", "  \
    \  var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n \
    \           result += \" \" + word\n        }\n    }\n    return result", "  \
    \  var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    var result = \"\"\n    var primes = [1]\n   \
    \ for char in sentence.characters {\n        if primes.contains(char.unicodeScalars.count)\
    \ {\n            primes.append(char.unicodeScalars.count)\n        }\n    }\n\
    \    for prime in primes {\n        if prime > 1 {\n            for char in sentence.characters\
    \ {\n                if char.unicodeScalars.count == prime {\n               \
    \     result += String(char)\n                }\n            }\n        }\n  \
    \  }\n    return result", "    return sentence.components(separatedBy: \" \")\n\
    \        .filter{$0.characters.count > 0}\n        .filter{$0.characters.count\
    \ < 100}\n        .filter{$0.characters.isPrime}\n        .sorted()\n        .joined(separator:\
    \ \" \")", '    return sentence', "    var result = \"\"\n    var primes = [1]\n\
    \    var primeIndex = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 0 {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 2 {\n\
    \            primeIndex += 1\n        }\n        if letter == \" \" {\n      \
    \      primeIndex += 1\n        }\n        if primes[primeIndex] == 3 {\n    \
    \        primeIndex += 1\n        }\n        if letter == \" \" {\n          \
    \  primeIndex += 1\n        }\n        if primes[primeIndex] == 4 {\n        \
    \    primeIndex += 1\n        }\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 5 {\n            primeIndex\
    \ += 1\n        }\n        if letter == \" \" {\n            primeIndex += 1\n\
    \        }\n        if primes[primeIndex] == 6 {\n            primeIndex += 1\n\
    \        }\n        if letter == \" \" {\n            primeIndex += 1\n      \
    \  }\n        if primes[primeIndex] == 7 {\n            primeIndex += 1\n    \
    \    }\n        if letter == \" \" {\n            primeIndex += 1\n        }\n\
    \        if primes[primeIndex] == 8 {\n            primeIndex += 1\n        }\n\
    \        if letter == \" \" {\n            primeIndex += 1\n        }\n      \
    \  if primes[primeIndex] == 9 {\n            primeIndex += 1\n        }\n    \
    \    if letter == \" \" {\n            primeIndex += 1\n        }\n        if\
    \ primes[primeIndex] == 10 {\n            primeIndex += 1\n        }\n       \
    \ if letter == \" \" {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 11 {\n            primeIndex += 1\n        }\n        if letter == \" \"\
    \ {\n            primeIndex += 1\n        }\n        if primes[primeIndex] ==\
    \ 12 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 13 {\n\
    \            primeIndex += 1\n        }\n        if letter == \" \" {\n      \
    \      primeIndex += 1\n        }\n        if primes[primeIndex] == 14 {\n   \
    \         primeIndex += 1\n        }\n        if letter == \" \" {\n         \
    \   primeIndex += 1\n        }\n        if primes[primeIndex] == 15 {\n      \
    \      primeIndex += 1\n        }\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 16 {\n            primeIndex\
    \ += 1\n        }\n        if letter == \" \" {\n            primeIndex += 1\n\
    \        }\n", '    return sentence.components(separatedBy: " ").filter{ $0.characters.count
    > 1 }.sorted().joined(separator: " ")', '    return sentence', "    var result\
    \ = \"\"\n    var primes = [1]\n    var index = 0\n    for char in sentence.characters\
    \ {\n        if primes[index] == 0 {\n            primes = primes + [index]\n\
    \        }\n        index += 1\n    }\n    for prime in primes {\n        result\
    \ = result + String(sentence.substringWithRange(NSMakeRange(0, prime)))\n    }\n\
    \    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", '    return sentence', "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrimeNumber(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for letter\
    \ in sentence {\n        if primes[primeIndex] == 1 {\n            primeIndex\
    \ += 1\n            if primeIndex == primes.count {\n                primes.append(1)\n\
    \                primeIndex = 0\n            }\n        }\n        primes[primeIndex]\
    \ += 1\n    }\n    for prime in primes {\n        result = result + String(letters[prime])\n\
    \    }\n    return result", '    return sentence', "    var result = \"\"\n  \
    \  var primes = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        result = result + String(prime)\n    }\n    return result", "   \
    \ var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            result += String(letter)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        } else {\n            result +=\
    \ String(letter)\n        }\n    }\n    return result", "    var result = \"\"\
    \n    var primes = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        if prime > 1 {\n            for letter in sentence.characters {\n\
    \                if prime == letters.distance(letters.startIndex, letters.endIndex,\
    \ sentence.startIndex, sentence.endIndex, letter) {\n                    result\
    \ += String(letter)\n                }\n            }\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrimeNumber(word) {\n            result += \" \" + word\n       \
    \ }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    var index = 0\n    for char in sentence {\n        if char == \"\
    \ \" {\n            primes[index] = 0\n            index++\n        } else {\n\
    \            primes[index] += 1\n        }\n    }\n    for prime in primes {\n\
    \        if prime == 1 {\n            result += String(char)\n        }\n    }\n\
    \    return result", "    var result = \"\"\n    var primes = [1]\n    var primeIndex\
    \ = 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ = 0\n        }\n        if primes[primeIndex] == 0 {\n            primes[primeIndex]\
    \ = 1\n            if char == \"a\" || char == \"e\" || char == \"i\" || char\
    \ == \"o\" || char == \"u\" {\n                result += char\n            }\n\
    \        }\n        primeIndex++\n    }\n    return result", "    var result =\
    \ \"\"\n    var primes = [1]\n    for letter in sentence.characters {\n      \
    \  if primes.contains(letter) {\n            primes.append(letter)\n        }\n\
    \    }\n    for prime in primes {\n        if prime > 1 {\n            for letter\
    \ in sentence.characters {\n                if prime == letters.count {\n    \
    \                result += letter\n                }\n            }\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in sentence.characters\
    \ {\n        if isPrime(Int(letter)) {\n            result += letter\n       \
    \ }\n    }\n    return result", "    let words = sentence.characters.split(separator:\
    \ \" \")\n    var result = \"\"\n    for word in words {\n        if isPrimeNumber(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in sentence.characters\
    \ {\n        if isPrime(Int(letter)) {\n            result += String(letter)\n\
    \        }\n    }\n    return result", '    return sentence', "    var result\
    \ = \"\"\n    var primes = [1]\n    var index = 0\n    for letter in sentence.characters\
    \ {\n        if primes[index] == 1 {\n            primes[index] = 2\n        \
    \    result += String(letter)\n        }\n        if primes[index] > 1 {\n   \
    \         primes[index] = primes[index - 1] + 1\n        }\n        index++\n\
    \    }\n    return result", "    var result = \"\"\n    var primes = [1]\n   \
    \ for char in sentence.characters {\n        if primes.contains(char.count) {\n\
    \            primes.append(char.count)\n        } else {\n            result +=\
    \ String(char)\n        }\n    }\n    return result", "    guard let sentence\
    \ = sentence.lowercased(), let words = sentence.components(separatedBy: \" \"\
    ) else {\n        return \"No words\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let word = word.lowercased() {\n            if let index\
    \ = Int(word) {\n                if index.isPrime {\n                    result\
    \ += \" \" + word\n                }\n            }\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    var primes = [1]\n   \
    \ var primeIndex = 0\n    for char in sentence {\n        if char == \" \" {\n\
    \            primeIndex += 1\n            if primeIndex == primes.count {\n  \
    \              primes.append(1)\n                primeIndex = 0\n            }\n\
    \        } else {\n            primes[primeIndex] += 1\n        }\n    }\n   \
    \ for prime in primes {\n        if prime == 1 {\n            result += String(char)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    for char in sentence.characters {\n        if primes.contains(char.count)\
    \ {\n            primes.append(char.count)\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n \
    \           result += \" \" + word\n        }\n    }\n    return result", "  \
    \  guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let word = word.lowercased() {\n            if let index\
    \ = find(words, word) {\n                let index = index(word, startIndex: index)\n\
    \                if isPrime(index: index) {\n                    result += word\n\
    \                }\n            }\n        }\n    }\n    return result", '    return
    words_in_sentence(sentence.characters)', "    var result = \"\"\n    var primes\
    \ = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        if prime > result.characters.count {\n            result = result\
    \ + String(prime)\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for letter in sentence.characters {\n        if isPrime(letter) {\n    \
    \        result += letter\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    var primes = [1]\n    for letter in sentence.characters {\n    \
    \    if primes.contains(letter) {\n            primes.append(letter)\n       \
    \ }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    return sentence.componentsSeparatedByString(\"\
    \ \")\n        .filter({$0.characters.count > 1})\n        .filter({$0.characters.count\
    \ < 100})\n        .filter({$0.characters.filter({$0 != \"a\" && $0 != \"e\" &&\
    \ $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count == 0})\n        .filter({$0.characters.filter({$0\
    \ != \"a\" && $0 != \"e\" && $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count\
    \ != 0})\n        .filter({$0.characters.filter({$0 != \"a\" && $0 != \"e\" &&\
    \ $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count != 0})\n        .map({$0.characters.filter({$0\
    \ != \"a\" && $0 != \"e\" && $0 != \"i\" && $0 != \"o\" && $0 != \"u\"}).count})\n\
    \        .filter({$0.isPrime})\n        .sorted()\n        .joinWithSeparator(\"\
    \ \")", "    var result = \"\"\n    for word in sentence.split(\" \") {\n    \
    \    if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    return sentence.components(separatedBy:\
    \ \" \")\n        .filter({ (word: String) -> Bool in\n            return isPrime(word.length)\n\
    \        })\n        .sorted()\n        .joined(separator: \" \")", "    return\
    \ sentence.componentsSeparatedByString(\" \")\n        .filter({$0.characters.count\
    \ > 1})\n        .filter({$0.characters.count < 100})\n        .filter({$0.characters.isPrimeNumber()})\n\
    \        .map({$0.stringByTrimmingCharactersInSet(NSCharacterSet.whitespaceAndNewlineCharacterSet())})\n\
    \        .joinWithSeparator(\" \")", '    return sentence', "    guard let sentence\
    \ = sentence.lowercased(), let words = sentence.components(separatedBy: \" \"\
    ) else {\n        return \"\"\n    }\n    var result = \"\"\n    for word in words\
    \ {\n        if let word = word.lowercased() {\n            if let index = word.characters.index(of:\
    \ word) {\n                if index != word.characters.endIndex {\n          \
    \          result = result + String(word.characters.suffixFrom(index))\n     \
    \           }\n            }\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for letter in sentence.characters {\n        if isPrime(letter)\
    \ {\n            result += letter\n        }\n    }\n    return result", "   \
    \ return sentence.componentsSeparatedByString(\" \")\n        .filter({$0.characters.count\
    \ > 1})\n        .filter({$0.characters.count < 100})\n        .filter({$0.characters.count\
    \ % 2 == 0})\n        .map({$0.characters.first!})\n        .sorted()\n      \
    \  .joinWithSeparator(\" \")", '    return words_in_sentence(sentence.characters.map(String.init))',
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(prime)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    var primes = [1]\n    var primeIndex =\
    \ 0\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 0 {\n            primes[primeIndex]\
    \ = 1\n            if primeIndex == primes.count {\n                result +=\
    \ char\n            }\n        }\n    }\n    return result", "    return sentence.components(separatedBy:\
    \ \" \")\n        .filter { $0.characters.count > 1 }\n        .sorted()\n   \
    \     .map { $0.characters.first }\n        .reduce(\"\") { $0 + $1 }", "    var\
    \ result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for char\
    \ in sentence {\n        if char == \" \" {\n            primeIndex += 1\n   \
    \     }\n        if primes[primeIndex] == 0 {\n            primes[primeIndex]\
    \ = 1\n            if primeIndex == primes.count {\n                result +=\
    \ char\n            }\n        }\n    }\n    return result", "    guard let sentence\
    \ = sentence.lowercased(), let words = sentence.components(separatedBy: \" \"\
    ) else {\n        return \"\"\n    }\n    var result = \"\"\n    for word in words\
    \ {\n        if let prime = Int(word), prime > 1 {\n            result += \" \"\
    \ + word\n        }\n    }\n    return result", "    var result = \"\"\n    for\
    \ word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n         \
    \   result += \" \" + word\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrimeNumber(word)\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    return sentence.componentsSeparatedByString(\" \")\n        .filter({ (word)\
    \ -> Bool in\n            return isPrime(Int(word))\n        })\n        .map({\
    \ (word) -> String in\n            return word\n        })\n        .joinWithSeparator(\"\
    \ \")", "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n\
    \    for letter in sentence.characters {\n        if primes[primeIndex] == 1 {\n\
    \            primeIndex++\n            if primeIndex == primes.count {\n     \
    \           primes.append(1)\n                primeIndex = 0\n            }\n\
    \        }\n        if primes[primeIndex] == 0 {\n            primeIndex++\n \
    \           if primeIndex == primes.count {\n                primes.append(1)\n\
    \                primeIndex = 0\n            }\n        }\n        primes[primeIndex]\
    \ = primes[primeIndex] + 1\n    }\n    for prime in primes {\n        if prime\
    \ == 1 {\n            result = result + String(letter)\n        }\n    }\n   \
    \ return result", "    var result = \"\"\n    for word in sentence.split(\" \"\
    ) {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n   \
    \     }\n    }\n    return result", "    return sentence.components(separatedBy:\
    \ \" \")\n        .filter({ (word: String) -> Bool in\n            return word.characters.count\
    \ > 1\n        })\n        .sorted()\n        .map { (word: String) -> String\
    \ in\n            return word\n        }\n        .joined(separator: \" \")",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    let words = sentence.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let length = word.characters.count\n       \
    \ if isPrime(length) == true {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    var primes = [1]\n   \
    \ var primeIndex = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(1)\n                primeIndex = 0\n      \
    \      }\n        }\n        primes[primeIndex] += 1\n    }\n    for prime in\
    \ primes {\n        if prime > 1 {\n            result += String(sentence[sentence.startIndex...sentence.startIndex.advancedBy(prime\
    \ - 1)])\n        }\n    }\n    return result", "    var result = \"\"\n    var\
    \ primes = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        result = result + String(prime)\n    }\n    return result", "   \
    \ var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primeNumbers = [Int]()\n    for letter in sentence.characters\
    \ {\n        let index = Int(letter)\n        if index == index {\n          \
    \  primeNumbers.append(index)\n        }\n    }\n    for number in primeNumbers\
    \ {\n        if number > 1 {\n            for letter in sentence.characters {\n\
    \                let index = Int(letter)\n                if index == index {\n\
    \                    if number % index == 0 {\n                        result\
    \ += String(letter)\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result", '    return sentence', "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    return sentence.componentsSeparatedByString(\" \")\n        .filter{$0.characters.count\
    \ > 1}\n        .filter{$0.characters.count < 100}\n        .filter{$0.characters.count\
    \ % 2 == 0}\n        .filter{$0.characters.count != 0}\n        .map{$0.characters.count}\n\
    \        .sorted()\n        .map{$0.description}\n        .joined(separator: \"\
    \ \")", "    var result = \"\"\n    for word in sentence.split(\" \") {\n    \
    \    if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        if prime > sentence.characters.count {\n            break\n     \
    \   }\n        if prime > 1 {\n            result += String(prime)\n        }\n\
    \    }\n    return result", '    return words_in_sentence_helper(sentence, "")',
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return sentence', "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n \
    \           result += \" \" + word\n        }\n    }\n    return result", "  \
    \  var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for char\
    \ in sentence.characters {\n        if primes[primeIndex] == 1 {\n           \
    \ primeIndex += 1\n            if primeIndex == primes.count {\n             \
    \   primes.append(2)\n            }\n        }\n        if primes[primeIndex]\
    \ == 2 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(3)\n            }\n        }\n        if primes[primeIndex]\
    \ == 3 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(5)\n            }\n        }\n        if primes[primeIndex]\
    \ == 5 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(7)\n            }\n        }\n        if primes[primeIndex]\
    \ == 7 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(11)\n            }\n        }\n        if primes[primeIndex]\
    \ == 11 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(13)\n            }\n        }\n        if primes[primeIndex]\
    \ == 13 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(17)\n            }\n        }\n        if primes[primeIndex]\
    \ == 17 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(19)\n            }\n        }\n        if primes[primeIndex]\
    \ == 19 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(23)\n            }\n        }\n        if primes[primeIndex]\
    \ == 23 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(29)\n            }\n        }\n        if primes[primeIndex]\
    \ == 29 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(31)\n            }\n        }\n        if primes[primeIndex]\
    \ == 31 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(37)\n            }\n        }\n        if primes[primeIndex]\
    \ == 37 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(41)\n            }\n        }\n        if primes[primeIndex]\
    \ == 41 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(43)\n            }\n        }\n        if primes[primeIndex]\
    \ == 43 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(47)\n            }\n        }\n        if primes[primeIndex]\
    \ == 47 {", "    var result = \"\"\n    var primes = [1]\n    var primeIndex =\
    \ 0\n    for letter in sentence.characters {\n        if primes[primeIndex] ==\
    \ 1 {\n            primeIndex++\n        }\n        if primeIndex == primes.count\
    \ {\n            primes.append(0)\n        }\n        if letter == \" \" {\n \
    \           primes[primeIndex] = 1\n            primeIndex++\n        }\n    }\n\
    \    for letter in sentence.characters {\n        if letter == \" \" {\n     \
    \       result += String(letter)\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    let words = sentence.characters.split(separator: \" \")\n    var result = \"\
    \"\n    for word in words {\n        let count = word.characters.count\n     \
    \   if isPrime(count: count) {\n            result += word\n        }\n    }\n\
    \    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrimeNumber(word) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    guard let sentence = sentence.lowercased(),\
    \ let words = sentence.components(separatedBy: \" \") else {\n        return \"\
    \"\n    }\n    var result = \"\"\n    for word in words {\n        if let word\
    \ = word.lowercased() {\n            if let index = find(words) {\n          \
    \      if index != word.characters.count {\n                    result = result\
    \ + word\n                }\n            }\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var index = 0\n    for char in\
    \ sentence {\n        if char == \" \" {\n            primes[index] = 0\n    \
    \        index++\n        } else {\n            primes[index] += 1\n        }\n\
    \    }\n    for prime in primes {\n        if prime == 0 {\n            continue\n\
    \        }\n        for index in 0..<prime {\n            result += String(sentence[index])\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", '    return sentence',
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var index = 0\n    for letter\
    \ in sentence {\n        if letter == \" \" {\n            primes[index] = 0\n\
    \            index++\n        } else {\n            primes[index] += 1\n     \
    \   }\n    }\n    for prime in primes {\n        if prime == 0 {\n           \
    \ continue\n        }\n        if prime > result.characters.count {\n        \
    \    result = result + String(repeating: \" \", count: prime - 1)\n        }\n\
    \        if prime < result.characters.count {\n            result = result + String(repeating:\
    \ \" \", count: prime + 1)\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if isPrime(word: word) {\n            result += \" \" +\
    \ word\n        }\n    }\n    return result", "    return sentence.componentsSeparatedByString(\"\
    \ \")\n        .map { $0.characters.count }\n        .filter { $0 > 1 }\n    \
    \    .sorted()\n        .map { String($0) }\n        .joined(separator: \" \")",
  "    var result = \"\"\n    var primes = [1]\n    for char in sentence.characters\
    \ {\n        if primes.contains(char.count) {\n            primes.append(char.count)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for char in sentence.characters {\n                if char.count == prime\
    \ {\n                    result += String(char)\n                }\n         \
    \   }\n        }\n    }\n    return result", "    return sentence.componentsSeparatedByString(\"\
    \ \")\n        .filter{$0.characters.count > 1}\n        .filter{$0.characters.count\
    \ < 100}\n        .filter{$0.characters.count != 0}\n        .filter{$0.characters.count\
    \ != 1}\n        .filter{$0.characters.count != 2}\n        .filter{$0.characters.count\
    \ != 3}\n        .filter{$0.characters.count != 4}\n        .filter{$0.characters.count\
    \ != 5}\n        .filter{$0.characters.count != 6}\n        .filter{$0.characters.count\
    \ != 7}\n        .filter{$0.characters.count != 8}\n        .filter{$0.characters.count\
    \ != 9}\n        .filter{$0.characters.count != 10}\n        .filter{$0.characters.count\
    \ != 11}\n        .filter{$0.characters.count != 12}\n        .filter{$0.characters.count\
    \ != 13}\n        .filter{$0.characters.count != 14}\n        .filter{$0.characters.count\
    \ != 15}\n        .filter{$0.characters.count != 16}\n        .filter{$0.characters.count\
    \ != 17}\n        .filter{$0.characters.count != 18}\n        .filter{$0.characters.count\
    \ != 19}\n        .filter{$0.characters.count != 20}\n        .filter{$0.characters.count\
    \ != 21}\n        .filter{$0.characters.count != 22}\n        .filter{$0.characters.count\
    \ != 23}\n        .filter{$0.characters.count != 24}\n        .filter{$0.characters.count\
    \ != 25}\n        .filter{$0.characters.count != 26}\n        .filter{$0.characters.count\
    \ != 27}\n        .filter{$0.characters.count != 28}\n        .filter{$0.characters.count\
    \ != 29}\n        .filter{$0.characters.count != 30}\n        .filter{$0.characters.count\
    \ != 31}\n        .filter{$0.characters.count != 32}\n        .filter{$0.characters.count\
    \ != 33}\n        .filter{$0.characters.count != 34}\n        .filter{$0.characters.count\
    \ != 35}\n        .filter{$0.characters.count != 36}\n        .filter{$0.characters.count\
    \ != 37}\n        .filter{$0.characters.count != 38}\n        .filter{$0.characters.count\
    \ != 39}\n        .filter{$0.characters.count != 40}\n        .filter{$0.characters.count\
    \ != 41}\n        .filter{$0.characters.count != 42}\n        .filter{$0.characters.count\
    \ != 43}\n        .filter{$0.characters.count != 44}\n        .filter{$0.characters.count\
    \ != 45}\n        .filter{$0.characters.count != 46}\n        .filter{$0.characters.count\
    \ != 47}\n        .filter{$0.characters.count != 48}", "    var result = \"\"\n\
    \    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n  \
    \          result += \" \" + word\n        }\n    }\n    return result", "   \
    \ return sentence.componentsSeparatedByString(\" \")\n        .filter({ (word)\
    \ -> Bool in\n            let length = word.characters.count\n            return\
    \ length == 2 && length == Int(word.characters.first!)\n        })\n        .sorted()\n\
    \        .joinWithSeparator(\" \")", "    var result = \"\"\n    var primes =\
    \ [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        result = result + String(prime)\n    }\n    return result", "   \
    \ var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for letter\
    \ in sentence.characters {\n        if primes[primeIndex] == 1 {\n           \
    \ primeIndex += 1\n            if primeIndex == primes.count {\n             \
    \   primes.append(0)\n            }\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n            if primeIndex == primes.count {\n  \
    \              primes.append(0)\n            }\n        } else {\n           \
    \ primes[primeIndex] += 1\n        }\n    }\n    for prime in primes {\n     \
    \   if prime == 1 {\n            result += String(letter)\n        }\n    }\n\
    \    return result", '    return words_in_sentence(sentence.characters.map(String.init))',
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    var currentPrime\
    \ = 1\n    for char in sentence {\n        if char == \" \" {\n            primeIndex\
    \ += 1\n            primes.append(currentPrime)\n            currentPrime = 1\n\
    \        } else {\n            currentPrime += 1\n        }\n    }\n    for prime\
    \ in primes {\n        if prime > len(sentence) {\n            break\n       \
    \ }\n        if sentence[prime - 1] == \" \" {\n            result += sentence[prime\
    \ - 1]\n        }\n    }\n    return result", '    return sentence', "    var\
    \ result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(prime)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for word in\
    \ sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for letter in sentence.characters {\n        if isPrime(Int(letter)) {\n\
    \            result += String(letter)\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        for letter in sentence.characters\
    \ {\n            if prime == letter {\n                result += String(letter)\n\
    \            }\n        }\n    }\n    return result", "    guard let sentenceArray\
    \ = sentence.components(separatedBy: \" \") else {\n        return \"\"\n    }\n\
    \    var result = \"\"\n    for word in sentenceArray {\n        if isPrimeNumber(word:\
    \ word) {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for letter\
    \ in sentence.characters {\n        if primes[primeIndex] == 1 {\n           \
    \ primeIndex += 1\n        }\n        primes[primeIndex] = primes[primeIndex]\
    \ + 1\n    }\n    for prime in primes {\n        if prime > 1 {\n            for\
    \ letter in sentence.characters {\n                if prime % letter == 0 {\n\
    \                    result += String(letter)\n                }\n           \
    \ }\n        }\n    }\n    return result", '    return sentence', "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for letter in sentence.characters {\n        if isPrime(letter)\
    \ {\n            result += letter\n        }\n    }\n    return result", "   \
    \ var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for letter\
    \ in sentence.characters {\n        if primeIndex == primes.count {\n        \
    \    primes.append(1)\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 1 {\n            primes[primeIndex] = primes[primeIndex] + 1\n          \
    \  if primes[primeIndex] == 2 {\n                result += String(letter)\n  \
    \          }\n        }\n    }\n    return result", "    var result = \"\"\n \
    \   var primes = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        result = result + String(prime)\n    }\n    return result", "   \
    \ var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            result += letter\n    \
    \    }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    var primeIndex = 0\n    for char in sentence.characters {\n     \
    \   if primes[primeIndex] == 1 {\n            primeIndex += 1\n            if\
    \ primeIndex == primes.count {\n                primes.append(1)\n           \
    \     primeIndex += 1\n            }\n        }\n        if primes[primeIndex]\
    \ == 0 {\n            primeIndex += 1\n            if primeIndex == primes.count\
    \ {\n                primes.append(1)\n                primeIndex += 1\n     \
    \       }\n        }\n    }\n    for char in sentence.characters {\n        if\
    \ primes[primeIndex] == 1 {\n            result += String(char)\n        }\n \
    \   }\n    return result", "    var result = \"\"\n    var primes = [1]\n    var\
    \ primeIndex = 0\n    for letter in sentence.characters {\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if primeIndex == primes.count\
    \ {\n            primes.append(1)\n            primeIndex = 0\n        }\n   \
    \     if letter == \" \" {\n            primes[primeIndex] += 1\n        }\n \
    \   }\n    for prime in primes {\n        if prime == 1 {\n            result\
    \ += String(letter)\n        }\n    }\n    return result", "    var result = \"\
    \"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n\
    \            result += \" \" + word\n        }\n    }\n    return result", " \
    \   var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > result.characters.count\
    \ {\n            result = result + String(prime)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        if prime > 1 {\n       \
    \     for letter in sentence.characters {\n                if prime == letters.count\
    \ {\n                    result += letter\n                }\n            }\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    var primeIndex = 0\n    for letter in sentence {\n        if primes[primeIndex]\
    \ == 0 {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n    }\n    for letter in sentence {\n\
    \        if letter == \" \" {\n            primeIndex += 1\n        }\n      \
    \  if primes[primeIndex] == 0 {\n            primeIndex += 1\n        }\n    \
    \    if primes[primeIndex] == 1 {\n            primeIndex += 1\n        }\n  \
    \      if letter == \" \" {\n            primeIndex += 1\n        }\n    }\n \
    \   for letter in sentence {\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 0 {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 1 {\n            primeIndex\
    \ += 1\n        }\n        if letter == \" \" {\n            primeIndex += 1\n\
    \        }\n    }\n    for letter in sentence {\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 0 {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 1 {\n\
    \            primeIndex += 1\n        }\n        if letter == \" \" {\n      \
    \      primeIndex += 1\n        }\n    }\n    for letter in sentence {\n     \
    \   if letter == \" \" {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 0 {\n            primeIndex += 1\n        }\n        if primes[primeIndex]\
    \ == 1 {\n            primeIndex += 1\n        }\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n    }\n    for letter in sentence {\n\
    \        if letter == \" \" {\n            primeIndex += 1\n        }\n      \
    \  if primes[primeIndex] == 0 {\n            primeIndex += 1\n        }\n    \
    \    if primes[primeIndex] == 1 {\n            primeIndex += 1\n        }\n  \
    \      if letter == \" \" {\n            primeIndex += 1\n        }\n    }\n \
    \   for letter in sentence {\n        if letter == \" \" {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 0 {\n            primeIndex\
    \ += 1\n        }\n        if primes[primeIndex] == 1 {\n            primeIndex\
    \ += 1\n        }\n        if letter == \" \" {\n            primeIndex += 1\n\
    \        }\n    }\n    for letter in sentence {\n        if letter == \" \" {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 0 {\n\
    \            primeIndex += 1\n        }\n        if primes[primeIndex] == 1 {\n\
    \            primeIndex += 1\n        }\n", "    var result = \"\"\n    for word\
    \ in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for word in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n \
    \           result += \" \" + word\n        }\n    }\n    return result", '    return
    sentence', "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    var primes = [1]\n   \
    \ var index = 0\n    for letter in sentence.characters {\n        if primes[index]\
    \ == 1 {\n            primes = primes.filter{$0 % letter != 0}\n        }\n  \
    \      if primes[index] == 0 {\n            result += String(letter)\n       \
    \ }\n        index += 1\n    }\n    return result", '    return sentence', " \
    \   var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    guard let sentence = sentence.lowercased(), let words = sentence.components(separatedBy:\
    \ \" \") else {\n        return \"\"\n    }\n    var result = \"\"\n    for word\
    \ in words {\n        if let word = word.lowercased() {\n            if let index\
    \ = result.index(of: word) {\n                result.remove(at: index)\n     \
    \       } else {\n                result += word\n            }\n        }\n \
    \   }\n    return result", "    var result = \"\"\n    var primes = [1]\n    for\
    \ letter in sentence.characters {\n        if primes.contains(letter) {\n    \
    \        primes.append(letter)\n        }\n    }\n    for prime in primes {\n\
    \        if prime > 1 {\n            for letter in sentence.characters {\n   \
    \             if prime == letter {\n                    result += String(letter)\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var result = \"\"\n    var primes = [1]\n    for char in sentence {\n      \
    \  if primes.contains(char.count) {\n            primes.append(char.count)\n \
    \       } else {\n            result += char\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    var primeIndex = 0\n    for char\
    \ in sentence {\n        if char == \" \" {\n            primeIndex += 1\n   \
    \         primes.append(primes[primeIndex])\n        } else {\n            primes[primeIndex]\
    \ += 1\n        }\n    }\n    for prime in primes {\n        if prime > 1 {\n\
    \            for index in 0..<prime {\n                result += String(sentence[index])\n\
    \            }\n        }\n    }\n    return result", "    var result = \"\"\n\
    \    for letter in sentence.characters {\n        if isPrime(letter) {\n     \
    \       result += letter\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result"]
stop_tokens:
- "\n}"
