name: HumanEval_143_words_in_sentence
language: swift
prompt: "\n/// You are given a string representing a sentence,\n/// the sentence contains\
  \ some words separated by a space,\n/// and you have to return a string that contains\
  \ the words from the original sentence,\n/// whose lengths are prime numbers,\n\
  /// the order of the words in the new string should be the same as the original\
  \ one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n/// Output: \"\
  is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\n/// Output:\
  \ \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence\
  \ contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(words_in_sentence(sentence: \"This is a\
  \ test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\"\
  ) == \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
  \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am\
  \ Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for\
  \ it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\"\
  )\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
completions: ["    var result = \"\"\n    var primes = [1]\n    for letter in sentence.characters\
    \ {\n        if primes.contains(letter) {\n            primes.append(letter)\n\
    \        }\n    }\n    for prime in primes {\n        result = result + String(prime)\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in sentence.characters\
    \ {\n        if isPrime(Int(letter)) {\n            result += String(letter)\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    var primes\
    \ = [1]\n    for letter in sentence.characters {\n        if primes.contains(letter)\
    \ {\n            primes.append(letter)\n        }\n    }\n    for prime in primes\
    \ {\n        if prime > 1 {\n            for letter in sentence.characters {\n\
    \                if prime == letter {\n                    result += String(letter)\n\
    \                }\n            }\n        }\n    }\n    return result", '    return
    sentence', "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", '    return sentence', "    return sentence.componentsSeparatedByString(\"\
    \ \")\n        .filter({ (word) -> Bool in\n            return isPrime(word.characters.count)\n\
    \        })\n        .sorted()\n        .joinWithSeparator(\" \")", "    var result\
    \ = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  "    guard let sentence = sentence.lowercased() else {\n        return \"\"\n  \
    \  }\n    var result = \"\"\n    var primeNumbers = [1]\n    for character in\
    \ sentence.characters {\n        if primeNumbers.contains(character) {\n     \
    \       primeNumbers.append(primeNumbers.last! * character)\n        } else {\n\
    \            result += String(character)\n        }\n    }\n    return result",
  "    var result = \"\"\n    for word in sentence.split(\" \") {\n        if isPrime(Int(word))\
    \ {\n            result += \" \" + word\n        }\n    }\n    return result",
  '    return sentence', '    return sentence', "    var result = \"\"\n    for word\
    \ in sentence.split(\" \") {\n        if isPrime(Int(word)) {\n            result\
    \ += \" \" + word\n        }\n    }\n    return result", '    return sentence',
  "    var result = \"\"\n    for letter in sentence.characters {\n        if isPrime(letter)\
    \ {\n            result += letter\n        }\n    }\n    return result", "   \
    \ let words = sentence.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let primes = primes(word: word)\n        for\
    \ prime in primes {\n            if prime == word.count {\n                result\
    \ += \" \" + word\n            }\n        }\n    }\n    return result", '    return
    sentence', "    var result = \"\"\n    for word in sentence.split(\" \") {\n \
    \       if isPrime(Int(word)) {\n            result += \" \" + word\n        }\n\
    \    }\n    return result", "    var result = \"\"\n    for letter in sentence.characters\
    \ {\n        if isPrime(Int(letter)) {\n            result += letter\n       \
    \ }\n    }\n    return result", "    var result = \"\"\n    for word in sentence.split(\"\
    \ \") {\n        if isPrime(Int(word)) {\n            result += \" \" + word\n\
    \        }\n    }\n    return result"]
stop_tokens:
- "\n}"
