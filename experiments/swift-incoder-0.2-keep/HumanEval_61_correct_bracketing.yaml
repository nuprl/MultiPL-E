name: HumanEval_61_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
  (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
  (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"()\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
  \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
  ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
  \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
  \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\nassert(correct_bracketing(brackets:\
  \ \"(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())())(()\")\
  \ == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)"
completions: ["    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        openingBracketIndex = openingBracketIndex.successor()\n\
    \        closingBracketIndex = closingBracketIndex.successor()\n        if openingBracketIndex\
    \ < brackets.endIndex && closingBracketIndex < brackets.endIndex {\n         \
    \   if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        while closingBracketIndex\
    \ < closingBrackets.count {\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                return false\n            }\n            closingBracketIndex\
    \ += 1\n        }\n        openingBracketIndex += 1\n    }\n    return true",
  "    var openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    if openingBracketsCount == 0 {\n        return\
    \ true\n    }\n\n    if openingBracketsCount == 1 {\n        return closingBracketsCount\
    \ == 1\n    }\n\n    if openingBracketsCount == 2 {\n        return closingBracketsCount\
    \ == 2\n    }\n\n    if openingBracketsCount == 3 {\n        return closingBracketsCount\
    \ == 3\n    }\n\n    if openingBracketsCount == 4 {\n        return closingBracketsCount\
    \ == 4\n    }\n\n    if openingBracketsCount == 5 {\n        return closingBracketsCount\
    \ == 5\n    }\n\n    if openingBracketsCount == 6 {\n        return closingBracketsCount\
    \ == 6\n    }\n\n    if openingBracketsCount == 7 {\n        return closingBracketsCount\
    \ == 7\n    }\n\n    if openingBracketsCount == 8 {\n        return closingBracketsCount\
    \ == 8\n    }\n\n    if openingBracketsCount == 9 {\n        return closingBracketsCount\
    \ == 9\n    }\n\n    if openingBracketsCount == 10 {\n        return closingBracketsCount\
    \ == 10\n    }\n\n    if openingBracketsCount == 11 {\n        return closingBracketsCount\
    \ == 11\n    }\n\n    if openingBracketsCount == 12 {\n        return closingBracketsCount\
    \ == 12\n    }\n\n    if openingBracketsCount == 13 {\n        return closingBracketsCount\
    \ == 13\n    }\n\n    if openingBracketsCount == 14 {\n        return closingBracketsCount\
    \ == 14\n    }\n\n    if openingBracketsCount == 15 {\n        return closingBracketsCount\
    \ == 15\n    }\n\n    if openingBracketsCount == 16 {\n        return closingBracketsCount\
    \ == 16\n    }\n\n    if openingBracketsCount == 17 {\n        return closingBracketsCount\
    \ == 17\n    }\n\n    if openingBracketsCount == 18 {\n        return closingBracketsCount\
    \ == 18\n    }\n\n    if openingBracketsCount == 19 {\n        return closingBracketsCount\
    \ == 19\n    }\n\n    if openingBracketsCount == 20 {\n        return closingBracketsCount\
    \ == 20\n    }\n\n    if openingBracketsCount == 21 {\n        return closingBracketsCount\
    \ == 21", "    let openingBrackets = brackets.components(separatedBy: \"(\")\n\
    \    let closingBrackets = brackets.components(separatedBy: \")\")\n    \n   \
    \ for openingBracket in openingBrackets {\n        if let closingBracket = closingBrackets.firstIndex(of:\
    \ openingBracket) {\n            closingBrackets.remove(at: closingBracket)\n\
    \        }\n    }\n    \n    return !closingBrackets.isEmpty", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    openingBrackets.removeLast()\n\
    \    closingBrackets.removeFirst()\n    if openingBrackets.isEmpty {\n       \
    \ return true\n    }\n    if closingBrackets.isEmpty {\n        return false\n\
    \    }\n    if openingBrackets.first == closingBrackets.last {\n        return\
    \ true\n    }\n    if openingBrackets.first == closingBrackets.first {\n     \
    \   return false\n    }\n    return openingBrackets.first == closingBrackets.last",
  "    var opening_brackets = brackets.characters\n    var closing_brackets = brackets.characters\n\
    \    var opening_brackets_count = brackets.characters.count\n    var closing_brackets_count\
    \ = brackets.characters.count\n    var opening_brackets_index = opening_brackets.startIndex\n\
    \    var closing_brackets_index = closing_brackets.startIndex\n    while opening_brackets_index\
    \ < opening_brackets.endIndex {\n        if opening_brackets[opening_brackets_index]\
    \ == \")\" {\n            opening_brackets_index++\n            closing_brackets_index--\n\
    \            if closing_brackets_index < closing_brackets.endIndex {\n       \
    \         closing_brackets[closing_brackets_index] = \"(\"\n                closing_brackets_count--\n\
    \            }\n        } else if opening_brackets[opening_brackets_index] !=\
    \ \"(\" {\n            opening_brackets_count--\n        }\n        opening_brackets_index++\n\
    \    }\n    return opening_brackets_count == closing_brackets_count", "    var\
    \ openingBrackets = brackets.characters\n    var closingBrackets = brackets.characters\n\
    \    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n    var\
    \ openingBracketsCount = openingBrackets.count\n    var closingBracketsCount =\
    \ closingBrackets.count\n    if openingBracketsCount != closingBracketsCount {\n\
    \        return false\n    }\n    if openingBrackets.count > 0 {\n        var\
    \ lastOpeningBracket = openingBrackets.last\n        var lastClosingBracket =\
    \ closingBrackets.first\n        if lastOpeningBracket != lastClosingBracket {\n\
    \            return false\n        }\n    }\n    return true", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    \n    if openingBrackets.count != closingBrackets.count {\n    \
    \    return false\n    }\n    \n    for openingBracket in openingBrackets {\n\
    \        if let closingBracket = closingBrackets.firstIndex(of: openingBracket)\
    \ {\n            closingBrackets.remove(at: closingBracket)\n        }\n    }\n\
    \    \n    return openingBrackets.count == 0", "    if brackets.isEmpty {\n  \
    \      return true\n    }\n\n    var openingBrackets = brackets.characters\n \
    \   var closingBrackets = brackets.characters\n\n    var openingBracketsCount\
    \ = 1\n    var closingBracketsCount = 1\n\n    for openingBracket in openingBrackets\
    \ {\n        if closingBrackets.contains(openingBracket) {\n            closingBracketsCount\
    \ += 1\n        } else {\n            openingBracketsCount += 1\n        }\n \
    \   }\n\n    return openingBracketsCount == closingBracketsCount", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    return openingBrackets.count == closingBrackets.count", "    var\
    \ opening = brackets.characters\n    var closing = brackets.characters\n    opening.removeFirst()\n\
    \    closing.removeLast()\n    if opening.isEmpty {\n        return closing.isEmpty\
    \ && closing.count == 0\n    }\n    if closing.isEmpty {\n        return closing.count\
    \ == 0\n    }\n    if opening.count != closing.count {\n        return false\n\
    \    }\n    for index in 0..<opening.count {\n        if opening[index] != closing[index]\
    \ {\n            return false\n        }\n    }\n    return true", "    var opening_brackets\
    \ = brackets.characters\n    var closing_brackets = brackets.characters\n    opening_brackets.removeFirst()\n\
    \    closing_brackets.removeLast()\n    var opening_brackets_count = opening_brackets.count\n\
    \    var closing_brackets_count = closing_brackets.count\n    if opening_brackets_count\
    \ != closing_brackets_count {\n        return false\n    }\n    for index in 0..<opening_brackets_count\
    \ {\n        if opening_brackets[index] != closing_brackets[index] {\n       \
    \     return false\n        }\n    }\n    return true", "    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracketsCount = 1\n    var closingBracketsCount = 1\n    for index in\
    \ 0..<brackets.characters.count {\n        let char = brackets.characters[index]\n\
    \        if char == \"(\" {\n            openingBracketsCount += 1\n        }\
    \ else if char == \")\" {\n            closingBracketsCount += 1\n        }\n\
    \        if openingBracketsCount > closingBracketsCount {\n            return\
    \ false\n        }\n    }\n    return true", "    var opening = brackets[0]\n\
    \    var closing = brackets[1]\n    for char in brackets {\n        if char ==\
    \ opening {\n            opening += char\n        } else if char == closing {\n\
    \            closing += char\n        } else {\n            return false\n   \
    \     }\n    }\n    return opening == closing", "    let openingBrackets = brackets.characters\n\
    \        .filter({ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({\
    \ String($0) })\n    let closingBrackets = brackets.characters\n        .filter({\
    \ $0 != \"(\" })\n        .filter({ $0 != \")\" })\n        .map({ String($0)\
    \ })\n    return openingBrackets.count == closingBrackets.count", "    let openingBrackets\
    \ = brackets.components(separatedBy: \"(\")\n    let closingBrackets = brackets.components(separatedBy:\
    \ \")\")\n    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      let closingBracket = closingBrackets.first(where: { $0 == openingBracket\
    \ })\n        if closingBracket == nil {\n            return false\n        }\n\
    \    }\n    return true", "    let openingBrackets = brackets.characters.split{$0\
    \ == \")\"}.map(String.init)\n    let closingBrackets = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n    return openingBrackets.count == closingBrackets.count",
  "    var opening = brackets[0]\n    var closing = brackets[1]\n    for index in\
    \ 1..<brackets.count {\n        let current = brackets[index]\n        if opening\
    \ != current {\n            return false\n        }\n        opening = current\n\
    \    }\n    return opening == closing", "    var openingBrackets = brackets.characters\n\
    \    var closingBrackets = brackets.characters\n    var openingBracketsCount =\
    \ 1\n    var closingBracketsCount = 1\n\n    for openingBracket in openingBrackets\
    \ {\n        if openingBracket == \"(\" {\n            openingBracketsCount +=\
    \ 1\n        } else if openingBracket == \")\" {\n            openingBracketsCount\
    \ -= 1\n        }\n    }\n\n    for closingBracket in closingBrackets {\n    \
    \    if closingBracket == \"(\" {\n            closingBracketsCount += 1\n   \
    \     } else if closingBracket == \")\" {\n            closingBracketsCount -=\
    \ 1\n        }\n    }\n\n    return openingBracketsCount == 0 && closingBracketsCount\
    \ == 0", "    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n  \
    \  var openingBracketsString = \"\"\n    var closingBracketsString = \"\"\n\n\
    \    while openingBracketsIndex < openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[openingBracketsIndex]\n        openingBracketsString += String(openingBracket)\n\
    \        openingBracketsIndex += 1\n\n        if openingBracketsIndex < openingBrackets.count\
    \ {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)\n        \
    \    closingBracketsIndex += 1\n        }\n\n        if openingBracketsIndex <\
    \ openingBrackets.count {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += String(closingBracket)\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += String(closingBracket)"]
stop_tokens:
- "\n}"
