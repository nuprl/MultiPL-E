name: HumanEval_162_string_to_md5
language: swift
prompt: "\n/// Given a string 'text', return its md5 hash equivalent string.\n///\
  \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
  \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_to_md5(text: \"Hello world\") ==\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") == nil)\n\
  assert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\
  assert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  )"
completions: ["    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n    let\
    \ result = MD5Init(&md5)\n    if result != 0 {\n        return nil\n    }\n  \
    \  let result = MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \    if result != 0 {\n        return nil\n    }\n    let result = MD5Final(&md5)\n\
    \    if result != 0 {\n        return nil\n    }\n    return String(bytes: md5,\
    \ encoding: NSUTF8StringEncoding)", "    if text == \"\" {\n        return nil\n\
    \    }\n    var md5: Data = Data()\n    md5.withUnsafeMutableBytes { (bytes: UnsafeMutablePointer<UInt8>)\
    \ -> Void in\n        text.utf8.withUnsafeBytes { (bytes: UnsafePointer<UInt8>)\
    \ -> Void in\n            CC_MD5Init(bytes)\n            CC_MD5Update(bytes, bytes,\
    \ text.utf8.count)\n            CC_MD5Final(bytes, md5)\n        }\n    }\n  \
    \  return String(data: md5, encoding: .utf8)", "    if text == \"\" {\n      \
    \  return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    var md5Hash = MD5()\n    md5Hash.update(text.data(using: .utf8)!)\n    return\
    \ String(data: md5Hash.bytes, encoding: .utf8)", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.hexString", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: CC_MD5_CTX = CC_MD5_CTX()\n\
    \    defer { CC_MD5_CTX_free(md5) }\n    CC_MD5Init(md5)\n    CC_MD5Update(md5,\
    \ text.data(using: .utf8)!)\n    guard let result = CC_MD5Final(md5, nil) else\
    \ {\n        return nil\n    }\n    return String(data: result, encoding: .utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: Array<UInt8> = Array<UInt8>(repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let result\
    \ = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else {\n        return nil\n\
    \    }\n    return String(data: Data(bytes: md5), encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n\
    \    let hash = MD5(data!)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: String.Encoding.utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n \
    \   return hash.hexString", "    if text == \"\" {\n        return nil\n    }\n\
    \    var md5: CString?\n    let result = MD5Hash(text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ &md5)\n    if result == noErr {\n        return String(cString: md5!)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5() {\n \
    \       return String(data: hash, encoding: .utf8)\n    }\n    return nil"]
stop_tokens:
- "\n}"
