name: HumanEval_162_string_to_md5
language: swift
prompt: "\n/// Given a string 'text', return its md5 hash equivalent string.\n///\
  \ If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
  \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(string_to_md5(text: \"Hello world\") ==\
  \ \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text: \"\") == nil)\n\
  assert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\
  assert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
  )"
completions: ["    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n    let\
    \ result = MD5Init(&md5)\n    if result != 0 {\n        return nil\n    }\n  \
    \  let result = MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding))\n\
    \    if result != 0 {\n        return nil\n    }\n    let result = MD5Final(&md5)\n\
    \    if result != 0 {\n        return nil\n    }\n    return String(bytes: md5,\
    \ encoding: NSUTF8StringEncoding)", "    if text == \"\" {\n        return nil\n\
    \    }\n    var md5: Data = Data()\n    md5.withUnsafeMutableBytes { (bytes: UnsafeMutablePointer<UInt8>)\
    \ -> Void in\n        text.utf8.withUnsafeBytes { (bytes: UnsafePointer<UInt8>)\
    \ -> Void in\n            CC_MD5Init(bytes)\n            CC_MD5Update(bytes, bytes,\
    \ text.utf8.count)\n            CC_MD5Final(bytes, md5)\n        }\n    }\n  \
    \  return String(data: md5, encoding: .utf8)", "    if text == \"\" {\n      \
    \  return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    var md5Hash = MD5()\n    md5Hash.update(text.data(using: .utf8)!)\n    return\
    \ String(data: md5Hash.bytes, encoding: .utf8)", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.hexString", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: CC_MD5_CTX = CC_MD5_CTX()\n\
    \    defer { CC_MD5_CTX_free(md5) }\n    CC_MD5Init(md5)\n    CC_MD5Update(md5,\
    \ text.data(using: .utf8)!)\n    guard let result = CC_MD5Final(md5, nil) else\
    \ {\n        return nil\n    }\n    return String(data: result, encoding: .utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: Array<UInt8> = Array<UInt8>(repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let result\
    \ = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else {\n        return nil\n\
    \    }\n    return String(data: Data(bytes: md5), encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n\
    \    let hash = MD5(data!)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: String.Encoding.utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8)", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n \
    \   return hash.hexString", "    if text == \"\" {\n        return nil\n    }\n\
    \    var md5: CString?\n    let result = MD5Hash(text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ &md5)\n    if result == noErr {\n        return String(cString: md5!)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)\n    if let hash = data.md5() {\n \
    \       return String(data: hash, encoding: .utf8)\n    }\n    return nil", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    return data.md5()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n   \
    \ let hash = MD5(data: data)\n    return hash.base64EncodedString()", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.hexString", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    return String(data: data, encoding: String.Encoding.md5) ?? nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return hash.hexString", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.hexString", "    if text == \"\
    \" {\n        return nil\n    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    guard let data = text.data(using: String.Encoding.utf8) else {\n        return\
    \ nil\n    }\n    guard let result = CC_MD5(data.bytes, CC_LONG(data.count), &md5)\
    \ else {\n        return nil\n    }\n    return String(data: data, encoding: String.Encoding.utf8)?.lowercased()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n    \
    \    return String(hash)\n    }\n    return nil", "    if text == \"\" {\n   \
    \     return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    var md5: CString?\n    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: .utf8)\n    if let hash = data.md5() {\n    \
    \    return String(hash)\n    }\n    return nil", "    if text == \"\" {\n   \
    \     return nil\n    }\n    var md5: CString?\n    MD5_CTX ctx\n    MD5_Init(&ctx)\n\
    \    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding), text.count)\n\
    \    MD5_Final(&md5, &ctx)\n    return String(md5!)", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n    MD5Init(&md5)\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.count)\n\
    \    MD5Final(&md5)\n    return String(md5!)", "    if text == \"\" {\n      \
    \  return nil\n    }\n    var md5: CString?\n    MD5Init(&md5)\n    MD5Update(&md5,\
    \ text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n  \
    \  MD5Final(&md5)\n    return String(data: md5!, encoding: NSUTF8StringEncoding)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return md5.GetMD5String()", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: .utf8)", "    if text == \"\"\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return hash.hexString", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.hexString", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash =\
    \ MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString", "    if\
    \ text == \"\" {\n        return nil\n    }\n    var md5: CC_MD5_CTX = CC_MD5_CTX()\n\
    \    defer { CC_MD5_CTX_free(md5) }\n    CC_MD5_CTX_init(md5)\n    defer { CC_MD5_CTX_cleanup(md5)\
    \ }\n    CC_MD5_Update(md5, text.bytes, text.count)\n    var md5String: String\
    \ = String()\n    CC_MD5_Final(md5String.bytes, &md5)\n    return md5String",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return hash.hexString",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return md5.GetMD5String()", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash =\
    \ MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? \"\"", "    if text == \"\" {\n        return nil\n    }\n    let data =\
    \ text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n        return nil\n    }\n    guard let _ = CC_MD5(data.bytes, CC_LONG(data.count),\
    \ &md5) else {\n        return nil\n    }\n    return String(data: Data(bytes:\
    \ md5), encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5(data: data)\n    return hash.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(cString: md5)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    _ = text.data(using: String.Encoding.utf8)?.withUnsafeBytes { text in\n \
    \       CC_MD5(text.bytes, CC_LONG(text.count), &md5)\n    }\n    return String(data:\
    \ Data(bytes: md5), encoding: .utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n    if let\
    \ hash = data.md5() {\n        return String(hash)\n    }\n    return nil", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)!\n    let hash = MD5.hash(data: data)\n    return\
    \ String(data: hash, encoding: .utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5.hash(data: data)\n    return hash.hexString", "    if text == \"\"\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    _ = text.utf8.withUnsafeBufferPointer {\n        CC_MD5(CC_MD5_DIGEST_LENGTH,\
    \ $0.baseAddress, &md5[0], CC_LONG(text.utf8.count))\n    }\n    let md5String\
    \ = String(cString: md5)\n    return md5String", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: String.Encoding.utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5(data!)\n\
    \    return hash.base64EncodedString()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil", "    if text == \"\" {\n        return nil\n    }\n    var md5Hash\
    \ = MD5()\n    md5Hash.update(text.data(using: .utf8)!)\n    return String(data:\
    \ md5Hash.bytes, encoding: .utf8)", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash =\
    \ MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\"\
    \ {\n        return nil\n    }\n    var md5: CString?\n    MD5_CTX ctx\n    MD5_Init(&ctx)\n\
    \    MD5_Update(&ctx, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \    MD5_Final(&md5, &ctx)\n    return String(md5!)", "    if text == \"\" {\n\
    \        return nil\n    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    CC_MD5(text.utf8, CC_LONG(len(text)), &md5)\n    return String(cString: md5)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBufferPointer\
    \ { (textBuffer: UnsafeBufferPointer<UInt8>) in\n        CC_MD5(textBuffer.baseAddress,\
    \ CC_LONG(textBuffer.count), &md5[0], CC_LONG(md5.count))\n    }\n    let result\
    \ = String(cString: md5)\n    return result", "    if text == \"\" {\n       \
    \ return nil\n    }\n    guard let data = text.data(using: String.Encoding.utf8)\
    \ else {\n        return nil\n    }\n    let hash = data.md5()\n    return hash?.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash?.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBufferPointer {\n  \
    \      CC_MD5(UnsafePointer($0.baseAddress), CC_LONG($0.count), md5)\n    }\n\
    \    return String(cString: md5)", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)\n    let hash =\
    \ MD5(data!)\n    return hash.hexString", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash, encoding: .utf8)", "    if text == \"\" {\n   \
    \     return nil\n    }\n    var md5: CString?\n    MD5Init(&md5)\n    MD5Update(&md5,\
    \ text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n  \
    \  MD5Final(&md5)\n    return String(data: md5!, encoding: NSUTF8StringEncoding)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: String.Encoding.utf8)\n    }\n    return nil", "    if text\
    \ == \"\" {\n        return nil\n    }\n    var md5: Array<UInt8> = Array<UInt8>(repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    guard let data = text.data(using:\
    \ String.Encoding.utf8) else {\n        return nil\n    }\n    guard let result\
    \ = CC_MD5(data.bytes, CC_LONG(data.count), &md5) else {\n        return nil\n\
    \    }\n    let hexString = String(data: Data(bytes: md5), encoding: String.Encoding.utf8)\
    \ ?? \"\"\n    return hexString.lowercased()", "    if text == \"\" {\n      \
    \  return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return hash.hexString", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = data.md5()\n    return hash?.base64EncodedString()", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: .utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? \"\"",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data: data)\n    return digest.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data: hash,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.map { String(format: \"%02x\", $0) }.joined()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ md5)\n    return String(cString: md5)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return hash.base64EncodedString()", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\
    \" {\n        return nil\n    }\n    var md5 = MD5()\n    md5.update(text.data(using:\
    \ .utf8)!)\n    return String(data: md5.digest(), encoding: .utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = data.md5()\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = MD5(data: data)\n\
    \    return hash.base64EncodedString()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ =\
    \ text.utf8.withUnsafeBytes { (bytes: UnsafePointer<CChar>) in\n        CC_MD5(bytes,\
    \ CC_LONG(text.utf8.count), &md5[0])\n    }\n    return String(cString: md5)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n   \
    \ md5Hash.update(text.data(using: .utf8)!)\n    return String(data: md5Hash.bytes,\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: .utf8)\n    if let hash = data.md5() {\n        return\
    \ String(hash)\n    }\n    return nil", "    if text == \"\" {\n        return\
    \ nil\n    }\n    var md5Hash = MD5()\n    md5Hash.update(text.data(using: String.Encoding.utf8))\n\
    \    return md5Hash.digest().base64EncodedString()", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return String(data: hash!, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    _ = text.utf8.withUnsafeBytes { (bytes: UnsafePointer<CChar>) in\n      \
    \  CC_MD5(bytes, CC_LONG(text.utf8.count), &md5)\n    }\n    return String(data:\
    \ Data(bytes: md5), encoding: .utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: .utf8)\n    if let hash = data.md5()\
    \ {\n        return String(hash)\n    }\n    return nil", "    if text == \"\"\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n    md5_CSTRING(&md5,\
    \ text)\n    return md5", "    if text == \"\" {\n        return nil\n    }\n\
    \    var md5: MD5\n    md5.CalculateString(text)\n    return md5.GetMD5String()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data: data)\n    return digest.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    let hash = MD5(data!)\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    var md5: CString?\n    MD5Init(&md5)\n    MD5Update(&md5,\
    \ text.cStringUsingEncoding(NSUTF8StringEncoding), text.count)\n    MD5Final(&md5,\
    \ nil)\n    return String(data: md5!, encoding: NSUTF8StringEncoding)", "    if\
    \ text == \"\" {\n        return nil\n    }\n    var md5: Data = Data()\n    let\
    \ data = text.data(using: String.Encoding.utf8)!\n    md5.update(data)\n    let\
    \ md5String = md5.base64EncodedString()\n    return md5String", "    if text ==\
    \ \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = CC_MD5(text.utf8, CC_LONG(len(text)),\
    \ &md5)\n    return String(cString: md5)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    guard let data = text.data(using: String.Encoding.utf8) else {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard\
    \ let _ = data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ =\
    \ data.withUnsafeBytes {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes\
    \ {\n        return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n   \
    \     return nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return\
    \ nil\n    }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n \
    \   }\n    guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n \
    \   guard let _ = data.withUnsafeBytes {\n        return nil\n    }\n", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5(data: data)\n    return hash.base64EncodedString()", "   \
    \ if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)\n    if let hash\
    \ = data.md5() {\n        return String(hash)\n    }\n    return nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(text.utf8.count),\
    \ &md5)\n    return String(data: &md5, encoding: .utf8)", "    if text == \"\"\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)\n    if let hash = data.md5() {\n        return String(hash)\n    }\n\
    \    return nil", "    if text == \"\" {\n        return nil\n    }\n    let data\
    \ = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8) ?? nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return String(data: hash!, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    if text == \"\" {\n        return nil\n    }\n    var md5 = MD5()\n\
    \    md5.update(text.data(using: .utf8)!)\n    return String(data: md5.digest(),\
    \ encoding: .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let\
    \ data = text.data(using: String.Encoding.utf8)\n    let hash = data.md5()\n \
    \   return hash?.base64EncodedString()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let\
    \ hash = MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(hash)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n    MD5Init(&md5)\n\
    \    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding), text.characters.count)\n\
    \    MD5Final(&md5)\n    return md5?.utf8CString", "    if text == \"\" {\n  \
    \      return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.base64EncodedString()", "    if text == \"\
    \" {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n   \
    \ let hash = MD5.hash(data: data)\n    return String(data: hash, encoding: .utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n    let hash\
    \ = MD5(data!)\n    return hash.base64EncodedString()", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n\
    \    return String(data: hash, encoding: String.Encoding.utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating: 0, count:\
    \ Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(data: &md5, encoding: .utf8)", "    if text == \"\"\
    \ {\n        return nil\n    }\n    let data = text.data(using: .utf8)\n    let\
    \ hash = MD5(data!)\n    return hash.hexString", "    if text == \"\" {\n    \
    \    return nil\n    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    _ = text.utf8.withUnsafeBufferPointer {\n        CC_MD5(UnsafePointer($0.baseAddress),\
    \ CC_LONG($0.count))\n    }\n    return String(data: Data(bytes: md5), encoding:\
    \ .utf8)", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8)", "    if text == \"\" {\n        return\
    \ nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n    if let\
    \ hash = data.md5() {\n        return String(hash)\n    }\n    return nil", " \
    \   if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n  \
    \  md5Hash.update(text.data(using: .utf8)!)\n    return md5Hash.digest().base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.hexString",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data: data)\n    return digest.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    var md5: CC_MD5_CTX = CC_MD5_CTX()\n    defer { CC_MD5_free(md5)\
    \ }\n    CC_MD5_Init(md5)\n    CC_MD5_Update(md5, text.bytes, text.count)\n  \
    \  return CC_MD5_Final(md5, nil)", "    if text == \"\" {\n        return nil\n\
    \    }\n    var md5: CString?\n    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    let hash = MD5.hash(data!)\n    return hash.hexString",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    \n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    \n    if let hash = data.md5() {\n        return\
    \ String(hash)\n    }\n    \n    return nil", "    if text == \"\" {\n       \
    \ return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)!\n    let hash = MD5(data: data)\n\
    \    return hash.base64EncodedString()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    var md5: MD5\n    md5.CalculateString(text.utf8CString)\n  \
    \  return String(format: \"%08x\", md5.GetDigest())", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(hash)\n    }\n    return\
    \ nil", "    if text == \"\" {\n        return nil\n    }\n    var md5Hash = MD5()\n\
    \    md5Hash.update(text.data(using: .utf8)!)\n    return md5Hash.digest().base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(data: &md5, encoding: .utf8)", "    if text == \"\"\
    \ {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return String(data: hash!, encoding: String.Encoding.utf8)",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: Array<UInt8> = Array<UInt8>(repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    CC_MD5(text.utf8.bytes, CC_LONG(len(text)),\
    \ &md5)\n    return String(bytes: &md5, encoding: .utf8)", "    if text == \"\"\
    \ {\n        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text.utf8)\n\
    \    return String(data: md5.bytes, encoding: .utf8)", "    if text == \"\" {\n\
    \        return nil\n    }\n    var md5: MD5\n    md5.CalculateString(text)\n\
    \    return String(format: \"%x\", md5.GetDigest())", "    if text == \"\" {\n\
    \        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8)", "    if text == \"\" {\n        return nil\n    }\n\
    \    let data = text.data(using: String.Encoding.utf8)\n    if let hash = MD5(data!)\
    \ {\n        return hash.base64EncodedString()\n    }\n    return nil", "    if\
    \ text == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    if let hash = data.md5() {\n        return String(data: hash, encoding: String.Encoding.utf8)\n\
    \    }\n    return nil", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)!\n    let hash = MD5.hash(data:\
    \ data)\n    return String(data: hash, encoding: String.Encoding.utf8) ?? nil",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)!\n    let hash = MD5.hash(data: data)\n    return String(data:\
    \ hash, encoding: String.Encoding.utf8) ?? nil", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: .utf8)\n    let hash = MD5(data!)\n  \
    \  return hash.hexString", "    if text == \"\" {\n        return nil\n    }\n\
    \    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _\
    \ = text.utf8.withUnsafeBytes { str in\n        CC_MD5(str, CC_LONG(len(str)),\
    \ &md5)\n    }\n    let hexString = String(format: \"%0*x\", Int(CC_MD5_DIGEST_LENGTH),\
    \ md5)\n    return hexString.lowercased()", "    if text == \"\" {\n        return\
    \ nil\n    }\n    var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    CC_MD5(text.utf8.bytes, CC_LONG(len(text)), &md5)\n    return String(cString:\
    \ md5)", "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ String.Encoding.utf8)\n    if let hash = data.md5() {\n        return String(data:\
    \ hash, encoding: .utf8)\n    }\n    return nil", "    if text == \"\" {\n   \
    \     return nil\n    }\n    let data = text.data(using: .utf8)!\n    let hash\
    \ = MD5(data: data)\n    return hash.hexString", "    if text == \"\" {\n    \
    \    return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)\n\
    \    let hash = MD5.hash(data!)\n    return hash?.base64EncodedString()", "  \
    \  if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5(data: data)\n    return hash.base64EncodedString()",
  "    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n    let\
    \ result = MD5Hash(text.utf8)\n    if let cstr = result {\n        md5 = cstr\n\
    \    }\n    return md5", "    if text == \"\" {\n        return nil\n    }\n \
    \   let data = text.data(using: String.Encoding.utf8)\n    return data.md5()",
  "    if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = MD5.hash(data: data)\n    return hash.hexString", " \
    \   if text == \"\" {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = md5(data)\n    return hash.base64EncodedString()", " \
    \   if text == \"\" {\n        return nil\n    }\n    var md5 = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = text.utf8.withUnsafeBytes { (bytes:\
    \ UnsafePointer<CChar>) in\n        CC_MD5(bytes, CC_LONG(text.utf8.count), md5)\n\
    \    }\n    return String(data: Data(bytes: md5), encoding: .utf8)", "    if text\
    \ == \"\" {\n        return nil\n    }\n    let data = text.data(using: String.Encoding.utf8)!\n\
    \    let hash = MD5.hash(data: data)\n    return String(data: hash, encoding:\
    \ String.Encoding.utf8) ?? nil", "    if text == \"\" {\n        return nil\n\
    \    }\n    let data = text.data(using: String.Encoding.utf8)!\n    let hash =\
    \ MD5.hash(data: data)\n    return String(data: hash, encoding: String.Encoding.utf8)\
    \ ?? nil", "    if text == \"\" {\n        return nil\n    }\n    var md5: CString?\n\
    \    MD5Init(&md5)\n    MD5Update(&md5, text.cStringUsingEncoding(NSUTF8StringEncoding),\
    \ text.characters.count)\n    MD5Final(&md5)\n    return String(data: md5!, encoding:\
    \ NSUTF8StringEncoding)", "    if text == \"\" {\n        return nil\n    }\n\
    \    var md5: CInt = 0\n    let result = MD5Hash(text.utf8)\n    md5 = result.md5\n\
    \    return String(format: \"%08x\", md5)"]
stop_tokens:
- "\n}"
