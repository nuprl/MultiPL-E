name: HumanEval_126_is_sorted
language: swift
prompt: "\n/// Given a list of numbers, return whether or not they are sorted\n///\
  \ in ascending order. If list has more than 1 duplicate of the same\n/// number,\
  \ return False. Assume no negative numbers and only integers.\n/// Examples\n///\
  \ is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n/// is_sorted([1,\
  \ 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n///\
  \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3, 2, 4, 5, 6,\
  \ 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n/// is_sorted([1,\
  \ 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
  \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
  assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2,\
  \ 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\n\
  assert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\n\
  assert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3,\
  \ 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst:\
  \ [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
completions: ["    var seen = [Int]()\n    for num in lst {\n        if seen[num]\
    \ != nil {\n            return false\n        }\n        seen[num] = num\n   \
    \ }\n    return true", "    var seen = [Int]()\n    for num in lst {\n       \
    \ if seen[num] != nil {\n            return false\n        }\n        seen[num]\
    \ = num\n    }\n    return true", "    if lst.count > 1 {\n        return false\n\
    \    }\n    if lst.count == 1 {\n        return true\n    }\n    var i = 0\n \
    \   var j = 0\n    var k = lst.count - 1\n    while i < k {\n        if lst[i]\
    \ > lst[j] {\n            return false\n        }\n        i += 1\n        j +=\
    \ 1\n    }\n    return true", "    if lst.count > 1 {\n        return false\n\
    \    }\n    if lst.count == 1 {\n        return true\n    }\n    if lst[0] ==\
    \ lst[1] {\n        return is_sorted(lst[1..<lst.count])\n    }\n    return false",
  "    var seen = [Int]()\n    for num in lst {\n        if seen[num] != nil {\n \
    \           return false\n        }\n        seen[num] = num\n    }\n    return\
    \ true", "    var last: Int = 0\n    for x in lst {\n        if x == last {\n\
    \            return false\n        }\n        last = x\n    }\n    return true",
  "    var prev = 0\n    for cur in lst {\n        if cur == prev {\n            return\
    \ false\n        }\n        prev = cur\n    }\n    return true", "    if lst.count\
    \ == 0 {\n        return true\n    }\n    var last: Int = 0\n    for x in lst\
    \ {\n        if x == last {\n            return false\n        }\n        last\
    \ = x\n    }\n    return true", "    var seen = [Int]()\n    for x in lst {\n\
    \        if seen[x - 1] != nil {\n            return false\n        }\n      \
    \  seen[x] = x\n    }\n    return true", "    if lst.count == 0 {\n        return\
    \ true\n    }\n    var last: Int = 0\n    for x in lst {\n        if x == last\
    \ {\n            return false\n        }\n        last = x\n    }\n    return\
    \ true", "    var seen = [Int]()\n    for num in lst {\n        if seen[num] !=\
    \ nil {\n            return false\n        } else {\n            seen[num] = num\n\
    \        }\n    }\n    return true", "    if lst.count == 0 {\n        return\
    \ true\n    }\n    if lst.count == 1 {\n        return true\n    }\n    if lst.count\
    \ > 1 {\n        var last: Int = 0\n        for idx in lst.indices {\n       \
    \     if idx == last {\n                return false\n            }\n        \
    \    last = idx\n        }\n    }\n    return true", "    var seen = [Int]()\n\
    \    for num in lst {\n        if seen[num] == nil {\n            seen[num] =\
    \ true\n            return true\n        }\n    }\n    return false", "    var\
    \ seen = [Int]()\n    for num in lst {\n        if seen[num] == nil {\n      \
    \      seen[num] = true\n            return true\n        }\n    }\n    return\
    \ false", "    var seen = [Int]()\n    for x in lst {\n        if seen[x] == nil\
    \ {\n            seen[x] = true\n            return true\n        }\n    }\n \
    \   return false", "    var seen = [Int]()\n    for x in lst {\n        if seen[x]\
    \ == nil {\n            seen[x] = true\n            return true\n        }\n \
    \   }\n    return false", "    var seen = [Int]()\n    for x in lst {\n      \
    \  if seen[x] != nil {\n            return false\n        }\n        seen[x] =\
    \ x\n    }\n    return true", "    var seen = [Int]()\n    for num in lst {\n\
    \        if seen[num] != nil {\n            return false\n        }\n        seen[num]\
    \ = num\n    }\n    return true", "    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true", "    if lst.count == 0 {\n    \
    \    return true\n    }\n    if lst.count == 1 {\n        return true\n    }\n\
    \    if lst[0] == lst[1] {\n        return is_sorted(lst[1..<lst.count])\n   \
    \ }\n    return false"]
stop_tokens:
- "\n}"
