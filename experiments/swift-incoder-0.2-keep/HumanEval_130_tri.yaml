name: HumanEval_130_tri
language: swift
prompt: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// tri(3)\
  \ = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n:\
  \ 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n:\
  \ 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
  assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
  \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
  \ 1) == [1, 3])"
completions: ["    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    if n\
    \ == 0 {\n        result.append(0)\n        return result;\n    }\n    if n ==\
    \ 1 {\n        result.append(1)\n        return result;\n    }\n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(n / 2)\n    } else {\n        result.append(1)\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 0 {\n        result.append(0)\n        return result;\n    }\n    if n\
    \ == 1 {\n        result.append(1)\n        return result;\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n   \
    \     result.append(3)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    if n == 0 {\n      \
    \  result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    var first =\
    \ 0\n    var second = 1\n    var third = 1\n    var fourth = 1\n    \n    for\
    \ _ in 0..<n {\n        third = first + second + third\n        fourth = first\
    \ + second + third\n        first = second\n        second = third\n        third\
    \ = fourth\n    }\n    \n    result.append(first)\n    result.append(second)\n\
    \    result.append(third)\n    result.append(fourth)\n    return result", "  \
    \  var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n / 2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n \
    \   if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "    var\
    \ result = [Int]()\n    if n == 1 {\n        result.append(1)\n        return\
    \ result;\n    }\n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    if n == 3 {\n        result.append(1)\n        result.append(3)\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n   \
    \ var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var thirteenthThree = [Int]()\n\
    \    var fourteenthThree = [Int]()\n    var fifteenthThree = [Int]()\n    var\
    \ sixteenthThree = [Int]()\n    var seventeenthThree = [Int]()\n    var eighteenthThree\
    \ = [Int]()\n    var nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n\
    \    var twentyFourthThree = [Int]()\n    var twentyFifthThree = [Int]()\n   \
    \ var twentySixthThree = [Int]()\n    var twentySeventhThree = [Int]()\n    var\
    \ twentyEighthThree = [Int]()\n    var twentyNinthThree = [Int]()\n    var thirtyOnethThree\
    \ = [Int]()\n    var thirtySecondThree = [Int]()\n    var thirtyThirdThree = [Int]()\n\
    \    var thirtyFourthThree = [Int]()\n    var thirtyFifthThree = [Int]()\n   \
    \ var thirtySixthThree = [Int]()\n    var thirtySeventhThree = [Int]()\n    var\
    \ thirtyEighthThree = [Int]()\n    var thirtyNinthThree = [Int]()\n    var fortyOnethThree\
    \ = [Int]()\n    var fortySecondThree = [Int]()\n    var fortyThirdThree = [Int]()\n\
    \    var fortyFourthThree = [Int]()\n    var fortyFifthThree = [Int]()\n    var\
    \ fortySixthThree = [Int]()\n    var fortySeventhThree = [Int]()\n    var fortyEighthThree\
    \ = [Int]()\n    var fortyNinthThree = [Int]()\n    var fiftyOnethThree = [Int]()\n\
    \    var fiftySecondThree = [Int]()\n    var fiftyThirdThree = [Int]()\n    var\
    \ fiftyFourthThree", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 0 {\n        result.append(0)\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    let firstTribonacci = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    \n    for i in firstTribonacci {\n        result.append(i)\n\
    \    }\n    \n    return result"]
stop_tokens:
- "\n}"
