name: HumanEval_130_tri
language: swift
prompt: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// tri(3)\
  \ = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n:\
  \ 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n:\
  \ 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
  assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
  \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
  \ 1) == [1, 3])"
completions: ["    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    if n\
    \ == 0 {\n        result.append(0)\n        return result;\n    }\n    if n ==\
    \ 1 {\n        result.append(1)\n        return result;\n    }\n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(n / 2)\n    } else {\n        result.append(1)\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 0 {\n        result.append(0)\n        return result;\n    }\n    if n\
    \ == 1 {\n        result.append(1)\n        return result;\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n   \
    \     result.append(3)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    if n == 0 {\n      \
    \  result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    var first =\
    \ 0\n    var second = 1\n    var third = 1\n    var fourth = 1\n    \n    for\
    \ _ in 0..<n {\n        third = first + second + third\n        fourth = first\
    \ + second + third\n        first = second\n        second = third\n        third\
    \ = fourth\n    }\n    \n    result.append(first)\n    result.append(second)\n\
    \    result.append(third)\n    result.append(fourth)\n    return result", "  \
    \  var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result;\n    }\n  \
    \  if n == 1 {\n        result.append(1)\n        return result;\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result;\n    }\n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(1)\n        result.append(n / 2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n \
    \   if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "    var\
    \ result = [Int]()\n    if n == 1 {\n        result.append(1)\n        return\
    \ result;\n    }\n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    if n == 3 {\n        result.append(1)\n        result.append(3)\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var firstThree = [Int]()\n    var secondThree = [Int]()\n   \
    \ var thirdThree = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree\
    \ = [Int]()\n    var sixthThree = [Int]()\n    var seventhThree = [Int]()\n  \
    \  var eighthThree = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree\
    \ = [Int]()\n    var eleventhThree = [Int]()\n    var thirteenthThree = [Int]()\n\
    \    var fourteenthThree = [Int]()\n    var fifteenthThree = [Int]()\n    var\
    \ sixteenthThree = [Int]()\n    var seventeenthThree = [Int]()\n    var eighteenthThree\
    \ = [Int]()\n    var nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n\
    \    var twentyFourthThree = [Int]()\n    var twentyFifthThree = [Int]()\n   \
    \ var twentySixthThree = [Int]()\n    var twentySeventhThree = [Int]()\n    var\
    \ twentyEighthThree = [Int]()\n    var twentyNinthThree = [Int]()\n    var thirtyOnethThree\
    \ = [Int]()\n    var thirtySecondThree = [Int]()\n    var thirtyThirdThree = [Int]()\n\
    \    var thirtyFourthThree = [Int]()\n    var thirtyFifthThree = [Int]()\n   \
    \ var thirtySixthThree = [Int]()\n    var thirtySeventhThree = [Int]()\n    var\
    \ thirtyEighthThree = [Int]()\n    var thirtyNinthThree = [Int]()\n    var fortyOnethThree\
    \ = [Int]()\n    var fortySecondThree = [Int]()\n    var fortyThirdThree = [Int]()\n\
    \    var fortyFourthThree = [Int]()\n    var fortyFifthThree = [Int]()\n    var\
    \ fortySixthThree = [Int]()\n    var fortySeventhThree = [Int]()\n    var fortyEighthThree\
    \ = [Int]()\n    var fortyNinthThree = [Int]()\n    var fiftyOnethThree = [Int]()\n\
    \    var fiftySecondThree = [Int]()\n    var fiftyThirdThree = [Int]()\n    var\
    \ fiftyFourthThree", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 0 {\n        result.append(0)\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    let firstTribonacci = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    \n    for i in firstTribonacci {\n        result.append(i)\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    var a = 2\n \
    \   var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            a += b\n            b += c\n           \
    \ c += 1\n        } else {\n            a += c\n            b += b\n         \
    \   c += 1\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    var a = 2\n    var b = 3\n    var c = 1\n    for\
    \ _ in 0..<n {\n        result.append(c)\n        if n % 2 == 0 {\n          \
    \  c += b\n        } else {\n            c += a\n        }\n        if c > n {\n\
    \            c = 1\n        }\n        a += b\n        b += c\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \n    for i\
    \ in 0..<n {\n        result.append(firstTribonacci[i])\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    var first = 3\n    var second = 1\n    var third\
    \ = 2\n    for _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first = second\n        second = third\n\
    \        third = first + second\n    }\n    return result", "    var result =\
    \ [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    if n == 2 {\n        result.append(0)\n    \
    \    result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    \n    var first = 0\n    var second = 1\n    var third = 2\n    \n    for\
    \ i in 1...n {\n        \n        third = first + second + third\n        first\
    \ = second\n        second = third\n        \n        result.append(third)\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    for _ in 0..<n\
    \ {\n        result.append(first)\n        result.append(second)\n        result.append(third)\n\
    \        first++\n        second++\n        third++\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    if n % 2 == 0\
    \ {\n        a = a + b + c\n    } else {\n        d = d + c + b\n    }\n    for\
    \ _ in 1...n {\n        result.append(a)\n        if n % 2 == 0 {\n          \
    \  a = a + b + c\n        } else {\n            d = d + c + b\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    \n    var firstTribonacci = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    \n    for i in firstTribonacci {\n        result.append(i)\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    if n == 2 {\n  \
    \      result.append(3)\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n \
    \   if n == 0 {\n        result.append(0)\n        return result\n    }\n    if\
    \ n == 1 {\n        result.append(1)\n        return result\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    return result", "    var result = [Int]()\n    if n == 0 {\n        return\
    \ result;\n    }\n    if n == 1 {\n        result.append(3)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(1)\n        result.append(3)\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        return result\n    }\n    \n    result.append(tri(n\
    \ - 1) + tri(n - 2))\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 1 {\n        result.append(1)\n        return result\n    }\n    \n\
    \    if n == 2 {\n        result.append(3)\n        return result\n    }\n   \
    \ \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n == 3 {\n        result.append(1)\n      \
    \  result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n    var m = Int(1)\n\
    \    var n = Int(2)\n    var o = Int(0)\n    var p = Int(1)\n    var q = Int(2)\n\
    \    var r = Int(3)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(1)\n    var x = Int(3)\n    var y = Int(1)\n\
    \    var z = Int(2)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n\
    \    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(3)\n    var m = Int(1)\n    var n = Int(2)\n    var o = Int(0)\n\
    \    var p = Int(1)\n    var q = Int(2)\n    var r = Int(3)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n\
    \    var x = Int(3)\n    var y = Int(1)\n    var z = Int(2)\n    var a = Int(3)\n\
    \    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n\
    \    var f = Int(1)\n    var g = Int(0)\n    var h = Int(1)\n    var i = Int(0)\n\
    \    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n    var m = Int(1)\n\
    \    var n = Int(2)\n    var o = Int(0)\n    var p = Int(1)\n    var q = Int(2)\n\
    \    var r = Int(3)\n    var s = Int(1)\n    var t = Int(2)\n    var u = Int(1)\n\
    \    var v = Int(2)\n    var w = Int(1)\n    var x = Int(3)\n    var y = Int(1)\n\
    \    var z = Int(2)\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n    var g = Int(0)\n\
    \    var h = Int(1)\n    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n\
    \    var l = Int(3)\n    var m = Int(1)\n    var n = Int(2)\n    var o = Int(0)\n\
    \    var p = Int(1)\n    var q = Int(2)\n    var r = Int(3)\n    var s = Int(1)\n\
    \    var t = Int(2)\n    var u = Int(1)\n    var v = Int(2)\n    var w = Int(1)\n",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \ } else {\n        result.append(1)\n        result.append(n)\n        result.append(n)\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    if n == 2 {\n  \
    \      result.append(3)\n        return result;\n    }\n    if n == 3 {\n    \
    \    result.append(1)\n        result.append(2)\n        return result;\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    return result", "    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    result.append(0)\n    result.append(1)\n    result.append(2)\n   \
    \ result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result", " \
    \   var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n  \
    \      return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    if n == 1 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    if n == 2 {\n        result.append(0)\n    \
    \    result.append(1)\n        result.append(2)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        return result\n\
    \    }\n    result.append(0)\n    result.append(1)\n    result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n\
    \        result.append(n + 2)\n        return result\n    }\n    \n    result.append(n)\n\
    \    result.append(n + 2)\n    result.append(n + 3)\n    return result", "   \
    \ var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    \n    var firstTribonacci = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \  \n    for index in 0..<firstTribonacci.count {\n        result.append(firstTribonacci[index])\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 0 {\n        result.append(0)\n        return result\n    }\n    \n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    \n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    \n   \
    \ if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \    } else {\n        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n  \
    \      result.append(1 + n / 2)\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result;\n    }\n    if n == 2 {\n       \
    \ result.append(3)\n        return result;\n    }\n    if n == 3 {\n        result.append(3)\n\
    \        result.append(1)\n        return result;\n    }\n    if n % 2 == 0 {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    \n    return result", "    var result = [Int]()\n    \n    if\
    \ n == 0 {\n        result.append(0)\n        return result\n    }\n    \n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    \n\
    \    if n == 2 {\n        result.append(3)\n        return result\n    }\n   \
    \ \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        result.append(1)\n \
    \       return result\n    }\n    \n    if n == 1 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n == 3 {\n        result.append(1)\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 1 {\n        result.append(1)\n        return result\n    }\n    \n\
    \    if n == 2 {\n        result.append(3)\n        return result\n    }\n   \
    \ \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 0 {\n      \
    \  result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    if n == 0 {\n     \
    \   result.append(0)\n        result.append(1)\n        return result\n    }\n\
    \    if n == 1 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 2 {\n        result.append(1)\n        result.append(2)\n        return\
    \ result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    }\n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "   \
    \ var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    \
    \    return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n \
    \       return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(3)\n    } else {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(3)\n    }\n    \n    for i in 1...(n + 1) {\n        result.append(result[i-2]\
    \ + result[i-1])\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    var firstThree = [Int]()\n    var secondThree = [Int]()\n    var thirdThree\
    \ = [Int]()\n    var fourthThree = [Int]()\n    var fifthThree = [Int]()\n   \
    \ var sixthThree = [Int]()\n    var seventhThree = [Int]()\n    var eighthThree\
    \ = [Int]()\n    var ninethThree = [Int]()\n    var tenthThree = [Int]()\n   \
    \ var eleventhThree = [Int]()\n    var thirteenthThree = [Int]()\n    var fourteenthThree\
    \ = [Int]()\n    var fifteenthThree = [Int]()\n    var sixteenthThree = [Int]()\n\
    \    var seventeenthThree = [Int]()\n    var eighteenthThree = [Int]()\n    var\
    \ nineteenthThree = [Int]()\n    var twentiethThree = [Int]()\n    var twentyThirdThree\
    \ = [Int]()\n    var twentyFourthThree = [Int]()\n    var twentyFifthThree = [Int]()\n\
    \    var twentySixthThree = [Int]()\n    var twentySeventhThree = [Int]()\n  \
    \  var twentyEighthThree = [Int]()\n    var twentyNinethThree = [Int]()\n    var\
    \ thirtyThree = [Int]()\n    var thirtySixthThree = [Int]()\n    var thirtyEightthThree\
    \ = [Int]()\n    var thirtyNinethThree = [Int]()\n    var fortyThree = [Int]()\n\
    \    var fortySixthThree = [Int]()\n    var fortyEightthThree = [Int]()\n    var\
    \ fortyNinethThree = [Int]()\n    var fiftyThree = [Int]()\n    var fiftySixthThree\
    \ = [Int]()\n    var fiftyEightthThree = [Int]()\n    var fiftyNinethThree = [Int]()\n\
    \    var sixtyThree = [Int]()\n    var sixtySixthThree = [Int]()\n    var sixtyEightthThree\
    \ = [Int]()\n    var sixtyNinethThree = [Int]()\n    var seventyThree = [Int]()\n\
    \    var seventySixthThree = [Int]()\n    var seventyEightthThree = [Int]()\n\
    \    var seventyNinethThree = [Int]()\n    var eigh", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for i in 1...n {\n        result.append(c)\n\
    \        if i % 2 == 0 {\n            a = a + b\n            b = c\n        }\
    \ else {\n            c = a + b\n            a = b\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result", "    var result = [Int]()\n    var tri1 = 1\n    var\
    \ tri2 = 1\n    var tri3 = 1\n    var tri4 = 1\n    if n % 2 == 0 {\n        tri1\
    \ = tri1\n        tri2 = tri2\n        tri3 = tri3\n        tri4 = tri4\n    }\n\
    \    for _ in 1...n {\n        tri1 = tri1 + tri2\n        tri2 = tri1 + tri3\n\
    \        tri3 = tri2 + tri4\n        tri4 = tri3 + tri4\n        result.append(tri4)\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result;\n    }\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result;\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n  \
    \      result.append(1)\n    } else {\n        result.append(1)\n        result.append(n)\n\
    \    }\n    \n    for i in 1..<n {\n        result.append(result[i-2] + result[i-1])\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    if n == 1 {\n   \
    \     result.append(1)\n        return result\n    }\n    if n == 2 {\n      \
    \  result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n     \
    \   result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \    } else {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for _ in 1...(n + 1) {\n        result.append(result[0] + result[1]\
    \ + result[2])\n    }\n    \n    return result", "    var result = [Int]()\n \
    \   if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    var\
    \ a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n   \
    \ var e = Int(0)\n    for _ in 0..<n {\n        result.append(a)\n        if n\
    \ % 2 == 0 {\n            e = a + b + c\n            d = b + c + e\n         \
    \   c = a + b + d\n            a = b + c + d\n            b = a + c + e\n    \
    \    }\n        n -= 1\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    }\n    else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2))\n    }\n    return result", "    var result = [Int]()\n \
    \   var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            c += b\n        } else {\n            c\
    \ += a\n        }\n        if n % 2 == 0 {\n            b += a\n        } else\
    \ {\n            b += c\n        }\n        a += c\n    }\n    return result",
  "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n        return\
    \ result;\n    }\n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    if n == 3 {\n        result.append(3)\n        result.append(2)\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    var\
    \ a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            c += b\n        } else {\n            c\
    \ += a\n        }\n        if n % 2 == 0 {\n            b += a\n        } else\
    \ {\n            b += c\n        }\n        a += c\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3))\n    }\n    return result", "    var result = [Int]()\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    var tri1 = 3\n    var tri2 = 1\n    var tri3 = 1\n\
    \    for _ in 0..<n {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n\
    \        tri2 = tri1 + tri3\n        tri3 = tri2 + tri1\n    }\n    return result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \    } else {\n        result.append(1)\n        result.append(n + 1)\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    if n == 1 {\n      \
    \  result.append(1)\n        return result\n    }\n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n \
    \       result.append(0)\n        return result;\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result;\n    }\n    \n    if n == 2\
    \ {\n        result.append(3)\n        return result;\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 2 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(0)\n        result.append(1)\n        result.append(2)\n\
    \        result.append(3)\n        result.append(4)\n        result.append(5)\n\
    \        result.append(6)\n        result.append(7)\n        result.append(8)\n\
    \        result.append(9)\n        result.append(10)\n        result.append(11)\n\
    \        result.append(12)\n        result.append(13)\n        result.append(14)\n\
    \        result.append(15)\n        result.append(16)\n        result.append(17)\n\
    \        result.append(18)\n        result.append(19)\n        result.append(20)\n\
    \        result.append(21)\n        result.append(22)\n        result.append(23)\n\
    \        result.append(24)\n        result.append(25)\n        result.append(26)\n\
    \        result.append(27)\n        result.append(28)\n        result.append(29)\n\
    \        result.append(30)\n        result.append(31)\n        result.append(32)\n\
    \        result.append(33)\n        result.append(34)\n        result.append(35)\n\
    \        result.append(36)\n        result.append(37)\n        result.append(38)\n\
    \        result.append(39)\n        result.append(40)\n        result.append(41)\n\
    \        result.append(42)\n        result.append(43)\n        result.append(44)\n\
    \        result.append(45)\n        result.append(46)\n        result.append(47)\n\
    \        result.append(48)\n        result.append(49)\n        result.append(50)\n\
    \        result.append(51)\n        result.append(52)\n        result.append(53)\n\
    \        result.append(54)\n        result.append(55)\n        result.append(56)\n\
    \        result.append(57)\n        result.append(58)\n        result.append(59)\n\
    \        result.append(60)\n        result.append(61)\n        result.append(62)\n\
    \        result.append(63)\n        result.append(64)\n        result.append(65)\n\
    \        result.append(66)\n        result.append(67)\n        result.append(68)\n\
    \        result.append(69)\n        result.append(70)\n        result.append(71)\n\
    \        result.append(72)\n        result.append(73)\n        result.append(74)\n\
    \        result.append(75)\n        result.append(76)\n        result.append(77)\n\
    \        result.append(78)\n        result.append(79)\n        result.append(80)\n\
    \        result.append(81)\n        result.append(82)\n        result.append(83)\n\
    \        result.append(84)\n        result.append(85)\n        result.append(86)\n\
    \        result.append(87)\n        result.append(88)\n        result.append(89)\n\
    \        result.append(90)\n        result.append(91)\n        result.append(92)\n\
    \        result.append(93)\n        result.append(94)", "    var result = [Int]()\n\
    \    var a = 2\n    var b = 3\n    var c = 1\n    for _ in 0..<n {\n        result.append(c)\n\
    \        if n % 2 == 0 {\n            a += b\n            b += c\n           \
    \ c += 1\n        } else {\n            a += c\n            b += b\n         \
    \   c += 1\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result",
  "    var result = [Int]()\n    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n\
    \    var d = Int(1)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n    var x = Int(0)\n    var y = Int(0)\n\
    \    var z = Int(0)\n    var a = Int(0)\n    var b = Int(0)\n    var c = Int(0)\n\
    \    var d = Int(0)\n    var e = Int(0)\n    var f = Int(0)\n    var g = Int(0)\n\
    \    var h = Int(0)\n    var i = Int(0)\n    var j = Int(0)\n    var k = Int(0)\n\
    \    var l = Int(0)\n    var m = Int(0)\n    var n = Int(0)\n    var o = Int(0)\n\
    \    var p = Int(0)\n    var q = Int(0)\n    var r = Int(0)\n    var s = Int(0)\n\
    \    var t = Int(0)\n    var u = Int(0)\n    var v = Int(0)\n    var w = Int(0)\n\
    \    var x = Int(0)\n    var y = Int(0)\n    var z = Int(0)\n    var a = Int(0)\n\
    \    var b = Int(0)\n    var c = Int(0)\n    var d = Int(0)\n    var e = Int(0)\n\
    \    var f = Int(0)\n    var g = Int(0)\n    var h = Int(0)\n    var i = Int(0)\n\
    \    var j = Int(0)\n    var k = Int(0)\n    var l = Int(0)\n    var m = Int(0)\n\
    \    var n = Int(0)\n    var o = Int(0)\n    var p = Int(0)\n    var q = Int(0)\n\
    \    var r = Int(0)\n    var s = Int(0)\n    var t = Int(0)\n    var u = Int(0)\n\
    \    var v = Int(0)\n    var w = Int(0)\n", "    var result = [Int]()\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n \
    \       result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4))\n    }\n    return result",
  "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    if n == 2 {\n        result.append(3)\n  \
    \      return result;\n    }\n    if n == 3 {\n        result.append(1)\n    \
    \    result.append(3)\n        return result;\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(1)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(1)\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 1 {\n        result.append(1)\n        return result\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n  \
    \  }\n    return result", "    var result = [Int]()\n    if n == 0 {\n       \
    \ result.append(0)\n        return result\n    }\n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    if n == 2 {\n        result.append(3)\n   \
    \     return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    if n\
    \ == 1 {\n        result.append(1)\n        return result\n    }\n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    if n == 1 {\n     \
    \   result.append(1)\n        return result;\n    }\n    if n == 2 {\n       \
    \ result.append(3)\n        return result;\n    }\n    if n == 3 {\n        result.append(3)\n\
    \        return result;\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result\n    }\n    \n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n +\
    \ 1))\n    }\n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n  \
    \      result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n   \
    \     result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", "   \
    \ var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n    \
    \    return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        return result\n    }\n   \
    \ if n == 1 {\n        result.append(1)\n        return result\n    }\n    if\
    \ n == 2 {\n        result.append(3)\n        return result\n    }\n    if n %\
    \ 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n      \
    \  result.append(tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var\
    \ result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(1)\n\
    \        result.append(3)\n        result.append(3)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n        result.append(3)\n        result.append(3)\n\
    \        result.append(3)\n", "    var result = [Int]()\n    var tri1 = 1\n  \
    \  var tri2 = 1\n    var tri3 = 1\n    for _ in 0..<n {\n        tri3 = tri1 +\
    \ tri2 + tri3\n        result.append(tri3)\n        tri1 = tri2\n        tri2\
    \ = tri3\n    }\n    return result", "    var result = [Int]()\n    var a = tri(n\
    \ - 1)\n    var b = tri(n - 2)\n    var c = tri(n + 1)\n    for var i = 0; i <\
    \ n; i++ {\n        result.append(a[i])\n        result.append(b[i])\n       \
    \ result.append(c[i])\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(3)\n        result.append(1\
    \ + n / 2)\n    } else {\n        result.append(1 + n / 2)\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(n)\n        result.append(1 + n / 2)\n   \
    \     return result\n    }\n    \n    result.append(n)\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result", "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    if n == 2 {\n        result.append(3)\n      \
    \  return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n    if n\
    \ == 0 {\n        result.append(0)\n        return result\n    }\n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    if n % 2 == 0 {\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    }\n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result;\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n   \
    \ return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n\
    \        result.append(n + 2)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(n)\n    result.append(n + 2)\n    result.append(n + 3)\n  \
    \  return result", "    var result = [Int]()\n    var a = tri(n - 1)\n    var\
    \ b = tri(n - 2)\n    var c = tri(n - 3)\n    for _ in 0..<n {\n        result.append(a)\n\
    \        result.append(b)\n        result.append(c)\n        a = b\n        b\
    \ = c\n        c = a + b\n    }\n    return result", "    var result = [Int]()\n\
    \    var first = 3\n    var second = 1\n    var third = 1\n    var fourth = 1\n\
    \    var fifth = 1\n    var sixth = 1\n    var seventh = 1\n    var eighth = 1\n\
    \    var nineth = 1\n    var tenth = 1\n    var eleventh = 1\n    var twelfth\
    \ = 1\n    var thirteenth = 1\n    var fourteenth = 1\n    var fifteenth = 1\n\
    \    var sixteenth = 1\n    var seventeenth = 1\n    var eighteenth = 1\n    var\
    \ nineteenth = 1\n    var twentieth = 1\n    var twentyfirst = 1\n    var twentysecond\
    \ = 1\n    var twentythird = 1\n    var twentyfourth = 1\n    var twentyfifth\
    \ = 1\n    var twentysixth = 1\n    var twentyseventh = 1\n    var twentyeighth\
    \ = 1\n    var twentynineth = 1\n    var thirtieth = 1\n    var thirtyfirst =\
    \ 1\n    var thirtysecond = 1\n    var thirtythird = 1\n    var thirtyfourth =\
    \ 1\n    var thirtyfifth = 1\n    var thirtysixth = 1\n    var thirtyseventh =\
    \ 1\n    var thirtyeighth = 1\n    var thirtynineth = 1\n    var fourtieth = 1\n\
    \    var fourtyfirst = 1\n    var fourtysecond = 1\n    var fourtythird = 1\n\
    \    var fourtyfourth = 1\n    var fourtyfifth = 1\n    var fourtysixth = 1\n\
    \    var fourtyseventh = 1\n    var fourtyeighth = 1\n    var fourtynineth = 1\n\
    \    var fiftieth = 1\n    var fiftyfirst = 1\n    var fiftysecond = 1\n    var\
    \ fiftythird = 1\n    var fiftyfourth = 1\n    var fiftyfifth = 1\n    var fiftysixth\
    \ = 1\n    var fiftyseventh = 1\n    var fiftyeighth = 1\n    var fiftynineth\
    \ = 1\n    var sixtieth = 1\n    var sixtyfirst = 1\n    var sixtysecond = 1\n\
    \    var sixtythird = 1\n    var sixtyfourth = 1\n    var sixtyfifth = 1\n   \
    \ var sixtysixth = 1\n    var sixtyseventh = 1\n    var sixtyeighth = 1\n    var\
    \ sixtynineth = 1\n    var seventieth = 1\n    var seventyfirst = 1\n    var seventysecond\
    \ = 1\n    var seventythird = 1\n    var seventyfourth = 1\n    var se", "   \
    \ var result = [Int]()\n    var first = 0\n    var second = 1\n    var third =\
    \ 1\n    for _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first += second\n        second += third\n\
    \        third += second\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result;\n   \
    \ }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    \n\
    \    return result", "    var result = [Int]()\n    \n    if n == 1 {\n      \
    \  result.append(1)\n    } else {\n        result.append(1)\n        result.append(n+1)\n\
    \        result.append(n+1)\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result;\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result;\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    \n    if n ==\
    \ 1 {\n        result.append(1)\n        return result\n    }\n    \n    if n\
    \ == 2 {\n        result.append(3)\n        return result\n    }\n    \n    if\
    \ n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n    } else\
    \ {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for _ in 1...n {\n        result.append(result[result.count\
    \ - 1])\n    }\n    \n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 0 {\n        result.append(0)\n        return result\n    }\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\
    \ else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    var tri1 = 1\n    var\
    \ tri2 = 2\n    var tri3 = 1\n    var tri4 = 3\n    for _ in 0..<n {\n       \
    \ result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2 = tri1 + tri3\n\
    \        tri3 = tri2 + tri4\n        tri4 = tri3 + tri4\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(3)\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    }\n    \n    result.append(1)\n    result.append(3)\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  return result", "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 2) + tri(n + 1))\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n \
    \       result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        result.append(2)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result", "    var result\
    \ = [Int]()\n    var first = 0\n    var second = 1\n    var third = 1\n    for\
    \ _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first += second\n        second += third\n\
    \        third += second\n    }\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    var a = Int(3)\n   \
    \ var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n    \n    for i in 1...n\
    \ {\n        result.append(a)\n        if i % 2 == 0 {\n            a = a + b\n\
    \        } else {\n            b = b + c\n        }\n        c = d + a\n     \
    \   d = a + b\n    }\n    return result", "    var result = [Int]()\n    \n  \
    \  if n == 0 {\n        result.append(0)\n        return result\n    }\n    \n\
    \    if n == 1 {\n        result.append(1)\n        return result\n    }\n   \
    \ \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n  \
    \  \n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n  \
    \      result.append(0)\n        return result\n    }\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        result.append(5)\n        return result\n    }\n    \n    result.append(1)\n\
    \    result.append(3)\n    result.append(5)\n    result.append(7)\n    result.append(9)\n\
    \    result.append(11)\n    result.append(13)\n    result.append(15)\n    result.append(17)\n\
    \    result.append(19)\n    result.append(21)\n    result.append(23)\n    result.append(25)\n\
    \    result.append(27)\n    result.append(29)\n    result.append(31)\n    result.append(33)\n\
    \    result.append(35)\n    result.append(37)\n    result.append(39)\n    result.append(41)\n\
    \    result.append(43)\n    result.append(45)\n    result.append(47)\n    result.append(49)\n\
    \    result.append(51)\n    result.append(53)\n    result.append(55)\n    result.append(57)\n\
    \    result.append(59)\n    result.append(61)\n    result.append(63)\n    result.append(65)\n\
    \    result.append(67)\n    result.append(69)\n    result.append(71)\n    result.append(73)\n\
    \    result.append(75)\n    result.append(77)\n    result.append(79)\n    result.append(81)\n\
    \    result.append(83)\n    result.append(85)\n    result.append(87)\n    result.append(89)\n\
    \    result.append(91)\n    result.append(93)\n    result.append(95)\n    result.append(97)\n\
    \    result.append(99)\n    result.append(101)\n    result.append(103)\n    result.append(105)\n\
    \    result.append(107)\n    result.append(109)\n    result.append(111)\n    result.append(113)\n\
    \    result.append(115)\n    result.append(117)\n    result.append(119)\n    result.append(121)\n\
    \    result.append(123)\n    result.append(125)\n    result.append(127)\n    result.append(129)\n\
    \    result.append(131)\n    result.append(133)\n    result.append(135)\n    result.append(137)\n\
    \    result.append(139)\n    result.append(141)\n    result.append(143)\n    result.append(145)\n\
    \    result.append(147)\n    result.append(149)\n    result.append(151)\n    result.append(153)\n\
    \    result.append(155)\n    result.append(157)\n    result.append(159)\n    result.append(161)\n\
    \    result.append(163)\n    result.append(165)\n    result.append(167)\n    result.append(169)\n\
    \    result.append(171)\n    result.append(173)\n    result.append(175)\n    result.append(177)\n\
    \    result.append(179)\n    result.append(181)\n    result.append(183)\n    result.append(185)\n\
    \    result", "    var result = [Int]()\n    var first = 0\n    var second = 1\n\
    \    var third = 1\n    var fourth = 1\n    for _ in 0..<n {\n        result.append(first)\n\
    \        first = second\n        second = third\n        third = fourth\n    \
    \    fourth = first + second + third\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n        result.append(n\
    \ + 1 )\n        return result\n    }\n    \n    result.append(n)\n    result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(1)\n        result.append(3)\n \
    \   } else {\n        result.append(1)\n        result.append(3)\n        result.append(1\
    \ + n / 2)\n        if n % 2 == 1 {\n            result.append(1 + n / 2)\n  \
    \      }\n    }\n    \n    return result", "    var result = [Int]()\n    var\
    \ tri1 = 1\n    var tri2 = 1\n    var tri3 = 1\n    var tri4 = 2\n    if n % 2\
    \ == 0 {\n        tri1 = tri1 + tri2\n        tri2 = tri2 + tri3\n        tri3\
    \ = tri3 + tri4\n        tri4 = tri4 + tri1\n    }\n    for _ in 1...n {\n   \
    \     result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2 = tri2 + tri3\n\
    \        tri3 = tri3 + tri4\n        tri4 = tri4 + tri1\n    }\n    return result",
  "    var result = [Int]()\n    var first = 3\n    var second = 1\n    var third\
    \ = 1\n    for _ in 0..<n {\n        result.append(first)\n        result.append(second)\n\
    \        result.append(third)\n        first = (first + second) + third\n    \
    \    second = third\n        third = first\n    }\n    return result", "    var\
    \ result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result;\n    }\n    if n == 1 {\n        result.append(1)\n        return result;\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result;\n  \
    \  }\n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    return result", "    var result = [Int]()\n    \n    if n == 1 {\n      \
    \  result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n   \
    \     result.append(3)\n        return result\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(tri(n - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n == 2 {\n        result.append(3)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(3)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(3)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    return result", "    var result = [Int]()\n    if\
    \ n == 0 {\n        result.append(0)\n        result.append(1)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    \n    var firstTribonacci = tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    \n    if n % 2 == 0 {\n        result.append(firstTribonacci)\n\
    \        result.append(firstTribonacci + 1)\n    } else {\n        result.append(firstTribonacci)\n\
    \        result.append(firstTribonacci + 2)\n    }\n    return result", "    var\
    \ result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    \n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    \n    if n == 2 {\n        result.append(3)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    \n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \ } else {\n        result.append(3)\n    }\n    \n    if n % 2 == 0 {\n     \
    \   result.append(1 + n / 2)\n    } else {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n    }\n    \n    return result", "    var result =\
    \ [Int]()\n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    if n == 1 {\n        result.append(1)\n        return result\n   \
    \ }\n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    var tri1 = 1\n    var tri2 = 1\n   \
    \ var tri3 = 1\n    for _ in 1...n {\n        result.append(tri1)\n        if\
    \ n % 2 == 0 {\n            tri2 = tri1 + tri2\n            tri3 = tri1 + tri2\
    \ + tri3\n        } else {\n            tri1 = tri2 + tri3\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var tri1 = 1\n    var tri2\
    \ = 1\n    var tri3 = 1\n    for _ in 0..<n {\n        tri3 = tri1 + tri2 + tri3\n\
    \        result.append(tri3)\n        tri1 = tri2\n        tri2 = tri3\n    }\n\
    \    return result", "    var result = [Int]()\n    var tri1 = 1\n    var tri2\
    \ = 1\n    var tri3 = 1\n    for _ in 0..<n {\n        result.append(tri1)\n \
    \       if n % 2 == 0 {\n            tri1 = tri1 + tri2\n            tri2 = tri2\
    \ + tri3\n        } else {\n            tri3 = tri1 + tri2 + tri3\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var firstTribonacciNumber\
    \ = 3\n    var secondTribonacciNumber = 1\n    var thirdTribonacciNumber = 2\n\
    \    for _ in 0..<n {\n        result.append(firstTribonacciNumber)\n        firstTribonacciNumber\
    \ = secondTribonacciNumber\n        secondTribonacciNumber = thirdTribonacciNumber\n\
    \        thirdTribonacciNumber += firstTribonacciNumber\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     result.append(1)\n        return result\n    }\n    \n    if n % 2 == 0\
    \ {\n        result.append(n)\n        result.append(n + 2)\n        return result\n\
    \    }\n    \n    result.append(n)\n    result.append(n + 2)\n    result.append(n\
    \ + 3)\n    return result", "    var result = [Int]()\n    \n    if n == 1 {\n\
    \        result.append(1)\n        return result\n    }\n    \n    if n == 2 {\n\
    \        result.append(3)\n        return result\n    }\n    \n    if n % 2 ==\
    \ 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    } else\
    \ {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n \
    \   if n == 1 {\n        result.append(1)\n        return result;\n    }\n   \
    \ if n == 2 {\n        result.append(3)\n        return result;\n    }\n    if\
    \ n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n\
    \    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n \
    \       result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result", " \
    \   var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n  \
    \      return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2))\n    } else {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    var first = 0\n\
    \    var second = 1\n    var third = 2\n    for _ in 0..<n {\n        result.append(first)\n\
    \        result.append(second)\n        result.append(third)\n        first +=\
    \ second\n        second += third\n        third += first\n    }\n    return result",
  "    var result = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n   \
    \     return result\n    }\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    }\n    else {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2))\n    }\n    \n    return result",
  "    var result = [Int]()\n    if n == 0 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    if n == 2 {\n        result.append(3)\n        return result\n   \
    \ }\n    \n    var firstThree = tri(n - 1)\n    var secondThree = tri(n - 2)\n\
    \    var thirdThree = tri(n - 3)\n    \n    var firstTwo = firstThree + secondThree\n\
    \    var secondTwo = secondThree + thirdThree\n    \n    var firstOne = firstTwo\
    \ + secondTwo\n    \n    result.append(firstOne)\n    return result", "    var\
    \ result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n        return\
    \ result\n    }\n    \n    if n == 2 {\n        result.append(3)\n        return\
    \ result\n    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        result.append(tri(n - 1) + tri(n - 2))\n    }\n\
    \    \n    return result", "    var result = [Int]()\n    var first = 3\n    var\
    \ second = 1\n    var third = 1\n    for _ in 0..<n {\n        result.append(first)\n\
    \        first = second\n        second = third\n        third = first + second\n\
    \    }\n    return result", "    var result = [Int]()\n    \n    if n == 0 {\n\
    \        result.append(0)\n        result.append(1)\n        return result\n \
    \   }\n    \n    if n == 1 {\n        result.append(0)\n        result.append(1)\n\
    \        return result\n    }\n    \n    if n == 2 {\n        result.append(0)\n\
    \        result.append(1)\n        result.append(2)\n        return result\n \
    \   }\n    \n    if n % 2 == 0 {\n        result.append(0)\n        result.append(1)\n\
    \        result.append(2)\n        result.append(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        return result\n    }\n    \n    result.append(0)\n    result.append(1)\n\
    \    result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    return result",
  "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n   \
    \     return result\n    }\n    \n    if n == 2 {\n        result.append(3)\n\
    \        return result\n    }\n    \n    if n % 2 == 0 {\n        result.append(1)\n\
    \        result.append(3)\n    }\n    else {\n        result.append(1)\n     \
    \   result.append(3)\n        result.append(5)\n    }\n    \n    for _ in 1...n\
    \ {\n        result.append(result[n-2] + result[n-1])\n    }\n    \n    return\
    \ result", "    var result = [Int]()\n    \n    if n == 1 {\n        result.append(1)\n\
    \        return result;\n    }\n    \n    if n % 2 == 0 {\n        result.append(n)\n\
    \        result.append(n + 2)\n    } else {\n        result.append(n)\n      \
    \  result.append(n + 3)\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    \n    if n == 0 {\n        result.append(0)\n        return result\n    }\n\
    \    \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n == 2 {\n        result.append(3)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n - 2))\n \
    \   } else {\n        result.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n  \
    \  }\n    \n    return result", "    var result = [Int]()\n    \n    if n == 1\
    \ {\n        result.append(1)\n        return result\n    }\n    \n    if n ==\
    \ 2 {\n        result.append(3)\n        return result\n    }\n    \n    if n\
    \ % 2 == 0 {\n        result.append(1)\n        result.append(3)\n    }\n    else\
    \ {\n        result.append(1)\n        result.append(3)\n        result.append(3)\n\
    \    }\n    \n    for i in 1...n {\n        result.append(result[i-2] + result[i-1]\
    \ + result[i+1])\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    if n == 0 {\n        result.append(0)\n        result.append(1)\n       \
    \ return result\n    }\n    if n == 1 {\n        result.append(0)\n        return\
    \ result\n    }\n    if n == 2 {\n        result.append(1)\n        result.append(2)\n\
    \        return result\n    }\n    if n % 2 == 0 {\n        result.append(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n    } else {\n        result.append(tri(n -\
    \ 1) + tri(n - 2))\n    }\n    return result", "    var result = [Int]()\n   \
    \ \n    if n == 1 {\n        result.append(1)\n        return result\n    }\n\
    \    \n    if n % 2 == 0 {\n        result.append(1)\n        result.append(n)\n\
    \        return result\n    }\n    \n    result.append(1)\n    result.append(n)\n\
    \    result.append(n)\n    return result", "    var result = [Int]()\n    var\
    \ a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n   \
    \ var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n    var h = Int(3)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n\
    \    var m = Int(0)\n    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n\
    \    var q = Int(1)\n    var r = Int(2)\n    var s = Int(3)\n    var t = Int(1)\n\
    \    var u = Int(2)\n    var v = Int(3)\n    var w = Int(1)\n    var x = Int(2)\n\
    \    var y = Int(3)\n    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(2)\n    var h = Int(3)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(2)\n    var l = Int(3)\n    var m = Int(0)\n    var n = Int(1)\n\
    \    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n\
    \    var s = Int(3)\n    var t = Int(1)\n    var u = Int(2)\n    var v = Int(3)\n\
    \    var w = Int(1)\n    var x = Int(2)\n    var y = Int(3)\n    var z = Int(1)\n\
    \    var a = Int(3)\n    var b = Int(1)\n    var c = Int(2)\n    var d = Int(1)\n\
    \    var e = Int(0)\n    var f = Int(1)\n    var g = Int(2)\n    var h = Int(3)\n\
    \    var i = Int(0)\n    var j = Int(1)\n    var k = Int(2)\n    var l = Int(3)\n\
    \    var m = Int(0)\n    var n = Int(1)\n    var o = Int(2)\n    var p = Int(3)\n\
    \    var q = Int(1)\n    var r = Int(2)\n    var s = Int(3)\n    var t = Int(1)\n\
    \    var u = Int(2)\n    var v = Int(3)\n    var w = Int(1)\n    var x = Int(2)\n\
    \    var y = Int(3)\n    var z = Int(1)\n    var a = Int(3)\n    var b = Int(1)\n\
    \    var c = Int(2)\n    var d = Int(1)\n    var e = Int(0)\n    var f = Int(1)\n\
    \    var g = Int(2)\n    var h = Int(3)\n    var i = Int(0)\n    var j = Int(1)\n\
    \    var k = Int(2)\n    var l = Int(3)\n    var m = Int(0)\n    var n = Int(1)\n\
    \    var o = Int(2)\n    var p = Int(3)\n    var q = Int(1)\n    var r = Int(2)\n\
    \    var s = Int(3)\n    var t = Int(1)\n    var u = Int(2)\n    var v = Int(3)\n\
    \    var w = Int(1)\n", "    var result = [Int]()\n    var tri1 = 1\n    var tri2\
    \ = 1\n    var tri3 = 1\n    if n % 2 == 0 {\n        tri1 = tri1 + tri2\n   \
    \     tri2 = tri1 + tri3\n        tri3 = tri1 + tri2\n    }\n    for _ in 1...n\
    \ {\n        result.append(tri1)\n        tri1 = tri1 + tri2\n        tri2 = tri1\
    \ + tri3\n        tri3 = tri1 + tri2\n    }\n    return result", "    var result\
    \ = [Int]()\n    \n    if n == 0 {\n        result.append(0)\n        return result\n\
    \    }\n    \n    if n == 1 {\n        result.append(1)\n        return result\n\
    \    }\n    \n    if n % 2 == 0 {\n        result.append(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1))\n    } else {\n        result.append(tri(n - 1) + tri(n - 2))\n\
    \    }\n    \n    return result"]
stop_tokens:
- "\n}"
