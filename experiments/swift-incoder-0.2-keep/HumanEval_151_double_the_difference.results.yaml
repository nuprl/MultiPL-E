language: swift
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum +=\
    \ num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkkqlzcf7.swift:15:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpkkqlzcf7.swift:16:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        sum += num * num\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1229_tr.swift:13:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for x in lst {\n      \
    \  if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_nv0_6q4.swift:14:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp_nv0_6q4.swift:15:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num *\
    \ num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0ng9x8ef.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp0ng9x8ef.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number % 2 == 1 {\n            sum += number\n        }\n    }\n  \
    \  \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9nugm1zr.swift:14:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp9nugm1zr.swift:15:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        sum += n * n\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ub09g6.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number > 0 {\n            sum += number * number\n        }\n    }\n\
    \    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5tyf6htd.swift:15:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu4x_co.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxpu4x_co.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzuvrvq0v.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpzuvrvq0v.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    if lst.count == 0 {\n        return 0\n    }\n\
    \    \n    var sum = 0\n    \n    for x in lst {\n        if x % 2 == 1 {\n  \
    \          sum += x * x\n        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkaw3wsrq.swift:18:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpkaw3wsrq.swift:19:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    if lst.count == 0 {\n        return 0\n    }\n\
    \    \n    var sum = 0\n    \n    for num in lst {\n        if num % 2 == 1 {\n\
    \            sum += num\n        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp025act0_.swift:18:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp025act0_.swift:19:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxatfjwg7.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxatfjwg7.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp3uiyxko_.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp3uiyxko_.swift:16:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqbhoix_m.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpqbhoix_m.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num *\
    \ num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0ng9x8ef.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp0ng9x8ef.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu4x_co.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxpu4x_co.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for n in lst {\n      \
    \  if n % 2 == 1 {\n            sum += n\n        }\n    }\n    \n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp7pq84dh9.swift:14:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp7pq84dh9.swift:15:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num in lst {\n    \
    \    if num > 0 {\n            sum += num * num\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkn0gi78t.swift:15:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        sum += n * n\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ub09g6.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        sum += i * i\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiyjpfawl.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number % 2 == 1 {\n            sum += number\n        }\n    }\n  \
    \  \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9nugm1zr.swift:14:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp9nugm1zr.swift:15:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number > 0 {\n            sum += number * number\n        }\n    }\n\
    \    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5tyf6htd.swift:15:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp3uiyxko_.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp3uiyxko_.swift:16:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        sum += n * n\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ub09g6.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp3uiyxko_.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp3uiyxko_.swift:16:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num in lst {\n    \
    \    if num > 0 {\n            sum += num * num\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkn0gi78t.swift:15:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for num in lst {\n        if num > 0 {\n            sum += num\
    \ * num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpofsex6ja.swift:16:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu4x_co.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxpu4x_co.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num *\
    \ num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0ng9x8ef.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp0ng9x8ef.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for number in lst {\n       \
    \ if number % 2 == 1 {\n            sum += number\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp09574mwu.swift:13:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp09574mwu.swift:14:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmentqfnq.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpmentqfnq.swift:13:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        sum += n * n\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ub09g6.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmentqfnq.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpmentqfnq.swift:13:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number > 0 {\n            sum += number * number\n        }\n    }\n\
    \    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5tyf6htd.swift:15:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num in lst {\n    \
    \    if num > 0 {\n            sum += num * num\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkn0gi78t.swift:15:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for number in lst {\n        if number % 2 == 1 {\n            sum +=\
    \ number\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp1vefiik8.swift:13:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp1vefiik8.swift:14:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        sum += num * num\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1229_tr.swift:13:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    if lst.count == 0 {\n        return 0\n    }\n\
    \    \n    var sum = 0\n    \n    for x in lst {\n        if x % 2 == 1 {\n  \
    \          sum += x * x\n        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkaw3wsrq.swift:18:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpkaw3wsrq.swift:19:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for number in lst {\n       \
    \ if number > 0 {\n            sum += number * number\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmprjn0pdn1.swift:14:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       sum += number * number\n    }\n    \n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwfgm79_w.swift:14:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += number * number\n          \
    \            ^\n               Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number > 0 {\n            sum += number * number\n        }\n    }\n\
    \    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5tyf6htd.swift:15:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum +=\
    \ num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkkqlzcf7.swift:15:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpkkqlzcf7.swift:16:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for num in lst {\n        if\
    \ num > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd7z2qefb.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu4x_co.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxpu4x_co.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum +=\
    \ num * num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5tot5h_u.swift:15:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp5tot5h_u.swift:16:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for num in lst {\n        if\
    \ num > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd7z2qefb.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for n in lst {\n      \
    \  if n % 2 == 1 {\n            sum += n * n\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9bf2cjr6.swift:14:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp9bf2cjr6.swift:15:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    if lst.count == 0 {\n        return 0\n    }\n\
    \    \n    var sum = 0\n    \n    for i in 0..<lst.count {\n        if lst[i]\
    \ % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    \n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpdoy5_eb7.swift:18:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if lst[i] % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpdoy5_eb7.swift:19:23: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += lst[i]\n      \
    \                ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num in lst {\n    \
    \    if num % 2 == 1 {\n            sum += num\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4t1wvd40.swift:14:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp4t1wvd40.swift:15:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmentqfnq.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpmentqfnq.swift:13:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number % 2 == 1 {\n            sum += number\n        }\n    }\n  \
    \  \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp9nugm1zr.swift:14:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp9nugm1zr.swift:15:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num *\
    \ num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp0ng9x8ef.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp0ng9x8ef.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num in lst {\n    \
    \    if num > 0 {\n            sum += num * num\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkn0gi78t.swift:15:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu4x_co.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxpu4x_co.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for num in lst {\n        if\
    \ num > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd7z2qefb.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxpu4x_co.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxpu4x_co.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num in lst {\n    \
    \    if num > 0 {\n            sum += num * num\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkn0gi78t.swift:15:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqbhoix_m.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpqbhoix_m.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       sum += number\n    }\n    \n    return sum * sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwhmugyeg.swift:14:16: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += number\n               ^\n \
    \              Int(  )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       sum += number * number\n    }\n    \n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpwfgm79_w.swift:14:23: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += number * number\n          \
    \            ^\n               Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for num in lst {\n    \
    \    if num > 0 {\n            sum += num * num\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkn0gi78t.swift:15:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        sum += i * i\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiyjpfawl.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for x in lst {\n      \
    \  if x % 2 == 1 {\n            sum += x * x\n        }\n    }\n    \n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_nv0_6q4.swift:14:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp_nv0_6q4.swift:15:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number > 0 {\n            sum += number * number\n        }\n    }\n\
    \    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5tyf6htd.swift:15:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        sum += i * i\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiyjpfawl.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += i * i\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp36u6aux6.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp36u6aux6.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for n in lst {\n        if n\
    \ % 2 == 1 {\n            sum += n\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkzvj90ap.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpkzvj90ap.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzuvrvq0v.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpzuvrvq0v.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        sum += n * n\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ub09g6.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count > 0 {\n        var sum = 0\n        for\
    \ n in lst {\n            if n % 2 == 1 {\n                sum += n * n\n    \
    \        }\n        }\n        return sum\n    }\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp7bnwi5xx.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if n % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmp7bnwi5xx.swift:14:26: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n                sum += n * n\n   \
    \                      ^\n                       Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    if lst.count == 0 {\n        return 0\n    }\n\
    \    \n    var sum = 0\n    var count = 0\n    \n    for number in lst {\n   \
    \     if number % 2 == 1 {\n            sum += number\n            count += 1\n\
    \        }\n    }\n    \n    return sum * sum / Double(count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpl057ne7w.swift:19:19: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if number % 2 == 1 {\n    \
    \              ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpl057ne7w.swift:20:20: error: cannot convert value of type\
    \ 'Double' to expected argument type 'Int'\n            sum += number\n      \
    \             ^\n                   Int(  )\n/tmp/tmpl057ne7w.swift:25:24: error:\
    \ cannot convert value of type 'Double' to expected argument type 'Int'\n    return\
    \ sum * sum / Double(count)\n                       ^\n                      \
    \ Int(         )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpqbhoix_m.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpqbhoix_m.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n >= 0 {\n            sum += n * n\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpea1mvjox.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n * n\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 != 0 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_14mrzir.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 != 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp_14mrzir.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        sum += n * n\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpa1ub09g6.swift:13:18: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += n * n\n                 ^\n\
    \               Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for num in lst {\n        if num > 0 {\n            sum += num\
    \ * num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpofsex6ja.swift:16:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzuvrvq0v.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpzuvrvq0v.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzuvrvq0v.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpzuvrvq0v.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxatfjwg7.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxatfjwg7.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for x in lst {\n        if x\
    \ % 2 == 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpzuvrvq0v.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpzuvrvq0v.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum +=\
    \ num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpkkqlzcf7.swift:15:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpkkqlzcf7.swift:16:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for n in lst {\n        if n % 2 == 1 {\n            sum += n\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp36u6aux6.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if n % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmp36u6aux6.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += n\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    for num in lst {\n        if\
    \ num > 0 {\n            sum += num * num\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd7z2qefb.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        sum += num * num\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpo1229_tr.swift:13:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n        sum += num * num\n                \
    \   ^\n               Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num % 2 == 1 {\n            sum += num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpacp05dgf.swift:13:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpacp05dgf.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num\n                  \
    \ ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    \n    var sum = 0\n    \n    for number in lst {\n \
    \       if number > 0 {\n            sum += number * number\n        }\n    }\n\
    \    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5tyf6htd.swift:15:27: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += number * number\n      \
    \                    ^\n                   Int(           )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for num in lst {\n        if num > 0 {\n            sum += num * num\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpat9me1oy.swift:14:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for x in lst {\n        if x % 2 ==\
    \ 1 {\n            sum += x * x\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpiu9iz5jh.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpiu9iz5jh.swift:13:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    if lst.count == 0 {\n        return 0\n    }\n    var\
    \ sum = 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x *\
    \ x\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmptv11nqdr.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmptv11nqdr.swift:16:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxmg1zn8s.swift:13:24: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += num * num\n            \
    \           ^\n                   Int(     )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for x in lst {\n        if x % 2 == 1 {\n            sum += x * x\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpd9hjmiso.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if x % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpd9hjmiso.swift:14:22: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += x * x\n                \
    \     ^\n                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    guard lst.count > 0 else { return 0 }\n    var sum =\
    \ 0\n    for i in lst {\n        if i % 2 == 1 {\n            sum += i\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpxgwy8y0f.swift:13:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n/tmp/tmpxgwy8y0f.swift:14:20: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n            sum += i\n                   ^\n\
    \                   Int( )\n"
  stdout: ''
  timestamp: 1659824513
