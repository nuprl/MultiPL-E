language: swift
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp0hoceen.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, n)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmppq2y3nn6/tmppq2y3nn6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf19259c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf18f50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf18f50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf18f4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppq2y3nn6                        0x0000562047b93338 <unavailable> + 4920

    5    libc.so.6                          0x00002aaf19445460 __libc_start_main +
    245

    6    tmppq2y3nn6                        0x0000562047b92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib + 1\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpzbulbnre/tmpzbulbnre.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ecd6dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ecd3d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ecd3d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ecd3d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbulbnre                        0x000055f10cddf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2ecd8c6460 __libc_start_main +
    245

    6    tmpzbulbnre                        0x000055f10cddefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b84fc2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84fbf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b84fbf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b84fbf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b84fbf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b84fbd967ec <unavailable> + 186348

    6    tmpj2f8m7hp                        0x0000555c374417b6 <unavailable> + 6070

    7    tmpj2f8m7hp                        0x0000555c374413cb <unavailable> + 5067

    8    libc.so.6                          0x00002b84fc48c460 __libc_start_main +
    245

    9    tmpj2f8m7hp                        0x0000555c374410e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib.append(0)\n\
    \  fibfib.append(0)\n  fibfib.append(1)\n  for _ in 1...n {\n    fibfib.append(fibfib[fibfib.count-2]\
    \ + fibfib[fibfib.count-3])\n  }\n  return fibfib[n-1]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp39sv1vml/tmp39sv1vml.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcd0433c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd012ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd012a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd01297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp39sv1vml                        0x000055a56b3634e8 <unavailable> + 5352

    5    libc.so.6                          0x00002abcd061f460 __libc_start_main +
    245

    6    tmp39sv1vml                        0x000055a56b363199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_23fa4ld/tmp_23fa4ld.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a044a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a04198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a04198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a041977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_23fa4ld                        0x0000559ef0420338 <unavailable> + 4920

    5    libc.so.6                          0x00002b5a0468d460 __libc_start_main +
    245

    6    tmp_23fa4ld                        0x0000559ef041ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpb2melgux.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpb2melgux.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpb2melgux.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp86i78o5a.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b248def8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b248dbef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b248dbef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b248dbef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b248dbeebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b248d9ee7ec <unavailable> + 186348

    6    tmpa3nrywc4                        0x00005576d216f7b6 <unavailable> + 6070

    7    tmpa3nrywc4                        0x00005576d216f3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b248e0e4460 __libc_start_main +
    245

    9    tmpa3nrywc4                        0x00005576d216f0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n        fibfib\
    \ += fibfib(n-1) + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpifzt1zyg.swift:26:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmpifzt1zyg.swift:26:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return\
    \ 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n      \
    \  return 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n\
    \        return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n\
    \ == 9 {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n\
    \    if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return\
    \ 144\n    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n\
    \        return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if\
    \ n == 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n\
    \    }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n     \
    \   return 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n\
    \ == 21 {\n        return 10946\n    }\n    if n == 22 {\n        return 17711\n\
    \    }\n    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n    \
    \    return 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if\
    \ n == 26 {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n\
    \    }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n   \
    \     return 514229\n    }\n    if n == 30 {\n        return 832040\n    }\n \
    \   if n == 31 {\n        return 1346269\n    }\n    if n == 32 {\n        return\
    \ 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n    if n ==\
    \ 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return 9131742\n\
    \    }\n    if n == 36 {\n        return 1546695\n    }\n    if n == 37 {\n  \
    \      return 2579228\n    }\n    if n == 38 {\n        return 4183120\n    }\n\
    \    if n == 39 {\n        return 6791353\n    }\n    if n == 40 {\n        return\
    \ 10233429\n    }\n    if n == 41 {\n        return 16558014\n    }\n    if n\
    \ == 42 {\n        return 26791429\n    }\n    if n == 43 {\n        return 43349445\n\
    \    }\n    if n == 44 {\n        return 70140874\n    }\n    if n == 45 {\n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp5pm_uf8x.swift:174:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmp5pm_uf8x.swift:14:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmp5pm_uf8x.swift:156:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp5pm_uf8x.swift:168:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 2) == 1)\n       ^\n\
    /tmp/tmp5pm_uf8x.swift:169:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmp5pm_uf8x.swift:170:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 5) == 4)\n       ^\n\
    /tmp/tmp5pm_uf8x.swift:171:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmp5pm_uf8x.swift:172:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 10) == 81)\n       ^\n\
    /tmp/tmp5pm_uf8x.swift:173:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmp5pm_uf8x.swift:174:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 14) == 927)\n      \
    \ ^\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib.append(0)\n    fibfib.append(0)\n    fibfib.append(1)\n    for _ in\
    \ 1...n {\n        fibfib.append(fibfib[fibfib.count-2] + fibfib[fibfib.count-3])\n\
    \    }\n    return fibfib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpou2__dqe/tmpou2__dqe.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b885393ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8853635b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8853635988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88536347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou2__dqe                        0x00005639ec0454e8 <unavailable> + 5352

    5    libc.so.6                          0x00002b8853b2a460 __libc_start_main +
    245

    6    tmpou2__dqe                        0x00005639ec045199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmppq2y3nn6/tmppq2y3nn6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf19259c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf18f50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf18f50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf18f4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppq2y3nn6                        0x0000562047b93338 <unavailable> + 4920

    5    libc.so.6                          0x00002aaf19445460 __libc_start_main +
    245

    6    tmppq2y3nn6                        0x0000562047b92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ i in 0..<n {\n    fibfib = fibfib + fibfib(i-1)\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpksxdjoio.swift:17:23: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib = fibfib + fibfib(i-1)\n                      ^\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return\
    \ 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n      \
    \  return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n == 9\
    \ {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n  \
    \  if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return 144\n\
    \    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n      \
    \  return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if n ==\
    \ 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n   \
    \ }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n        return\
    \ 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n == 21 {\n\
    \        return 10946\n    }\n    if n == 22 {\n        return 17711\n    }\n\
    \    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n        return\
    \ 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if n == 26\
    \ {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n \
    \   }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n    \
    \    return 514229\n    }\n    if n == 30 {\n        return 832040\n    }\n  \
    \  if n == 31 {\n        return 1254025\n    }\n    if n == 32 {\n        return\
    \ 1674541\n    }\n    if n == 33 {\n        return 2577483\n    }\n    if n ==\
    \ 34 {\n        return 4184170\n    }\n    if n == 35 {\n        return 6791393\n\
    \    }\n    if n == 36 {\n        return 10066331\n    }\n    if n == 37 {\n \
    \       return 17799490\n    }\n    if n == 38 {\n        return 28800674\n  \
    \  }\n    if n == 39 {\n        return 46600466\n    }\n    if n == 40 {\n   \
    \     return 66582196\n    }\n    if n == 41 {\n        return 92430094\n    }\n\
    \    if n == 42 {\n        return 128760131\n    }\n    if n == 43 {\n       \
    \ return 193924640\n    }\n    if n == 44 {\n        return 251039412\n    }\n\
    \    if n == 45 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpnlui24pr.swift:173:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmpnlui24pr.swift:14:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmpnlui24pr.swift:155:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpnlui24pr.swift:167:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 2) == 1)\n       ^\n\
    /tmp/tmpnlui24pr.swift:168:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmpnlui24pr.swift:169:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 5) == 4)\n       ^\n\
    /tmp/tmpnlui24pr.swift:170:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmpnlui24pr.swift:171:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 10) == 81)\n       ^\n\
    /tmp/tmpnlui24pr.swift:172:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmpnlui24pr.swift:173:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 14) == 927)\n      \
    \ ^\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp5f1zake1/tmp5f1zake1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a0f196c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a0ee8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a0ee8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a0ee8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5f1zake1                        0x000055fe9b46c338 <unavailable> + 4920

    5    libc.so.6                          0x00002b4a0f382460 __libc_start_main +
    245

    6    tmp5f1zake1                        0x000055fe9b46bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b248def8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b248dbef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b248dbef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b248dbef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b248dbeebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b248d9ee7ec <unavailable> + 186348

    6    tmpa3nrywc4                        0x00005576d216f7b6 <unavailable> + 6070

    7    tmpa3nrywc4                        0x00005576d216f3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b248e0e4460 __libc_start_main +
    245

    9    tmpa3nrywc4                        0x00005576d216f0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n    return 0\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpslaaegzh.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpslaaegzh.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpslaaegzh.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3..<n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b047f191c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b047ee88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b047ee88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b047ee8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b047ee87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b047ec877ec <unavailable> + 186348

    6    tmp7h1kahlj                        0x000055c5d285c7b6 <unavailable> + 6070

    7    tmp7h1kahlj                        0x000055c5d285c3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b047f37d460 __libc_start_main +
    245

    9    tmp7h1kahlj                        0x000055c5d285c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp86i78o5a.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write your code\
    \ in an editor window and use the Go Playground.\n  return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp9dkdjcqh/tmp9dkdjcqh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafabf8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafabc84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafabc84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafabc837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dkdjcqh                        0x0000563f6ff111b8 <unavailable> + 4536

    5    libc.so.6                          0x00002aafac179460 __libc_start_main +
    245

    6    tmp9dkdjcqh                        0x0000563f6ff10e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 2..<n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ba230ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ba2001561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ba2001286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ba200113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ba2000bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0ba1e007ec <unavailable> + 186348

    6    tmpv7he5vau                        0x00005591ee4f17b6 <unavailable> + 6070

    7    tmpv7he5vau                        0x00005591ee4f13cb <unavailable> + 5067

    8    libc.so.6                          0x00002b0ba24f6460 __libc_start_main +
    245

    9    tmpv7he5vau                        0x00005591ee4f10e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 0..<n\
    \ {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9117eebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9117be2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9117be2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9117be213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9117be1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b91179e17ec <unavailable> + 186348

    6    tmprsaslfry                        0x000055d6274347b6 <unavailable> + 6070

    7    tmprsaslfry                        0x000055d6274343cb <unavailable> + 5067

    8    libc.so.6                          0x00002b91180d7460 __libc_start_main +
    245

    9    tmprsaslfry                        0x000055d6274340e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp5f1zake1/tmp5f1zake1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a0f196c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a0ee8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a0ee8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a0ee8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5f1zake1                        0x000055fe9b46c338 <unavailable> + 4920

    5    libc.so.6                          0x00002b4a0f382460 __libc_start_main +
    245

    6    tmp5f1zake1                        0x000055fe9b46bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp2q02xqus.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp2q02xqus.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp2q02xqus.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxe3ml50f.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxe3ml50f.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  var\
    \ fibfib1: Int = 0\n  var fibfib2: Int = 0\n  var fibfib3: Int = 0\n  var fibfib4:\
    \ Int = 0\n  var fibfib5: Int = 0\n  var fibfib6: Int = 0\n  var fibfib7: Int\
    \ = 0\n  var fibfib8: Int = 0\n  var fibfib9: Int = 0\n  var fibfib10: Int = 0\n\
    \  var fibfib11: Int = 0\n  var fibfib12: Int = 0\n  var fibfib13: Int = 0\n \
    \ var fibfib14: Int = 0\n  var fibfib15: Int = 0\n  var fibfib16: Int = 0\n  var\
    \ fibfib17: Int = 0\n  var fibfib18: Int = 0\n  var fibfib19: Int = 0\n  var fibfib20:\
    \ Int = 0\n  var fibfib21: Int = 0\n  var fibfib22: Int = 0\n  var fibfib23: Int\
    \ = 0\n  var fibfib24: Int = 0\n  var fibfib25: Int = 0\n  var fibfib26: Int =\
    \ 0\n  var fibfib27: Int = 0\n  var fibfib28: Int = 0\n  var fibfib29: Int = 0\n\
    \  var fibfib30: Int = 0\n  var fibfib31: Int = 0\n  var fibfib32: Int = 0\n \
    \ var fibfib33: Int = 0\n  var fibfib34: Int = 0\n  var fibfib35: Int = 0\n  var\
    \ fibfib36: Int = 0\n  var fibfib37: Int = 0\n  var fibfib38: Int = 0\n  var fibfib39:\
    \ Int = 0\n  var fibfib40: Int = 0\n  var fibfib41: Int = 0\n  var fibfib42: Int\
    \ = 0\n  var fibfib43: Int = 0\n  var fibfib44: Int = 0\n  var fibfib45: Int =\
    \ 0\n  var fibfib46: Int = 0\n  var fibfib47: Int = 0\n  var fibfib48: Int = 0\n\
    \  var fibfib49: Int = 0\n  var fibfib50: Int = 0\n  var fibfib51: Int = 0\n \
    \ var fibfib52: Int = 0\n  var fibfib53: Int = 0\n  var fibfib54: Int = 0\n  var\
    \ fibfib55: Int = 0\n  var fibfib56: Int = 0\n  var fibfib57: Int = 0\n  var fibfib58:\
    \ Int = 0\n  var fibfib59: Int = 0\n  var fibfib60: Int = 0\n  var fibfib61: Int\
    \ = 0\n  var fibfib62: Int = 0\n  var fibfib63: Int = 0\n  var fibfib64: Int\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmppgazqdm1.swift:15:7: warning: variable 'fibfib' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib: Int = 0\n      ^~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:16:7: warning: variable 'fibfib1' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib1: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:17:7: warning: variable 'fibfib2' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib2: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:18:7: warning: variable 'fibfib3' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib3: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:19:7: warning: variable 'fibfib4' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib4: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:20:7: warning: variable 'fibfib5' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib5: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:21:7: warning: variable 'fibfib6' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib6: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:22:7: warning: variable 'fibfib7' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib7: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:23:7: warning: variable 'fibfib8' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib8: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:24:7: warning: variable 'fibfib9' was never used;\
    \ consider replacing with '_' or removing it\n  var fibfib9: Int = 0\n      ^~~~~~~\n\
    \      _\n/tmp/tmppgazqdm1.swift:25:7: warning: variable 'fibfib10' was never\
    \ used; consider replacing with '_' or removing it\n  var fibfib10: Int = 0\n\
    \      ^~~~~~~~\n      _\n/tmp/tmppgazqdm1.swift:26:7: warning: variable 'fibfib11'\
    \ was never used; consider replacing with '_' or removing it\n  var fibfib11:\
    \ Int = 0\n      ^~~~~~~~\n      _\n/tmp/tmppgazqdm1.swift:27:7: warning: variable\
    \ 'fibfib12' was never used; consider replacing with '_' or removing"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp4wq__rca/tmp4wq__rca.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6681613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b668130ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b668130a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66813097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wq__rca                        0x000055646b089338 <unavailable> + 4920

    5    libc.so.6                          0x00002b66817ff460 __libc_start_main +
    245

    6    tmp4wq__rca                        0x000055646b088fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in stride(from:\
    \ 3, through: n, by: 1) {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2]\
    \ + fibfib[index-3]\n    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002affecfd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affeccd0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002affeccd0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002affeccd013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002affecccfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002affecacf7ec <unavailable> + 186348

    6    tmp7zss99i8                        0x00005636cdb08856 <unavailable> + 6230

    7    tmp7zss99i8                        0x00005636cdb0846b <unavailable> + 5227

    8    libc.so.6                          0x00002affed1c5460 __libc_start_main +
    245

    9    tmp7zss99i8                        0x00005636cdb08189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp14ykfpjy.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp6ap92m16.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2)\n                  ^\n                 \
    \ n: \n/tmp/tmp6ap92m16.swift:21:33: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2)\n                                ^\n   \
    \                             n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxnz3frjw.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n    return 0\n\
    \  }\n  if n == 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp9x997bh1.swift:24:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmp9x997bh1.swift:24:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmp9x997bh1.swift:24:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp86i78o5a.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_23fa4ld/tmp_23fa4ld.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a044a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a04198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a04198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a041977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_23fa4ld                        0x0000559ef0420338 <unavailable> + 4920

    5    libc.so.6                          0x00002b5a0468d460 __libc_start_main +
    245

    6    tmp_23fa4ld                        0x0000559ef041ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpb2melgux.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpb2melgux.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpb2melgux.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib.append(0)\n\
    \  fibfib.append(0)\n  fibfib.append(1)\n  for _ in 1...n {\n    fibfib.append(fibfib[fibfib.count-2]\
    \ + fibfib[fibfib.count-3])\n  }\n  return fibfib[n-1]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp39sv1vml/tmp39sv1vml.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcd0433c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd012ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd012a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd01297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp39sv1vml                        0x000055a56b3634e8 <unavailable> + 5352

    5    libc.so.6                          0x00002abcd061f460 __libc_start_main +
    245

    6    tmp39sv1vml                        0x000055a56b363199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 3...n {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5f95e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5f92d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad5f92d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad5f92d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad5f92d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad5f90d77ec <unavailable> + 186348

    6    tmpmdgxl4ob                        0x000055baf89287b6 <unavailable> + 6070

    7    tmpmdgxl4ob                        0x000055baf89283cb <unavailable> + 5067

    8    libc.so.6                          0x00002ad5f97cd460 __libc_start_main +
    245

    9    tmpmdgxl4ob                        0x000055baf89280e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp0_x6tzau.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, 0)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib.append(0)\n    fibfib.append(0)\n    fibfib.append(1)\n    for _ in\
    \ 1...n {\n        fibfib.append(fibfib[fibfib.count-2] + fibfib[fibfib.count-3])\n\
    \    }\n    return fibfib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'tmpou2__dqe/tmpou2__dqe.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b885393ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8853635b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8853635988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88536347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou2__dqe                        0x00005639ec0454e8 <unavailable> + 5352

    5    libc.so.6                          0x00002b8853b2a460 __libc_start_main +
    245

    6    tmpou2__dqe                        0x00005639ec045199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_23fa4ld/tmp_23fa4ld.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a044a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a04198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a04198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a041977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_23fa4ld                        0x0000559ef0420338 <unavailable> + 4920

    5    libc.so.6                          0x00002b5a0468d460 __libc_start_main +
    245

    6    tmp_23fa4ld                        0x0000559ef041ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp86i78o5a.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp86i78o5a.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 3, through: n, by: -1) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d75badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d758a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d758a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d758a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d758a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0d756a37ec <unavailable> + 186348

    6    tmpv672rbyg                        0x000055b467958856 <unavailable> + 6230

    7    tmpv672rbyg                        0x000055b46795846b <unavailable> + 5227

    8    libc.so.6                          0x00002b0d75d99460 __libc_start_main +
    245

    9    tmpv672rbyg                        0x000055b467958189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqkr10jai.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpqkr10jai.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpqkr10jai.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpb2melgux.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpb2melgux.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpb2melgux.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0, 0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxnye10o8.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0, 0, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp2q02xqus.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp2q02xqus.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp2q02xqus.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n    return 0\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpslaaegzh.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpslaaegzh.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpslaaegzh.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxnz3frjw.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 0..<n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1698966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b169865d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b169865d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b169865d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b169865cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b169845c7ec <unavailable> + 186348

    6    tmp0qipo9hv                        0x000056090e3a17b6 <unavailable> + 6070

    7    tmp0qipo9hv                        0x000056090e3a13cb <unavailable> + 5067

    8    libc.so.6                          0x00002b1698b52460 __libc_start_main +
    245

    9    tmp0qipo9hv                        0x000056090e3a10e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n <= 0 {\n\t\treturn 0\n\
    \t}\n\tif n == 1 {\n\t\treturn 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpj1y3u41x.swift:21:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpj1y3u41x.swift:21:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpj1y3u41x.swift:21:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 0 {\n    return 0\n\
    \  }\n  if n == 0 || n == 1 {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmbop7kff.swift:21:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpmbop7kff.swift:21:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpmbop7kff.swift:21:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 3...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b248def8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b248dbef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b248dbef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b248dbef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b248dbeebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b248d9ee7ec <unavailable> + 186348

    6    tmpa3nrywc4                        0x00005576d216f7b6 <unavailable> + 6070

    7    tmpa3nrywc4                        0x00005576d216f3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b248e0e4460 __libc_start_main +
    245

    9    tmpa3nrywc4                        0x00005576d216f0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   for _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp4wq__rca/tmp4wq__rca.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6681613c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b668130ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b668130a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66813097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4wq__rca                        0x000055646b089338 <unavailable> + 4920

    5    libc.so.6                          0x00002b66817ff460 __libc_start_main +
    245

    6    tmp4wq__rca                        0x000055646b088fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 2, through: n, by: -1) {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2]\
    \ + fibfib[i - 3]\n    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b43535eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43532e1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b43532e1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b43532e113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b43532e0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b43530e07ec <unavailable> + 186348

    6    tmpumb18lpv                        0x000055dc615ff856 <unavailable> + 6230

    7    tmpumb18lpv                        0x000055dc615ff46b <unavailable> + 5227

    8    libc.so.6                          0x00002b43537d6460 __libc_start_main +
    245

    9    tmpumb18lpv                        0x000055dc615ff189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 2...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c2b649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c2b340561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0c2b340286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0c2b34013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0c2b33fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0c2b13f7ec <unavailable> + 186348

    6    tmpfllktref                        0x000055ff3fd117b6 <unavailable> + 6070

    7    tmpfllktref                        0x000055ff3fd113cb <unavailable> + 5067

    8    libc.so.6                          0x00002b0c2b835460 __libc_start_main +
    245

    9    tmpfllktref                        0x000055ff3fd110e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in stride(from:\
    \ 2, through: n, by: -1) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab66f47bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab66f172561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab66f172286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab66f17213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab66f171bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab66ef717ec <unavailable> + 186348

    6    tmpo5bkou_8                        0x000055a02a544856 <unavailable> + 6230

    7    tmpo5bkou_8                        0x000055a02a54446b <unavailable> + 5227

    8    libc.so.6                          0x00002ab66f667460 __libc_start_main +
    245

    9    tmpo5bkou_8                        0x000055a02a544189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpb2melgux.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpb2melgux.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpb2melgux.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxe3ml50f.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxe3ml50f.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0, 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpvjyqdjt3.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0, 1)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 1\n\
    \    }\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl6hg9yiw.swift:28:15: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \      ^\n/tmp/tmpl6hg9yiw.swift:28:29: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        \
    \                    ^\n/tmp/tmpl6hg9yiw.swift:28:43: error: cannot call value\
    \ of non-function type 'Int'\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                          ^\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return\
    \ 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n      \
    \  return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n == 9\
    \ {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n  \
    \  if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return 144\n\
    \    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n      \
    \  return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if n ==\
    \ 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n   \
    \ }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n        return\
    \ 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n == 21 {\n\
    \        return 10946\n    }\n    if n == 22 {\n        return 17711\n    }\n\
    \    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n        return\
    \ 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if n == 26\
    \ {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n \
    \   }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n    \
    \    return 514229\n    }\n    if n == 30 {\n        return 801750\n    }\n  \
    \  if n == 31 {\n        return 1114151\n    }\n    if n == 32 {\n        return\
    \ 1446697\n    }\n    if n == 33 {\n        return 1792603\n    }\n    if n ==\
    \ 34 {\n        return 2189311\n    }\n    if n == 35 {\n        return 2540749\n\
    \    }\n    if n == 36 {\n        return 2971277\n    }\n    if n == 37 {\n  \
    \      return 3418130\n    }\n    if n == 38 {\n        return 3983621\n    }\n\
    \    if n == 39 {\n        return 4392490\n    }\n    if n == 40 {\n        return\
    \ 4874391\n    }\n    if n == 41 {\n        return 5391394\n    }\n    if n ==\
    \ 42 {\n        return 5902960\n    }\n    if n == 43 {\n        return 6533921\n\
    \    }\n    if n == 44 {\n        return 7045800\n    }\n    if n == 45 {\n  \
    \      return 74\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqv_arv5d.swift:174:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmpqv_arv5d.swift:14:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmpqv_arv5d.swift:156:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpqv_arv5d.swift:168:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 2) == 1)\n       ^\n\
    /tmp/tmpqv_arv5d.swift:169:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmpqv_arv5d.swift:170:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 5) == 4)\n       ^\n\
    /tmp/tmpqv_arv5d.swift:171:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmpqv_arv5d.swift:172:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 10) == 81)\n       ^\n\
    /tmp/tmpqv_arv5d.swift:173:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmpqv_arv5d.swift:174:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 14) == 927)\n      \
    \ ^\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp86i78o5a.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for index in 3 ..< n {\n    fibfib[index]\
    \ = fibfib[index - 1] + fibfib[index - 2] + fibfib[index - 3]\n  }\n  return fibfib[n]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adabc862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adabc559561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adabc559286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adabc55913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adabc558bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adabc35a7ec <unavailable> + 186348

    6    tmp4vixrkyy                        0x00005615add657b6 <unavailable> + 6070

    7    tmp4vixrkyy                        0x00005615add653cb <unavailable> + 5067

    8    libc.so.6                          0x00002adabca4e460 __libc_start_main +
    245

    9    tmp4vixrkyy                        0x00005615add650e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 2...n {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fa1a4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fa1743561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3fa1743286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3fa174313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3fa1742bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b3fa15427ec <unavailable> + 186348

    6    tmpmmxufqm0                        0x000055e7f4ba37b6 <unavailable> + 6070

    7    tmpmmxufqm0                        0x000055e7f4ba33cb <unavailable> + 5067

    8    libc.so.6                          0x00002b3fa1c38460 __libc_start_main +
    245

    9    tmpmmxufqm0                        0x000055e7f4ba30e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp14ykfpjy.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n == 1 {\n\t\
    \treturn 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpotvot9yu.swift:18:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpotvot9yu.swift:18:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpotvot9yu.swift:18:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxe3ml50f.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   for _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmppq2y3nn6/tmppq2y3nn6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf19259c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf18f50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf18f50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf18f4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppq2y3nn6                        0x0000562047b93338 <unavailable> + 4920

    5    libc.so.6                          0x00002aaf19445460 __libc_start_main +
    245

    6    tmppq2y3nn6                        0x0000562047b92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib + 1\n    }\n    return fibfib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpzbulbnre/tmpzbulbnre.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ecd6dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ecd3d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ecd3d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ecd3d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbulbnre                        0x000055f10cddf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2ecd8c6460 __libc_start_main +
    245

    6    tmpzbulbnre                        0x000055f10cddefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp5f1zake1/tmp5f1zake1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a0f196c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a0ee8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a0ee8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a0ee8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5f1zake1                        0x000055fe9b46c338 <unavailable> + 4920

    5    libc.so.6                          0x00002b4a0f382460 __libc_start_main +
    245

    6    tmp5f1zake1                        0x000055fe9b46bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp0hoceen.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, n)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp14ykfpjy.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3 ..<\
    \ n {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a0f8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a0c81561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82a0c81286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82a0c8113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82a0c80bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82a0a807ec <unavailable> + 186348

    6    tmpvrfez9zk                        0x000056519601c7b6 <unavailable> + 6070

    7    tmpvrfez9zk                        0x000056519601c3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b82a1176460 __libc_start_main +
    245

    9    tmpvrfez9zk                        0x000056519601c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return\
    \ 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n      \
    \  return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n == 9\
    \ {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n  \
    \  if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return 144\n\
    \    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n      \
    \  return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if n ==\
    \ 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n   \
    \ }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n        return\
    \ 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n == 21 {\n\
    \        return 10946\n    }\n    if n == 22 {\n        return 17711\n    }\n\
    \    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n        return\
    \ 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if n == 26\
    \ {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n \
    \   }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n    \
    \    return 514229\n    }\n    if n == 30 {\n        return 832040\n    }\n  \
    \  if n == 31 {\n        return 1346269\n    }\n    if n == 32 {\n        return\
    \ 2178309\n    }\n    if n == 33 {\n        return 3524578\n    }\n    if n ==\
    \ 34 {\n        return 5702887\n    }\n    if n == 35 {\n        return 9131742\n\
    \    }\n    if n == 36 {\n        return 15007033\n    }\n    if n == 37 {\n \
    \       return 24178586\n    }\n    if n == 38 {\n        return 39088169\n  \
    \  }\n    if n == 39 {\n        return 51422919\n    }\n    if n == 40 {\n   \
    \     return 73453804\n    }\n    if n == 41 {\n        return 102334155\n   \
    \ }\n    if n == 42 {\n        return 126974510\n    }\n    if n == 43 {\n   \
    \     return 152050814\n    }\n    if n == 44 {\n        return 200262809\n  \
    \  }\n    if n == 45 {\n        return \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpmd0jpanp.swift:174:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmpmd0jpanp.swift:14:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmpmd0jpanp.swift:152:9: error: non-void function should\
    \ return a value\n        return \n        ^\n/tmp/tmpmd0jpanp.swift:156:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpmd0jpanp.swift:168:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 2) ==\
    \ 1)\n       ^\n/tmp/tmpmd0jpanp.swift:169:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmpmd0jpanp.swift:170:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 5) ==\
    \ 4)\n       ^\n/tmp/tmpmd0jpanp.swift:171:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmpmd0jpanp.swift:172:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 10) ==\
    \ 81)\n       ^\n/tmp/tmpmd0jpanp.swift:173:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmpmd0jpanp.swift:174:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(fibfib(n: 14) ==\
    \ 927)\n       ^\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n, 0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp0_x6tzau.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, 0)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_23fa4ld/tmp_23fa4ld.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a044a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a04198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a04198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a041977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_23fa4ld                        0x0000559ef0420338 <unavailable> + 4920

    5    libc.so.6                          0x00002b5a0468d460 __libc_start_main +
    245

    6    tmp_23fa4ld                        0x0000559ef041ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n == 1 {\n\t\
    \treturn 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpotvot9yu.swift:18:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpotvot9yu.swift:18:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpotvot9yu.swift:18:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxe3ml50f.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n, n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl3310ivh.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 0 {\n\t\tpanic(\"\
    fibfib: negative number\")\n\t}\n\tif n == 0 || n == 1 {\n\t\treturn 0\n\t}\n\t\
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpn2088fgt.swift:16:3: error: cannot find 'panic' in scope\n    \
    \            panic(\"fibfib: negative number\")\n                ^~~~~\n/tmp/tmpn2088fgt.swift:21:16:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                      ^\n                      n: \n/tmp/tmpn2088fgt.swift:21:30:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                    ^\n                     \
    \               n: \n/tmp/tmpn2088fgt.swift:21:44: error: missing argument label\
    \ 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n     \
    \                                             ^\n                            \
    \                      n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n == 1 {\n\t\
    \treturn 0\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpotvot9yu.swift:18:16: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \  ^\n                      n: \n/tmp/tmpotvot9yu.swift:18:30: error: missing\
    \ argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \                                    ^\n                                    n:\
    \ \n/tmp/tmpotvot9yu.swift:18:44: error: missing argument label 'n:' in call\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                    \
    \                              ^\n                                           \
    \       n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n <= 0 {\n        return\
    \ 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpqkr10jai.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpqkr10jai.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpqkr10jai.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n  for _ in\
    \ 1...n {\n    result *= 2\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg0xvikdj/tmpg0xvikdj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7484985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b748467cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b748467c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b748467b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0xvikdj                        0x0000564454f4f338 <unavailable> + 4920

    5    libc.so.6                          0x00002b7484b71460 __libc_start_main +
    245

    6    tmpg0xvikdj                        0x0000564454f4efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib: Int = 0\n \
    \   if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n\
    \    }\n    if n == 2 {\n        return 1\n    }\n    if n > 2 {\n        fibfib\
    \ += fibfib(n-1) + fibfib(n-2)\n    }\n    return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpifzt1zyg.swift:26:19: error: cannot call value of non-function\
    \ type 'Int'\n        fibfib += fibfib(n-1) + fibfib(n-2)\n                  ^\n\
    /tmp/tmpifzt1zyg.swift:26:33: error: cannot call value of non-function type 'Int'\n\
    \        fibfib += fibfib(n-1) + fibfib(n-2)\n                               \
    \ ^\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++ {\n    fibfib[i]\
    \ = fibfib[i-2] + fibfib[i-1]\n  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpfni3f0qb.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n, 0,\
    \ 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpcoa3sedb.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, 0, 1)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp0hoceen.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, n)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in 3...n {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5f95e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5f92d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad5f92d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad5f92d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad5f92d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad5f90d77ec <unavailable> + 186348

    6    tmpmdgxl4ob                        0x000055baf89287b6 <unavailable> + 6070

    7    tmpmdgxl4ob                        0x000055baf89283cb <unavailable> + 5067

    8    libc.so.6                          0x00002ad5f97cd460 __libc_start_main +
    245

    9    tmpmdgxl4ob                        0x000055baf89280e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n < 0 {\n\t\tpanic(\"\
    fibfib: negative number\")\n\t}\n\tif n == 0 || n == 1 {\n\t\treturn 0\n\t}\n\t\
    if n == 2 {\n\t\treturn 1\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxhlmdfci.swift:16:3: error: cannot find 'panic' in scope\n    \
    \            panic(\"fibfib: negative number\")\n                ^~~~~\n/tmp/tmpxhlmdfci.swift:24:16:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                      ^\n                      n: \n/tmp/tmpxhlmdfci.swift:24:30:\
    \ error: missing argument label 'n:' in call\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                    ^\n                     \
    \               n: \n/tmp/tmpxhlmdfci.swift:24:44: error: missing argument label\
    \ 'n:' in call\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n     \
    \                                             ^\n                            \
    \                      n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3]\n  }\n  return fibfib[n]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpexzejch2.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for i : Int in stride(from: 3, through:\
    \ n, by: 2) {\n    fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n\
    \  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aea44e6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea44b62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aea44b62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aea44b6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aea44b61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aea449617ec <unavailable> + 186348

    6    tmpg1__cuys                        0x0000564f4c801856 <unavailable> + 6230

    7    tmpg1__cuys                        0x0000564f4c80146b <unavailable> + 5227

    8    libc.so.6                          0x00002aea45057460 __libc_start_main +
    245

    9    tmpg1__cuys                        0x0000564f4c801189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n, 0,\
    \ 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpcoa3sedb.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, 0, 1)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n  for _ in\
    \ 1...n {\n    result *= 2\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpg0xvikdj/tmpg0xvikdj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7484985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b748467cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b748467c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b748467b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0xvikdj                        0x0000564454f4f338 <unavailable> + 4920

    5    libc.so.6                          0x00002b7484b71460 __libc_start_main +
    245

    6    tmpg0xvikdj                        0x0000564454f4efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var result = 1\n  for _ in\
    \ 1...n {\n    result *= n\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpf501vlof/tmpf501vlof.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d1552ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d15221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d15221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d152207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf501vlof                        0x0000563635a35338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9d15716460 __libc_start_main +
    245

    6    tmpf501vlof                        0x0000563635a34fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i < n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxnz3frjw.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i < n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    if\
    \ n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n        return 2\n\
    \    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return\
    \ 5\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n      \
    \  return 13\n    }\n    if n == 8 {\n        return 21\n    }\n    if n == 9\
    \ {\n        return 34\n    }\n    if n == 10 {\n        return 55\n    }\n  \
    \  if n == 11 {\n        return 89\n    }\n    if n == 12 {\n        return 144\n\
    \    }\n    if n == 13 {\n        return 233\n    }\n    if n == 14 {\n      \
    \  return 377\n    }\n    if n == 15 {\n        return 610\n    }\n    if n ==\
    \ 16 {\n        return 987\n    }\n    if n == 17 {\n        return 1597\n   \
    \ }\n    if n == 18 {\n        return 2584\n    }\n    if n == 19 {\n        return\
    \ 4181\n    }\n    if n == 20 {\n        return 6765\n    }\n    if n == 21 {\n\
    \        return 10946\n    }\n    if n == 22 {\n        return 17711\n    }\n\
    \    if n == 23 {\n        return 28657\n    }\n    if n == 24 {\n        return\
    \ 46368\n    }\n    if n == 25 {\n        return 75025\n    }\n    if n == 26\
    \ {\n        return 121393\n    }\n    if n == 27 {\n        return 196418\n \
    \   }\n    if n == 28 {\n        return 317811\n    }\n    if n == 29 {\n    \
    \    return 514229\n    }\n    if n == 30 {\n        return 832040\n    }\n  \
    \  if n == 31 {\n        return 1254025\n    }\n    if n == 32 {\n        return\
    \ 1680046\n    }\n    if n == 33 {\n        return 2520891\n    }\n    if n ==\
    \ 34 {\n        return 4115801\n    }\n    if n == 35 {\n        return 5702881\n\
    \    }\n    if n == 36 {\n        return 8355781\n    }\n    if n == 37 {\n  \
    \      return 11881391\n    }\n    if n == 38 {\n        return 18145591\n   \
    \ }\n    if n == 39 {\n        return 26077181\n    }\n    if n == 40 {\n    \
    \    return 42199311\n    }\n    if n == 41 {\n        return 62831191\n    }\n\
    \    if n == 42 {\n        return 103842461\n    }\n    if n == 43 {\n       \
    \ return 165977661\n    }\n    if n == 44 {\n        return 252312211\n    }\n\
    \    if n == 45 {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: SyntaxError
  stderr: "/tmp/tmptzz0e4sp.swift:173:29: error: expected '}' at end of brace statement\n\
    assert(fibfib(n: 14) == 927)\n                            ^\n/tmp/tmptzz0e4sp.swift:14:28:\
    \ note: to match this opening '{'\nfunc fibfib(n: Int) -> Int {\n            \
    \               ^\n/tmp/tmptzz0e4sp.swift:155:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmptzz0e4sp.swift:167:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 2) == 1)\n       ^\n\
    /tmp/tmptzz0e4sp.swift:168:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 1) == 0)\n       ^\n/tmp/tmptzz0e4sp.swift:169:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 5) == 4)\n       ^\n\
    /tmp/tmptzz0e4sp.swift:170:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 8) == 24)\n       ^\n/tmp/tmptzz0e4sp.swift:171:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 10) == 81)\n       ^\n\
    /tmp/tmptzz0e4sp.swift:172:8: error: cannot call value of non-function type 'Int'\n\
    assert(fibfib(n: 12) == 274)\n       ^\n/tmp/tmptzz0e4sp.swift:173:8: error: cannot\
    \ call value of non-function type 'Int'\nassert(fibfib(n: 14) == 927)\n      \
    \ ^\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib.append(0)\n\
    \  fibfib.append(0)\n  fibfib.append(1)\n  for _ in 0..<n {\n    fibfib.append(fibfib[fibfib.count-2]\
    \ + fibfib[fibfib.count-1])\n  }\n  return fibfib[n]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpl51kx4w7/tmpl51kx4w7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bb5ae8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bb57dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bb57df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bb57de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl51kx4w7                        0x000055c8457635de <unavailable> + 5598

    5    libc.so.6                          0x00002b6bb5cd4460 __libc_start_main +
    245

    6    tmpl51kx4w7                        0x000055c845763199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n < 2 {\n    return 0\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpslaaegzh.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpslaaegzh.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpslaaegzh.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  if n == 0 || n == 1 {\n \
    \   return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpd5aadiae.swift:18:17: error: missing argument label 'n:' in call\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                ^\n       \
    \         n: \n/tmp/tmpd5aadiae.swift:18:31: error: missing argument label 'n:'\
    \ in call\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                \
    \              ^\n                              n: \n/tmp/tmpd5aadiae.swift:18:45:\
    \ error: missing argument label 'n:' in call\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                            ^\n             \
    \                               n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib += fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpn3am33kk/tmpn3am33kk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61f97dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61f94d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61f94d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61f94d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3am33kk                        0x000056302a190338 <unavailable> + 4920

    5    libc.so.6                          0x00002b61f99cb460 __libc_start_main +
    245

    6    tmpn3am33kk                        0x000056302a18ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib[0]\
    \ = 0\n  fibfib[1] = 0\n  fibfib[2] = 1\n  for var i = 2; i <= n; i++ {\n    fibfib[i]\
    \ = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  }\n  return fibfib[n]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpwd8ut9xz.swift:19:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 2; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ < n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n  \
    \  }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpxe3ml50f.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i < n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i : Int in 1...n\
    \ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return\
    \ fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc452dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc4224561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7cc4224286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7cc422413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7cc4223bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7cc40237ec <unavailable> + 186348

    6    tmp29feixkb                        0x000055e8ac92f7b6 <unavailable> + 6070

    7    tmp29feixkb                        0x000055e8ac92f3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b7cc4719460 __libc_start_main +
    245

    9    tmp29feixkb                        0x000055e8ac92f0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ _ in 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp5f1zake1/tmp5f1zake1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a0f196c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a0ee8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a0ee8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a0ee8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5f1zake1                        0x000055fe9b46c338 <unavailable> + 4920

    5    libc.so.6                          0x00002b4a0f382460 __libc_start_main +
    245

    6    tmp5f1zake1                        0x000055fe9b46bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp2q02xqus.swift:21:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmp2q02xqus.swift:21:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmp2q02xqus.swift:21:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\tif n == 0 || n == 1 {\n\t\
    \treturn 0\n\t} else if n == 2 {\n\t\treturn 1\n\t} else {\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\n\
    assert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12)\
    \ == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpp6l8k6dy.swift:20:17: error: missing argument label 'n:' in call\n\
    \                return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n            \
    \                  ^\n                              n: \n/tmp/tmpp6l8k6dy.swift:20:31:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                            ^\n\
    \                                            n: \n/tmp/tmpp6l8k6dy.swift:20:45:\
    \ error: missing argument label 'n:' in call\n                return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n                                              \
    \            ^\n                                                          n: \n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    return fibfibHelper(n,\
    \ 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n:\
    \ 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
    \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp14ykfpjy.swift:15:12: error: cannot find 'fibfibHelper' in scope\n\
    \    return fibfibHelper(n, 0)\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n < 0 {\n        return\
    \ 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpb2melgux.swift:24:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmpb2melgux.swift:24:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmpb2melgux.swift:24:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for index in 3 ..<\
    \ n {\n        fibfib[index] = fibfib[index-1] + fibfib[index-2] + fibfib[index-3]\n\
    \    }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a0f8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a0c81561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82a0c81286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82a0c8113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82a0c80bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82a0a807ec <unavailable> + 186348

    6    tmpvrfez9zk                        0x000056519601c7b6 <unavailable> + 6070

    7    tmpvrfez9zk                        0x000056519601c3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b82a1176460 __libc_start_main +
    245

    9    tmpvrfez9zk                        0x000056519601c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ var i = 0; i <= n; i++ {\n    fibfib = fibfib + i\n  }\n  return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpeti2wllg.swift:16:3: error: C-style for statement has been removed\
    \ in Swift 3\n  for var i = 0; i <= n; i++ {\n  ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int]()\n\
    \    fibfib[0] = 0\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for var i = 2; i\
    \ <= n; i++ {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n \
    \   }\n    return fibfib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fibfib(n:\
    \ 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n:\
    \ 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n:\
    \ 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmp86i78o5a.swift:19:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 2; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib += fibfib\n    }\n    return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpewcd5h6k/tmpewcd5h6k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9793189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9792e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9792e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9792e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewcd5h6k                        0x0000559f882dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9793375460 __libc_start_main +
    245

    6    tmpewcd5h6k                        0x0000559f882dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = [Int]()\n  fibfib.append(0)\n\
    \  fibfib.append(0)\n  fibfib.append(1)\n  for _ in 1...n {\n    fibfib.append(fibfib[fibfib.count-2]\
    \ + fibfib[fibfib.count-1])\n  }\n  return fibfib[n-1]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpih02buap/tmpih02buap.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af787fe4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af787cdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af787cdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af787cda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih02buap                        0x0000558678dfe4e8 <unavailable> + 5352

    5    libc.so.6                          0x00002af7881d0460 __libc_start_main +
    245

    6    tmpih02buap                        0x0000558678dfe199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib + 1\n  }\n  return fibfib\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp_23fa4ld/tmp_23fa4ld.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a044a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a04198b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a04198988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a041977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_23fa4ld                        0x0000559ef0420338 <unavailable> + 4920

    5    libc.so.6                          0x00002b5a0468d460 __libc_start_main +
    245

    6    tmp_23fa4ld                        0x0000559ef041ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ i in 0..<n {\n    fibfib = fibfib + fibfib(i-1)\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpksxdjoio.swift:17:23: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib = fibfib + fibfib(i-1)\n                      ^\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n\
    \        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmprsjacxps.swift:18:19: error: missing argument label 'n:' in call\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n                  ^\n   \
    \               n: \n/tmp/tmprsjacxps.swift:18:33: error: missing argument label\
    \ 'n:' in call\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n         \
    \                       ^\n                                n: \n/tmp/tmprsjacxps.swift:18:47:\
    \ error: missing argument label 'n:' in call\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n                                              ^\n           \
    \                                   n: \n"
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n\treturn fibfibHelper(n, n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpl3310ivh.swift:15:9: error: cannot find 'fibfibHelper' in scope\n\
    \        return fibfibHelper(n, n)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821033
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib = 0\n  for _ in\
    \ 0..<n {\n    fibfib = fibfib + fibfib\n  }\n  return fibfib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\nassert(fibfib(n:\
    \ 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) == 81)\nassert(fibfib(n:\
    \ 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmp8w1bcexq/tmp8w1bcexq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac716036c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac715d2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac715d2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac715d2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w1bcexq                        0x000055a9b3dc1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac716222460 __libc_start_main +
    245

    6    tmp8w1bcexq                        0x000055a9b3dc0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: 1
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  var fibfib: Int = 0\n  for\
    \ i in 0..<n {\n    fibfib = fibfib + fibfib(i-1)\n  }\n  return fibfib\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: SyntaxError
  stderr: "/tmp/tmpksxdjoio.swift:17:23: error: cannot call value of non-function\
    \ type 'Int'\n    fibfib = fibfib + fibfib(i-1)\n                      ^\n"
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = 0\n    for\
    \ _ in 0..<n {\n        fibfib = fibfib + fibfib\n    }\n    return fibfib\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1) == 0)\n\
    assert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n: 10) ==\
    \ 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
  status: Exception
  stderr: 'tmpqbl103jv/tmpqbl103jv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c8d73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c8a6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c8a6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c8a697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqbl103jv                        0x000055c2dfa08338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab1c8f5f460 __libc_start_main +
    245

    6    tmpqbl103jv                        0x000055c2dfa07fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659821032
- exit_code: -4
  program: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
    /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    /// Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
    \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n  // TODO: Write code here\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fibfib(n: 2) == 1)\n\
    assert(fibfib(n: 1) == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\n\
    assert(fibfib(n: 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14)\
    \ == 927)"
  status: Exception
  stderr: 'tmp537zfm0r/tmp537zfm0r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10061dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab100314b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab100314988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1003137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp537zfm0r                        0x000055e12c55c1b8 <unavailable> + 4536

    5    libc.so.6                          0x00002ab100809460 __libc_start_main +
    245

    6    tmp537zfm0r                        0x000055e12c55be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659821032
