name: HumanEval_92_any_int
language: swift
prompt: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of\
  \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
  \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n///\
  \ any_int(3.6, -2.2, 2) \u279E False\nfunc any_int(x: Double, y: Double, z: Double)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
  \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
  \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
  \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x:\
  \ 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x:\
  \ 3.0, y: 4, z: 7) == false)"
completions: ["    if x == y {\n        return z == x + y\n    }\n    if x == z {\n\
    \        return y == x + z\n    }\n    return false", '    return x == y || x
    == z || y == z', '  return x == y || x == z || y == z', '    return x == y + z',
  "    if x == y {\n        return z == x + y\n    }\n    if x == z {\n        return\
    \ y == x + z\n    }\n    if y == z {\n        return x == y + z\n    }\n    return\
    \ false", "    if x == y {\n        return z == x + y\n    }\n    if x == z {\n\
    \        return y == x + z\n    }\n    return false", '    return ((x + y + z)
    == (x * y * z))', "    if x == y {\n        if x == z {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ return false\n    }", "    if x == y {\n        if x == z {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        return false\n    }", '    return x == y || x == z || y == z', '    return
    x == y || x == z || y == z', "    if x == y {\n        if x == z {\n         \
    \   return true\n        }\n        return false\n    }\n    return false", '    return
    x == y + z', '    return x == y + z', '    return x == y || x == z || y == z',
  "    if x == y {\n        return z == x + y\n    }\n    if x == z {\n        return\
    \ y == x + z\n    }\n    if y == z {\n        return x == y + z\n    }\n    return\
    \ false", '    return x == y || x == z || y == z', "    if x == y {\n        return\
    \ true\n    }\n    if x == z {\n        return true\n    }\n    if y == z {\n\
    \        return true\n    }\n    return false", '    return x == y + z', '    return
    x == y || x == z || y == z']
stop_tokens:
- "\n}"
