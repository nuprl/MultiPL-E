{
  "name": "mbpp_593_removezero_ip",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to remove leading zeroes from an ip address.\n\t\"\"\"\nfunction removezero_ip(ip::String)::String \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = removezero_ip;\n\t@test(candidate(\"216.08.094.196\") == \"216.8.94.196\")\n\t@test(candidate(\"12.01.024\") == \"12.1.24\")\n\t@test(candidate(\"216.08.094.0196\") == \"216.8.94.196\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\twhile ip_list[i][1] == '0'\n\t\t\tip_list[i] = ip_list[i][2:end]\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_new = split(ip, \".\")\n\tip_new = map(x -> parse(Int, x), ip_new)\n\tip_new = map(x -> string(x), ip_new)\n\tip_new = join(ip_new, \".\")\n\treturn ip_new\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] != \"0\"\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr[i:end], \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_new = join(ip_split, \".\")\n\treturn ip_new\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->string(x), ip_split)\n\tip_split = join(ip_split, \".\")\n\treturn ip_split\nend",
    "\tip_array = split(ip, \".\")\n\tip_array = map(x -> lstrip(x, \"0\"), ip_array)\n\treturn join(ip_array, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tip_list = map(x -> lstrip(x, \"0\"), ip_list)\n\tip_list = map(x -> x == \"\" ? \"0\" : x, ip_list)\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tpush!(ip_split_new, parse(Int, i))\n\tend\n\tip_split_new = map(x -> string(x), ip_split_new)\n\tip_new = join(ip_split_new, \".\")\n\treturn ip_new\nend",
    "\tip_arr = split(ip,\".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_arr,\".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->string(x), ip_split)\n\tip_split = join(ip_split, \".\")\n\treturn ip_split\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in ip_list\n\t\tif i == \"0\"\n\t\t\tdeleteat!(ip_list, findfirst(ip_list, i))\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tip_arr[i] = parse(Int, ip_arr[i])\n\tend\n\tip_arr = map(x -> string(x), ip_arr)\n\tip_arr = join(ip_arr, \".\")\n\treturn ip_arr\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split = deleteat!(ip_split, findfirst(ip_split, i))\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:4\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in ip_array\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_new, \"\")\n\t\telse\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tip_list = map(x -> lstrip(x, \"0\"), ip_list)\n\tip_list = map(x -> x == \"\" ? \"0\" : x, ip_list)\n\treturn join(ip_list, \".\")\nend",
    "\t\"\"\"\n\tRemove leading zeroes from an ip address.\n\t\"\"\"\n\tip_split = split(ip, \".\")\n\tfor i in 1:4\n\t\tif length(ip_split[i]) > 1\n\t\t\tif ip_split[i][1] == \"0\"\n\t\t\t\tip_split[i] = ip_split[i][2]\n\t\t\tend\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:4\n\t\tip_arr[i] = parse(Int, ip_arr[i])\n\tend\n\tip_arr = map(x -> string(x), ip_arr)\n\tip_arr = join(ip_arr, \".\")\n\treturn ip_arr\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in ip_array\n\t\tif i == \"0\"\n\t\t\ti = \"\"\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in ip_list\n\t\tif i == \"0\"\n\t\t\ti = \"\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tip = map(x -> parse(Int, x), ip)\n\tip = map(x -> string(x), ip)\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tip_list[i] = parse(Int, ip_list[i])\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_new, \"\")\n\t\telse\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tip_list = map(x->lstrip(x, \"0\"), ip_list)\n\tip_list = map(x->x==\"\" ? \"0\" : x, ip_list)\n\treturn join(ip_list, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in ip_array\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\twhile ip_split[i][1] == '0'\n\t\t\tip_split[i] = ip_split[i][2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, '.')\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, '.')\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in ip_list\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tpush!(ip_split_new, lstrip(i, \"0\"))\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip = ip.split(\".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2]\n\t\tend\n\tend\n\treturn ip\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tip_array_new = []\n\tfor i in ip_array\n\t\tpush!(ip_array_new, lstrip(i, \"0\"))\n\tend\n\treturn join(ip_array_new, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"0\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tip_arr[i] = parse(Int, ip_arr[i])\n\tend\n\tip_arr = ip_arr[ip_arr .!= 0]\n\tip_arr = map(string, ip_arr)\n\treturn join(ip_arr, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"1\"\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\ti = \"0\"\n\t\telse\n\t\t\ti = i\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tip_list = [lpad(x,3,\"0\") for x in ip_list]\n\tip_list = [lstrip(x,\"0\") for x in ip_list]\n\treturn \".\"*join(ip_list)\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\twhile ip_arr[i][1] == '0'\n\t\t\tip_arr[i] = ip_arr[i][2:end]\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> parse(Int, x), ip_split)\n\tip_split = map(x -> string(x), ip_split)\n\tip_split = join(ip_split, \".\")\n\treturn ip_split\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif length(ip_split[i]) > 1 && ip_split[i][1] == '0'\n\t\t\tip_split[i] = ip_split[i][2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in ip_list\n\t\tif i == \"0\"\n\t\t\tip_list[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_new, \"\")\n\t\telse\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tip_array = map(x -> lstrip(x, \"0\"), ip_array)\n\tip = join(ip_array, \".\")\n\treturn ip\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_nozero = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_nozero, \"0\")\n\t\telse\n\t\t\tpush!(ip_split_nozero, lstrip(i, \"0\"))\n\t\tend\n\tend\n\treturn join(ip_split_nozero, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif length(ip_split[i]) > 1 && ip_split[i][1] == '0'\n\t\t\tip_split[i] = ip_split[i][2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tip_arr[i] = parse(Int, ip_arr[i])\n\tend\n\tip_arr = map(x -> string(x), ip_arr)\n\treturn join(ip_arr, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\twhile ip_split[i][1] == '0'\n\t\t\tip_split[i] = ip_split[i][2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in ip_arr\n\t\tif i[1] == '0'\n\t\t\ti[1] = \"\"\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"\"\n\t\tend\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tip_array[i] = parse(Int, ip_array[i])\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_new, \"0\")\n\t\telse\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in ip_arr\n\t\tif i == \"0\"\n\t\t\tip_arr[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tif ip[1] == '0'\n\t\treturn removezero_ip(ip[2:end])\n\telse\n\t\treturn ip\n\tend\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->string(x), ip_split)\n\tip = join(ip_split, \".\")\n\treturn ip\nend",
    "\tip = ip.split(\".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int,ip[i])\n\tend\n\tip = string.(ip)\n\treturn join(ip,\".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_new, \"\")\n\t\telse\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tip_array = map(x->parse(Int, x), ip_array)\n\tip_array = map(x->string(x), ip_array)\n\tip = join(ip_array, \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip \n\t\tif i == \"0\"\n\t\t\ti = \"0\"\n\t\telse\n\t\t\ti = parse(Int, i)\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in ip_arr\n\t\tif i == \"0\"\n\t\t\tip_arr = deleteat!(ip_arr, findfirst(ip_arr, i))\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i == \"0\"\n\t\t\ti = \"0\"\n\t\telse\n\t\t\ti = i\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, '.')\n\tfor i in ip_split\n\t\tif i[1] == '0'\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_split, '.')\nend",
    "\t\"\"\"\n\tRemove leading zeroes from an ip address.\n\t\"\"\"\n\tip = split(ip, \".\")\n\tfor i in 1:4\n\t\tif length(ip[i]) > 1 && ip[i][1] == '0'\n\t\t\tip[i] = ip[i][2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in ip_list\n\t\tif i == \"0\"\n\t\t\tip_list[i] = \"0\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip = split(ip, \".\")\n\tip = join(ip, \".\")\n\tip = replace(ip, r\"\\.0+\", \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, '.')\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip = join(ip_split, '.')\n\treturn ip\nend",
    "\t\"\"\"\n\tRemove leading zeroes from an ip address.\n\t\"\"\"\n\tip_split = split(ip, \".\")\n\tfor i in 1:4\n\t\tif length(ip_split[i]) > 1 && ip_split[i][1] == \"0\"\n\t\t\tip_split[i] = ip_split[i][2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tip_list = map(x -> lstrip(x, \"0\"), ip_list)\n\tip_list = map(x -> if x == \"\" x = \"0\" end, ip_list)\n\tip_list = join(ip_list, \".\")\n\treturn ip_list\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == '0'\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in ip_list\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] != \"0\"\n\t\t\treturn join(ip_list[i:end], \".\")\n\t\tend\n\tend\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i != \"0\"\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\tip_new = join(ip_split_new, \".\")\n\treturn ip_new\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\tip_new = join(ip_split, \".\")\n\treturn ip_new\nend",
    "\t\"\"\"\n\tRemove leading zeroes from an ip address.\n\t\"\"\"\n\tip_list = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i == \"0\"\n\t\t\ti = \"0\"\n\t\telse\n\t\t\ti = parse(Int, i)\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = ip.split(\".\")\n\tfor i in ip\n\t\tif i == \"0\"\n\t\t\tip = ip.deleteat(i)\n\t\tend\n\tend\n\treturn ip\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:4\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_list = split(ip,\".\")\n\tfor i in 1:4\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_list,\".\")\nend",
    "\t\"\"\"\n\tRemove leading zeroes from an ip address.\n\t\"\"\"\n\tip_split = split(ip, \".\")\n\tfor i in 1:4\n\t\tif parse(Int, ip_split[i]) < 10\n\t\t\tip_split[i] = \"0\" * (3 - length(ip_split[i])) * \"0\" * ip_split[i]\n\t\telseif parse(Int, ip_split[i]) < 100\n\t\t\tip_split[i] = \"0\" * (3 - length(ip_split[i])) * ip_split[i]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:length(ip_array)\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tip_list_new = []\n\tfor i in ip_list\n\t\tpush!(ip_list_new, lstrip(i, \"0\"))\n\tend\n\treturn join(ip_list_new, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tip_array = map(x->parse(Int,x),ip_array)\n\tip_array = map(x->string(x),ip_array)\n\tip_array = join(ip_array,\".\")\n\treturn ip_array\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in ip_list\n\t\tif i == \"0\"\n\t\t\tip_list[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tip_list[i] = parse(Int, ip_list[i])\n\tend\n\tip_list = map(x->string(x), ip_list)\n\tip_list = join(ip_list, \".\")\n\treturn ip_list\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i != \"0\"\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->ifelse(x == \"\", \"0\", x), ip_split)\n\tip_new = join(ip_split, \".\")\n\treturn ip_new\nend",
    "\tip = ip.split(\".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int,ip[i])\n\tend\n\tip = join(ip,\".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip = split(ip, \".\")\n\tip = map(x -> parse(Int, x), ip)\n\tip = map(x -> string(x), ip)\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x -> lstrip(x, \"0\"), ip_split)\n\tip_join = join(ip_split, \".\")\n\treturn ip_join\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tip_split[i] = parse(Int, ip_split[i])\n\tend\n\tip_split = map(x -> lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x -> x[2:end], ip_split)\n\tip_split = join(ip_split, \".\")\n\treturn ip_split\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"1\"\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\t\"\"\"\n\tRemove leading zeroes from an ip address.\n\t\"\"\"\n\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i[1] == \"0\"\n\t\t\tip_split_new = push!(ip_split_new, i[2])\n\t\telse\n\t\t\tip_split_new = push!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tip_split[i] = parse(Int, ip_split[i])\n\tend\n\tip_split = map(x -> string(x), ip_split)\n\tip_split = join(ip_split, \".\")\n\treturn ip_split\nend",
    "\tip_split = split(ip, \".\")\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"0\"), ip_split)\n\tip_split = map(x->lstrip(x, \"0\"), ip_split)\n\tip_split = map(x->parse(Int, x), ip_split)\n\tip_split = map(x->lpad(x, 3, \"",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_split = split(ip, '.')\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, '.')\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif length(ip_split[i]) > 1\n\t\t\tif ip_split[i][1] == '0'\n\t\t\t\tip_split[i] = ip_split[i][2:end]\n\t\t\tend\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in ip_arr\n\t\tif i[1] == '0'\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in ip_array\n\t\tif i == \"0\"\n\t\t\ti = \"0\"\n\t\telse\n\t\t\ti = parse(Int, i)\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_list = split(ip, \".\")\n\tfor i in 1:length(ip_list)\n\t\tif ip_list[i] == \"0\"\n\t\t\tip_list[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_list, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_new, \"0\")\n\t\telse\n\t\t\tpush!(ip_split_new, lstrip(i, \"0\"))\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i != \"0\"\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i == \"0\"\n\t\t\ti = \"0\"\n\t\telse\n\t\t\ti = i\n\t\tend\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i[1] == \"0\"\n\t\t\ti = i[2]\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in ip_arr\n\t\tif i[1] == '0'\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_arr = split(ip, \".\")\n\tfor i in 1:length(ip_arr)\n\t\tif ip_arr[i] == \"0\"\n\t\t\tip_arr[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_arr, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tip_split_new = []\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tpush!(ip_split_new, \"0\")\n\t\telse\n\t\t\tpush!(ip_split_new, i)\n\t\tend\n\tend\n\treturn join(ip_split_new, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tif ip[i] == \"0\"\n\t\t\tip[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in 1:length(ip)\n\t\tip[i] = parse(Int, ip[i])\n\tend\n\tip = join(ip, \".\")\n\treturn ip\nend",
    "\tip_array = split(ip, \".\")\n\tfor i in 1:4\n\t\tif ip_array[i] == \"0\"\n\t\t\tip_array[i] = \"0\"\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn join(ip_array, \".\")\nend",
    "\tip_arr = split(ip, '.')\n\tip_arr = map(x -> lstrip(x, \"0\"), ip_arr)\n\treturn join(ip_arr, '.')\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in ip_split\n\t\tif i == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip_split = split(ip, \".\")\n\tfor i in 1:length(ip_split)\n\t\tif ip_split[i] == \"0\"\n\t\t\tip_split[i] = \"\"\n\t\tend\n\tend\n\treturn join(ip_split, \".\")\nend",
    "\tip = split(ip, \".\")\n\tfor i in ip\n\t\tif i[1] == '0'\n\t\t\ti = i[2:end]\n\t\tend\n\tend\n\treturn join(ip, \".\")\nend"
  ]
}