{
  "name": "mbpp_743_rotate_right",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to rotate a given vector by specified number of items to the right direction. https://www.geeksforgeeks.org/jlthon-program-right-rotate-vector-n/\n\t\"\"\"\nfunction rotate_right(list::Vector{Int64}, m::Int64)::Vector{Int64} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = rotate_right;\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[i] for i in mod1.(m+1:n; n)];\nend",
    "\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[i] for i in mod.((n - m + 1):n, n)]\nend",
    "\t\"\"\"\n\tRotate a list to the right by m items.\n\t\"\"\"\n\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[i] for i in mod1.(n - m + 1:n, n)] .* [list[i] for i in 1:n - m]\nend",
    "\t\"\"\"\n\tRotate a given vector by specified number of items to the right direction.\n\t\"\"\"\n\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[(i + m) % n + 1] for i in 0:(n - 1)]\nend",
    "\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[(i+m)%n+1] for i in 0:n-1]\nend",
    "\tn = length(list)\n\tm = m % n\n\treturn [list[i] for i in mod1.(m+1:n, n)] .* [list[i] for i in mod1.(1:m, n)]\nend",
    "\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[mod(i+m, n)+1] for i in 0:n-1]\nend",
    "\tn = length(list)\n\tm = m % n\n\treturn [list[(i + m) % n + 1] for i in 0:(n - 1)]\nend",
    "\tn = length(list)\n\tif m > n\n\t\tm = m % n\n\tend\n\treturn [list[(i + m) % n + 1] for i in 0:n-1]\nend",
    "\tn = length(list)\n\tif m == 0 || m == n\n\t\treturn list\n\tend\n\tif m > n\n\t\tm = m - n\n\tend\n\treturn [list[i] for i in (n-m+1):n] .* [list[i] for i in 1:n-m]\nend",
    "\tn = length(list)\n\tm = m % n\n\treturn [list[(i + m) % n + 1] for i in 0:n-1]\nend",
    "\tn = length(list)\n\tif m > n\n\t\tm = m % n\n\tend\n\treturn [list[(i + m) % n + 1] for i in 0:n-1]\nend",
    "\t\"\"\"\n\tRotate a given vector by specified number of items to the right direction.\n\t\"\"\"\n\tn = length(list)\n\tm %= n\n\treturn [list[(i + m) % n] for i in 1:n]\nend",
    "\tn = length(list)\n\tm = mod(m,n)\n\treturn [list[(i+m)%n+1] for i in 0:n-1]\nend",
    "\t\"\"\"\n\tRotate a list by m items to the right direction.\n\t\"\"\"\n\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[i] for i in mod1.(n-m+1:n) cat mod1.(1:n-m)]\nend",
    "\t\"\"\"\n\tRotate a given vector by specified number of items to the right direction.\n\t\"\"\"\n\tn = length(list)\n\treturn [list[(i+m)%n+1] for i in 0:n-1]\nend",
    "\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[i] for i in mod.((n-m+1):n, n)]\nend",
    "\t\"\"\"\n\tRotate a given vector by m items to the right direction.\n\t\"\"\"\n\tn = length(list)\n\tm = mod(m, n)\n\treturn [list[(i + m) % n + 1] for i in 0:(n - 1)]\nend",
    "    n = length(list)\n    m = m % n\n    return [list[(i+m)%n+1] for i in 0:n-1]\nend",
    "\tn = length(list)\n\tm %= n\n\treturn [list[i] for i in mod1.(n-m+1:n, n)]\nend"
  ]
}