{
  "name": "mbpp_65_recursive_list_sum",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to flatten a vector and sum all of its elements.\n\t\"\"\"\nfunction recursive_list_sum(data_list::Vector{Union{Int64, Vector{Int64}}})::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = recursive_list_sum;\n\t@test(candidate([1, 2, [3, 4], [5, 6]]) == 21)\n\t@test(candidate([7, 10, [15, 14], [19, 41]]) == 106)\n\t@test(candidate([10, 20, [30, 40], [50, 60]]) == 210)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tif length(data_list) == 1\n\t\treturn data_list[1]\n\telse\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 1\n\t\treturn data_list[1]\n\telse\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 1\n\t\treturn data_list[1]\n\telse\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif length(data_list) == 1\n\t\tif isa(data_list[1], Int64)\n\t\t\treturn data_list[1]\n\t\telse\n\t\t\treturn recursive_list_sum(data_list[1])\n\t\tend\n\telse\n\t\tif isa(data_list[1], Int64)\n\t\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\t\telse\n\t\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\t\tend\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif length(data_list) == 1\n\t\treturn data_list[1]\n\telse\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 1\n\t\treturn data_list[1]\n\telse\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif isempty(data_list)\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRecursively sum all elements in a list.\n\t\"\"\"\n\tsum = 0\n\tfor i in data_list\n\t\tif typeof(i) == Int64\n\t\t\tsum += i\n\t\telse\n\t\t\tsum += recursive_list_sum(i)\n\t\tend\n\tend\n\treturn sum\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif length(data_list) == 1\n\t\tif isa(data_list[1], Int64)\n\t\t\treturn data_list[1]\n\t\telse\n\t\t\treturn recursive_list_sum(data_list[1])\n\t\tend\n\telse\n\t\tif isa(data_list[1], Int64)\n\t\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\t\telse\n\t\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRecursively sum all elements in a list of integers.\n\t\"\"\"\n\tif length(data_list) == 0\n\t\treturn 0\n\telseif length(data_list) == 1\n\t\treturn data_list[1]\n\telse\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif length(data_list) == 1\n\t\tif isa(data_list[1], Int64)\n\t\t\treturn data_list[1]\n\t\telse\n\t\t\treturn recursive_list_sum(data_list[1])\n\t\tend\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif length(data_list) == 0\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend",
    "\tif isempty(data_list)\n\t\treturn 0\n\telseif isa(data_list[1], Int64)\n\t\treturn data_list[1] + recursive_list_sum(data_list[2:end])\n\telse\n\t\treturn recursive_list_sum(data_list[1]) + recursive_list_sum(data_list[2:end])\n\tend\nend"
  ]
}