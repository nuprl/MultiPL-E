{
  "name": "mbpp_739_find_Index",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\nfunction find_Index(n::Int64)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = find_Index;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 14)\n\t@test(candidate(4) == 45)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle_number = i*(i+1)/2\n\t\tif length(string(triangle_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize count of digits in triangular number \n\tcount = 1\n\t# Store triangular number and its index \n\twhile(count <= n) \n\t\t# Generate next triangular number \n\t\ttriangular_number = triangular_number + index + 1\n\t\t# Increment index \n\t\tindex = index + 1\n\t\t# Count digits in triangular number \n\t\tcount = length(string(triangular_number))\n\tend\n\treturn index\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample\n\t\n\tjulia> find_Index(3)\n\t45\n\t\"\"\"\n\t\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t\n\t# Find the triangular number with n digits\n\twhile(true)\n\t\ttriangular_number = triangular_number + index\n\t\tindex = index + 1\n\t\t\n\t\t# If the number of digits is greater than n, return the previous index\n\t\tif(length(string(triangular_number)) > n)\n\t\t\treturn index - 2\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        t = i*(i+1)/2\n        if length(string(t)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri_num = i*(i+1)/2\n\t\tif length(string(tri_num)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(true)\n\t\ttriangular_number += i\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize count of digits in triangular number \n\tcount = 1\n\t# Run loop till count of digits in triangular number is not equal to n \n\twhile count != n \n\t\t# Increment index \n\t\tindex += 1\n\t\t# Add index to triangular number \n\t\ttriangular_number += index\n\t\t# Update count of digits in triangular number \n\t\tcount = length(string(triangular_number))\n\tend\n\t# Return index \n\treturn index\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend"
  ]
}