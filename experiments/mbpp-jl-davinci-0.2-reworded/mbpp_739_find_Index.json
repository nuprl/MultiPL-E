{
  "name": "mbpp_739_find_Index",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\nfunction find_Index(n::Int64)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = find_Index;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 14)\n\t@test(candidate(4) == 45)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle_number = i*(i+1)/2\n\t\tif length(string(triangle_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize count of digits in triangular number \n\tcount = 1\n\t# Store triangular number and its index \n\twhile(count <= n) \n\t\t# Generate next triangular number \n\t\ttriangular_number = triangular_number + index + 1\n\t\t# Increment index \n\t\tindex = index + 1\n\t\t# Count digits in triangular number \n\t\tcount = length(string(triangular_number))\n\tend\n\treturn index\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample\n\t\n\tjulia> find_Index(3)\n\t45\n\t\"\"\"\n\t\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t\n\t# Find the triangular number with n digits\n\twhile(true)\n\t\ttriangular_number = triangular_number + index\n\t\tindex = index + 1\n\t\t\n\t\t# If the number of digits is greater than n, return the previous index\n\t\tif(length(string(triangular_number)) > n)\n\t\t\treturn index - 2\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    i = 1\n    while true\n        t = i*(i+1)/2\n        if length(string(t)) == n\n            return i\n        end\n        i += 1\n    end\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri_num = i*(i+1)/2\n\t\tif length(string(tri_num)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(true)\n\t\ttriangular_number += i\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize count of digits in triangular number \n\tcount = 1\n\t# Run loop till count of digits in triangular number is not equal to n \n\twhile count != n \n\t\t# Increment index \n\t\tindex += 1\n\t\t# Add index to triangular number \n\t\ttriangular_number += index\n\t\t# Update count of digits in triangular number \n\t\tcount = length(string(triangular_number))\n\tend\n\t# Return index \n\treturn index\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t# Find the triangular number with n digits\n\twhile (length(string(triangular_number)) < n)\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri = Int64(i*(i+1)/2)\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif(length(string(triangle)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile(true)\n\t\ttri = Int64(i*(i+1)/2)\n\t\tif(length(string(tri)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif triangle > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFinds the index of the smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = (i*(i+1))/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangularNumber = 0\n\twhile(true)\n\t\ttriangularNumber = triangularNumber + i\n\t\tif(length(string(triangularNumber)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\tif n == 1\n\t\treturn 1\n\tend\n\t\n\t# Initialize the value of nth triangular number \n\ttri_num = 1\n\t\n\t# Initialize the value of index \n\tindex = 1\n\t\n\twhile true\n\t\t# If nth triangular number has n-digits \n\t\tif length(string(tri_num)) == n\n\t\t\treturn index\n\t\tend\n\t\t\n\t\t# Increment index by 1 \n\t\tindex += 1\n\t\t\n\t\t# Add index to the triangular number \n\t\ttri_num += index\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\ttriangle = 0\n\twhile(true)\n\t\ttriangle += i\n\t\tif(length(string(triangle)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t# Initialize count of digits in triangular number\n\tcount = 0\n\t# Store triangular number in a variable\n\ttemp = triangular_number\n\t# Count digits in triangular number\n\twhile temp > 0\n\t\tcount += 1\n\t\ttemp = temp \u00f7 10\n\tend\n\t# Iterate until count of digits in triangular number is not equal to n\n\twhile count != n\n\t\t# Increment index by 1\n\t\tindex += 1\n\t\t# Add index to triangular number\n\t\ttriangular_number += index\n\t\t# Store triangular number in a variable\n\t\ttemp = triangular_number\n\t\t# Count digits in triangular number\n\t\tcount = 0\n\t\twhile temp > 0\n\t\t\tcount += 1\n\t\t\ttemp = temp \u00f7 10\n\t\tend\n\tend\n\treturn index\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize index of triangular number\n\tindex = 1\n\t\n\t# Initialize triangular number\n\ttriangular_number = 1\n\t\n\t# Find the triangular number with n digits\n\twhile length(string(triangular_number)) < n\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\t\n\treturn index\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\tindex = 1\n\t\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t\n\t# Initialize number of digits in triangular number \n\tnumber_of_digits = 1\n\t\n\t# Loop until number of digits in triangular number \n\t# becomes n \n\twhile number_of_digits < n \n\t\tindex += 1\n\t\ttriangular_number += index\n\t\tnumber_of_digits = length(string(triangular_number))\n\tend\n\t\n\treturn index\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ttriangular_number = 0\n\tindex = 1\n\twhile(length(string(triangular_number)) < n)\n\t\ttriangular_number += index\n\t\tindex += 1\n\tend\n\treturn index - 1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\ti = 1\n\t# Initialize triangular number \n\ttriangle = 0\n\t# Find triangular number \n\twhile(length(string(triangle)) < n) \n\t\ttriangle = triangle + i \n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = sum(i:i)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri = triangular_number(i)\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\tif n == 1\n\t\treturn 1\n\tend\n\tif n == 2\n\t\treturn 3\n\tend\n\tif n == 3\n\t\treturn 6\n\tend\n\tif n == 4\n\t\treturn 11\n\tend\n\tif n == 5\n\t\treturn 23\n\tend\n\tif n == 6\n\t\treturn 46\n\tend\n\tif n == 7\n\t\treturn 92\n\tend\n\tif n == 8\n\t\treturn 182\n\tend\n\tif n == 9\n\t\treturn 364\n\tend\n\tif n == 10\n\t\treturn 727\n\tend\n\tif n == 11\n\t\treturn 1454\n\tend\n\tif n == 12\n\t\treturn 2909\n\tend\n\tif n == 13\n\t\treturn 5819\n\tend\n\tif n == 14\n\t\treturn 11638\n\tend\n\tif n == 15\n\t\treturn 23276\n\tend\n\tif n == 16\n\t\treturn 46553\n\tend\n\tif n == 17\n\t\treturn 93107\n\tend\n\tif n == 18\n\t\treturn 186214\n\tend\n\tif n == 19\n\t\treturn 372429\n\tend\n\tif n == 20\n\t\treturn 744858\n\tend\n\tif n == 21\n\t\treturn 1489716\n\tend\n\tif n == 22\n\t\treturn 2979432\n\tend\n\tif n == 23\n\t\treturn 5958864\n\tend\n\tif n == 24\n\t\treturn 11917728\n\tend\n\tif n == 25\n\t\treturn 23835456\n\tend\n\tif n == 26\n\t\treturn 47671072\n\tend\n\tif n == 27\n\t\treturn 95342044\n\tend\n\tif n == 28\n\t\treturn 190684088\n\tend\n\tif n == 29\n\t\treturn 381368176\n\tend\n\tif n == 30\n\t\treturn 762736352\n\tend\n\tif n == 31\n\t\treturn 1525472704\n\tend\n\tif n == 32\n\t\treturn 3050945408\n\t",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(true)\n\t\ttriangular_number = triangular_number + i\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttri_num = i*(i+1)/2\n\t\tif length(string(tri_num)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangle = i*(i+1)/2\n\t\tif(length(string(triangle)) >= n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize number of digits \n\tnum_digits = 1\n\t# Loop until we find the triangular number with n digits \n\twhile num_digits < n \n\t\t# Increment index \n\t\tindex += 1\n\t\t# Add index to triangular number \n\t\ttriangular_number += index\n\t\t# Update number of digits \n\t\tnum_digits = length(string(triangular_number))\n\tend\n\treturn index\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64 \n\t\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i * (i + 1) / 2\n\t\tif length(string(triangle)) >= n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\tif n == 1\n\t\treturn 1\n\tend\n\t\n\t# Initialize low and high for binary search\n\tlow = 1\n\thigh = n\n\t\n\t# Do binary search for the index\n\twhile low <= high\n\t\tmid = (low + high) \u00f7 2\n\t\t\n\t\t# If number of digits in mid*(mid+1)/2 is equal to n,\n\t\t# return mid.\n\t\tif ndigits(mid*(mid+1)\u00f72) == n\n\t\t\treturn mid\n\t\telseif ndigits(mid*(mid+1)\u00f72) < n\n\t\t\tlow = mid + 1\n\t\telse\n\t\t\thigh = mid - 1\n\t\tend\n\tend\n\t\n\treturn -1\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = sum(i:i)\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\tif n == 1\n\t\treturn 1\n\telse\n\t\treturn find_Index(n-1) + n\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number\n\ti = 1\n\t# Initialize triangular number\n\ttriangle = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0\n\t# Store the number of digits in triangular number\n\tcount = 0",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\tif n <= 0\n\t\treturn 0\n\tend\n\t\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttri = 0\n\twhile true\n\t\ttri = tri + i\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample\n\t\n\tjulia> find_Index(3)\n\t45\n\t\n\t\"\"\"\n\ti=1\n\twhile true\n\t\ttriangular_number=i*(i+1)/2\n\t\tif triangular_number>10^(n-1)\n\t\t\tbreak\n\t\tend\n\t\ti+=1\n\tend\n\treturn i\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = (i*(i+1))/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri = i*(i+1)/2\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\t# and count of digits in it \n\tindex = 1\n\tcount = 0\n\t\n\t# First triangular number is 0 \n\ttriangular_number = 0\n\t\n\t# Loop until n-digit triangular number is \n\t# found \n\twhile count <= n \n\t\t# Increment index and find next \n\t\t# triangular number \n\t\tindex = index + 1\n\t\ttriangular_number = triangular_number + index\n\t\t\n\t\t# Update count \n\t\tcount = length(string(triangular_number))\n\tend\n\t\n\t# Return index \n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize index of triangular number \n\ti = 1\n\t\n\t# Initialize triangular number \n\ttriangle = 0\n\t\n\t# Find triangular number \n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\t\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Find triangular number with n digits \n\twhile length(string(triangular_number)) < n \n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\treturn index\nend",
    "\ti = 1\n\ttri = 0\n\twhile(true)\n\t\ttri = tri + i\n\t\tif(length(string(tri)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize number of digits in triangular number \n\tnumber_of_digits = 1\n\t# Run loop till number of digits in triangular number \n\t# is less than or equal to n \n\twhile number_of_digits * log10(triangular_number) < n - 1\n\t\tindex = index + 1\n\t\t# Calculate next triangular number \n\t\ttriangular_number = triangular_number + index\n\t\t# Update number of digits in triangular number \n\t\tnumber_of_digits = floor(log10(triangular_number)) + 1\n\tend\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangular_number = i*(i+1)/2\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t# Initialize index of triangular number \n\ttriangle_index = 1\n\t# Initialize value of triangular number \n\ttriangle_number = 1\n\t# Initialize value of nth triangular number \n\tnth_triangle_number = 1\n\t# Initialize value of count \n\tcount = 1\n\t# Run loop till nth triangular number \n\t# is not found \n\twhile count != n \n\t\t# Increment value of triangle_index \n\t\t# in each iteration \n\t\ttriangle_index += 1\n\t\t# Calculate triangular number \n\t\t# using current value of triangle_index \n\t\ttriangle_number = triangle_index * (triangle_index + 1) / 2\n\t\t# Calculate number of digits in triangle_number \n\t\tcount = floor(log10(triangle_number)) + 1\n\t\t# Update value of nth triangular number \n\t\tnth_triangle_number = triangle_number\n\tend\n\t# Return index of nth triangular number \n\treturn triangle_index\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample:\n\t\n\tjulia> find_Index(3)\n\t45\n\t\n\t\"\"\"\n\t\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number \n\ti = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize count of digits in triangular number \n\tcount = 1\n\t# Run loop till count of digits in triangular number is not equal to n \n\twhile count != n \n\t\t# Increment index by 1 \n\t\ti += 1\n\t\t# Add i to triangular number \n\t\ttriangular_number += i\n\t\t# Update count of digits in triangular number \n\t\tcount = length(string(triangular_number))\n\tend\n\treturn i\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n)\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tParameters\n\t----------\n\tn : Int64\n\t\tThe number of digits.\n\t\n\tReturns\n\t-------\n\tInt64\n\t\tThe index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\tif length(string(i*(i+1)/2)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tn: Int64\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i\nend",
    "\ti = 1\n\ttriangular = 0\n\twhile(length(string(triangular)) < n)\n\t\ttriangular = triangular + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFinds the index of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t\n\t# Calculate triangular number until number of digits in triangular number becomes n\n\twhile(length(string(triangular_number)) < n)\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\t\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri = i*(i+1)/2\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFinds the index of the smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = sum(i:i)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile true\n\t\ttriangular_number += i\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangle = i*(i+1)/2\n\t\tif(length(string(triangle)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile length(string(triangle)) < n\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ttriangular_number = 0\n\tindex = 0\n\twhile true\n\t\tindex += 1\n\t\ttriangular_number += index\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn index\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "    # Initialize index of triangular number \n    t_number = 0\n    i = 1\n    while(length(string(t_number)) < n) \n        t_number = t_number + i \n        i = i + 1\n    end\n    return i - 1\nend",
    "\ti = 1\n\twhile(true)\n\t\tif(length(string(i*(i+1)/2)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\tfind_Index(n) finds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = (i*(i+1))/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFunction to find the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index \n\tindex = 1\n\t# Initialize triangular number \n\ttriangular_number = 1\n\t# Initialize number of digits in triangular number \n\tnum_digits = 1\n\t# Loop until number of digits in triangular number is greater than or equal to n \n\twhile num_digits < n \n\t\t# Increment index \n\t\tindex += 1\n\t\t# Add index to triangular number \n\t\ttriangular_number += index\n\t\t# Recompute number of digits in triangular number \n\t\tnum_digits = length(string(triangular_number))\n\tend\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri = (i*(i+1))/2\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 1\n\twhile(length(string(triangle)) < n)\n\t\ti += 1\n\t\ttriangle += i\n\tend\n\treturn i\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif(length(string(triangle)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangularNumber = 0\n\twhile(length(string(triangularNumber)) < n)\n\t\ttriangularNumber = triangularNumber + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index of triangular number\n\ti = 1\n\t# Initialize triangular number\n\ttriangular_number = 0\n\t# Store triangular number in array\n\ttriangular_number_array = []\n\t# Store index in array\n\tindex_array = []\n\t# Iterate till triangular number has n digits\n\twhile length(string(triangular_number)) < n\n\t\t# Calculate triangular number\n\t\ttriangular_number = triangular_number + i\n\t\t# Store triangular number in array\n\t\tpush!(triangular_number_array, triangular_number)\n\t\t# Store index in array\n\t\tpush!(index_array, i)\n\t\t# Increment index\n\t\ti = i + 1\n\tend\n\t# Return index of triangular number\n\treturn index_array[end]\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\tif n <= 0\n\t\treturn 0\n\tend\n\tif n == 1\n\t\treturn 1\n\tend\n\tif n == 2\n\t\treturn 3\n\tend\n\tif n == 3\n\t\treturn 6\n\tend\n\tif n == 4\n\t\treturn 6\n\tend\n\tif n == 5\n\t\treturn 10\n\tend\n\tif n == 6\n\t\treturn 15\n\tend\n\tif n == 7\n\t\treturn 21\n\tend\n\tif n == 8\n\t\treturn 28\n\tend\n\tif n == 9\n\t\treturn 36\n\tend\n\tif n == 10\n\t\treturn 45\n\tend\n\tif n == 11\n\t\treturn 55\n\tend\n\tif n == 12\n\t\treturn 66\n\tend\n\tif n == 13\n\t\treturn 78\n\tend\n\tif n == 14\n\t\treturn 91\n\tend\n\tif n == 15\n\t\treturn 105\n\tend\n\tif n == 16\n\t\treturn 120\n\tend\n\tif n == 17\n\t\treturn 136\n\tend\n\tif n == 18\n\t\treturn 153\n\tend\n\tif n == 19\n\t\treturn 171\n\tend\n\tif n == 20\n\t\treturn 190\n\tend\n\tif n == 21\n\t\treturn 210\n\tend\n\tif n == 22\n\t\treturn 231\n\tend\n\tif n == 23\n\t\treturn 253\n\tend\n\tif n == 24\n\t\treturn 276\n\tend\n\tif n == 25\n\t\treturn 300\n\tend\n\tif n == 26\n\t\treturn 325\n\tend\n\tif n == 27\n\t\treturn 351\n\tend\n\tif n == 28\n\t\treturn 378\n\tend\n\tif n == 29\n\t\treturn 406\n\tend\n\tif n == 30\n\t\treturn 435\n\tend\n\tif n == 31\n\t\treturn 465\n\tend\n\tif n == 32\n\t\treturn 496\n\tend\n\tif n == 33\n\t\treturn 528\n\tend\n\tif n == 34\n\t\treturn 561\n\tend\n\tif n == 35\n\t\treturn 595\n\tend\n\tif n",
    "\ti = 1\n\twhile true\n\t\ttriangle = sum(i:i)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample:\n\t\n\tjulia> find_Index(3)\n\t45\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = sum(1:i)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangularNumber = 0\n\twhile(true)\n\t\ttriangularNumber = triangularNumber + i\n\t\tif(length(string(triangularNumber)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample:\n\t\n\tjulia> find_Index(3)\n\t45\n\t\n\t\"\"\"\n\t\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t\n\t# Calculate triangular number until number of digits in triangular number becomes n\n\twhile(length(string(triangular_number)) < n)\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\t\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile(true)\n\t\ttriangular = (i*(i+1))/2\n\t\tif(length(string(triangular)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = (i*(i+1))/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index and triangular number \n\tindex = 1\n\ttriangular_number = 1\n\t# Keep incrementing index until the triangular number has n digits \n\twhile length(string(triangular_number)) < n \n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangular_number = 0\n\twhile(length(string(triangular_number)) < n)\n\t\ttriangular_number += i\n\t\ti += 1\n\tend\n\treturn i-1\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(true)\n\t\ttriangle += i\n\t\tif(length(string(triangle)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile(true)\n\t\ttriangular_number = Int64(i*(i+1)/2)\n\t\tif(length(string(triangular_number)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif triangular_number > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\tfind_Index(n) finds the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\t\"\"\"\n\tFinds the index of the smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttri_num = i*(i+1)/2\n\t\tif length(string(tri_num)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\n\t# Initialize index of triangular number \n\ti = 1\n\t\n\t# Initialize triangular number \n\ttriangular_number = 0\n\t\n\t# Store triangular number in variable triangular_number \n\twhile triangular_number < 10^(n - 1) \n\t\ttriangular_number = triangular_number + i \n\t\ti = i + 1\n\tend\n\t\n\t# Return the value of index \n\treturn i - 1\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample:\n\t\tjulia> find_Index(3)\n\t\t45\n\t\"\"\"\n\t\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t\n\t# Calculate triangular number until number of digits in triangular number is not equal to n\n\twhile(length(string(triangular_number)) != n)\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\t\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = (i*(i+1))/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tfind_Index(n)\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t\n\t# Calculate triangular number until number of digits in triangular number is not equal to n\n\twhile(floor(log10(triangular_number)) + 1 != n)\n\t\tindex += 1\n\t\ttriangular_number += index\n\tend\n\t\n\treturn index\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular >= 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tReturn the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = Int64(i*(i+1)/2)\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif length(string(triangular)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle = triangle + i\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\ttri = 0\n\twhile(true)\n\t\ttri = tri + i\n\t\tif(length(string(tri)) == n)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttri = i*(i+1)/2\n\t\tif length(string(tri)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = i*(i+1)/2\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\ttriangle = 0\n\twhile(length(string(triangle)) < n)\n\t\ttriangle += i\n\t\ti += 1\n\tend\n\treturn i - 1\nend",
    "\ti = 1\n\twhile true\n\t\ttriangle = Int64(i*(i+1)/2)\n\t\tif length(string(triangle)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\ti = 1\n\twhile true\n\t\ttriangular = i*(i+1)/2\n\t\tif triangular > 10^(n-1)\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t# Initialize number of digits in triangular number\n\tnumber_of_digits = 1\n\t# Run loop till number of digits in triangular number is not equal to n\n\twhile number_of_digits != n\n\t\t# Increment index and triangular number\n\t\tindex += 1\n\t\ttriangular_number += index\n\t\t# Update number of digits in triangular number\n\t\tnumber_of_digits = length(string(triangular_number))\n\tend\n\treturn index\nend",
    "\t\"\"\"\n\tfind_Index(n::Int64)::Int64\n\t\n\tFind the index of smallest triangular number with n digits.\n\t\n\tExample:\n\t\n\tjulia> find_Index(3)\n\t45\n\t\"\"\"\n\ti = 1\n\twhile true\n\t\ttriangular_number = i*(i+1)/2\n\t\tif length(string(triangular_number)) == n\n\t\t\treturn i\n\t\tend\n\t\ti += 1\n\tend\nend",
    "\t\"\"\"\n\tFind the index of smallest triangular number with n digits.\n\t\"\"\"\n\t# Initialize index and triangular number\n\tindex = 1\n\ttriangular_number = 1\n\t# Find the triangular number with n digits\n\twhile(true)\n\t\t# Find the triangular number\n\t\ttriangular_number = triangular_number + index\n\t\t# Find the number of digits\n\t\tnumber_of_digits = floor(log10(triangular_number)) + 1\n\t\t# Check if the number of digits is equal to n\n\t\tif(number_of_digits == n)\n\t\t\treturn index\n\t\tend\n\t\t# Increment the index\n\t\tindex = index + 1\n\tend\nend"
  ]
}