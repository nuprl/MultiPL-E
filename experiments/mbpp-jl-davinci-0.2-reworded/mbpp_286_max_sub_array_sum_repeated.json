{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\n\t\"\"\"\nfunction max_sub_array_sum_repeated(a::Vector{Int64}, n::Int64, k::Int64)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = max_sub_array_sum_repeated;\n\t@test(candidate([10, 20, -30, -1], 4, 3) == 30)\n\t@test(candidate([-1, 10, 20], 3, 2) == 59)\n\t@test(candidate([-1, -2, -3], 3, 3) == -1)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_so_far = max_so_far + a[i]\n\t\tif max_so_far < 0\n\t\t\tmax_so_far = 0\n\t\tend\n\t\tif max_so_far > max_sub_array_sum\n\t\t\tmax_sub_array_sum = max_so_far\n\t\tend\n\tend\n\treturn max_sub_array_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Find the sum of the original array \n\tmax_sum := sum(a) \n\t\n\t# Find the sum of the elements which are \n\t# to be repeated k times \n\trepeat_sum := sum(a[i] for i in 1:n if a[i] < 0) \n\t\n\t# Find the maximum sum of the subarray \n\t# which is formed by repeating the original \n\t# array k times \n\tmax_sum := max(max_sum, repeat_sum * k) \n\t\n\t# Find the sum of the subarray which is \n\t# formed by repeating the original array \n\t# k-1 times \n\trepeat_sum := repeat_sum * k \n\t\n\t# Traverse the original array and find \n\t# the maximum sum of the subarray which \n\t# is formed by repeating the original \n\t# array k-1 times \n\tfor i in 1:n \n\t\trepeat_sum := repeat_sum - a[i] * (k-1) \n\t\tmax_sum := max(max_sum, repeat_sum) \n\tend\n\t\n\treturn max_sum \nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = sum(a) \n\tcurr_sum = max_sum \n\tfor i = 1:n-1 \n\t\tcurr_sum = curr_sum + a[i] \n\tend\n\tmax_sum = max(max_sum, curr_sum) \n\t\n\t# Find the maximum sum subarray in remaining windows by \n\t# removing first element of previous window and adding \n\t# last element of current window. \n\tfor i = n:length(a) \n\t\tcurr_sum = curr_sum + a[i] - a[i-n] \n\t\tmax_sum = max(max_sum, curr_sum) \n\tend\n\t\n\t# Return maximum sum of k non-overlapping contiguous subarrays \n\treturn max_sum * k \nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t\n\t# find the maximum subarray sum for the vector\n\tmax_sub_array_sum(a, n)\n\t\n\t# find the minimum subarray sum for the vector\n\tmin_sub_array_sum(a, n)\n\t\n\t# find the sum of the whole array\n\tsum_array(a, n)\n\t\n\t# find the maximum subarray sum for the repeated vector\n\tmax_sub_array_sum_repeated = max(max_sub_array_sum(a, n) * (k - 2) + sum_array(a, n), max_sub_array_sum(a, n), max_sub_array_sum(a, n) + sum_array(a, n) * (k - 2))\n\t\n\treturn max_sub_array_sum_repeated\nend",
    "\t# Find the sum of first window of size n \n\tmax_sum = sum(a[1:n]) \n\twindow_sum = max_sum ",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(0, max_ending_here)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i = 1:n\n\t\tmax_so_far = max_so_far + a[i]\n\t\tif max_so_far > max_sub_array_sum\n\t\t\tmax_sub_array_sum = max_so_far\n\t\tend\n\tend\n\treturn max_sub_array_sum * k\nend",
    "\t# Initialize result \n\tmax_sum = 0\n\t\n\t# Consider all blocks starting with i. \n\tfor i in 1:n\n\t\tcurrent_sum = 0\n\t\t\n\t\t# Calculate sum of current block \n\t\tfor j in 1:n\n\t\t\tcurrent_sum += a[j]\n\t\tend\n\t\t\n\t\t# Update result if required \n\t\tmax_sum = max(max_sum, current_sum)\n\t\t\n\t\t# Calculate sum of next block \n\t\t# considering previous block \n\t\tif(i < n)\n\t\t\tfor j in 1:n-i\n\t\t\t\tcurrent_sum += a[j] - a[j+i]\n\t\t\tend\n\t\t\t\n\t\t\t# Update result if required \n\t\t\tmax_sum = max(max_sum, current_sum)\n\t\tend\n\tend\n\t\n\treturn max_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t\"\"\"\n\ta: vector\n\tn: length of vector\n\tk: number of times to repeat vector\n\t\"\"\"\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_kadane = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\tend\n\tif max_wrap < 0\n\t\treturn max_kadane\n\tend\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max(max_so_far, max_wrap * (k - 2) + max_kadane)\nend",
    "\t# Compute sum of first window of size n \n\tmax_sum = 0 \n\twindow_sum = 0 \n\tfor i = 1:n \n\t\twindow_sum += a[i] \n\tend\n\tmax_sum = window_sum \n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i = n + 1:n * k \n\t\twindow_sum += a[i] - a[i - n] \n\t\tmax_sum = max(max_sum, window_sum) \n\tend\n\treturn max_sum \nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\tmax_sum_so_far = max_sum\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i = n+1:length(a)\n\t\tmax_sum += a[i] - a[i-n]\n\t\tmax_sum_so_far = max(max_sum_so_far, max_sum)\n\tend\n\t# Return maximum sum of k consecutive subarrays \n\treturn max_sum_so_far * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t\n\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = sum(a[1:n]) \n\tcurr_sum = max_sum \n\t\n\t# Move the window by one element. \n\tfor i in 2:n \n\t\tcurr_sum = curr_sum + a[i] - a[i-n] \n\t\tmax_sum = max(max_sum, curr_sum) \n\tend \n\t\n\t# max sum is greater than 0, then update overall max sum. \n\tif max_sum > 0\n\t\tmax_sum = max_sum * k \n\tend \n\t\n\t# Find the maximum sum of subarray with middle \n\t# part entirely in second window \n\t\n\t# Find the sum of middle part (entirely in second window) \n\tmid_sum = sum(a[n+1:2n]) \n\t\n\t# Initialize the max and min of middle part \n\tmid_max_sum = mid_sum \n\tmid_min_sum = mid_sum \n\t\n\t# Consider every subarray starting from i and ending at j \n\t# and update max and min of middle part \n\tfor i in n+1:2n-1\n\t\tmid_sum = mid_sum + a[i] - a[i-n] \n\t\tmid_max_sum = max(mid_max_sum, mid_sum) \n\t\tmid_min_sum = min(mid_min_sum, mid_sum) \n\tend \n\t\n\t# Handle all cases where middle part lies in \n\t# first and second window \n\tleft_sum = 0\n\tfor i in 1:n \n\t\tleft_sum += a[i] \n\t\tmax_sum = max(max_sum, left_sum + mid_max_sum) \n\t\tmin_sum = min(min_sum, left_sum + mid_min_sum) \n\tend \n\t\n\tright_sum = 0\n\tfor i in 2n:3n-1 \n\t\tright_sum += a[i] \n\t\tmax",
    "\t# k is an integer denoting the number of times the array is repeated\n\t# n is the size of the array\n\t# a is the array\n\t\n\t# initialize the max_so_far and max_ending_here\n\tmax_so_far = Int64(0)\n\tmax_ending_here = Int64(0)\n\t\n\t# initialize the sum of the array\n\tsum_of_array = Int64(0)\n\t\n\t# calculate the sum of the array\n\tfor i in 1:n\n\t\tsum_of_array += a[i]\n\tend\n\t\n\t# if the sum of the array is positive, then the max sum is the sum of the array multiplied by k\n\tif sum_of_array > 0\n\t\treturn sum_of_array * k\n\tend\n\t\n\t# if the sum of the array is negative, then the max sum is the max sum of the array\n\tif sum_of_array < 0\n\t\tmax_so_far = a[1]\n\t\tmax_ending_here = a[1]\n\t\t\n\t\tfor i in 2:n\n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\t\t\n\t\treturn max_so_far\n\tend\n\t\n\t# if the sum of the array is zero, then the max sum is the max sum of the array\n\tif sum_of_array == 0\n\t\tmax_so_far = a[1]\n\t\tmax_ending_here = a[1]\n\t\t\n\t\tfor i in 2:n\n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\t\t\n\t\treturn max_so_far\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\treturn max_so_far * k\nend",
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\t\n\t# Compute sums of remaining windows by \n\t# removing first element of previous \n\t# window and adding last element of \n\t# current window. \n\tcurr_sum = max_sum\n\tfor i in n+1:length(a)\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# max_sum is sum of subarray having maximum sum. \n\treturn max_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k-2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:k\n\t\tfor j in 1:n\n\t\t\tmax_ending_here = max_ending_here + a[j]\n\t\t\tif max_ending_here < 0\n\t\t\t\tmax_ending_here = 0\n\t\t\tend\n\t\t\tif max_so_far < max_ending_here\n\t\t\t\tmax_so_far = max_ending_here\n\t\t\tend\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\t\tif max_so_far < 0\n\t\t\treturn max_so_far\n\t\tend\n\tend\n\tmax_so_far = max_so_far * k\n\tprefix_sum = 0\n\tsuffix_sum = 0\n\tfor i in 1:n\n\t\tprefix_sum = prefix_sum + a[i]\n\t\tsuffix_sum = suffix_sum + a[n-i+1]\n\t\tif prefix_sum > max_so_far\n\t\t\tmax_so_far = prefix_sum\n\t\tend\n\t\tif suffix_sum > max_so_far\n\t\t\tmax_so_far = suffix_sum\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the array is repeated\n\t# n is the length of the array\n\t# a is the array\n\t\n\t# find the maximum sum subarray in the original array\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# find the minimum sum subarray in the original array\n\tmin_so_far = 0\n\tmin_ending_here = 0\n\tfor i in 1:n\n\t\tmin_ending_here += a[i]\n\t\tif min_ending_here > 0\n\t\t\tmin_ending_here = 0\n\t\tend\n\t\tif min_so_far > min_ending_here\n\t\t\tmin_so_far = min_ending_here\n\t\tend\n\tend\n\t\n\t# if the maximum sum subarray is negative, then return the maximum sum subarray\n\tif max_so_far <= 0\n\t\treturn max_so_far\n\tend\n\t\n\t# find the sum of all the elements in the original array\n\tsum_total = 0\n\tfor i in 1:n\n\t\tsum_total += a[i]\n\tend\n\t\n\t# return the maximum of the following three\n\t# 1. maximum sum subarray in the original array\n\t# 2. maximum sum subarray in the modified (repeated) array\n\t# 3. sum of the maximum sum subarray in the original array multiplied by (k-2),\n\t#    plus sum of all the elements of the original array\n\treturn max(max_so_far, sum_total*k - min_so_far)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k-2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\treturn max_so_far * k\nend",
    "\t# Find the sum of the first window of size n \n\tmax_sum := sum(a[1:n]) \n\twindow_sum := max_sum \n\t\n\t# Move the window by one element. \n\tfor i in n+1:length(a) \n\t\twindow_sum += a[i] - a[i-n] \n\t\tmax_sum = max(max_sum, window_sum) \n\tend\n\t\n\t# max_sum is the maximum sum of the first window. \n\t# Compute sum of the remaining windows by \n\t# removing first element of previous window \n\t# and adding last element of current window. \n\tfor j in 2:k \n\t\tfor i in 1:n \n\t\t\twindow_sum += a[i] - a[i-n] \n\t\t\tmax_sum = max(max_sum, window_sum) \n\t\tend\n\tend\n\t\n\treturn max_sum\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated.\n\t# n is an integer denoting the size of the given vector.\n\t# a is a vector of size n.\n\t# The function should return an integer denoting the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\n\t\n\t# The idea is to find the maximum subarray sum of the given vector.\n\t# Then, we can find the maximum subarray sum of the modified vector by repeating the given vector k times.\n\t# The maximum subarray sum of the modified vector is the maximum of the maximum subarray sum of the given vector and the maximum subarray sum of the modified vector.\n\t\n\t# Find the maximum subarray sum of the given vector.\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# Find the maximum subarray sum of the modified vector by repeating the given vector k times.\n\t# The maximum subarray sum of the modified vector is the maximum of the maximum subarray sum of the given vector and the maximum subarray sum of the modified vector.\n\tmax_so_far_modified = 0\n\tmax_ending_here_modified = 0\n\tfor i in 1:n\n\t\tmax_ending_here_modified = max_ending_here_modified + a[i]\n\t\tif max_ending_here_modified < 0\n\t\t\tmax_ending_here_modified = 0\n\t\tend\n\t\tif max_so_far_modified < max_ending_here_modified\n\t\t\tmax_so_far_modified = max_ending_here_modified\n\t\tend\n\tend\n\tmax_so_far_modified = max_so_far_modified * k\n\t\n\t# The maximum subarray sum of the modified vector is the maximum of the maximum subarray",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector of size n\n\t# returns the maximum sum of a contiguous subarray in the modified vector\n\t\n\t# initialize the max_so_far and max_ending_here\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# loop through the vector\n\tfor i in 1:n\n\t\t# update the max_ending_here\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\t\n\t\t# if max_ending_here is less than 0, set it to 0\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\t\n\t\t# update the max_so_far\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# initialize the max_ending_here and max_ending_here_temp\n\tmax_ending_here = 0\n\tmax_ending_here_temp = 0\n\t\n\t# loop through the vector\n\tfor i in 1:n\n\t\t# update the max_ending_here\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\t\n\t\t# update the max_ending_here_temp\n\t\tmax_ending_here_temp = max_ending_here_temp + a[i]\n\t\t\n\t\t# if max_ending_here is less than 0, set it to 0\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\t\n\t\t# update the max_so_far\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# initialize the sum\n\tsum = 0\n\t\n\t# loop through the vector\n\tfor i in 1:n\n\t\t# update the sum\n\t\tsum = sum + a[i]",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\treturn max_so_far * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here - a[i] + a[i]\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\tend\n\tfor i in 1:k-2\n\t\tfor j in 1:n\n\t\t\tmax_ending_here = max_ending_here + a[j]\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# kadane's algorithm\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_kadane = max_so_far\n\t# max sum with corner elements\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap += a[i]\n\t\ta[i] = -a[i]\n\tend\n\tmax_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n\tif max_wrap > max_kadane\n\t\treturn max_wrap\n\telse\n\t\treturn max_kadane\n\tend\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t\n\t# Consider all blocks starting with i. \n\tfor i in 1:n\n\t\tcurrent_sum := 0\n\t\t\n\t\t# Calculate sum of current block \n\t\tfor j in 1:n\n\t\t\tcurrent_sum += a[j]\n\t\tend\n\t\t\n\t\t# Update result if required \n\t\tif current_sum > max_sum\n\t\t\tmax_sum := current_sum\n\t\tend\n\t\t\n\t\t# Calculate sum of next block \n\t\t# considering elements of previous block \n\t\tfor j in 1:n-1\n\t\t\tcurrent_sum += a[j] - a[j+1]\n\t\t\t\n\t\t\t# Update result if required \n\t\t\tif current_sum > max_sum\n\t\t\t\tmax_sum := current_sum\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\tmax_so_far = max_so_far * k\n\treturn max_so_far\nend",
    "\t\"\"\"\n\ta: vector of integers\n\tn: length of vector\n\tk: number of times to repeat vector\n\t\"\"\"\n\t# kadane's algorithm\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t# case where all numbers are negative\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\t# case where all numbers are positive\n\tif sum(a) > 0\n\t\tmax_so_far = max_so_far + (k-2)*sum(a)\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t\n\t# Initialize the max sum\n\tmax_sum = 0\n\t\n\t# Initialize the max sum for a single iteration\n\tmax_sum_single = 0\n\t\n\t# Initialize the max sum for a single iteration\n\tmax_sum_all = 0\n\t\n\t# Initialize the sum of the vector\n\tsum_vector = 0\n\t\n\t# Initialize the sum of the vector\n\tsum_vector_all = 0\n\t\n\t# Iterate over the vector\n\tfor i in 1:n\n\t\t# Update the max sum for a single iteration\n\t\tmax_sum_single = max(a[i], max_sum_single + a[i])\n\t\t\n\t\t# Update the max sum for all iterations\n\t\tmax_sum_all = max(max_sum_all, max_sum_single)\n\t\t\n\t\t# Update the sum of the vector\n\t\tsum_vector += a[i]\n\t\t\n\t\t# Update the sum of the vector for all iterations\n\t\tsum_vector_all += a[i]\n\tend\n\t\n\t# Update the max sum\n\tmax_sum = max_sum_all\n\t\n\t# Update the max sum\n\tif k > 1\n\t\t# Update the max sum\n\t\tmax_sum = max(max_sum, sum_vector_all * (k - 2) + max_sum_all)\n\tend\n\t\n\t# Update the max sum\n\tmax_sum = max(max_sum, sum_vector_all * (k - 1) + max_sum_all)\n\t\n\t# Return the max sum\n\treturn max_sum\nend",
    "\t\n\t# Find the sum of the first window of size n\n\tmax_sum = sum(a[1:n])\n\twindow_sum = max_sum\n\t\n\t# Move the window by one element.\n\tfor i in n+1:length(a)\n\t\twindow_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\t\n\t# max_sum is the maximum sum of the first window.\n\t# Compute sums of remaining windows by removing\n\t# the first element of previous window and adding\n\t# the last element of current window.\n\t\n\t# The first element of the previous window is removed\n\t# from 'max_sum' and the new element is added to it\n\tmax_sum = max_sum + (k-1)*sum(a)\n\t\n\t# To handle the case when k is more than the size of the array\n\tif k > length(a)\n\t\treturn max_sum\n\tend\n\t\n\t# Find the sum of the last window\n\twindow_sum = sum(a[end-n+1:end])\n\t\n\t# Update max_sum if it is less than the last window sum\n\tmax_sum = max(max_sum, window_sum)\n\t\n\t# Traverse the remaining array. After the end of the array,\n\t# loop back to the first element\n\tfor i in 1:length(a)-n\n\t\twindow_sum += a[i] - a[i+n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t\n\t# find the maximum sum of the subarray in the original vector\n\tmax_original = max_sub_array_sum(a, n)\n\t\n\t# find the minimum sum of the subarray in the original vector\n\tmin_original = min_sub_array_sum(a, n)\n\t\n\t# find the sum of the original vector\n\tsum_original = sum(a)\n\t\n\t# maximum sum of the subarray in the modified vector\n\tmax_modified = max_original\n\t\n\t# if all the elements of the vector are negative, then the maximum sum of the subarray in the modified vector is the maximum sum of the subarray in the original vector\n\tif (max_original < 0)\n\t\treturn max_original\n\tend\n\t\n\t# if all the elements of the vector are positive, then the maximum sum of the subarray in the modified vector is the sum of the subarray in the original vector multiplied by the number of times the vector is repeated\n\tif (min_original > 0)\n\t\treturn sum_original * k\n\tend\n\t\n\t# if the sum of the subarray in the original vector is positive, then the maximum sum of the subarray in the modified vector is the sum of the subarray in the original vector multiplied by the number of times the vector is repeated minus the sum of the subarray in the original vector minus the minimum sum of the subarray in the original vector multiplied by the number of times the vector is repeated minus one\n\tif (sum_original > 0)\n\t\treturn sum_original * k - sum_original + min_original * (k - 1)\n\tend\n\t\n\t# if the sum of the subarray in the original vector is negative, then the maximum sum of the subarray in the modified vector is the maximum sum of the subarray in the original vector minus the minimum sum of the subarray in the original vector multiplied by the number of times the vector is repeated minus one\n\treturn max_original - min_original * (k - 1)\nend",
    "\t# Find the maximum sum subarray in first window of size n\n\tmax_sum = sum(a[1:n])\n\tcurr_sum = max_sum\n\tfor i in n+1:length(a)\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t# Find the maximum sum of a subvector in the remaining k-1 windows\n\tmax_wrap = sum(a)\n\tcurr_wrap = max_wrap\n\tfor i in 1:n\n\t\tcurr_wrap += a[i] - a[i-n]\n\t\tmax_wrap = max(max_wrap, curr_wrap)\n\tend\n\t# Return the maximum of two sums\n\treturn max(max_sum, max_wrap)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\t\tif max_so_far < 0\n\t\t\treturn max_so_far\n\t\tend\n\tend\n\t\n\tmax_so_far_2 = 0\n\tmax_ending_here_2 = 0\n\tfor i in 1:n\n\t\tmax_ending_here_2 = max_ending_here_2 + a[i]\n\t\tif max_ending_here_2 > 0\n\t\t\tmax_ending_here_2 = 0\n\t\tend\n\t\tif max_so_far_2 > max_ending_here_2\n\t\t\tmax_so_far_2 = max_ending_here_2\n\t\tend\n\tend\n\t\n\treturn max(max_so_far, max_so_far * k + max_so_far_2)\nend",
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\t\n\t# Compute sums of remaining windows by \n\t# removing first element of previous \n\t# window and adding last element of \n\t# current window. \n\tcurr_sum = max_sum\n\tfor i in n+1:n*k\n\t\tcurr_sum += a[i % n] - a[(i - n) % n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far * k\n\tmin_so_far = 0\n\tmin_ending_here = 0\n\tfor i in 1:n\n\t\tmin_ending_here = min_ending_here + a[i]\n\t\tif min_ending_here > 0\n\t\t\tmin_ending_here = 0\n\t\tend\n\t\tif min_so_far > min_ending_here\n\t\t\tmin_so_far = min_ending_here\n\t\tend\n\tend\n\tmin_subarray_sum = min_so_far * k\n\tfor i in 1:n\n\t\tcurr_sum = 0\n\t\tfor j in i:n\n\t\t\tcurr_sum = curr_sum + a[j]\n\t\t\tmax_so_far = max(max_so_far, curr_sum)\n\t\tend\n\tend\n\tmax_wrap_sum = 0\n\tfor i in 1:n\n\t\tmax_wrap_sum = max_wrap_sum + a[i]\n\t\tmax_so_far = max(max_so_far, max_wrap_sum)\n\tend\n\treturn max(max_so_far, max_subarray_sum, max_wrap_sum, min_subarray_sum)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\t\ta[i] = -a[i]\n\tend\n\tif max_wrap < 0\n\t\treturn max_so_far\n\tend\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max(max_wrap, max_so_far)\nend",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in 1:n\n        max_ending_here += a[i]\n        if max_ending_here < 0\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here\n            max_so_far = max_ending_here\n        end\n    end\n    max_subarray_sum = max_so_far\n    for i in 1:n\n        max_ending_here += a[i]\n        if max_ending_here < 0\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here\n            max_so_far = max_ending_here\n        end\n    end\n    max_wrap = max_so_far\n    if max_wrap > 0\n        return max(max_wrap, max_subarray_sum * (k - 2) + max_wrap)\n    else\n        return max_subarray_sum\n    end\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tk: number of times to repeat the array\n\t\"\"\"\n\t# find the maximum sum subarray in the original array\n\tmax_sum = max_sub_array_sum(a, n)\n\t\n\t# find the minimum sum subarray in the original array\n\tmin_sum = min_sub_array_sum(a, n)\n\t\n\t# find the sum of the original array\n\ttotal_sum = sum(a)\n\t\n\t# if k is 1, then the maximum sum is the maximum sum of the original array\n\tif k == 1\n\t\treturn max_sum\n\tend\n\t\n\t# if k is 2, then the maximum sum is the maximum of the following:\n\t# 1. maximum sum of the original array\n\t# 2. sum of the original array + maximum sum of the subarray in the original array\n\tif k == 2\n\t\treturn max(max_sum, total_sum + max_sum)\n\tend\n\t\n\t# if k is greater than 2, then the maximum sum is the maximum of the following:\n\t# 1. maximum sum of the original array\n\t# 2. sum of the original array * (k - 2) + maximum sum of the subarray in the original array\n\t# 3. sum of the original array * (k - 2) + minimum sum of the subarray in the original array\n\treturn max(max_sum, total_sum * (k - 2) + max_sum, total_sum * (k - 2) + min_sum)\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector of size n\n\t\n\t# Compute sum of all elements\n\ttotal = sum(a)\n\t\n\t# Compute sum of i*a[i] for all elements\n\tcurr_val = 0\n\tfor i in 1:n\n\t\tcurr_val += i*a[i]\n\tend\n\t\n\t# Initialize result\n\tmax_val = curr_val\n\t\n\t# Compute values for other iterations\n\tfor j in 2:k\n\t\tcurr_val = curr_val + total - n*a[n]\n\t\tmax_val = max(max_val, curr_val)\n\tend\n\t\n\treturn max_val\nend",
    "\t# k is an integer denoting the number of times the array is repeated.\n\t# n is an integer denoting the size of the array.\n\t# a is an array of integers denoting the elements in the array.\n\t\n\t# Initialize the maximum sum.\n\tmax_sum = 0\n\t\n\t# Initialize the current sum.\n\tcurr_sum = 0\n\t\n\t# Compute the sum of the first window.\n\tfor i in 1:n\n\t\tcurr_sum += a[i]\n\tend\n\t\n\t# Update the maximum sum.\n\tmax_sum = curr_sum\n\t\n\t# Compute the sum of the remaining windows by removing the first element of the previous window and adding the last element of the current window.\n\tfor i in 1:k-1\n\t\tcurr_sum = curr_sum - a[i] + a[i+n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# Return the maximum sum.\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:(k-1)\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t\n\t# Consider all blocks starting with i. \n\tfor i in 1:n\n\t\tcurr_sum := 0\n\t\tfor j in 1:n\n\t\t\tcurr_sum += a[(i + j - 1) % n]\n\t\tend\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# Maximum sum is sum of all elements of \n\t# array multiplied by k minus sum of \n\t# all elements excluded from block starting \n\t# with i multiplied by k-1. \n\treturn k * sum(a) - max_sum\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tk: number of times to repeat the array\n\t\"\"\"\n\t# find the max sum of the original array\n\tmax_sum = max_sub_array_sum(a, n)\n\t\n\t# find the sum of the entire array\n\ttotal_sum = sum(a)\n\t\n\t# find the max sum of the repeated array\n\tmax_sum_repeated = max_sum + (k-1)*(total_sum)\n\t\n\t# if the max sum of the repeated array is less than the max sum of the original array, return the max sum of the original array\n\tif max_sum_repeated < max_sum\n\t\treturn max_sum\n\telse\n\t\treturn max_sum_repeated\n\tend\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is a vector of integers\n\t# returns an integer denoting the maximum sum of a contiguous subvector in the modified vector\n\t\n\t# calculate the maximum sum of a contiguous subvector in the original vector\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# calculate the sum of the original vector\n\tsum_of_a = 0\n\tfor i in 1:n\n\t\tsum_of_a += a[i]\n\tend\n\t\n\t# calculate the maximum sum of a contiguous subvector in the modified vector\n\tmax_so_far = max_so_far + (k-2)*sum_of_a\n\t\n\t# calculate the maximum sum of a contiguous subvector in the modified vector\n\t# that starts at the beginning of the vector\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# calculate the maximum sum of a contiguous subvector in the modified vector\n\t# that ends at the end of the vector\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\t\tif max_so_far < 0\n\t\t\treturn max_so_far\n\t\tend\n\tend\n\tmax_so_far = max_so_far * k\n\tprefix_sum = 0\n\tsuffix_sum = 0\n\tfor i in 1:n\n\t\tprefix_sum = prefix_sum + a[i]\n\t\tsuffix_sum = suffix_sum + a[n - i + 1]\n\t\tif prefix_sum > max_so_far\n\t\t\tmax_so_far = prefix_sum\n\t\tend\n\t\tif suffix_sum > max_so_far\n\t\t\tmax_so_far = suffix_sum\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is a vector of size n\n\t\n\t# create a new vector by repeating the given vector k times\n\tb = repeat(a, k)\n\t\n\t# find the largest sum of a contiguous vector in the modified vector\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:length(b)\n\t\tmax_ending_here = max_ending_here + b[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\treturn max_so_far\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t# Find sum of subarray present in \n\t# first window and initialize \n\t# starting point as 0 \n\tfor i in 1:n \n\t\tcurr_sum := 0\n\t\tfor j in 1:n \n\t\t\tcurr_sum += a[j]\n\t\tend\n\t\tmax_sum := max(max_sum, curr_sum)\n\tend\n\t# Compute sums of remaining windows by \n\t# removing first element of previous \n\t# window and adding last element of \n\t# current window. \n\tfor i in 2:k \n\t\tcurr_sum := 0\n\t\tfor j in 1:n \n\t\t\tcurr_sum += a[j]\n\t\tend\n\t\tmax_sum := max(max_sum, curr_sum)\n\tend\n\treturn max_sum\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tk: number of times to repeat the array\n\t\"\"\"\n\t\n\t# max_sub_array_sum_repeated(a, n, k) = max_sub_array_sum_repeated(a, n, k-1) + max_sub_array_sum_repeated(a, n, 1)\n\t\n\t# max_sub_array_sum_repeated(a, n, 1) = max_sub_array_sum(a, n)\n\t\n\t# max_sub_array_sum(a, n) = max(max_sub_array_sum(a, n-1), max_sub_array_sum(a, n-1) + a[n])\n\t\n\t# max_sub_array_sum(a, 1) = a[1]\n\t\n\t# max_sub_array_sum_repeated(a, n, k) = max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a, n, k-1)\n\t\n\t# max_sub_array_sum_repeated(a, n, k) = max_sub_array_sum(a, n) + max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a, n, k-2)\n\t\n\t# max_sub_array_sum_repeated(a, n, k) = max_sub_array_sum(a, n) + max_sub_array_sum(a, n) + max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a, n, k-3)\n\t\n\t# max_sub_array_sum_repeated(a, n, k) = k * max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a, n, k-k)\n\t\n\t# max_sub_array_sum_repeated(a, n, k) = k * max_sub_array_sum(a, n) + max_sub_array_sum_repeated(a",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\tfor i in n+1:2*n\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t# Find the maximum sum of a subvector in remaining \n\t# k-1 windows \n\tmax_sum = max(max_sum, curr_sum)\n\tfor i in 2:k-1\n\t\tcurr_sum = curr_sum + sum(a) - n*a[i-1]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\treturn max_sum\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of the array\n\tk: number of times the array is repeated\n\t\"\"\"\n\t# kadane's algorithm to find maximum subarray sum\n\t# for 1 repetition of array\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t# maximum sum with 1 repetition\n\tmax_sum = max_so_far\n\t# calculate circular sum\n\tcircular_sum = 0\n\tfor i in 1:n\n\t\tcircular_sum += a[i]\n\tend\n\t# maximum sum with all repetitions\n\tmax_sum = max(circular_sum * k, max_sum)\n\t# handle corner elements\n\tfor i in 1:n\n\t\tcurr_sum = a[i]\n\t\tfor j in i+1:n\n\t\t\tcurr_sum += a[j]\n\t\t\tmax_sum = max(max_sum, curr_sum)\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of the array\n\tk: number of times to repeat the array\n\t\"\"\"\n\t# find the max sum of the original array\n\tmax_sum = max_sub_array_sum(a, n)\n\t\n\t# find the max sum of the array without the first and last element\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap += a[i]\n\tend\n\tmax_wrap = max_wrap - a[1] - a[n]\n\t\n\t# find the max sum of the repeated array\n\tif k == 1\n\t\treturn max_sum\n\telseif k == 2\n\t\treturn max(max_sum, max_wrap)\n\telse\n\t\treturn max(max_sum, max_wrap + (k-2)*sum(a))\n\tend\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated\n\t# n is an integer denoting the size of the given vector\n\t# a is the given vector\n\t\n\t# Initialize the sum of the first window\n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\t\n\t# Initialize the sum of the next window\n\tcurr_sum = max_sum\n\t\n\t# Compute the sum of the next window\n\tfor i in 1:n\n\t\tcurr_sum += a[i]*(k-1)\n\t\tcurr_sum -= a[i-n]\n\t\tif curr_sum > max_sum\n\t\t\tmax_sum = curr_sum\n\t\tend\n\tend\n\t\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\t\ta[i] = -a[i]\n\tend\n\tmax_wrap = max_wrap + max_sub_array_sum(a, n, k)\n\tif max_wrap > max_subarray_sum\n\t\treturn max_wrap\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\t\tif max_so_far < 0\n\t\t\treturn max_so_far\n\t\tend\n\tend\n\tmax_so_far = max_so_far * k\n\tprefix_sum = 0\n\tsuffix_sum = 0\n\tfor i in 1:n\n\t\tprefix_sum = prefix_sum + a[i]\n\t\tsuffix_sum = suffix_sum + a[n - i + 1]\n\t\tif prefix_sum > max_so_far\n\t\t\tmax_so_far = prefix_sum\n\t\tend\n\t\tif suffix_sum > max_so_far\n\t\t\tmax_so_far = suffix_sum\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the vector is repeated.\n\t# n is an integer denoting the size of the vector.\n\t# a is a vector of size n.\n\t\n\t# Initialize result\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# Find the maximum sum subarray in first window of size n\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# Find the maximum sum subarray in remaining windows by removing first element of previous window and adding last element of current window.\n\tfor i in 2:k\n\t\tcurr_max = 0\n\t\tfor j in 1:n\n\t\t\tcurr_max = curr_max + a[j]\n\t\t\tif curr_max < 0\n\t\t\t\tcurr_max = 0\n\t\t\tend\n\t\t\tif max_so_far < curr_max\n\t\t\t\tmax_so_far = curr_max\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\tmax_so_far = max_so_far * k\n\treturn max_so_far\nend",
    "    # k is an integer denoting the number of times the vector is repeated.\n    # n is an integer denoting the size of the vector.\n    # a is the vector of size n.\n    # max_so_far is a variable to store the maximum sum of the contiguous subarray.\n    # max_ending_here is a variable to store the sum of the current contiguous subarray.\n    # max_element is a variable to store the maximum element in the vector.\n    # sum is a variable to store the sum of all the elements in the vector.\n    max_so_far = 0\n    max_ending_here = 0\n    max_element = maximum(a)\n    sum = sum(a)\n    # If the maximum element in the vector is negative, then the maximum sum of the contiguous subarray is the maximum element.\n    if max_element < 0\n        return max_element\n    end\n    # If the vector is repeated only once, then the maximum sum of the contiguous subarray is the sum of all the elements in the vector.\n    if k == 1\n        return sum\n    end\n    # If the vector is repeated more than once, then the maximum sum of the contiguous subarray is the sum of all the elements in the vector multiplied by the number of times the vector is repeated minus the minimum sum of the contiguous subarray.\n    for i in 1:n\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here\n            max_so_far = max_ending_here\n        end\n    end\n    return (k * sum) - max_so_far\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated\n\t# n is an integer denoting the size of the given vector\n\t# a is a vector of size n\n\t# returns the maximum sum of a contiguous subvector in the modified vector\n\t\n\t# initialize the max_so_far and max_ending_here to the first element of the vector\n\tmax_so_far = a[1]\n\tmax_ending_here = a[1]\n\t\n\t# loop through the vector\n\tfor i in 2:n\n\t\t# update the max_ending_here\n\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\t# update the max_so_far\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\tend\n\t\n\t# initialize the max_with_wrap to the sum of the vector\n\tmax_with_wrap = sum(a)\n\t\n\t# initialize the max_ending_here to the first element of the vector\n\tmax_ending_here = a[1]\n\t\n\t# loop through the vector\n\tfor i in 2:n\n\t\t# update the max_ending_here\n\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\t# update the max_with_wrap\n\t\tmax_with_wrap = max(max_with_wrap, max_ending_here)\n\tend\n\t\n\t# initialize the max_with_wrap to the sum of the vector\n\tmax_with_wrap = sum(a)\n\t\n\t# initialize the max_ending_here to the first element of the vector\n\tmax_ending_here = a[1]\n\t\n\t# loop through the vector\n\tfor i in 2:n\n\t\t# update the max_ending_here\n\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\t# update the max_with_wrap\n\t\tmax_with_wrap = max(max_with_wrap, max_ending_here)\n\tend\n\t\n\t# initialize the max_with_wrap",
    "\t\n\t# kadane's algorithm to find maximum \n\t# sum subarray in first row. \n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\t\n\t\t# update maximum sum, if needed \n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# max sum is divided by k as array \n\t# is repeated k times \n\tmax_so_far = max_so_far / k\n\t\n\t# initialize sum of middle row \n\tmid_sum = 0\n\t\n\t# If there are 2 or more rows, then \n\t# initialize value of mid_sum \n\tif k % 2 == 0\n\t\tfor i in 1:n\n\t\t\tmid_sum = mid_sum + a[i]\n\t\tend\n\t\tmid_sum = mid_sum * k / 2\n\telse\n\t\tmid_sum = max_so_far\n\tend\n\t\n\t# max sum is sum of max_so_far (maximum \n\t# sum of first row), mid_sum (maximum \n\t# sum of middle row) and max_ending_here \n\t# (maximum sum of last row) \n\treturn max_so_far + mid_sum + max_ending_here\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat array\n\t\"\"\"\n\t# find max subarray sum for original array\n\tmax_sub_array_sum(a, n)\n\t# find min subarray sum for original array\n\tmin_sub_array_sum(a, n)\n\t# max sum is sum of all elements of array multiplied by k minus min subarray sum\n\t# min subarray sum is needed because the min subarray sum will be repeated k times\n\t# and we need to subtract it to get the max sum\n\treturn (k * sum(a)) - min_sub_array_sum(a, n)\nend",
    "\t\n\t# Find the sum of the first window of size n\n\tmax_sum = sum(a[1:n])\n\t\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window\n\tfor i in 1:k-1\n\t\tcurr_sum = curr_sum - a[i] + a[i+n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t# Consider all blocks starting with i. \n\tfor i in 1:n \n\t\tcurr_sum := 0\n\t\t# Calculate sum of current block \n\t\tfor j in 1:n \n\t\t\tcurr_sum += a[j]\n\t\tend\n\t\t# Update result if required \n\t\tif curr_sum > max_sum \n\t\t\tmax_sum := curr_sum\n\t\tend\n\tend\n\treturn max_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:k\n\t\tfor j in 1:n\n\t\t\tmax_ending_here = max_ending_here + a[j]\n\t\t\tif max_so_far < max_ending_here\n\t\t\t\tmax_so_far = max_ending_here\n\t\t\tend\n\t\t\tif max_ending_here < 0\n\t\t\t\tmax_ending_here = 0\n\t\t\tend\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t\"\"\"\n\ta: array of numbers\n\tn: length of array\n\tk: number of times to repeat the array\n\t\"\"\"\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_so_far += a[i]\n\t\tmax_so_far = max(max_so_far, max_sub_array_sum)\n\tend\n\treturn max(max_so_far, max_sub_array_sum * k)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here - a[i] + a[i]\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\tend\n\tfor i in 1:k-1\n\t\tmax_ending_here = 0\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\tend\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tfor j in 1:n\n\t\t\tmax_ending_here = max_ending_here - a[j] + a[j]\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\twindow_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\twindow_sum = max_sum\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i in n+1:2*n\n\t\twindow_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\t# max_sum is the maximum sum of k windows. The idea is to compute sum of last k-1 windows and add max_sum to it \n\treturn max_sum + (k-2)*sum(a)\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\tfor i in n+1:2*n\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# Find the maximum sum of subarray modified by repeating \n\t# the array k times \n\tmax_sum = max(max_sum, curr_sum)\n\t\n\t# Find the maximum sum of subarray for other cases \n\tfor i in 2:k\n\t\tcurr_sum = curr_sum + sum(a) - n * a[i-1]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\t# k is an integer denoting the number of times the vector is repeated.\n\t# n is an integer denoting the size of the vector.\n\t# a is the vector of size n.\n\t\n\t# Initialize the maximum sum.\n\tmax_sum = 0\n\t\n\t# Initialize the maximum sum of the vector.\n\tmax_sum_vector = 0\n\t\n\t# Initialize the maximum sum of the subarray.\n\tmax_sum_subarray = 0\n\t\n\t# Initialize the sum of the subarray.\n\tsum_subarray = 0\n\t\n\t# Initialize the sum of the vector.\n\tsum_vector = 0\n\t\n\t# Initialize the sum of the repeated vector.\n\tsum_repeated_vector = 0\n\t\n\t# Initialize the minimum sum of the subarray.\n\tmin_sum_subarray = 0\n\t\n\t# Initialize the minimum sum of the vector.\n\tmin_sum_vector = 0\n\t\n\t# Initialize the minimum sum of the repeated vector.\n\tmin_sum_repeated_vector = 0\n\t\n\t# Initialize the minimum sum.\n\tmin_sum = 0\n\t\n\t# Initialize the minimum element.\n\tmin_element = 0\n\t\n\t# Initialize the maximum element.\n\tmax_element = 0\n\t\n\t# Initialize the minimum element of the subarray.\n\tmin_element_subarray = 0\n\t\n\t# Initialize the maximum element of the subarray.\n\tmax_element_subarray = 0\n\t\n\t# Initialize the minimum element of the vector.\n\tmin_element_vector = 0\n\t\n\t# Initialize the maximum element of the vector.\n\tmax_element_vector = 0\n\t\n\t# Initialize the minimum element of the repeated vector.\n\tmin_element_repeated_vector = 0\n\t\n\t# Initialize the maximum element of the repeated vector.\n\tmax_element_repeated_vector = 0\n\t\n\t# Initialize the minimum element of the repeated vector.\n\tmin_element_repeated_vector = a[1]\n\t\n\t# Initialize the maximum element of the repeated vector.\n\tmax_element_repeated_vector = a",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector of integers\n\t# return the maximum sum of a contiguous vector in the modified vector\n\t\n\t# create a new vector of size n*k\n\tb = zeros(Int64, n*k)\n\t\n\t# fill the vector with the repeated vector\n\tfor i in 1:k\n\t\tb[(i-1)*n+1:i*n] = a\n\tend\n\t\n\t# find the maximum sum of a contiguous vector in the modified vector\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:length(b)\n\t\tmax_ending_here = max_ending_here + b[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# Find the sum of the original array \n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n \n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t# Find the sum of the modified array \n\t# (K times array) \n\tmax_k_ad_sum = 0\n\tfor i in 1:n \n\t\tmax_k_ad_sum += a[i]\n\tend\n\tmax_k_ad_sum = max_k_ad_sum * k\n\t# Find the maximum circular contiguous sum \n\t# in modified array \n\tif max_k_ad_sum > max_so_far\n\t\treturn max_k_ad_sum\n\telse\n\t\treturn max_so_far\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\tmax_so_far * k\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat array\n\t\"\"\"\n\t# find max subarray sum for first iteration\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is a vector of size n\n\t# return the maximum sum of a contiguous vector in the modified vector\n\t\n\t# find the maximum sum of a contiguous vector in the original vector\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# find the minimum sum of a contiguous vector in the original vector\n\tmin_so_far = 0\n\tmin_ending_here = 0\n\tfor i in 1:n\n\t\tmin_ending_here += a[i]\n\t\tif min_ending_here > 0\n\t\t\tmin_ending_here = 0\n\t\tend\n\t\tif min_so_far > min_ending_here\n\t\t\tmin_so_far = min_ending_here\n\t\tend\n\tend\n\t\n\t# find the maximum sum of a contiguous vector in the modified vector\n\tif k == 1\n\t\treturn max_so_far\n\telseif max_so_far < 0\n\t\treturn max_so_far\n\telse\n\t\treturn max(max_so_far, min_so_far + max_so_far * (k - 2))\n\tend\nend",
    "\t# kadane's algorithm\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t# max sum with non-contiguous elements\n\tmax_non_contiguous = 0\n\tfor i in 1:n\n\t\tif a[i] > 0\n\t\t\tmax_non_contiguous += a[i]\n\t\tend\n\tend\n\tif max_non_contiguous == 0\n\t\tmax_non_contiguous = maximum(a)\n\tend\n\t# max sum with circular subarray\n\tcircular_sum = 0\n\tfor i in 1:n\n\t\tcircular_sum += a[i]\n\tend\n\tcircular_max = 0\n\tcurr_val = 0\n\tfor i in 1:n\n\t\tcurr_val += a[i]\n\t\tcircular_max = max(circular_max, curr_val)\n\t\tif curr_val < 0\n\t\t\tcurr_val = 0\n\t\tend\n\tend\n\tcircular_max = max(circular_max, circular_sum + curr_val)\n\treturn max(max_so_far, max_non_contiguous, circular_max * k)\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tk: number of times to repeat the array\n\t\"\"\"\n\tmax_sum = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_sum < max_ending_here\n\t\t\tmax_sum = max_ending_here\n\t\tend\n\tend\n\tmax_sum = max_sum * k\n\tfor i in 1:n\n\t\tmax_ending_here += a[i] + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_sum < max_ending_here\n\t\t\tmax_sum = max_ending_here\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\t# kadane's algorithm\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_kadane = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap += a[i]\n\t\ta[i] = -a[i]\n\tend\n\tmax_wrap += max_sub_array_sum_repeated(a, n, 1)\n\tif max_wrap > max_kadane\n\t\treturn max_wrap\n\telse\n\t\treturn max_kadane\n\tend\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i = n+1:length(a)\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t# Return maximum sum of k consecutive subarrays \n\treturn max_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\t\ta[i] = -a[i]\n\tend\n\tmax_wrap = max_wrap + max_sub_array_sum(a, n, 1)\n\tif max_wrap > max_subarray_sum\n\t\treturn max_wrap\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# kadane's algorithm to find maximum \n\t# subarray sum for standard array \n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# Case 1: When the array has all non-negative values \n\tif max_so_far > 0\n\t\treturn max_so_far * k\n\tend\n\t\n\t# Case 2: When the array has at-least \n\t# one negative value \n\tmax_so_far = a[1]\n\tfor i in 2:n\n\t\tif a[i] > max_so_far\n\t\t\tmax_so_far = a[i]\n\t\tend\n\tend\n\t\n\treturn max_so_far * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_so_far = max_so_far + a[i]\n\t\tif max_so_far < 0\n\t\t\tmax_so_far = 0\n\t\tend\n\t\tif max_ending_here < max_so_far\n\t\t\tmax_ending_here = max_so_far\n\t\tend\n\tend\n\tmax_sub_array_sum = max(max_sub_array_sum, max_ending_here)\n\treturn max_sub_array_sum * k\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t# Find sum of subarray present in \n\t# first window and initialize \n\t# starting point as 0 \n\tfor i in 1:n \n\t\tcurr_sum := 0\n\t\tfor j in 1:n \n\t\t\tcurr_sum += a[j]\n\t\t\tif curr_sum > max_sum \n\t\t\t\tmax_sum = curr_sum\n\t\t\tend\n\t\tend\n\tend\n\t# Compute sums of remaining windows by \n\t# removing first element of previous \n\t# window and adding last element of \n\t# current window. \n\tfor i in 1:n \n\t\tcurr_sum := 0\n\t\tfor j in 1:n \n\t\t\tcurr_sum += a[j]\n\t\t\tif curr_sum > max_sum \n\t\t\t\tmax_sum = curr_sum\n\t\t\tend\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated.\n\t# n is an integer denoting the size of the given vector.\n\t# a is a vector of size n.\n\t# The function should return an integer denoting the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\n\t# The function should return -1 if the modified vector is empty.\n\t\n\t# The function should return -1 if the modified vector is empty.\n\tif n == 0\n\t\treturn -1\n\tend\n\t\n\t# Compute sum of first window of size n\n\tmax_sum = 0\n\twindow_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\twindow_sum = max_sum\n\t\n\t# Compute sums of remaining windows by\n\t# removing first element of previous\n\t# window and adding last element of\n\t# current window.\n\tfor i in n+1:n*k\n\t\twindow_sum += a[i % n] - a[(i - n) % n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat array\n\t\"\"\"\n\t# Find the maximum sum subarray in first window of size n\n\tmax_sum = 0\n\twindow_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\t\twindow_sum += a[i]\n\tend\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window.\n\tfor i in n+1:n*k\n\t\twindow_sum = window_sum + a[i % n] - a[(i-n) % n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_kadane = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap += a[i]\n\t\ta[i] = -a[i]\n\tend\n\tmax_so_far, max_ending_here = 0, 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_wrap + max_so_far\n\tif max_wrap > max_kadane\n\t\treturn max_wrap\n\telse\n\t\treturn max_kadane\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated.\n\t# n is an integer denoting the size of the given vector.\n\t# a is a vector of integers denoting the elements of the given vector.\n\t\n\t# Initialize result\n\tmax_sum := 0\n\t\n\t# Find sum of all subarrays of size k\n\tfor i in 1:n\n\t\tcurrent_sum := 0\n\t\tfor j in 1:k\n\t\t\tcurrent_sum += a[(i + j - 1) % n]\n\t\tend\n\t\tmax_sum = max(max_sum, current_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\t\"\"\"\n\tFind the maximum possible sum of a contiguous subarray of the given vector.\n\t\"\"\"\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\treturn max_so_far\n\tend\n\tmax_so_far = max_so_far * k\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\tend\n\tmax_wrap = max_wrap * (k - 1)\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_wrap < max_ending_here\n\t\t\tmax_wrap = max_ending_here\n\t\tend\n\tend\n\treturn max(max_so_far, max_wrap)\nend",
    "    # Initialize result \n    max_sum := 0\n    # Consider all blocks starting with i. \n    for i in 0:n-1\n        current_sum := 0\n        # Calculate sum of current block. \n        for j in 0:n-1\n            current_sum += a[j]\n            # If i is 0, then current_sum \n            # can't be negative \n            if i > 0\n                current_sum = max(current_sum, 0)\n            end\n            # Update result if required \n            max_sum = max(max_sum, current_sum)\n        end\n    end\n    return max_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\treturn max_so_far * k\nend",
    "\t\n\t# Find the sum of the first window of size n\n\tmax_sum := sum(a[1:n])\n\t\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window.\n\tcurr_sum := max_sum\n\tfor i in n+1:length(a)\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# Compute the maximum sum by repeating the array k times\n\treturn max_sum * k\nend",
    "\t\"\"\"\n\ta: vector of integers\n\tn: length of vector\n\tk: number of times to repeat vector\n\t\"\"\"\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the repeated array\n\tmax_sub_array_sum(a, n*k)\n\t\n\t# find max subarray sum for the middle portion of the repeated array\n\tmax_sub_array_sum(a, n*(k-2))\n\t\n\t# find the maximum of the above three sums\n\tmax(max_sub_array_sum(a, n), max_sub_array_sum(a, n*k), max_sub_array_sum(a, n*(k-2)))\nend",
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\t\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tcurr_sum = max_sum\n\tfor i in n+1:length(a)\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# max_sum is sum of subarray having maximum sum. \n\t# max_sum is at-least sum of one subarray of size n \n\t# (Because no two subarrays of size n overlap) \n\t# So, finally max_sum * k \n\treturn max_sum * k\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\tfor i = n + 1:2*n\n\t\tcurr_sum += a[i] - a[i - n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t# Find the maximum sum of a subvector in remaining \n\t# k-1 windows \n\tmax_sum_k = max_sum\n\tfor i = 2:k\n\t\tcurr_sum = 0\n\t\tfor j = 1:n\n\t\t\tcurr_sum += a[j]\n\t\tend\n\t\tmax_sum_k = max(max_sum_k, curr_sum)\n\t\tfor j = n + 1:2*n\n\t\t\tcurr_sum += a[j] - a[j - n]\n\t\t\tmax_sum_k = max(max_sum_k, curr_sum)\n\t\tend\n\tend\n\treturn max_sum_k\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated\n\t# n is an integer denoting the size of the given vector\n\t# a is the given vector\n\t\n\t# Compute sum of all elements\n\ttotal_sum = sum(a)\n\t\n\t# Compute sum of i*a[i] for all elements\n\tcurr_val = 0\n\tfor i in 1:n\n\t\tcurr_val += i*a[i]\n\tend\n\t\n\t# Initialize result\n\tmax_val = curr_val\n\t\n\t# Compute values for other iterations\n\tfor j in 1:k-1\n\t\tcurr_val = curr_val + total_sum - n*a[n]\n\t\tmax_val = max(max_val, curr_val)\n\tend\n\t\n\treturn max_val\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated\n\t# n is an integer denoting the size of the given vector\n\t# a is the given vector\n\t\n\t# create a new vector b by repeating the given vector k times\n\tb = repeat(a, outer = [k])\n\t\n\t# create a new vector c by concatenating the given vector with itself\n\tc = vcat(a, a)\n\t\n\t# create a new vector d by concatenating the given vector with itself and then repeating it k-2 times\n\td = repeat(c, outer = [k-2])\n\t\n\t# create a new vector e by concatenating the given vector with itself and then repeating it k-1 times\n\te = repeat(c, outer = [k-1])\n\t\n\t# create a new vector f by concatenating the given vector with itself and then repeating it k times\n\tf = repeat(c, outer = [k])\n\t\n\t# create a new vector g by concatenating the given vector with itself and then repeating it k+1 times\n\tg = repeat(c, outer = [k+1])\n\t\n\t# create a new vector h by concatenating the given vector with itself and then repeating it k+2 times\n\th = repeat(c, outer = [k+2])\n\t\n\t# create a new vector i by concatenating the given vector with itself and then repeating it k+3 times\n\ti = repeat(c, outer = [k+3])\n\t\n\t# create a new vector j by concatenating the given vector with itself and then repeating it k+4 times\n\tj = repeat(c, outer = [k+4])\n\t\n\t# create a new vector l by concatenating the given vector with itself and then repeating it k+5 times\n\tl = repeat(c, outer = [k+5])\n\t\n\t# create a new vector m by concatenating the given vector with itself and then repeating it k+6 times\n\tm = repeat(c, outer = [k+6])\n\t\n\t# create a new vector n by concatenating the given vector with itself and then repeating it k+7 times\n\tn = repeat(c, outer =",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t\"\"\"\n\ta: given vector\n\tn: length of the given vector\n\tk: number of times the given vector is repeated\n\t\"\"\"\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_so_far = max_so_far * k\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i] + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# Initialize result \n\tresult := 0\n\t\n\t# Find sum of first subarray \n\t# of size n \n\tfor i in 1:n\n\t\tresult += a[i]\n\tend\n\t\n\t# Initialize value of previous \n\t# subarray sum \n\tprev_sub_array_sum := result\n\t\n\t# Find sum of remaining subarrays \n\t# and update result \n\tfor i in n+1:n*k\n\t\tcurr_sub_array_sum := prev_sub_array_sum + a[i] - a[i-n]\n\t\tprev_sub_array_sum := curr_sub_array_sum\n\t\tresult := max(result, curr_sub_array_sum)\n\tend\n\t\n\treturn result\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\t\ta[i] = -a[i]\n\tend\n\tmax_wrap = max_wrap + max_sub_array_sum_repeated(a, n, k)\n\treturn max(max_so_far, max_wrap)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t\"\"\"\n\tFind the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\n\t\"\"\"\n\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = curr_sum = sum(a[1:n]) \n\tfor i in n+1:2n\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# Use the maximum sum of previous window as initial maximum sum for next window \n\tmax_sum_so_far = max_sum\n\t\n\t# Find the maximum sum of next window by excluding the elements which are not part of the first window \n\tfor i in 2n+1:k*n\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum_so_far = max(max_sum_so_far, curr_sum)\n\tend\n\t\n\treturn max_sum_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_kadane = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap += a[i]\n\t\ta[i] = -a[i]\n\tend\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_wrap + max_so_far\n\tif max_wrap > max_kadane\n\t\treturn max_wrap\n\telse\n\t\treturn max_kadane\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\tmax_so_far = max_so_far * k\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far > 0\n\t\treturn max(max_so_far, max_sub_array_sum * (k - 2))\n\telse\n\t\treturn max_so_far\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_kadane = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\tend\n\tif max_wrap < 0\n\t\treturn max_kadane\n\tend\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max(max_so_far, max_kadane)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\t\tif max_so_far < 0\n\t\t\treturn max_so_far\n\t\tend\n\tend\n\tmax_so_far = max_so_far * k\n\tprefix_sum = 0\n\tsuffix_sum = 0\n\tfor i in 1:n\n\t\tprefix_sum = prefix_sum + a[i]\n\t\tsuffix_sum = suffix_sum + a[n - i + 1]\n\t\tif prefix_sum < 0\n\t\t\tprefix_sum = 0\n\t\tend\n\t\tif suffix_sum < 0\n\t\t\tsuffix_sum = 0\n\t\tend\n\tend\n\treturn max(max_so_far, prefix_sum + (k - 2) * sum(a) + suffix_sum)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_so_far = max_so_far + a[i]\n\t\tif max_so_far < 0\n\t\t\tmax_so_far = 0\n\t\tend\n\t\tif max_ending_here < max_so_far\n\t\t\tmax_ending_here = max_so_far\n\t\tend\n\tend\n\tif max_ending_here > 0\n\t\treturn max(max_ending_here, max_subarray_sum * (k - 2))\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t# Consider all blocks starting with i. \n\tfor i in 1:n \n\t\tcurrent_sum := 0\n\t\t# Calculate sum of current block. \n\t\tfor j in 1:n \n\t\t\tcurrent_sum += a[j] \n\t\tend\n\t\t# Update result if required. \n\t\tif current_sum > max_sum \n\t\t\tmax_sum = current_sum \n\t\tend\n\tend\n\treturn max_sum * k\nend",
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\t\n\t# Compute sums of remaining windows by \n\t# removing first element of previous \n\t# window and adding last element of \n\t# current window. \n\tcurr_sum = max_sum\n\tfor i in n+1:length(a)\n\t\tcurr_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\t# max_sum is sum of subarray having maximum sum. \n\t# Return maximum sum of subarray of size n*k \n\treturn max(max_sum, curr_sum) * k\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tcurr_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i = n + 1:n*k\n\t\tcurr_sum += a[i % n] - a[(i - n) % n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i=1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\treturn max_so_far * k\nend",
    "\t# kadane's algorithm\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_so_far = max_so_far * k\n\t# case when all elements are negative\n\tif max_so_far == 0\n\t\tmax_so_far = a[1]\n\t\tfor i in 2:n\n\t\t\tif a[i] > max_so_far\n\t\t\t\tmax_so_far = a[i]\n\t\t\tend\n\t\tend\n\t\tmax_so_far = max_so_far * k\n\tend\n\t# case when there is a subarray with positive sum\n\t# which is a part of middle k-2 parts\n\tsum = 0\n\tfor i in 1:n\n\t\tsum += a[i]\n\tend\n\tsum = sum * (k-2)\n\t# find max subarray sum for middle k-2 parts\n\tmax_so_far_middle = 0\n\tmax_ending_here_middle = 0\n\tfor i in 1:n\n\t\tmax_ending_here_middle = max_ending_here_middle + a[i]\n\t\tif max_ending_here_middle < 0\n\t\t\tmax_ending_here_middle = 0\n\t\tend\n\t\tif max_so_far_middle < max_ending_here_middle\n\t\t\tmax_so_far_middle = max_ending_here_middle\n\t\tend\n\tend\n\treturn max(max_so_far, sum + max_so_far_middle)\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t\n\t# Compute sum of all elements\n\ttotal_sum = sum(a)\n\t\n\t# Compute sum of i*a[i] for all elements\n\tcurr_val = 0\n\tfor i in 1:n\n\t\tcurr_val += i*a[i]\n\tend\n\t\n\t# Initialize result\n\tmax_val = curr_val\n\t\n\t# Compute values for other iterations\n\tfor j in 2:k\n\t\tcurr_val = curr_val + total_sum - n*a[n]\n\t\tmax_val = max(max_val, curr_val)\n\tend\n\t\n\treturn max_val\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k-2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\treturn max_so_far*k\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\tfor i = n+1:n*k\n\t\tcurr_sum += a[i % n] - a[i - n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\treturn max_sum\nend",
    "\t\n\t# kadane's algorithm to find maximum sum contiguous subarray \n\t# stores maximum sum subarray found so far \n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# stores maximum sum of subarray that ends with current element \n\tmax_ending_here = 0\n\t\n\t# stores index of 0th element in maximum sum subarray found so far \n\tstart = 0\n\tend = 0\n\ts = 0\n\t\n\t# traverse the given array \n\tfor i in 1:n \n\t\t# update maximum sum of subarray \"ending\" at index i (by adding \n\t\t# current element to maximum sum ending at previous index i-1) \n\t\tmax_ending_here = max_ending_here + a[i]\n\t\t\n\t\t# if maximum sum is negative, set it to 0 (which represents \n\t\t# an empty subarray) \n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\t\ts = i + 1\n\t\tend\n\t\t\n\t\t# update result if current subarray sum is found to be greater \n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\t\tstart = s\n\t\t\tend = i\n\t\tend\n\tend\n\t\n\t# stores maximum sum of subarray that is repeated k times \n\tmax_k_times = max_so_far * k\n\t\n\t# stores maximum sum of prefix subarray that is repeated k times \n\tprefix_sum = 0\n\t\n\t# stores sum of all elements of original array \n\ttotal_sum = 0\n\t\n\t# traverse original array and compute sum of all elements \n\t# and maximum sum of prefix subarray \n\tfor i in 1:n \n\t\ttotal_sum = total_sum + a[i]\n\t\tprefix_sum = max(prefix_sum, total_sum)\n\tend\n\t\n\t# if maximum sum of prefix subarray is negative, maximum sum of \n\t# repeated subarray is same as maximum sum of kadane's algorithm \n\tif prefix_",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_sub_array_sum, max_wrap * (k - 2) + max_sub_array_sum)\n\telse\n\t\treturn max_sub_array_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t\n\t# Initialize the sum of the modified vector\n\tsum_of_a = 0\n\t\n\t# Initialize the maximum sum of the modified vector\n\tmax_sum = 0\n\t\n\t# Initialize the sum of the subarray\n\tsum_of_subarray = 0\n\t\n\t# Initialize the maximum sum of the subarray\n\tmax_sum_of_subarray = 0\n\t\n\t# Compute the sum of the modified vector\n\tfor i in 1:n\n\t\tsum_of_a += a[i]\n\tend\n\t\n\t# Compute the maximum sum of the subarray\n\tfor i in 1:n\n\t\tsum_of_subarray += a[i]\n\t\t\n\t\tif sum_of_subarray < 0\n\t\t\tsum_of_subarray = 0\n\t\tend\n\t\t\n\t\tif max_sum_of_subarray < sum_of_subarray\n\t\t\tmax_sum_of_subarray = sum_of_subarray\n\t\tend\n\tend\n\t\n\t# Compute the maximum sum of the modified vector\n\tif k == 1\n\t\tmax_sum = max_sum_of_subarray\n\telseif sum_of_a > 0\n\t\tmax_sum = max_sum_of_subarray + (k - 2) * sum_of_a + max_sum_of_subarray\n\telse\n\t\tmax_sum = max_sum_of_subarray\n\tend\n\t\n\treturn max_sum\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat array\n\t\"\"\"\n\t# kadane's algorithm\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t# case when all elements are negative\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\t# max sum with non-wrapping subarrays\n\tmax_non_wrap = max_so_far\n\t# max sum with wrapping subarrays\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap += a[i]\n\t\ta[i] = -a[i]\n\tend\n\t# max sum with (k-2) wrapping subarrays is sum of all array elements\n\tmax_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n\t# max sum is maximum of sums with non-wrapping and wrapping subarrays\n\treturn max(max_non_wrap, max_wrap)\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tk: number of times to repeat array\n\t\"\"\"\n\t# find max subarray sum for original array\n\tmax_sub_array_sum(a, n)\n\t# find max subarray sum for array repeated once\n\tmax_sub_array_sum(vcat(a, a), 2n)\n\t# find max subarray sum for array repeated k times\n\tmax_sub_array_sum(vcat(a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a, a",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_sub_array_sum, max_wrap * (k - 2) + max_sub_array_sum)\n\telse\n\t\treturn max_sub_array_sum\n\tend\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is a vector of size n\n\t\n\t# Initialize result\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# Initialize sum of all elements\n\ttotal_sum = 0\n\t\n\t# Find sum of all elements of the vector\n\tfor i in 1:n\n\t\ttotal_sum += a[i]\n\tend\n\t\n\t# Find sum of elements in the modified vector\n\t# The condition is important. We don't process an empty subarray\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\t\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\t\n\t\t# Update result if required\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# If all elements are negative, then return maximum element\n\t# The array is repeated k times\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\t\n\t# Return maximum sum of the modified vector\n\treturn max_so_far * k - (total_sum - max_so_far)\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\twindow_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\twindow_sum = max_sum\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i in n+1:n*k\n\t\twindow_sum += a[i] - a[i - n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\treturn max_sum\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t# Find sum of subarray [0..i] \n\tcurr_sum := 0\n\tfor i in 1:n \n\t\tcurr_sum += a[i] \n\tend\n\t# Initialize starting point \n\tstart := 0\n\t# Initialize ending point \n\tend := 0\n\t# Traverse the given array \n\tfor i in 1:n \n\t\t# Update ending point \n\t\tend += 1\n\t\t# If sum of elements from current \n\t\t# starting point is greater \n\t\tif curr_sum > max_sum \n\t\t\tmax_sum = curr_sum \n\t\t\t# Update result if required \n\t\t\tstart_index := start \n\t\t\tend_index := end - 1\n\t\tend\n\t\t# Remove starting element of current window \n\t\tcurr_sum -= a[start] \n\t\t# slide window by 1 \n\t\tstart += 1\n\tend\n\t# Add max_sum k times \n\tmax_sum := max_sum * k \n\t# If there was no positive sum, return \n\t# 0 as result \n\tif max_sum == 0 \n\t\treturn 0\n\tend\n\t# Initialize starting point \n\tstart := 0\n\t# Initialize ending point \n\tend := 0\n\t# Traverse the given array \n\tfor i in 1:n \n\t\t# Update ending point \n\t\tend += 1\n\t\t# If sum of elements from current \n\t\t# starting point is greater \n\t\tif curr_sum > max_sum \n\t\t\tmax_sum = curr_sum \n\t\t\t# Update result if required \n\t\t\tstart_index := start \n\t\t\tend_index := end - 1\n\t\tend\n\t\t# Remove starting element of current window \n\t\tcurr_sum -= a[start] \n\t\t# slide window by 1 \n\t\tstart += 1\n\tend\n\t# Return maximum sum \n\treturn max_sum \nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_sub_array_sum, max_wrap * (k - 2) + max_sub_array_sum)\n\telse\n\t\treturn max_sub_array_sum\n\tend\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = sum(a) \n\tmax_here = sum(a) ",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far > 0\n\t\treturn max(max_so_far, max_subarray_sum * (k - 2))\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_sub_array_sum, max_wrap * (k - 2) + max_sub_array_sum)\n\telse\n\t\treturn max_sub_array_sum\n\tend\nend",
    "\t# k is an integer denoting the number of times the given vector is repeated\n\t# n is an integer denoting the size of the given vector\n\t# a is a vector of size n containing integers\n\t# max_sum_array is a vector of size k containing the maximum sum of contiguous subarrays of size n in the modified vector\n\tmax_sum_array = zeros(Int64, k)\n\t# max_ending_here is a variable to store the maximum sum of contiguous subarray that ends at index i in the modified vector\n\tmax_ending_here = 0\n\t# max_so_far is a variable to store the maximum sum of contiguous subarray in the modified vector\n\tmax_so_far = 0\n\t# max_element is a variable to store the maximum element in the given vector\n\tmax_element = 0\n\t# sum_of_array is a variable to store the sum of the given vector\n\tsum_of_array = 0\n\t# i is a variable to iterate over the given vector\n\t# j is a variable to iterate over the modified vector\n\t# m is a variable to iterate over the max_sum_array\n\tfor i in 1:n\n\t\tif a[i] > max_element\n\t\t\tmax_element = a[i]\n\t\tend\n\t\tsum_of_array += a[i]\n\tend\n\tif max_element <= 0\n\t\treturn max_element * k\n\tend\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sum_array[1] = max_so_far\n\tfor m in 2:k\n\t\tmax_sum_array[m] = max_sum_array[m - 1] + sum_of_array\n\t\tif max_sum_array[m] < max_sum_array[m - 1]\n\t\t\tmax_sum_array[m] = max_",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat the array\n\t\"\"\"\n\t\n\t# find the max sum of the array\n\tmax_sum = max_sub_array_sum(a, n)\n\t\n\t# find the sum of the array\n\ttotal_sum = sum(a)\n\t\n\t# find the max sum of the repeated array\n\tmax_sum_repeated = max_sum + (total_sum * (k - 2))\n\t\n\t# return the max sum of the repeated array\n\treturn max_sum_repeated\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(max_ending_here, 0)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is the size of the vector\n\t# a is the vector\n\t\n\t# initialize the max sum\n\tmax_sum = 0\n\t\n\t# initialize the max sum of the vector\n\tmax_sum_vector = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_2 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_3 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_4 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_5 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_6 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_7 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_8 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_9 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_10 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_11 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_12 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_13 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_14 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_15 = 0\n\t\n\t# initialize the max sum of the vector repeated\n\tmax_sum_vector_repeated_16 = 0\n\t\n\t# initialize the max sum of the",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here - a[i] + a[i]\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\tend\n\tfor i in 1:k-1\n\t\tmax_ending_here = 0\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\tend\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tfor j in 1:n\n\t\t\tmax_ending_here = max_ending_here - a[j] + a[j]\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t# returns the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\n\t\n\t# initialize variables\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# find the maximum sum subarray in first iteration\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# initialize variables\n\tmax_ending_here = 0\n\twrap = 0\n\t\n\t# find the maximum sum of the subarray that includes the wrap around\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif wrap < max_ending_here\n\t\t\twrap = max_ending_here\n\t\tend\n\tend\n\t\n\t# initialize variables\n\tmax_ending_here = 0\n\t\n\t# find the maximum sum of the subarray that doesn't include the wrap around\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# return the maximum sum of the subarray that doesn't include the wrap around if the wrap around is negative\n\tif wrap < 0\n\t\treturn max_so_far\n\tend\n\t\n\t# return the maximum sum of the subarray that includes the wrap around if the wrap around is positive\n\treturn max(max_so_far, wrap + max_so_far)\nend\n",
    "\t# k is an integer denoting the number of times the given vector is repeated\n\t# n is an integer denoting the size of the given vector\n\t# a is a vector of size n\n\t# The function should return an integer denoting the largest sum of a contiguous vector in the modified vector\n\t# The function should return -1 if the modified vector is empty\n\t\n\t# Write your code here\n\t\n\t\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is a vector of size n\n\t# return the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times\n\t\n\t# initialize the max_so_far and max_ending_here\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# loop through the vector\n\tfor i in 1:n\n\t\t# update the max_ending_here\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\t\n\t\t# if the max_ending_here is less than 0, then set it to 0\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\t\n\t\t# update the max_so_far\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# initialize the max_ending_here and max_ending_here_temp\n\tmax_ending_here = 0\n\tmax_ending_here_temp = 0\n\t\n\t# loop through the vector\n\tfor i in 1:n\n\t\t# update the max_ending_here\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\t\n\t\t# update the max_ending_here_temp\n\t\tmax_ending_here_temp = max_ending_here_temp + a[i]\n\t\t\n\t\t# if the max_ending_here is less than 0, then set it to 0\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\t\n\t\t# update the max_so_far\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# initialize the sum\n\tsum = 0\n\t\n\t# loop through the vector\n\tfor i in 1:n\n\t\t# update",
    "\t# k is an integer denoting the number of times the given vector is repeated.\n\t# n is an integer denoting the size of the given vector.\n\t# a is the given vector.\n\t\n\t# Initialize result \n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# Find the maximum sum subarray in first window of size n \n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# Find the maximum sum subarray in remaining windows of size n \n\tfor i in n+1:n*k\n\t\tmax_ending_here = max_ending_here + a[i % n]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\tmax_wrap = max_wrap * k\n\tend\n\treturn max(max_subarray_sum, max_wrap)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\tend\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\tend\n\treturn max_so_far\nend",
    "\t# kadane's algorithm\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend",
    "\t\n\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tcurr_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\t\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i = n+1:n*k\n\t\tcurr_sum += a[i % n + 1] - a[i - n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t\n\t# Find sum of first window of size n \n\tfor i in 1:n \n\t\tmax_sum += a[i] \n\tend\n\t\n\t# Compute sums of remaining windows by removing \n\t# first element of previous window and adding last element of current window. \n\tcurr_sum := max_sum \n\tfor i in n+1:length(a) \n\t\tcurr_sum += a[i] - a[i-n] \n\t\tmax_sum = max(max_sum, curr_sum) \n\tend\n\t\n\t# max sum is of size n. The problem is now reduced to find maximum sum of a \n\t# circular subarray of given n elements. \n\treturn max(max_sum, curr_sum) \nend",
    "    max_so_far = 0\n    max_ending_here = 0\n    for i in 1:n\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here\n            max_so_far = max_ending_here\n        end\n    end\n    max_subarray_sum = max_so_far\n    for i in 1:n\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here\n            max_so_far = max_ending_here\n        end\n    end\n    max_wrap = max_so_far\n    if max_wrap > 0\n        return max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n    else\n        return max_subarray_sum\n    end\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = sum(a[1:n]) \n\tmax_sum_so_far = max_sum ",
    "\t# Initialize result \n\tmax_sum := 0\n\t\n\t# Find sum of k subarrays \n\t# using formula \n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\tmax_sum := max_sum * k\n\t\n\t# Find sum of middle k \n\t# subarrays, i.e., \n\t# sum of all subarrays \n\t# from (n+1)/2 to n-1 \n\tcurr_sum := 0\n\tfor i in 1:n\n\t\tcurr_sum += a[i]\n\tend\n\tcurr_sum := curr_sum * floor(Int64, k/2)\n\t\n\t# If k is even \n\tif k % 2 == 0\n\t\tmax_sum -= curr_sum\n\tend\n\t\n\t# Find sum of subarray \n\t# (n+1)/2 to n-1 for \n\t# all k iterations \n\tfor i in 1:k\n\t\tcurr_sum := 0\n\t\tfor j in 1:n\n\t\t\tcurr_sum += a[j]\n\t\tend\n\t\tcurr_sum := curr_sum * floor(Int64, k/2)\n\t\t\n\t\t# If k is even \n\t\tif k % 2 == 0\n\t\t\tmax_sum -= curr_sum\n\t\tend\n\tend\n\t\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_sub_array_sum, max_wrap * (k - 2) + max_sub_array_sum)\n\telse\n\t\treturn max_sub_array_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Find the sum of the original array \n\tmax_sum = 0\n\tcurr_sum = 0\n\tfor i = 1:n \n\t\tcurr_sum += a[i] \n\tend\n\tmax_sum = curr_sum ",
    "\t# Initialize result \n\tmax_sum := 0\n\t\n\t# Consider all blocks starting with i. \n\tfor i in 1:n \n\t\tcurrent_sum := 0\n\t\t# Calculate sum of current block \n\t\tfor j in 1:n \n\t\t\tcurrent_sum += a[j]\n\t\tend\n\t\t\n\t\t# Update result if required \n\t\tif current_sum > max_sum \n\t\t\tmax_sum := current_sum\n\t\tend\n\tend\n\t\n\t# Return result \n\treturn max_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far > 0\n\t\treturn max(max_so_far, max_subarray_sum * (k - 2))\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# k is an integer denoting the number of times the array is repeated.\n\t# n is an integer denoting the size of the array.\n\t# a is an array of integers denoting the elements in the array.\n\t\n\t# Compute sum of all elements\n\ttotal_sum = sum(a)\n\t\n\t# Compute sum of i*arr[i] for initial\n\t# array. \n\tcurr_val = 0\n\tfor i in 1:n\n\t\tcurr_val += i*a[i]\n\tend\n\t\n\t# Initialize result\n\tmax_val = curr_val\n\t\n\t# Compute values for other iterations\n\tfor j in 1:(k-1)\n\t\tcurr_val = curr_val + total_sum - n*a[n]\n\t\tmax_val = max(max_val, curr_val)\n\tend\n\t\n\treturn max_val\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t# Consider all blocks starting with i. \n\tfor i in 1:n\n\t\tcurr_sum := 0\n\t\t# Calculate sum of current block \n\t\tfor j in i:n\n\t\t\tcurr_sum += a[j]\n\t\tend\n\t\t# Update result if required \n\t\tmax_sum := max(max_sum, curr_sum)\n\tend\n\t# max sum is sum of single block \n\t# when k is 1. \n\tif k == 1\n\t\treturn max_sum\n\tend\n\t# Initialize result for any other k \n\trepeat_sum := 0\n\tfor i in 1:n\n\t\trepeat_sum += a[i]\n\tend\n\t# Initialize result \n\tmax_sum := max(max_sum, repeat_sum)\n\t# Choose every block and add to next \n\t# block k times and calculate max sum \n\tfor i in 1:n\n\t\tcurr_sum := 0\n\t\tfor j in i:n\n\t\t\tcurr_sum += a[j]\n\t\t\tmax_sum := max(max_sum, curr_sum + (k - 2) * repeat_sum)\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\tmax_wrap = max_wrap * k\n\tend\n\treturn max(max_subarray_sum, max_wrap)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\t\n\t# Compute sums of remaining windows by \n\t# removing first element of previous \n\t# window and adding last element of \n\t# current window. \n\tcurr_sum = max_sum\n\tfor i in n+1:n*k\n\t\tcurr_sum += a[i % n] - a[(i-n) % n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\t\n\treturn max_sum\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t\n\t# find the maximum sum of the original vector\n\tmax_sum = max_sub_array_sum(a, n)\n\t\n\t# find the sum of the original vector\n\tsum_of_a = sum(a)\n\t\n\t# find the sum of the repeated vector\n\tsum_of_repeated_a = sum_of_a * k\n\t\n\t# find the sum of the middle part of the repeated vector\n\tsum_of_middle = sum_of_repeated_a - max_sum\n\t\n\t# find the maximum sum of the repeated vector\n\tmax_sum_repeated = sum_of_middle + max_sum\n\t\n\treturn max_sum_repeated\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is a vector of size n\n\t\n\t# create a new vector of size n*k\n\tb = zeros(Int64, n*k)\n\t\n\t# fill the new vector with the repeated vector\n\tfor i in 1:k\n\t\tb[(i-1)*n+1:i*n] = a\n\tend\n\t\n\t# find the largest sum of a contiguous vector in the new vector\n\tmax_sub_array_sum(b, n*k)\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far > 0\n\t\treturn max(max_so_far, max_subarray_sum * (k - 2))\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\treturn max_so_far\n\tend\n\tmax_so_far_all = 0\n\tfor i in 1:n\n\t\tmax_so_far_all += a[i]\n\tend\n\tmax_so_far_all = max_so_far_all * k\n\tmax_so_far_wrap = 0\n\tfor i in 1:n\n\t\tmax_so_far_wrap += a[i]\n\t\tif max_so_far_wrap < 0\n\t\t\tmax_so_far_wrap = 0\n\t\tend\n\t\tif max_so_far_wrap > max_so_far\n\t\t\tmax_so_far = max_so_far_wrap\n\t\tend\n\tend\n\tmax_so_far_wrap = 0\n\tfor i in n:-1:1\n\t\tmax_so_far_wrap += a[i]\n\t\tif max_so_far_wrap < 0\n\t\t\tmax_so_far_wrap = 0\n\t\tend\n\t\tif max_so_far_wrap > max_so_far\n\t\t\tmax_so_far = max_so_far_wrap\n\t\tend\n\tend\n\treturn max(max_so_far, max_so_far_all - max_so_far_wrap)\nend",
    "\t\n\t# Find the sum of the first window of size n \n\tmax_sum := sum(a[1:n]) \n\t\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tcurr_sum := max_sum \n\tfor i in n+1:length(a) \n\t\tcurr_sum := curr_sum + a[i] - a[i-n] \n\t\tmax_sum := max(max_sum, curr_sum) \n\tend \n\t\n\t# Return maximum sum of k consecutive \n\t# windows of size n. \n\treturn max_sum * k \nend ",
    "\t# Find the sum of the original array \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\t\n\t# Find the sum of the middle elements \n\t# i.e. sum of the subarray between two middle \n\t# partitions \n\tmax_sum = max_sum * k \n\t\n\t# Find the sum of the elements of the middle \n\t# partition \n\tcurr_sum = 0\n\tfor i = 1:n\n\t\tcurr_sum += a[i]\n\tend\n\tcurr_sum = curr_sum * k \n\t\n\t# Find the sum of the right partition \n\t# (The right partition has n elements) \n\tright_sum = 0\n\tfor i = n + 1:2 * n\n\t\tright_sum += a[i]\n\tend\n\t\n\t# Find the sum of the left partition \n\t# (The left partition has n elements) \n\tleft_sum = 0\n\tfor i = 0:n - 1\n\t\tleft_sum += a[i]\n\tend\n\t\n\t# Find the maximum sum by comparing \n\t# the above three sums \n\treturn max(max_sum, curr_sum, left_sum + right_sum) \nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = maximum(cumsum(a)) \n\tmax_ending_here = 0\n\tfor i = 1:n \n\t\tmax_ending_here = max_ending_here + a[i] \n\tend\n\tfor i = n+1:n*k \n\t\tmax_ending_here = max_ending_here + a[i%n + 1] - a[i - n + 1] \n\t\tmax_sum = max(max_sum, max_ending_here) \n\tend\n\treturn max_sum \nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\t\tmax_ending_here = max(max_ending_here, 0)\n\t\tmax_so_far = max(max_so_far, max_ending_here)\n\tend\n\treturn max_so_far * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\tcurr_sum = max_sum\n\tfor i in n+1:n*k\n\t\tcurr_sum += a[i % n] - a[i - n]\n\t\tmax_sum = max(max_sum, curr_sum)\n\tend\n\treturn max_sum\nend",
    "\t# Initialize result \n\tmax_sum := 0\n\t# Consider all blocks starting with i. \n\tfor i in 1:n \n\t\tcurr_sum := 0\n\t\tfor j in 1:n \n\t\t\tcurr_sum += a[j]\n\t\t\tif j >= i \n\t\t\t\tmax_sum = max(max_sum, curr_sum)\n\t\t\tend\n\t\tend\n\tend\n\treturn max_sum * k\nend",
    "\t# Initialize result \n\tmax_sum = 0\n\t# Consider all blocks starting with i. \n\tfor i in 1:n \n\t\tcurr_sum = 0\n\t\tfor j in 1:n \n\t\t\tcurr_sum += a[j] \n\t\t\tmax_sum = max(max_sum, curr_sum) \n\t\tend\n\tend\n\treturn max_sum * k \nend",
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum := sum(a[1:n]) \n\twindow_sum := max_sum \n\t\n\t# Compute sums of remaining windows by \n\t# removing first element of previous \n\t# window and adding last element of \n\t# current window. \n\tfor i in n+1:length(a) \n\t\twindow_sum := window_sum + a[i] - a[i-n] \n\t\tmax_sum := max(max_sum, window_sum) \n\tend \n\t\n\t# max sum is of size n so \n\t# we need to multiply \n\t# with k \n\treturn max_sum * k \nend ",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat array\n\t\"\"\"\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find min subarray sum for the original array\n\tmin_sub_array_sum(a, n)\n\t\n\t# find max subarray sum for the original array\n\tmax_sub_array_sum(a, n)\n\t\n\t# find",
    "\t# k is an integer denoting the number of times the array is repeated.\n\t# n is an integer denoting the size of the array.\n\t# a is an array of integers denoting the elements of the array.\n\t\n\t# Initialize result\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\t\n\t# Initialize circular sum\n\tcircular_sum = 0\n\t\n\t# Compute sum of all array elements\n\tfor i in 1:n\n\t\tcircular_sum += a[i]\n\t\tmax_ending_here += i * a[i]\n\tend\n\t\n\t# Initialize min and max values\n\tmin_val = max_ending_here\n\tmax_val = max_ending_here\n\t\n\t# Compute sum of array rotation\n\t# by changing minimum and maximum values\n\tfor j in 2:n\n\t\tcurr_val = max_ending_here - (circular_sum - a[j-1]) + a[j-1] * (n-1)\n\t\tmax_ending_here = curr_val\n\t\tif curr_val > max_val\n\t\t\tmax_val = curr_val\n\t\tend\n\t\tif curr_val < min_val\n\t\t\tmin_val = curr_val\n\t\tend\n\tend\n\t\n\t# Compute maximum circular sum\n\tmax_circular_sum = (max_val * k) + (circular_sum * (k-1) * k / 2)\n\t\n\t# Return maximum circular sum\n\treturn max_circular_sum\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\tmax_so_far = maximum(a)\n\tend\n\treturn max_so_far * k\nend",
    "\t# max_so_far = 0\n\t# max_ending_here = 0\n\t# for i in 1:n\n\t# \tmax_ending_here = max_ending_here + a[i]\n\t# \tif max_ending_here < 0\n\t# \t\tmax_ending_here = 0\n\t# \tend\n\t# \tif max_so_far < max_ending_here\n\t# \t\tmax_so_far = max_ending_here\n\t# \tend\n\t# end\n\t# return max_so_far * k\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_so_far == 0\n\t\treturn max_so_far\n\tend\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far * k\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat array\n\t\"\"\"\n\t# find max subarray sum for first array\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# find max subarray sum for second array\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\t\n\t# find max subarray sum for repeated array\n\tmax_so_far = max_so_far * k\n\t\n\t# find max subarray sum for middle part\n\tsum = 0\n\tfor i in 1:n\n\t\tsum = sum + a[i]\n\tend\n\t\n\tmax_so_far = max_so_far + sum * (k - 2)\n\t\n\treturn max_so_far\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: size of array\n\tk: number of times to repeat the array\n\t\"\"\"\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_single = max_so_far\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_double = max_so_far\n\tif k == 2\n\t\treturn max_double\n\tend\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_triple = max_so_far\n\tif k == 3\n\t\treturn max_triple\n\tend\n\treturn max(max_single + max_double + max_triple, max_single + max_double, max_single + max_triple, max_double + max_triple)\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\twindow_sum = 0\n\tfor i in 1:n\n\t\tmax_sum += a[i]\n\tend\n\twindow_sum = max_sum\n\tfor i in n+1:2*n\n\t\twindow_sum += a[i] - a[i-n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i in 2:k\n\t\twindow_sum = window_sum + a[i*n] - a[(i-1)*n]\n\t\tmax_sum = max(max_sum, window_sum)\n\tend\n\treturn max_sum\nend"
  ]
}