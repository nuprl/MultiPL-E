{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the largest sum of a contiguous vector in the modified vector which is formed by repeating the given vector k times.\n\t\"\"\"\nfunction max_sub_array_sum_repeated(a::Vector{Int64}, n::Int64, k::Int64)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = max_sub_array_sum_repeated;\n\t@test(candidate([10, 20, -30, -1], 4, 3) == 30)\n\t@test(candidate([-1, 10, 20], 3, 2) == 59)\n\t@test(candidate([-1, -2, -3], 3, 3) == -1)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\n\t# Compute sum of first window of size n \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_so_far = max_so_far + a[i]\n\t\tif max_so_far < 0\n\t\t\tmax_so_far = 0\n\t\tend\n\t\tif max_so_far > max_sub_array_sum\n\t\t\tmax_sub_array_sum = max_so_far\n\t\tend\n\tend\n\treturn max_sub_array_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Find the sum of the original array \n\tmax_sum := sum(a) \n\t\n\t# Find the sum of the elements which are \n\t# to be repeated k times \n\trepeat_sum := sum(a[i] for i in 1:n if a[i] < 0) \n\t\n\t# Find the maximum sum of the subarray \n\t# which is formed by repeating the original \n\t# array k times \n\tmax_sum := max(max_sum, repeat_sum * k) \n\t\n\t# Find the sum of the subarray which is \n\t# formed by repeating the original array \n\t# k-1 times \n\trepeat_sum := repeat_sum * k \n\t\n\t# Traverse the original array and find \n\t# the maximum sum of the subarray which \n\t# is formed by repeating the original \n\t# array k-1 times \n\tfor i in 1:n \n\t\trepeat_sum := repeat_sum - a[i] * (k-1) \n\t\tmax_sum := max(max_sum, repeat_sum) \n\tend\n\t\n\treturn max_sum \nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = sum(a) \n\tcurr_sum = max_sum \n\tfor i = 1:n-1 \n\t\tcurr_sum = curr_sum + a[i] \n\tend\n\tmax_sum = max(max_sum, curr_sum) \n\t\n\t# Find the maximum sum subarray in remaining windows by \n\t# removing first element of previous window and adding \n\t# last element of current window. \n\tfor i = n:length(a) \n\t\tcurr_sum = curr_sum + a[i] - a[i-n] \n\t\tmax_sum = max(max_sum, curr_sum) \n\tend\n\t\n\t# Return maximum sum of k non-overlapping contiguous subarrays \n\treturn max_sum * k \nend",
    "\t# k is an integer denoting the number of times the vector is repeated\n\t# n is an integer denoting the size of the vector\n\t# a is the vector\n\t\n\t# find the maximum subarray sum for the vector\n\tmax_sub_array_sum(a, n)\n\t\n\t# find the minimum subarray sum for the vector\n\tmin_sub_array_sum(a, n)\n\t\n\t# find the sum of the whole array\n\tsum_array(a, n)\n\t\n\t# find the maximum subarray sum for the repeated vector\n\tmax_sub_array_sum_repeated = max(max_sub_array_sum(a, n) * (k - 2) + sum_array(a, n), max_sub_array_sum(a, n), max_sub_array_sum(a, n) + sum_array(a, n) * (k - 2))\n\t\n\treturn max_sub_array_sum_repeated\nend",
    "\t# Find the sum of first window of size n \n\tmax_sum = sum(a[1:n]) \n\twindow_sum = max_sum ",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here += a[i]\n\tend\n\tmax_so_far = max_ending_here\n\tfor i in 1:k-1\n\t\tfor j in 1:n\n\t\t\tmax_ending_here += a[j]\n\t\t\tmax_ending_here = max(0, max_ending_here)\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\tend\n\treturn max_so_far\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i = 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_sub_array_sum = max_so_far\n\tfor i = 1:n\n\t\tmax_so_far = max_so_far + a[i]\n\t\tif max_so_far > max_sub_array_sum\n\t\t\tmax_sub_array_sum = max_so_far\n\t\tend\n\tend\n\treturn max_sub_array_sum * k\nend",
    "\t# Initialize result \n\tmax_sum = 0\n\t\n\t# Consider all blocks starting with i. \n\tfor i in 1:n\n\t\tcurrent_sum = 0\n\t\t\n\t\t# Calculate sum of current block \n\t\tfor j in 1:n\n\t\t\tcurrent_sum += a[j]\n\t\tend\n\t\t\n\t\t# Update result if required \n\t\tmax_sum = max(max_sum, current_sum)\n\t\t\n\t\t# Calculate sum of next block \n\t\t# considering previous block \n\t\tif(i < n)\n\t\t\tfor j in 1:n-i\n\t\t\t\tcurrent_sum += a[j] - a[j+i]\n\t\t\tend\n\t\t\t\n\t\t\t# Update result if required \n\t\t\tmax_sum = max(max_sum, current_sum)\n\t\tend\n\tend\n\t\n\treturn max_sum * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t\"\"\"\n\ta: vector\n\tn: length of vector\n\tk: number of times to repeat vector\n\t\"\"\"\n\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_kadane = max_so_far\n\tmax_wrap = 0\n\tfor i in 1:n\n\t\tmax_wrap = max_wrap + a[i]\n\tend\n\tif max_wrap < 0\n\t\treturn max_kadane\n\tend\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max(max_so_far, max_wrap * (k - 2) + max_kadane)\nend",
    "\t# Compute sum of first window of size n \n\tmax_sum = 0 \n\twindow_sum = 0 \n\tfor i = 1:n \n\t\twindow_sum += a[i] \n\tend\n\tmax_sum = window_sum \n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i = n + 1:n * k \n\t\twindow_sum += a[i] - a[i - n] \n\t\tmax_sum = max(max_sum, window_sum) \n\tend\n\treturn max_sum \nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = 0\n\tfor i = 1:n\n\t\tmax_sum += a[i]\n\tend\n\tmax_sum_so_far = max_sum\n\t# Compute sums of remaining windows by removing first element of previous window and adding last element of current window. \n\tfor i = n+1:length(a)\n\t\tmax_sum += a[i] - a[i-n]\n\t\tmax_sum_so_far = max(max_sum_so_far, max_sum)\n\tend\n\t# Return maximum sum of k consecutive subarrays \n\treturn max_sum_so_far * k\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\tmax_so_far = 0\n\tmax_ending_here = 0\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_subarray_sum = max_so_far\n\tfor i in 1:n\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_wrap = max_so_far\n\tif max_wrap > 0\n\t\treturn max(max_subarray_sum, max_wrap * (k - 2) + max_subarray_sum)\n\telse\n\t\treturn max_subarray_sum\n\tend\nend",
    "\t\n\t# Find the maximum sum subarray in first window of size n \n\tmax_sum = sum(a[1:n]) \n\tcurr_sum = max_sum \n\t\n\t# Move the window by one element. \n\tfor i in 2:n \n\t\tcurr_sum = curr_sum + a[i] - a[i-n] \n\t\tmax_sum = max(max_sum, curr_sum) \n\tend \n\t\n\t# max sum is greater than 0, then update overall max sum. \n\tif max_sum > 0\n\t\tmax_sum = max_sum * k \n\tend \n\t\n\t# Find the maximum sum of subarray with middle \n\t# part entirely in second window \n\t\n\t# Find the sum of middle part (entirely in second window) \n\tmid_sum = sum(a[n+1:2n]) \n\t\n\t# Initialize the max and min of middle part \n\tmid_max_sum = mid_sum \n\tmid_min_sum = mid_sum \n\t\n\t# Consider every subarray starting from i and ending at j \n\t# and update max and min of middle part \n\tfor i in n+1:2n-1\n\t\tmid_sum = mid_sum + a[i] - a[i-n] \n\t\tmid_max_sum = max(mid_max_sum, mid_sum) \n\t\tmid_min_sum = min(mid_min_sum, mid_sum) \n\tend \n\t\n\t# Handle all cases where middle part lies in \n\t# first and second window \n\tleft_sum = 0\n\tfor i in 1:n \n\t\tleft_sum += a[i] \n\t\tmax_sum = max(max_sum, left_sum + mid_max_sum) \n\t\tmin_sum = min(min_sum, left_sum + mid_min_sum) \n\tend \n\t\n\tright_sum = 0\n\tfor i in 2n:3n-1 \n\t\tright_sum += a[i] \n\t\tmax",
    "\t# k is an integer denoting the number of times the array is repeated\n\t# n is the size of the array\n\t# a is the array\n\t\n\t# initialize the max_so_far and max_ending_here\n\tmax_so_far = Int64(0)\n\tmax_ending_here = Int64(0)\n\t\n\t# initialize the sum of the array\n\tsum_of_array = Int64(0)\n\t\n\t# calculate the sum of the array\n\tfor i in 1:n\n\t\tsum_of_array += a[i]\n\tend\n\t\n\t# if the sum of the array is positive, then the max sum is the sum of the array multiplied by k\n\tif sum_of_array > 0\n\t\treturn sum_of_array * k\n\tend\n\t\n\t# if the sum of the array is negative, then the max sum is the max sum of the array\n\tif sum_of_array < 0\n\t\tmax_so_far = a[1]\n\t\tmax_ending_here = a[1]\n\t\t\n\t\tfor i in 2:n\n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\t\t\n\t\treturn max_so_far\n\tend\n\t\n\t# if the sum of the array is zero, then the max sum is the max sum of the array\n\tif sum_of_array == 0\n\t\tmax_so_far = a[1]\n\t\tmax_ending_here = a[1]\n\t\t\n\t\tfor i in 2:n\n\t\t\tmax_ending_here = max(a[i], max_ending_here + a[i])\n\t\t\tmax_so_far = max(max_so_far, max_ending_here)\n\t\tend\n\t\t\n\t\treturn max_so_far\n\tend\nend"
  ]
}