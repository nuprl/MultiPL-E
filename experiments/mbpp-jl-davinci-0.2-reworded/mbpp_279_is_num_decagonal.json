{
  "name": "mbpp_279_is_num_decagonal",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the nth decagonal number.\n\t\"\"\"\nfunction is_num_decagonal(n::Int64)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = is_num_decagonal;\n\t@test(candidate(3) == 27)\n\t@test(candidate(7) == 175)\n\t@test(candidate(10) == 370)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\tif (sqrt(1+4*2*n) % 1 == 0) && (sqrt(1+4*2*n) % 2 == 1)\n\t\treturn 1\n\telse\n\t\treturn 0\n\tend\nend",
    "\t\"\"\"\n\tReturn 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\tif is_num_pentagonal(n) == 1 && is_num_triangular(n) == 1\n\t\treturn 1\n\telse\n\t\treturn 0\n\tend\nend",
    "\t\"\"\"\n\tReturn 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\tif is_num_pentagonal(n) == 1 && is_num_hexagonal(n) == 1\n\t\treturn 1\n\telse\n\t\treturn 0\n\tend\nend",
    "\t\"\"\"\n\tCheck if n is a decagonal number.\n\t\"\"\"\n\tif (sqrt(1 + 4*2*n) + 1) % 4 == 0\n\t\treturn 1\n\telse\n\t\treturn 0\nend",
    "\t\"\"\"\n\tReturns 1 if n is a decagonal number, 0 otherwise.\n\t\"\"\"\n\tif n == 0\n\t\treturn 0\n\tend\n\tif n == 1\n\t\treturn 1\n\tend\n\tif is_num_pentagonal(n) == 1\n\t\treturn 1\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\tif sqrt(1 + 4*2*n) % 1 == 0\n\t\tif (sqrt(1 + 4*2*n) + 1) % 4 == 0\n\t\t\treturn 1\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\treturn is_num_pentagonal(3n*n-n)/2\nend",
    "\treturn (sqrt(1 + 4*2*n) - 1)/2\nend",
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\tif is_num_triangular(n) == 1\n\t\treturn 1\n\telse\n\t\treturn 0\n\tend\nend",
    "\treturn 10*(n*(3*n - 1))/2\nend",
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\tif (sqrt(1 + 4*2*n) + 1) % 4 == 0\n\t\treturn 1\n\telse\n\t\treturn 0\n\tend\nend",
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\treturn (sqrt(1 + 4*2*n) - 1) % 4 == 0\nend",
    "\treturn (sqrt(1 + 4*2*n) + 1)/4\nend",
    "\t\"\"\"\n\tCheck if n is decagonal number.\n\t\"\"\"\n\tif sqrt(1+4*2*n) % 1 == 0\n\t\tif (sqrt(1+4*2*n) + 1) % 4 == 0\n\t\t\treturn 1\n\t\tend\n\tend\n\treturn 0\nend",
    "\treturn (sqrt(1 + 4*2*n) + 1)/2 % 1 == 0\nend",
    "\tif n == 1\n\t\treturn 1\n\tend\n\treturn 10*(n-1) + is_num_decagonal(n-1)\nend",
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\tif n == 0\n\t\treturn 0\n\tend\n\tif n == 1\n\t\treturn 1\n\tend\n\tif is_num_decagonal(n-1) == 1\n\t\treturn 1\n\tend\n\tif is_num_decagonal(n-1) == 0\n\t\treturn 0\n\tend\nend",
    "\treturn (sqrt(1 + 4*2*n) - 1)/2\nend",
    "\t\"\"\"\n\tReturns 1 if n is decagonal, 0 otherwise\n\t\"\"\"\n\tif (sqrt(1+4*2*n) % 2 == 1) && (sqrt(1+4*2*n) % 4 == 3)\n\t\treturn 1\n\telse\n\t\treturn 0\n\tend\nend",
    "\t\"\"\"\n\tReturn 1 if n is decagonal, 0 otherwise.\n\t\"\"\"\n\treturn (sqrt(1 + 4*2*n) - 1)/2 % 1 == 0 ? 1 : 0\nend"
  ]
}