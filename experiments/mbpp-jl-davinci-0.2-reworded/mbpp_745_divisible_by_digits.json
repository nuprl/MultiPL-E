{
  "name": "mbpp_745_divisible_by_digits",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\treturn filter(x -> all(mod.(x, digits(x)) .== 0), startnum:endnum)\nend",
    "\t\"\"\"\n\tReturns a vector of numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend",
    "\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend",
    "\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend",
    "\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend",
    "\treturn filter(x -> all(x % y == 0 for y in digits(x)), startnum:endnum)\nend",
    "\treturn filter(x->all(x%digits(x) .== 0), startnum:endnum)\nend",
    "\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend",
    "\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend",
    "    return filter(x->all(x % parse(Int64, y) == 0 for y in string(x)), startnum:endnum)\nend",
    "\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend",
    "\t\"\"\"\n\tFind numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend",
    "\t# Vector to store the numbers\n\tnumbers = []\n\tfor i in startnum:endnum\n\t\t# Check if the number is divisible by every digit it contains\n\t\tif all(i % parse(Int64, digit) == 0 for digit in string(i))\n\t\t\tpush!(numbers, i)\n\t\tend\n\tend\n\treturn numbers\nend",
    "\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend",
    "\t\"\"\"\n\tReturns a vector of numbers between startnum and endnum that are divisible by every digit they contain.\n\t\"\"\"\n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tif divisible_by_digits(i)\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "\treturn [x for x in startnum:endnum if all([x % int(i) == 0 for i in string(x)])]\nend",
    "\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend",
    "    return [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend",
    "    return [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend",
    "\treturn filter(x -> all(x % y == 0 for y in digits(x)), startnum:endnum)\nend"
  ]
}