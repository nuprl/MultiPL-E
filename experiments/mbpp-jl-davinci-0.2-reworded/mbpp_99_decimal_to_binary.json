{
  "name": "mbpp_99_decimal_to_binary",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\t\"\"\"\nfunction decimal_to_binary(n::Int64)::String \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = decimal_to_binary;\n\t@test(candidate(8) == \"1000\")\n\t@test(candidate(18) == \"10010\")\n\t@test(candidate(7) == \"111\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tresult = \"\"\n\twhile n > 0\n\t\tresult = string(n % 2) * result\n\t\tn = n \u00f7 2\n\tend\n\treturn result\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tbinary = \"\"\n\twhile n > 0\n\t\tbinary = string(n % 2) * binary\n\t\tn = div(n, 2)\n\tend\n\treturn binary\nend",
    "\treturn string(n, base=2)\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tbinary = \"\"\n\twhile n > 0\n\t\tbinary = string(n % 2) * binary\n\t\tn = div(n, 2)\n\tend\n\treturn binary\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tbinary = \"\"\n\twhile n > 0\n\t\tbinary = string(n % 2) * binary\n\t\tn = div(n, 2)\n\tend\n\treturn binary\nend",
    "\tif n == 0 \n\t\treturn \"0\"\n\tend\n\t\n\tbinary_string = \"\"\n\twhile n > 0 \n\t\tbinary_string = string(n % 2) * binary_string\n\t\tn = n \u00f7 2\n\tend\n\treturn binary_string\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tbinary = \"\"\n\twhile n > 0\n\t\tbinary = string(n % 2) * binary\n\t\tn = n \u00f7 2\n\tend\n\treturn binary\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tresult = \"\"\n\twhile n > 0\n\t\tresult = string(n % 2) * result\n\t\tn = n \u00f7 2\n\tend\n\treturn result\nend",
    "\tresult = \"\"\n\twhile n != 0\n\t\tresult = string(n % 2) * result\n\t\tn = div(n, 2)\n\tend\n\treturn result\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tif n == 1\n\t\treturn \"1\"\n\tend\n\tif n % 2 == 0\n\t\treturn decimal_to_binary(n \u00f7 2) * \"0\"\n\telse\n\t\treturn decimal_to_binary(n \u00f7 2) * \"1\"\n\tend\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tbinary_string = \"\"\n\twhile n > 0\n\t\tbinary_string = string(n % 2) * binary_string\n\t\tn = n \u00f7 2\n\tend\n\treturn binary_string\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tif n == 1\n\t\treturn \"1\"\n\tend\n\tif n < 0\n\t\treturn \"-\"*decimal_to_binary(-n)\n\tend\n\tif n%2 == 0\n\t\treturn decimal_to_binary(n\u00f72) * \"0\"\n\telse\n\t\treturn decimal_to_binary((n-1)\u00f72) * \"1\"\n\tend\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tif n == 1\n\t\treturn \"1\"\n\tend\n\tif n % 2 == 0\n\t\treturn decimal_to_binary(n \u00f7 2) * \"0\"\n\telse\n\t\treturn decimal_to_binary(n \u00f7 2) * \"1\"\n\tend\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tif n == 1\n\t\treturn \"1\"\n\tend\n\tif n < 0\n\t\treturn \"-\" * decimal_to_binary(-n)\n\tend\n\tif n % 2 == 0\n\t\treturn decimal_to_binary(n \u00f7 2) * \"0\"\n\telse\n\t\treturn decimal_to_binary((n - 1) \u00f7 2) * \"1\"\n\tend\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tbinary_string = \"\"\n\twhile n != 0\n\t\tbinary_string = string(n % 2) * binary_string\n\t\tn = n \u00f7 2\n\tend\n\treturn binary_string\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tif n == 1\n\t\treturn \"1\"\n\tend\n\tif n < 0\n\t\treturn \"-\" * decimal_to_binary(-n)\n\tend\n\tif n % 2 == 0\n\t\treturn decimal_to_binary(n \u00f7 2) * \"0\"\n\telse\n\t\treturn decimal_to_binary(n \u00f7 2) * \"1\"\n\tend\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\tif n == 1\n\t\treturn \"1\"\n\tend\n\tif n < 0\n\t\treturn \"-\" * decimal_to_binary(abs(n))\n\tend\n\tif n % 2 == 0\n\t\treturn decimal_to_binary(n \u00f7 2) * \"0\"\n\telse\n\t\treturn decimal_to_binary(n \u00f7 2) * \"1\"\n\tend\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tbinary = \"\"\n\twhile n > 0\n\t\tbinary = string(n%2) * binary\n\t\tn = n \u00f7 2\n\tend\n\treturn binary\nend",
    "\t\"\"\"\n\tConvert the given decimal number to its binary equivalent.\n\t\"\"\"\n\tif n == 0\n\t\treturn \"0\"\n\tend\n\tif n == 1\n\t\treturn \"1\"\n\tend\n\tif n % 2 == 0\n\t\treturn decimal_to_binary(n \u00f7 2) * \"0\"\n\telse\n\t\treturn decimal_to_binary(n \u00f7 2) * \"1\"\n\tend\nend",
    "\tif n == 0\n\t\treturn \"0\"\n\tend\n\t\n\tresult = \"\"\n\twhile n > 0\n\t\tresult = string(n % 2) * result\n\t\tn = n \u00f7 2\n\tend\n\treturn result\nend"
  ]
}