{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\nfunction reverse_Array_Upto_K(input::Vector{Int64}, k::Int64)::Vector{Int64} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = reverse_Array_Upto_K;\n\t@test(candidate([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6])\n\t@test(candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7])\n\t@test(candidate([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tif k <= length(input)\n\t\treturn reverse(input[1:k])\n\telse\n\t\treturn reverse(input)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"K is greater than length of the array\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i], input[k] = input[k], input[i]\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\t\"\"\"\n\tinput: Vector of integers\n\tk: Integer\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse_Array(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\treturn [input[i] for i in k:-1:1]\nend",
    "\t\"\"\"\n\tinput: Vector of integers\n\tk: Integer\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\telse\n\t\treturn reverse(input[1:k])\n\tend\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k == 0\n\t\treturn input\n\tend\n\tif k == 1\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\tif k > length(input)\n\t\treturn reverse(input)\n\tend\n\tif k < length(input)\n\t\treturn reverse(input[1:k])\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k == 0\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse_Array(input[1:k]), k-1)\n\tend\nend",
    "\t\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tif i > length(input)\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif i <= k/2\n\t\t\ttemp = input[i]\n\t\t\tinput[i] = input[k - i + 1]\n\t\t\tinput[k - i + 1] = temp\n\t\tend\n\tend\n\t\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse_Array(input[1:k]), k)\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k - i + 1]\n\t\tinput[k - i + 1] = input[i] - input[k - i + 1]\n\t\tinput[i] = input[i] - input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\telse\n\t\treturn reverse(input[1:k])\n\tend\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\t\"\"\"\n\t\tThis function reverses a vector upto a given position.\n\t\t\n\t\tArgs:\n\t\t\tinput: Vector to be reversed.\n\t\t\tk: Position upto which the vector is to be reversed.\n\t\t\t\n\t\tReturns:\n\t\t\tVector: Reversed vector.\n\t\"\"\"\n\t\n\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\t\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\tif k > length(input)\n\t\t\tprintln(\"k is greater than the length of the vector\")\n\t\telse\n\t\t\tfor i in 1:k\n\t\t\t\tinput[i] = input[k-i+1]\n\t\t\tend\n\t\tend\n\t\treturn input\n\tend",
    "\t\"\"\"\n\tThis function takes a vector and a position and reverses the vector upto the given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"The position given is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tif i < k-i+1\n\t\t\ttemp = input[i]\n\t\t\tinput[i] = input[k-i+1]\n\t\t\tinput[k-i+1] = temp\n\t\tend\n\tend\n\treturn input\nend",
    "\treturn reverse(input[1:k])\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse_Array(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k/2\n\t\tinput[i], input[k-i+1] = input[k-i+1], input[i]\n\tend\n\treturn input\nend",
    "\tif k < length(input)\n\t\treturn reverse(input[1:k]) * input[k+1:end]\n\telse\n\t\treturn reverse(input)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tinput[1:k] = reverse(input[1:k])\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\t\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\tif k > length(input)\n\t\t\tprintln(\"k is greater than length of input\")\n\t\t\treturn input\n\t\tend\n\t\tif k < 1\n\t\t\tprintln(\"k is less than 1\")\n\t\t\treturn input\n\t\tend\n\t\treturn reverse_Array_Upto_K_Helper(input, 1, k)\n\tend",
    "\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k - i + 1]\n\t\tinput[k - i + 1] = input[i] - input[k - i + 1]\n\t\tinput[i] = input[i] - input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\toutput = input[1:k]\n\tfor i in 1:k\n\t\toutput[i] = input[k-i+1]\n\tend\n\treturn output\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tThis function reverses a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\treturn reverse(input[1:k])\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\tif k > length(input)\n\t\t\treturn input\n\t\telse\n\t\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\t\tend\n\tend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tif k == 0\n\t\tprintln(\"k is zero\")\n\t\treturn input\n\tend\n\tif k == 1\n\t\tprintln(\"k is one\")\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector\")\n\t\treturn reverse(input)\n\tend\n\tif k < length(input)\n\t\tprintln(\"k is less than the length of the vector\")\n\t\treturn reverse(input[1:k])\n\tend\nend",
    "\tif k > length(input)\n\t\tk = length(input)\n\tend\n\treverse_Array_Upto_K = input[1:k]\n\treverse_Array_Upto_K = reverse(reverse_Array_Upto_K)\n\treverse_Array_Upto_K = vcat(reverse_Array_Upto_K, input[k+1:end])\n\treturn reverse_Array_Upto_K\nend",
    "\tif k == 0\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\tif k > length(input)\n\t\treturn reverse(input)\n\tend\n\tif k < 0\n\t\treturn input\n\tend\n\t\n\treturn reverse(input[1:k]) * input[k+1:end]\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k - i + 1]\n\t\tinput[k - i + 1] = input[i] - input[k - i + 1]\n\t\tinput[i] = input[i] - input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\n\t# Check if k is greater than the length of the vector\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector. Returning the original vector.\")\n\t\treturn input\n\tend\n\t\n\t# Check if k is less than 1\n\tif k < 1\n\t\tprintln(\"k is less than 1. Returning the original vector.\")\n\t\treturn input\n\tend\n\t\n\t# Check if k is equal to 1\n\tif k == 1\n\t\tprintln(\"k is equal to 1. Returning the original vector.\")\n\t\treturn input\n\tend\n\t\n\t# Check if k is equal to the length of the vector\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector. Returning the reversed vector.\")\n\t\treturn reverse(input)\n\tend\n\t\n\t# Check if k is equal to the length of the vector\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector. Returning the reversed vector.\")\n\t\treturn reverse(input)\n\tend\n\t\n\t# Check if k is equal to the length of the vector\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector. Returning the reversed vector.\")\n\t\treturn reverse(input)\n\tend\n\t\n\t# Check if k is equal to the length of the vector\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector. Returning the reversed vector.\")\n\t\treturn reverse(input)\n\tend\n\t\n\t# Check if k is equal to the length of the vector\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector. Returning the reversed vector.\")\n\t\treturn reverse(input)\n\tend\n\t\n\t# Check if k is equal to the length of the vector\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector. Returning the reversed vector.\")\n\t\treturn reverse(input)\n\tend\n\t\n\t# Check if k is equal to the length of the vector\n\tif k == length(input)\n\t\tprintln(\"k is equal to the length of the vector",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\t\"\"\"\n\tThis function takes a vector and an integer as input and returns a vector.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K_Helper(input, k, 1)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\treturn reverse(input[1:k]) * input[k+1:end]\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\t\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than length of vector\")\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\tif k == 1\n\t\treturn input\n\tend\n\treturn reverse(input[1:k]) * input[k+1:end]\nend",
    "\tif k == 0\n\t\treturn input\n\tend\n\t\n\tif k == 1\n\t\treturn input\n\tend\n\t\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\t\n\tif k > length(input)\n\t\treturn reverse(input)\n\tend\n\t\n\treturn reverse(input[1:k])\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse_Array(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k - i + 1]\n\t\tinput[k - i + 1] = input[i] - input[k - i + 1]\n\t\tinput[i] = input[i] - input[k - i + 1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\t\tFunction to reverse a vector upto a given position.\n\t\t\n\t\tArgs:\n\t\t\tinput: Vector of integers\n\t\t\tk: Position upto which the vector is to be reversed\n\t\t\n\t\tReturns:\n\t\t\tVector of integers\n\t\"\"\"\n\t\n\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i], input[k] = input[k], input[i]\n\t\tk -= 1\n\tend\n\t\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"Error: k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\tif k > length(input)\n\t\t\tprintln(\"k is greater than length of input\")\n\t\t\treturn input\n\t\tend\n\t\tif k == length(input)\n\t\t\treturn reverse(input)\n\t\tend\n\t\treturn reverse(input[1:k]) * input[k+1:end]\n\tend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k/2\n\t\ttemp = input[i]\n\t\tinput[i] = input[k-i+1]\n\t\tinput[k-i+1] = temp\n\tend\n\treturn input\nend",
    "\tif k == 0\n\t\treturn input\n\tend\n\tif k == 1\n\t\treturn input\n\tend\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse_Array_Upto_K(input[1:k], k-1), k-1)\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\n\tend\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"K is greater than length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input vector\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"K is greater than length of array\")\n\t\treturn input\n\tend\n\ti = 1\n\twhile i <= k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\ti += 1\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\tif k == 0\n\t\treturn input\n\telse\n\t\treturn [reverse_Array_Upto_K(input[2:end], k-1); input[1]]\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k == 0\n\t\treturn input\n\tend\n\tif k == 1\n\t\treturn input\n\tend\n\tif k >= length(input)\n\t\treturn reverse(input)\n\tend\n\treturn [reverse(input[1:k]); input[k+1:end]]\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tn = length(input)\n\tfor i in 1:k\n\t\tj = n - i + 1\n\t\ttemp = input[i]\n\t\tinput[i] = input[j]\n\t\tinput[j] = temp\n\tend\n\treturn input\nend",
    "\t\n\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i = 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\t\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tif i == k\n\t\t\treturn input\n\t\tend\n\t\t\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\nend",
    "\t\"\"\"\n\tinput: Vector of integers.\n\tk: Integer upto which the vector has to be reversed.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K_helper(input, 1, k)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\toutput = input\n\tfor i in 1:k\n\t\toutput[i] = input[k-i+1]\n\tend\n\treturn output\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k/2\n\t\tinput[i], input[k-i+1] = input[k-i+1], input[i]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\toutput = deepcopy(input)\n\tfor i in 1:k\n\t\toutput[i] = input[k-i+1]\n\tend\n\treturn output\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k >= length(input)\n\t\treturn reverse(input)\n\telse\n\t\treturn reverse(input[1:k]) * input[k+1:end]\n\tend\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than length of vector\")\n\t\treturn input\n\tend\n\treturn reverse(input[1:k])\nend",
    "\t\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k == 0\n\t\treturn input\n\tend\n\tif k == 1\n\t\treturn input\n\tend\n\tif k > length(input)\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\tif k < length(input)\n\t\treturn reverse(input[1:k])\n\tend\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\treturn reverse(input[1:k])\nend",
    "\tinput[1:k] = reverse(input[1:k])\n\treturn input\nend",
    "\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\n\tfor i in 1:k/2\n\t\ttemp = input[i]\n\t\tinput[i] = input[k-i+1]\n\t\tinput[k-i+1] = temp\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"K is greater than the length of the input array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk = k - 1\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k == 0\n\t\treturn input\n\tend\n\tif k == 1\n\t\treturn input\n\tend\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse_Array_Upto_K(input, k-1), k-1)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\nend",
    "\t\n\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i = 1:k/2\n\t\ttemp = input[i]\n\t\tinput[i] = input[k-i+1]\n\t\tinput[k-i+1] = temp\n\tend\n\t\n\treturn input\nend",
    "\t\"\"\"\n\tThis function reverses the input vector upto the given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\n\tend\nend",
    "\t\n\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\t\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\treturn reverse(input[1:k])\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\toutput = input\n\tfor i in 1:k\n\t\toutput[i] = input[k-i+1]\n\tend\n\treturn output\nend",
    "\t\"\"\"\n\t\tinput: Vector of integers\n\t\tk: Integer upto which the vector is to be reversed\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\ttemp = input[i]\n\t\tinput[i] = input[k]\n\t\tinput[k] = temp\n\t\tk -= 1\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\t\"\"\"\n\tinput: Vector of integers\n\tk: Integer upto which the vector is to be reversed\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k/2\n\t\tinput[i], input[k-i+1] = input[k-i+1], input[i]\n\tend\n\t\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k/2\n\t\tinput[i], input[k-i+1] = input[k-i+1], input[i]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tinput: Vector of integers\n\tk: position upto which the vector needs to be reversed\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\telse\n\t\treturn reverse(input[1:k])\n\tend\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\telse\n\t\tfor i in 1:k\n\t\t\tinput[i] = input[k-i+1]\n\t\tend\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\telse\n\t\treturn reverse(input[1:k])\n\tend\nend",
    "\tif k < length(input)\n\t\treturn reverse(input[1:k])\n\telse\n\t\treturn reverse(input)\n\tend\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k == 0\n\t\treturn input\n\telse\n\t\treturn [reverse_Array_Upto_K(input[1:k], k-1); input[k+1:end]]\n\tend\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse_Array(input[1:k]), k)\nend",
    "\t\"\"\"\n\tinput: Vector of numbers\n\tk: position upto which the vector is to be reversed\n\t\"\"\"\n\tif k > length(input)\n\t\terror(\"k cannot be greater than length of input vector\")\n\tend\n\toutput = input[1:k]\n\tfor i in k+1:length(input)\n\t\tpush!(output, input[i])\n\tend\n\treturn output\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tn = length(input)\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tinput: Vector{Int64}\n\tk: Int64\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\nend",
    "\toutput = zeros(Int64, length(input))\n\tfor i in 1:k\n\t\toutput[i] = input[k - i + 1]\n\tend\n\tfor i in k+1:length(input)\n\t\toutput[i] = input[i]\n\tend\n\treturn output\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn [input[i] for i in length(input):-1:k+1]\n\tend\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\nend",
    "\ttemp = input[1:k]\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\tfor i in 1:k\n\t\tinput[k+i] = temp[i]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn reverse(input)\n\telse\n\t\treturn reverse(input[1:k]) * input[k+1:end]\n\tend\nend",
    "\t\"\"\"\n\tinput: Vector of integers.\n\tk: Integer upto which the vector is to be reversed.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tWrite a jlthon function to reverse a vector upto a given position.\n\t\"\"\"\n\treturn reverse(input[1:k])\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tFunction to reverse a vector upto a given position.\n\t\"\"\"\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of input\")\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k/2\n\t\ttemp = input[i]\n\t\tinput[i] = input[k-i+1]\n\t\tinput[k-i+1] = temp\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tinput: Vector of integers\n\tk: Integer upto which the vector has to be reversed\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\treturn reverse(input[1:k]) * input[k+1:end]\nend",
    "\t\n\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\t\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k/2\n\t\ttemp = input[i]\n\t\tinput[i] = input[k-i+1]\n\t\tinput[k-i+1] = temp\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\t\"\"\"\n\tThis function reverses the elements of a vector upto a given position.\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(input, 1, k)\nend",
    "\t\"\"\"\n\tinput: Vector of integers\n\tk: position upto which the vector is to be reversed\n\t\"\"\"\n\tif k > length(input)\n\t\tprintln(\"k is greater than the length of the vector\")\n\t\treturn input\n\tend\n\tif k == length(input)\n\t\treturn reverse(input)\n\tend\n\treturn reverse(input[1:k]) * input[k+1:end]\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i = 1:k\n\t\tinput[i] = input[k - i + 1]\n\tend\n\t\n\treturn input\nend",
    "\t\"\"\"\n\tinput: Vector of integers\n\tk: integer\n\t\"\"\"\n\toutput = zeros(Int64, length(input))\n\tfor i in 1:k\n\t\toutput[i] = input[k-i+1]\n\tend\n\tfor i in k+1:length(input)\n\t\toutput[i] = input[i]\n\tend\n\treturn output\nend",
    "\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\n\tend\nend",
    "\t\"\"\"\n\tThis function reverses the input vector upto the given position.\n\t\"\"\"\n\tif k > length(input)\n\t\treturn input\n\telse\n\t\treturn reverse_Array_Upto_K(vcat(reverse(input[1:k]), input[k+1:end]), k+1)\n\tend\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\treturn reverse_Array_Upto_K(reverse(input[1:k]), k)\nend",
    "\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\tprintln(\"k is greater than length of the array\")\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k - i + 1]\n\t\tinput[k - i + 1] = input[i] - input[k - i + 1]\n\t\tinput[i] = input[i] - input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k - i + 1]\n\t\tinput[k - i + 1] = input[i] - input[k - i + 1]\n\t\tinput[i] = input[i] - input[k - i + 1]\n\tend\n\treturn input\nend",
    "\tif k > length(input)\n\t\treturn input\n\tend\n\t\n\tfor i in 1:k\n\t\tinput[i] = input[i] + input[k-i+1]\n\t\tinput[k-i+1] = input[i] - input[k-i+1]\n\t\tinput[i] = input[i] - input[k-i+1]\n\tend\n\t\n\treturn input\nend"
  ]
}