{
  "name": "mbpp_771_check_expression",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\nfunction check_expression(exp::String)::Bool \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = check_expression;\n\t@test(candidate(\"{()}[{}]\") == true)\n\t@test(candidate(\"{()}[{]\") == false)\n\t@test(candidate(\"{()}[{}][]({})\") == true)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tpop!(stack)\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in \"({[\"\n\t\t\tpush!(stack, i)\n\t\telseif i in \")}]\"\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttop = pop!(stack)\n\t\t\t\tif !match(top, i)\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telseif i == \")\" && stack[end] == \"(\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"}\" && stack[end] == \"{\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"]\" && stack[end] == \"[\"\n\t\t\t\tpop!(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tpopped = pop!(stack)\n\t\t\t\tif (popped == \"(\" && i != \")\") || (popped == \"{\" && i != \"}\") || (popped == \"[\" && i != \"]\")\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor c in exp\n\t\tif c in [\"(\", \"[\", \"{\"]\n\t\t\tpush!(stack, c)\n\t\telseif c in [\")\", \"]\", \"}\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttop = pop!(stack)\n\t\t\t\tif (top == \"(\" && c != \")\") || (top == \"[\" && c != \"]\") || (top == \"{\" && c != \"}\")\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tpop!(stack)\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in \"({[\"\n\t\t\tpush!(stack, i)\n\t\telseif i in \")}]\"\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif i == \")\" && stack[end] == \"(\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"}\" && stack[end] == \"{\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"]\" && stack[end] == \"[\"\n\t\t\t\tpop!(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\",\"[\",\"{\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"]\",\"}\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tpop!(stack)\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\topen = [\"(\", \"[\", \"{\"]\n\tclose = [\")\", \"]\", \"}\"]\n\tstack = []\n\tfor i in exp\n\t\tif i in open\n\t\t\tpush!(stack, i)\n\t\telseif i in close\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tif open.index(stack[end]) == close.index(i)\n\t\t\t\t\tpop!(stack)\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif length(stack) == 0\n\t\t\t\treturn false\n\t\t\telseif i == \")\" && stack[end] == \"(\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"}\" && stack[end] == \"{\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"]\" && stack[end] == \"[\"\n\t\t\t\tpop!(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\tif length(stack) == 0\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\", \"{\", \"[\"]\n\t\t\tpush!(stack, i)\n\t\telseif i in [\")\", \"}\", \"]\"]\n\t\t\tif length(stack) == 0\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif i == \")\" && stack[end] == \"(\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"}\" && stack[end] == \"{\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"]\" && stack[end] == \"[\"\n\t\t\t\tpop!(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\tif length(stack) == 0\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = Stack()\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif i == \")\" && pop!(stack) != \"(\"\n\t\t\t\treturn false\n\t\t\telseif i == \"}\" && pop!(stack) != \"{\"\n\t\t\t\treturn false\n\t\t\telseif i == \"]\" && pop!(stack) != \"[\"\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i == '('\n\t\t\tpush!(stack, i)\n\t\telseif i == ')'\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tpop!(stack)\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i == '(' || i == '[' || i == '{'\n\t\t\tpush!(stack, i)\n\t\telseif i == ')' || i == ']' || i == '}'\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tif i == ')' && stack[end] == '('\n\t\t\t\tpop!(stack)\n\t\t\telseif i == ']' && stack[end] == '['\n\t\t\t\tpop!(stack)\n\t\t\telseif i == '}' && stack[end] == '{'\n\t\t\t\tpop!(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = Stack()\n\tfor i in exp\n\t\tif i == '('\n\t\t\tpush!(stack, i)\n\t\telseif i == ')'\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tpop!(stack)\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = Stack()\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telseif i == \")\" && pop!(stack) != \"(\"\n\t\t\t\treturn false\n\t\t\telseif i == \"}\" && pop!(stack) != \"{\"\n\t\t\t\treturn false\n\t\t\telseif i == \"]\" && pop!(stack) != \"[\"\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\", \"[\", \"{\"]\n\t\t\tpush!(stack, i)\n\t\telseif i in [\")\", \"]\", \"}\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telseif i == \")\" && stack[end] == \"(\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"]\" && stack[end] == \"[\"\n\t\t\t\tpop!(stack)\n\t\t\telseif i == \"}\" && stack[end] == \"{\"\n\t\t\t\tpop!(stack)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn isempty(stack)\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i in [\"(\",\"{\",\"[\"]\n\t\t\tpush!(stack,i)\n\t\telseif i in [\")\",\"}\",\"]\"]\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttop = pop!(stack)\n\t\t\t\tif (top == \"(\" && i != \")\") || (top == \"{\" && i != \"}\") || (top == \"[\" && i != \"]\")\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i == '(' || i == '{' || i == '['\n\t\t\tpush!(stack, i)\n\t\telseif i == ')' || i == '}' || i == ']'\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttop = pop!(stack)\n\t\t\t\tif i == ')' && top != '('\n\t\t\t\t\treturn false\n\t\t\t\telseif i == '}' && top != '{'\n\t\t\t\t\treturn false\n\t\t\t\telseif i == ']' && top != '['\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tstack = []\n\tfor i in exp\n\t\tif i == '(' || i == '{' || i == '['\n\t\t\tpush!(stack, i)\n\t\telseif i == ')' || i == '}' || i == ']'\n\t\t\tif isempty(stack)\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tpop!(stack)\n\t\t\tend\n\t\tend\n\tend\n\tif isempty(stack)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend"
  ]
}