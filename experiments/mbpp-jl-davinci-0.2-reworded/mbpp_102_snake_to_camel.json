{
  "name": "mbpp_102_snake_to_camel",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\nfunction snake_to_camel(word::String)::String \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = snake_to_camel;\n\t@test(candidate(\"python_program\") == \"PythonProgram\")\n\t@test(candidate(\"python_language\") == \"PythonLanguage\")\n\t@test(candidate(\"programming_language\") == \"ProgrammingLanguage\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word, \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= letter\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword = map(uppercasefirst, word)\n\tword = join(word, \"\")\n\treturn word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor i in 1:length(word)\n\t\tif word[i] == '_'\n\t\t\tcamel_word = camel_word * \" \" * uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word = camel_word * uppercase(word[i])\n\t\telse\n\t\t\tcamel_word = camel_word * word[i]\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tword = split(word, \"_\")\n\tword = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word)\n\treturn join(word, \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, '_')))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_\\w\") do m\n\t\tuppercase(m.match)\n\tend\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word, \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= uppercase(letter)\n\t\telse\n\t\t\tcamel_case *= letter\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword = map(uppercasefirst, word)\n\treturn join(word, \"\")\nend",
    "    word = split(word, \"_\")\n    word[2] = uppercase(word[2])\n    return join(word, \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(capitalize.(split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel = \"\"\n\tfor (i, c) in enumerate(word)\n\t\tif c == '_'\n\t\t\tcamel *= word[i+1]\n\t\telse\n\t\t\tcamel *= c\n\tend\n\treturn camel\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word, \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\twords = map(x -> uppercase(x[1]) * lowercase(x[2:end]), words)\n\treturn join(words)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\t\n\t# Split the word into an array of words\n\twords = split(word, \"_\")\n\t\n\t# Capitalize the first letter of each word\n\tfor i in 1:length(words)\n\t\twords[i] = uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\t\n\t# Join the words back together\n\treturn join(words)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word, \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word *= uppercase(letter)\n\t\telse\n\t\t\tcamel_word *= letter\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "    word = split(word, \"_\")\n    word[2:end] = map(x->uppercase(x[1])*lowercase(x[2:end]), word[2:end])\n    return join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor i in 1:length(word)\n\t\tif word[i] == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= lowercase(word[i])\n\t\telse\n\t\t\tcamel_case *= word[i]\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\t\n\t# Split the string into a vector of words\n\twords = split(word, \"_\")\n\t\n\t# Convert the first word to lowercase\n\twords[1] = lowercase(words[1])\n\t\n\t# Join the words together\n\tcamel_case_word = join(words)\n\t\n\t# Capitalize the first letter\n\tcamel_case_word[1] = uppercase(camel_case_word[1])\n\t\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case *= letter\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\t# Split the string by \"_\"\n\tsplit_word = split(word, \"_\")\n\t# Capitalize the first letter of each word\n\tcapitalized_word = [uppercasefirst(word) for word in split_word]\n\t# Join the words together\n\treturn join(capitalized_word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case *= letter\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1])*lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\t\n\t# Split the string into words\n\twords = split(word, \"_\")\n\t\n\t# Capitalize the first letter of each word\n\tfor i in 1:length(words)\n\t\twords[i] = capitalize(words[i])\n\tend\n\t\n\t# Join the words into a string\n\treturn join(words)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn word[1:end] |> String.replace(\"_\", \"\") |> capitalize\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_\\w\") do match\n\t\treturn uppercase(match.captures[1])\n\tend\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case *= letter\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tcamel_word = \"\"\n\tfor i in 1:length(words)\n\t\tcamel_word *= uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn camel_word\nend",
    "\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(capitalize.(split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_\\w\") do match\n\t\treturn uppercase(match.captures[1])\n\tend\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_word *= letter\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join([uppercase(word[1])*word[1]...], \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= uppercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\t\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x->capitalize(x), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tnew_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tnew_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tnew_word *= letter\n\t\tend\n\tend\n\treturn new_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\twords = split(word, \"_\")\n\tcamel = \"\"\n\tfor i in 1:length(words)\n\t\tcamel = camel * uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn camel\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend"
  ]
}