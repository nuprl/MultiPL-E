{
  "name": "mbpp_9_find_Rotations",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\nfunction find_Rotations(str::String)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = find_Rotations;\n\t@test(candidate(\"aaaa\") == 1)\n\t@test(candidate(\"ab\") == 2)\n\t@test(candidate(\"abc\") == 3)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr = str * str\n\tfor i in 1:str_len\n\t\tif str[i:i+str_len-1] == str[str_len+1:end]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_length = length(str)\n\tstr_double = str * str\n\tfor i in 1:str_length\n\t\tif str_double[i:str_length+i-1] == str\n\t\t\treturn i-1\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str*str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn findSubString(str, str[1:n])\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\trotations = 0\n\tfor i in 1:length(str)\n\t\tif str[i] == '1'\n\t\t\trotations += 1\n\t\tend\n\tend\n\treturn rotations\nend",
    "\tstr_length = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_length\n\t\tif str_concat[i:i+str_length-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr = str * str\n\tn = length(str)\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == string(concat_str[i:i+n-1])\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str == str_concat[i:i+str_len-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn findSubString(str, str[1:n+1])\nend",
    "\tlen = length(str)\n\tstr = str * str\n\tfor i in 1:len\n\t\tif str[i:i+len-1] == str[i+1:i+len]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tfor i in 1:length(str)\n\t\tif str[i:end] == str[1:end-i+1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn length(str)\nend",
    "\tn = length(str)\n\tstr = str * str\n\tmin_rotations = n\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\tmin_rotations = min(min_rotations, n-i)\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str*str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\tstr_length = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_length\n\t\tif str == str_concat[i:i+str_length-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_cat = str * str\n\tfor i in 1:str_len\n\t\tif str_cat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tfor i in 1:str_len\n\t\tif str[i] != str[1]\n\t\t\tcontinue\n\t\tend\n\t\tif str[i:end] * str[1:i] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn str_len\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tfor i in 1:str_len\n\t\tif str[i:end] == str[1:end-i+1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\trotations = 0\n\tfor i in 1:length(str)\n\t\tif str[i] == str[1]\n\t\t\trotations += 1\n\t\t\tif str[i:i+length(str)-1] == str[2:length(str)]\n\t\t\t\treturn rotations\n\t\t\tend\n\t\tend\n\tend\n\treturn rotations\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
    "\tlen = length(str)\n\tstr = str * str\n\tfor i in 1:len\n\t\tif str[i:i+len-1] == str[i+1:i+len]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr = str * str\n\tn = length(str)\n\tstr = str[1:n]\n\treturn findSubString(str,str[1:n])\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i = 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "    n = length(str)\n    str = str * str\n    for i in 1:n\n        if str[i:i+n-1] == str[i+1:i+n]\n            return i\n        end\n    end\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\tstr_len = length(str)\n\tfor i in 1:str_len\n\t\tif str[i:end] == str[1:str_len-i+1]\n\t\t\treturn str_len-i\n\t\tend\n\tend\n\treturn str_len\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\tn = length(str)\n\t\tstr = str * str\n\t\treturn findSubString(str,str[1:n+1])\n\tend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\n\t# Find the length of the string\n\tn = length(str)\n\t\n\t# Concatenate the string with itself\n\tstr = str * str\n\t\n\t# Find the length of the concatenated string\n\tm = length(str)\n\t\n\t# Initialize the minimum number of rotations to 0\n\tmin_rotations = 0\n\t\n\t# Loop through the concatenated string\n\tfor i in 1:m\n\t\t\n\t\t# Find the substring of length n\n\t\tsubstr = str[i:i+n-1]\n\t\t\n\t\t# Check if the substring is equal to the original string\n\t\tif substr == str[1:n]\n\t\t\t\n\t\t\t# If yes, then find the number of rotations\n\t\t\tmin_rotations = i\n\t\t\t\n\t\t\t# Break the loop\n\t\t\tbreak\n\t\tend\n\tend\n\t\n\t# Return the minimum number of rotations\n\treturn min_rotations\nend",
    "\tstr = str * str\n\tn = length(str)\n\tfor i = 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str == str_concat[i:i+str_len-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_length = length(str)\n\tstr = str * str\n\tfor i in 1:str_length\n\t\tif str[i:i+str_length-1] == str[i+1:i+str_length]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == string(concat_str[i:i+n-1])\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str == str_concat[i:i+str_len-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n] == str[1:n+1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str*str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr = str * str\n\tfor i in 1:str_len\n\t\tif str[i:i+str_len-1] == str[i+1:i+str_len]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_length = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_length\n\t\tif str == str_concat[i:i+str_length-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "    n = length(str)\n    str = str * str\n    for i in 1:n\n        if str[i:i+n-1] == str[i+1:i+n]\n            return i\n        end\n    end\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n] == str[1:n+1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_length = length(str)\n\tstr_double = str * str\n\tfor i in 1:str_length\n\t\tif str_double[i:i+str_length-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn findSubString(str, str[1:n+1])\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str == str_concat[i:i+str_len-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr = str * str\n\tn = length(str)\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\tif str == \"\"\n\t\treturn 0\n\tend\n\tmin_rotations = 0\n\tfor i in 1:length(str)\n\t\tif str[i] == str[1]\n\t\t\trotated_str = str[i:end] * str[1:i-1]\n\t\t\tif rotated_str == str\n\t\t\t\tmin_rotations = i\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t# find the length of the string\n\tn = length(str)\n\t# create a string to store the concatenated string\n\tconcat_str = str * str\n\t# create a variable to store the minimum number of rotations\n\tmin_rotations = n\n\t# loop through the concatenated string\n\tfor i in 1:n\n\t\t# check if the substring is equal to the original string\n\t\tif str == concat_str[i:i+n-1]\n\t\t\t# if yes, then check if the number of rotations is less than the current minimum\n\t\t\tif i < min_rotations\n\t\t\t\t# if yes, then update the minimum rotations\n\t\t\t\tmin_rotations = i\n\t\t\tend\n\t\tend\n\tend\n\t# return the minimum number of rotations\n\treturn min_rotations\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_length = length(str)\n\tstr = str * str\n\tfor i in 1:str_length\n\t\tif str[i:i+str_length-1] == str[i+1:i+str_length]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == string(concat_str[i:i+n-1])\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i = 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tstr_len = length(str)\n\tfor i in 1:str_len\n\t\tif str == rotate(str,i)\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n] == str[1:n+1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
    "\tstr1 = str\n\tstr2 = str\n\tfor i in 1:length(str)\n\t\tstr1 = str1[2:end]\n\t\tstr1 = str1 * str[1]\n\t\tif str1 == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
    "\t\tn = length(str)\n\t\tstr = str * str\n\t\tfor i in 1:n\n\t\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\t\treturn i\n\t\t\tend\n\t\tend\n\t\treturn 0\n\tend\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\t\n\t# Find the length of the string\n\tn = length(str)\n\t\n\t# Find the concatenation of the string with itself\n\tstr = str * str\n\t\n\t# Find the length of the concatenated string\n\tm = length(str)\n\t\n\t# Find the minimum number of rotations required to get the same string\n\tfor i in 1:m-n\n\t\tif str[i:i+n] == str[i+1:i+n+1]\n\t\t\treturn i\n\t\tend\n\tend\n\t\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\trotations = 0\n\tfor i in 1:length(str)\n\t\tif str[i] == str[1]\n\t\t\trotations += 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn rotations\nend",
    "\t\tn = length(str)\n\t\tstr = str * str\n\t\tfor i in 1:n\n\t\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\t\treturn i\n\t\t\tend\n\t\tend\n\t\treturn -1\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\trotations = 0\n\tfor i in 1:length(str)\n\t\tif str == rotate(str, i)\n\t\t\trotations = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn rotations\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend",
    "\tstr_length = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_length\n\t\tif str == str_concat[i:i+str_length-1]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tstr_length = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_length\n\t\tif str_concat[i:i+str_length-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend",
    "\tfor i in 1:length(str)\n\t\tif str[i:end]*str[1:i-1] == str\n\t\t\treturn i-1\n\t\tend\n\tend\n\treturn length(str)\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tstr_len = length(str)\n\tfor i in 1:str_len\n\t\tif str[i:end] == str[1:str_len-i+1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i = 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn findSubString(str, str[1:n+1])\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn find_Substring(str, str[1:n+1])\nend",
    "\tstr_len = length(str)\n\tstr = str * str\n\tfor i in 1:str_len\n\t\tif str[i:i+str_len-1] == str[i+1:i+str_len]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr = str * str\n\tfor i in 1:str_len\n\t\tif str[i:i+str_len-1] == str[i+1:i+str_len]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr = str * str\n\tfor i in 1:str_len\n\t\tif str[i:i+str_len-1] == str[i+1:i+str_len]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn str_len\nend",
    "\tstr_len = length(str)\n\tstr = str * str\n\tfor i in 1:str_len\n\t\tif str[i:i+str_len-1] == str[i+1:i+str_len]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i = 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn n\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tmin_rotations = 0\n\tstr_len = length(str)\n\tfor i in 1:str_len\n\t\tif str[i] == '1'\n\t\t\tmin_rotations += 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tn = length(str)\n\tconcat = str * str\n\tfor i in 1:n\n\t\tif str == concat[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_length = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_length\n\t\tif str_concat[i:i+str_length-1] == str\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\t\n\t# If the string is empty, return 0\n\tif str == \"\"\n\t\treturn 0\n\tend\n\t\n\t# If the string is a single character, return 0\n\tif length(str) == 1\n\t\treturn 0\n\tend\n\t\n\t# If the string is a palindrome, return 0\n\tif str == reverse(str)\n\t\treturn 0\n\tend\n\t\n\t# If the string is not a palindrome, find the minimum number of rotations required to get the same string\n\t\n\t# Find the length of the string\n\tstr_length = length(str)\n\t\n\t# Initialize the minimum number of rotations to the length of the string\n\tmin_rotations = str_length\n\t\n\t# Initialize the current number of rotations to 0\n\tcurr_rotations = 0\n\t\n\t# Initialize the current string to the original string\n\tcurr_str = str\n\t\n\t# Loop through the string\n\tfor i in 1:str_length\n\t\t# Rotate the string\n\t\tcurr_str = curr_str[2:end] * curr_str[1]\n\t\t\n\t\t# Increment the current number of rotations\n\t\tcurr_rotations += 1\n\t\t\n\t\t# If the current string is the same as the original string, update the minimum number of rotations\n\t\tif curr_str == str\n\t\t\tmin_rotations = min(min_rotations, curr_rotations)\n\t\tend\n\tend\n\t\n\t# Return the minimum number of rotations\n\treturn min_rotations\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n] == str[1:n+1]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn findSubstring(str, str[1:n+1])\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tstr_len = length(str)\n\tstr_double = str * str\n\tfor i in 1:str_len\n\t\tif str_double[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\tlen = length(str)\n\tstr = str * str\n\tfor i in 1:len\n\t\tif str[i:i+len] == str[1:len+1]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn findSubString(str, str[1:n+1])\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tconcat_str = str * str\n\tfor i in 1:n\n\t\tif str == concat_str[i:i+n-1]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn findSubString(str, str[1:n+1])\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n\tfor i in 1:length(str)\n\t\tif str[i:end] * str[1:i] == str\n\t\t\treturn i-1\n\t\tend\n\tend\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n] == str[1:n+1]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\t\"\"\"\n\tFind the minimum number of rotations required to get the same string.\n\t\"\"\"\n\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\tfor i in 1:n\n\t\tif str[i:i+n-1] == str[i+1:i+n]\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend",
    "\tn = length(str)\n\tstr = str * str\n\treturn find_substr(str, str[1:n])\nend",
    "\tstr_len = length(str)\n\tstr_concat = str * str\n\tfor i in 1:str_len\n\t\tif str_concat[i:i+str_len-1] == str\n\t\t\treturn i\n\t\tend\n\tend\n\treturn 0\nend"
  ]
}