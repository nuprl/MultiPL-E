{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to find the first non-repeated character in a given string.\n\t\"\"\"\nfunction first_non_repeating_character(str1::String)::Union{String, Nothing} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = first_non_repeating_character;\n\t@test(candidate(\"abcabc\") == nothing)\n\t@test(candidate(\"abc\") == \"a\")\n\t@test(candidate(\"ababc\") == \"c\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor (i, c) in enumerate(str1)\n\t\tif count(str1, c) == 1\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "    for i in 1:length(str1)\n        if count(str1, str1[i]) == 1\n            return str1[i]\n        end\n    end\n    return nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor (i, c) in enumerate(str1)\n\t\tif count(str1, c) == 1\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\n\tArgs:\n\t\tstr1: The string to search.\n\tReturns:\n\t\tThe first non-repeating character.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\tfor i in 1:length(str1)\n\t\t\tif count(str1, str1[i]) == 1\n\t\t\t\treturn str1[i]\n\t\t\tend\n\t\tend\n\t\treturn nothing\n\tend",
    "\tfor i in 1:length(str1)\n\t\tif count(x -> x == str1[i], str1) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "    for i in 1:length(str1)\n        if count(str1, str1[i]) == 1\n            return str1[i]\n        end\n    end\n    return nothing\nend",
    "\t\"\"\"\n\tFinds the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\t\"\"\"\n\tFind the first non-repeating character in a given string.\n\t\"\"\"\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend",
    "\tstr1 = lowercase(str1)\n\tfor i in 1:length(str1)\n\t\tif count(str1, str1[i]) == 1\n\t\t\treturn str1[i]\n\t\tend\n\tend\n\treturn nothing\nend"
  ]
}