{
  "name": "mbpp_411_snake_to_camel",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\nfunction snake_to_camel(word::String)::String \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = snake_to_camel;\n\t@test(candidate(\"android_tv\") == \"AndroidTv\")\n\t@test(candidate(\"google_pixel\") == \"GooglePixel\")\n\t@test(candidate(\"apple_watch\") == \"AppleWatch\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to a camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\t# Split the string into words\n\twords = split(word, \"_\")\n\t# Capitalize the first letter of each word except the first one\n\t# Notice we use an anonymous function here.\n\tfor i in 2:length(words)\n\t\tword = uppercase(first(words[i])) * lowercase(string(words[i][2:end]))\n\t\twords[i] = word\n\tend\n\t# Join the words\n\tcamel_case_word = join(words)\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to a camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= letter\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= uppercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\t# Split the string at \"_\"\n\twords = split(word, \"_\")\n\t# Capitalize the first letter of each word\n\twords = map(capitalize, words)\n\t# Join the words together\n\treturn join(words)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == \"_\"\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_word *= char\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t# Split the string into words\n\twords = split(word, \"_\")\n\t# Capitalize the first letter of each word\n\t# Join them together\n\treturn join(capitalize.(words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= letter\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake_case string to a camelCase string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel *= char\n\tend\n\treturn camel\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tnew_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tnew_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tnew_word *= letter\n\tend\n\treturn new_word\nend",
    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
    "\twords = split(word, \"_\")\n\tcamel_case_word = \"\"\n\tfor (i, w) in enumerate(words)\n\t\tif i == 1\n\t\t\tcamel_case_word *= uppercase(w[1]) * w[2:end]\n\t\telseif i > 1\n\t\t\tcamel_case_word *= uppercase(w[1]) * w[2:end]\n\t\telse\n\t\t\tcamel_case_word *= w\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", x->uppercase(x[2]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake_case string to a camelCase string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= word[i+1]\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", x->uppercase(x[2]))\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to a camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= letter\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tword = split(word, \"_\")\n\tword[2:end] = map(x->uppercase(x[1])*lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i,char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\tcamel = \"\"\n\tfor (i, c) in enumerate(word)\n\t\tif c == '_'\n\t\t\tcamel *= word[i+1]\n\t\telse\n\t\t\tcamel *= c\n\tend\n\treturn camel\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_word *= letter\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tnew_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tnew_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tnew_word *= char\n\tend\n\treturn new_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel *= char\n\tend\n\treturn camel\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tword_array = split(word, \"_\")\n\tcamel_case_word = \"\"\n\tfor i in 1:length(word_array)\n\t\tcamel_case_word = camel_case_word * uppercase(word_array[i][1]) * lowercase(word_array[i][2:end])\n\tend\n\treturn camel_case_word\nend",
    "\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tfor i in range(1, length(words))\n\t\twords[i] = uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn join(words, \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", x->uppercase(x[2]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword = join([word[1:end]; uppercase(word[1])])\n\treturn word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to a camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case *= letter\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(titlecase, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i,char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_word *= char\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tresult = \"\"\n\tfor (i,c) in enumerate(word)\n\t\tif c == '_'\n\t\t\tresult *= upper(word[i+1])\n\t\telse\n\t\t\tresult *= c\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts a snake_case string to a camelCase string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\twords = map(lowercase, words)\n\twords[1:end] = map(capitalize, words[1:end])\n\treturn join(words, \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\treturn join(map(capitalize, words), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword = map(x -> uppercase(x[1])*lowercase(x[2:end]), word)\n\treturn join(word, \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\tword = split(word, \"_\")\n\tfor i in 2:length(word)\n\t\tword[i] = uppercase(word[i][1]) * lowercase(word[i][2:end])\n\tend\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i,char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(word[i])\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case *= char\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= letter\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u$1\")\nend",
    "\twords = split(word, \"_\")\n\tresult = \"\"\n\tfor i in 1:length(words)\n\t\tresult = result * uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telse\n\t\t\tcamel_case_word *= char\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\t\n\tword = replace(word, \"_\", \" \")\n\tword = split(word)\n\tword[1:end] = map(uppercase, word[1:end])\n\tword = join(word)\n\treturn word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tword = split(word, \"_\")\n\tword[2:end] = map(x -> uppercase(x[1]) * lowercase(x[2:end]), word[2:end])\n\treturn join(word)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tresult = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tresult *= uppercase(word[i+1])\n\t\telse\n\t\t\tresult *= char\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\tif length(word) == 0\n\t\treturn \"\"\n\telse\n\t\treturn join([word[1]*isupper(word[1])*(i != 1) + word[i]*(i != 1) for i in 1:length(word)])\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\tcamel_case = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case *= uppercase(char)\n\t\telse\n\t\t\tcamel_case *= char\n\t\tend\n\tend\n\treturn camel_case\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to a camel case string.\n\t\"\"\"\n\t\n\t# Split the string into words\n\twords = split(word, \"_\")\n\t\n\t# Capitalize the first letter of each word\n\tfor i in 1:length(words)\n\t\twords[i] = uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\t\n\t# Join the words together\n\treturn join(words)\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConverts snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, char) in enumerate(word)\n\t\tif char == '_'\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= lowercase(char)\n\t\telse\n\t\t\tcamel_case_word *= char\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\tcamel_case_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_case_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_case_word *= uppercase(letter)\n\t\telse\n\t\t\tcamel_case_word *= letter\n\t\tend\n\tend\n\treturn camel_case_word\nend",
    "\t\"\"\"\n\tConvert snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, \"_\", \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert a snake case string to camel case string.\n\t\"\"\"\n\tcamel_word = \"\"\n\tfor (i, letter) in enumerate(word)\n\t\tif letter == \"_\"\n\t\t\tcamel_word *= uppercase(word[i+1])\n\t\telseif i == 1\n\t\t\tcamel_word *= lowercase(letter)\n\t\telse\n\t\t\tcamel_word *= letter\n\t\tend\n\tend\n\treturn camel_word\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match[1]))\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\u\\1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(uppercasefirst, split(word, \"_\")))\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\twords = split(word, \"_\")\n\tfor i in 1:length(words)\n\t\twords[i] = uppercase(words[i][1]) * lowercase(words[i][2:end])\n\tend\n\treturn join(words)\nend",
    "\t\"\"\"\n\tConverts a snake case string to camel case string.\n\t\"\"\"\n\treturn join(map(capitalize, split(word, \"_\")), \"\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", s\"\\U$1\")\nend",
    "\t\"\"\"\n\tConvert the given snake case string to camel case string.\n\t\"\"\"\n\treturn replace(word, r\"_(\\w)\", match->uppercase(match.captures[1]))\nend"
  ]
}