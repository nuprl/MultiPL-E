{
  "name": "mbpp_745_divisible_by_digits",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(mod.(x, digits(x)) .== 0), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpqgn9th3v.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n    [7] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [8] _getindex\n      @ ./broadcast.jl:666 [inlined]\n    [9] _broadcast_getindex\n      @ ./broadcast.jl:642 [inlined]\n   [10] getindex\n      @ ./broadcast.jl:597 [inlined]\n   [11] macro expansion\n      @ ./broadcast.jl:961 [inlined]\n   [12] macro expansion\n      @ ./simdloop.jl:77 [inlined]\n   [13] copyto!\n      @ ./broadcast.jl:960 [inlined]\n   [14] copyto!\n      @ ./broadcast.jl:971 [inlined]\n   [15] copyto!\n      @ ./broadcast.jl:913 [inlined]\n   [16] copy\n      @ ./broadcast.jl:885 [inlined]\n   [17] materialize\n      @ ./broadcast.jl:860 [inlined]\n   [18] (::var\"#1#2\")(x::Int64)\n      @ Main /tmp/tmpqgn9th3v.jl:5\n   [19] filter(f::var\"#1#2\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n   [20] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpqgn9th3v.jl:5\n   [21] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [22] macro expansion\n      @ /tmp/tmpqgn9th3v.jl:12 [inlined]\n   [23] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [24] top-level scope\n      @ /tmp/tmpqgn9th3v.jl:11\ntest set: Error During Test at /tmp/tmpqgn9th3v.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpqgn9th3v.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tReturns a vector of numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp46swhsic.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp46swhsic.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp46swhsic.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp46swhsic.jl:14\ntest set: Error During Test at /tmp/tmp46swhsic.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp46swhsic.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % y == 0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp2ku_8pok.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmp2ku_8pok.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp2ku_8pok.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmp2ku_8pok.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmp2ku_8pok.jl:11\ntest set: Error During Test at /tmp/tmp2ku_8pok.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmp2ku_8pok.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp2ku_8pok.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp2ku_8pok.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(x%digits(x) .== 0), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509868,
      "stdout": "test set: Error During Test at /tmp/tmp5y9_g2tb.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: no method matching rem(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:81\n    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:82\n    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp5y9_g2tb.jl:5\n   [2] filter(f::var\"#1#2\", a::UnitRange{Int64})\n     @ Base ./array.jl:2499\n   [3] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp5y9_g2tb.jl:5\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [5] macro expansion\n     @ /tmp/tmp5y9_g2tb.jl:12 [inlined]\n   [6] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5y9_g2tb.jl:11\ntest set: Error During Test at /tmp/tmp5y9_g2tb.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: no method matching rem(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:81\n    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:82\n    ...\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmp5y9_g2tb.jl:5\n   [2] filter(f::var\"#1#2\", a::UnitRange{Int64})\n     @ Base ./array.jl:2499\n   [3] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp5y9_g",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp5y9_g2tb.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return filter(x->all(x % parse(Int64, y) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpqaqjp2tf.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpqaqjp2tf.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpqaqjp2tf.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpqaqjp2tf.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpqaqjp2tf.jl:11\ntest set: Error During Test at /tmp/tmpqaqjp2tf.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpqaqjp2tf.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpqaqjp2tf.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpqaqjp2tf.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFind numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpo7d4x_wj.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpo7d4x_wj.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpo7d4x_wj.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpo7d4x_wj.jl:14\ntest set: Error During Test at /tmp/tmpo7d4x_wj.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpo7d4x_wj.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t# Vector to store the numbers\n\tnumbers = []\n\tfor i in startnum:endnum\n\t\t# Check if the number is divisible by every digit it contains\n\t\tif all(i % parse(Int64, digit) == 0 for digit in string(i))\n\t\t\tpush!(numbers, i)\n\t\tend\n\tend\n\treturn numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp2o2pv7cx.jl:20\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp2o2pv7cx.jl:9\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp2o2pv7cx.jl:20 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2o2pv7cx.jl:19\ntest set: Error During Test at /tmp/tmp2o2pv7cx.jl:21\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp2o2pv7cx.jl:9\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp2o2pv7cx.jl:21 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2o2pv7cx.jl:19\ntest set: Er",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp2o2pv7cx.jl:17\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tReturns a vector of numbers between startnum and endnum that are divisible by every digit they contain.\n\t\"\"\"\n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tif divisible_by_digits(i)\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp1mq_0lue.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: objects of type Vector{Any} are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp1mq_0lue.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mq_0lue.jl:21 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mq_0lue.jl:20\ntest set: Error During Test at /tmp/tmp1mq_0lue.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: objects of type Vector{Any} are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp1mq_0lue.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mq_0lue.jl:22 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1mq_0lue.jl:20\ntest set: Error During Test at /tmp/tmp1mq_0lue.jl:23\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  MethodError: objects of type Vector{Any} are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp1mq_0lue.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1mq_0lue.jl:23 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdli",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp1mq_0lue.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % int(i) == 0 for i in string(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpt4flb4z5.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpt4flb4z5.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpt4flb4z5.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpt4flb4z5.jl:11\ntest set: Error During Test at /tmp/tmpt4flb4z5.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::I",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpt4flb4z5.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpbwj1ltc2.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpbwj1ltc2.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpbwj1ltc2.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpbwj1ltc2.jl:11\ntest set: Error During Test at /tmp/tmpbwj1ltc2.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpbwj1ltc2.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpfl8_yk_o.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpfl8_yk_o.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpfl8_yk_o.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpfl8_yk_o.jl:11\ntest set: Error During Test at /tmp/tmpfl8_yk_o.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpfl8_yk_o.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % y == 0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp2ku_8pok.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmp2ku_8pok.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp2ku_8pok.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmp2ku_8pok.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmp2ku_8pok.jl:11\ntest set: Error During Test at /tmp/tmp2ku_8pok.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmp2ku_8pok.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp2ku_8pok.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp2ku_8pok.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(mod(x, parse(Int64, digit)) == 0 for digit in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpg1y7dckt.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: no method matching parse(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    parse(::Type{T}, !Matched::AbstractChar; base) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/parse.jl:240\n    parse(::Type{T}, !Matched::AbstractString; kwargs...) where T<:Real at /home/a.guha/.conda/envs/polyglot/share/julia/base/parse.jl:379\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(digit::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmpg1y7dckt.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpg1y7dckt.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpg1y7dckt.jl:12 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpg1y7dckt.jl:11\ntest set: Error During Test at /tmp/tmpg1y7dckt.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: no method matching parse(::Type{Int64}, ::Int64)\n  Closest candidates are:\n    parse(::Type{T}, !Matched::AbstractChar; base) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/parse.jl:40\n    parse(::Type{T}, !Matched::AbstractString; base) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/parse.jl:240\n    parse(::Type{T},",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\tresult = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmpov0x1b0h.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpov0x1b0h.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpov0x1b0h.jl:21 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpov0x1b0h.jl:20\ntest set: Error During Test at /tmp/tmpov0x1b0h.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpov0x1b0h.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpov0x1b0h.jl:22 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpov0x1b0h.jl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpov0x1b0h.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(x%y==0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmppdzpn_se.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmppdzpn_se.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmppdzpn_se.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmppdzpn_se.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmppdzpn_se.jl:11\ntest set: Error During Test at /tmp/tmppdzpn_se.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmppdzpn_se.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmppdzpn_se.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn filter(x->all(x % y == 0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpxgte4hg4.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpxgte4hg4.jl:8 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpxgte4hg4.jl:8\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpxgte4hg4.jl:15 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpxgte4hg4.jl:14\ntest set: Error During Test at /tmp/tmpxgte4hg4.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpxgte4hg4.jl:8 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpxgte4hg4.jl:8\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpxgte4hg4.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpymiufgs6.jl:18\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpymiufgs6.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpymiufgs6.jl:18 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpymiufgs6.jl:17\ntest set: Error During Test at /tmp/tmpymiufgs6.jl:19\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpymiufgs6.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpymiufgs6.jl:19 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpymiufgs6.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpymiufgs6.jl:15\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % int(y) == 0 for y in string(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpb36i7ldz.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpb36i7ldz.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpb36i7ldz.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpb36i7ldz.jl:11\ntest set: Error During Test at /tmp/tmpb36i7ldz.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::I",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpb36i7ldz.jl:9\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x%y==0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp7r1uyqkf.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp7r1uyqkf.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp7r1uyqkf.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp7r1uyqkf.jl:14\ntest set: Error During Test at /tmp/tmp7r1uyqkf.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return filter(x -> all(x % parse(Int64, y) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp86rsratk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmp86rsratk.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp86rsratk.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmp86rsratk.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmp86rsratk.jl:11\ntest set: Error During Test at /tmp/tmp86rsratk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmp86rsratk.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp86rsratk.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp86rsratk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFunction to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\t\n\t# Create a vector of numbers within the range\n\tnumbers = collect(startnum:endnum)\n\t\n\t# Create a vector of numbers that are divisible by every digit it contains\n\tdivisible_numbers = filter(x->divisible_by_digits_helper(x), numbers)\n\t\n\treturn divisible_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpaqn_h821.jl:22\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: divisible_by_digits_helper not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpaqn_h821.jl:13\n   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpaqn_h821.jl:13\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [5] macro expansion\n     @ /tmp/tmpaqn_h821.jl:22 [inlined]\n   [6] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [7] top-level scope\n     @ /tmp/tmpaqn_h821.jl:21\ntest set: Error During Test at /tmp/tmpaqn_h821.jl:23\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: divisible_by_digits_helper not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpaqn_h821.jl:13\n   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpaqn_h821.jl:13\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [5] macro expansion\n     @ /tmp/tmpaqn_h821.jl:23 [inlined]\n   [6] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [7] top-level scope\n     @ /tmp/tmpaqn_h821.jl:21\ntest set: Error During Test at /tmp/tmpaqn_h821.jl:24\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  UndefVarError: divisible_by_digits_helper not defined\n  Stacktrace:\n   [1] (::var\"#1#2\")(x::Int64)\n     @ Main /tmp/tmpaqn_h821.jl:13\n   [2] filter(f::var\"#1#2\", a::Vector{Int64})\n     @ Base ./array.jl:2484\n   [3] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpaqn_h821.jl:13",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % parse(Int64, y) == 0 for y in split(string(x), \"\"))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp4b_ncm6b.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{SubString{String}}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate(f::Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, state::Int64)\n      @ Base.Iterators ./iterators.jl:447\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!\n      @ ./array.jl:801 [inlined]\n   [12] collect(itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:721\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp4b_ncm6b.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp4b_ncm6b.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp4b_ncm6b.jl:11\ntest set: Error During Test at /tmp/tmp4b_ncm6b.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{SubString{String}}, var\"#2#4\"{Int64}}, #un",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp4b_ncm6b.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t# Create a vector to store the numbers\n\tnumbers = Vector{Int64}()\n\t# Iterate through the range\n\tfor i in startnum:endnum\n\t\t# Create a vector to store the digits\n\t\tdigits = Vector{Int64}()\n\t\t# Iterate through the digits\n\t\tfor j in digits(i)\n\t\t\t# Push the digits to the vector\n\t\t\tpush!(digits, j)\n\t\tend\n\t\t# Check if the number is divisible by all the digits\n\t\tif all(i % j == 0 for j in digits)\n\t\t\t# Push the number to the vector\n\t\t\tpush!(numbers, i)\n\t\tend\n\tend\n\t# Return the vector\n\treturn numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpl_4cayqo.jl:30\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpl_4cayqo.jl:12\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_4cayqo.jl:30 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_4cayqo.jl:29\ntest set: Error During Test at /tmp/tmpl_4cayqo.jl:31\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpl_4cayqo.jl:12\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_4cayqo.jl:31 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_4cayqo.jl:29\ntest set: Error During Test at /tmp/tmpl_4cayqo.jl:32\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpl_4cayqo.jl:12\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl_4cayqo.jl:32 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFunction to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % int(y) == 0 for y in string(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp_85m2svp.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_85m2svp.jl:8\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmp_85m2svp.jl:15 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmp_85m2svp.jl:14\ntest set: Error During Test at /tmp/tmp_85m2svp.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::I",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tresult = []\n\tfor i in startnum:endnum\n\t\tif is_divisible_by_digits(i)\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_xweh2hi.jl:18\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: is_divisible_by_digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp_xweh2hi.jl:7\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xweh2hi.jl:18 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xweh2hi.jl:17\ntest set: Error During Test at /tmp/tmp_xweh2hi.jl:19\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: is_divisible_by_digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp_xweh2hi.jl:7\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xweh2hi.jl:19 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xweh2hi.jl:17\ntest set: Error During Test at /tmp/tmp_xweh2hi.jl:20\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  UndefVarError: is_divisible_by_digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp_xweh2hi.jl:7\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xweh2hi.jl:20 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xweh2hi.jl:17\nTest Summary: | Error  Total\ntest set      |     3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_xweh2hi.jl:15\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(y -> x % y == 0, digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpoyg9j63z.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpoyg9j63z.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoyg9j63z.jl:12 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpoyg9j63z.jl:11\ntest set: Error During Test at /tmp/tmpoyg9j63z.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpoyg9j63z.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoyg9j63z.jl:13 [inlined]\n   [11] macro expansion\n      @ /home/a.guh",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpoyg9j63z.jl:9\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    \"\"\"\n    Returns a vector of numbers from startnum to endnum that are divisible by every digit it contains.\n    \"\"\"\n    return [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpqqjik7fp.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpqqjik7fp.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpqqjik7fp.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpqqjik7fp.jl:14\ntest set: Error During Test at /tmp/tmpqqjik7fp.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpqqjik7fp.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\t\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp07y17lrs.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp07y17lrs.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp07y17lrs.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp07y17lrs.jl:14\ntest set: Error During Test at /tmp/tmp07y17lrs.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp3op3lpu9.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp3op3lpu9.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp3op3lpu9.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp3op3lpu9.jl:14\ntest set: Error During Test at /tmp/tmp3op3lpu9.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp3op3lpu9.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tif i % digits(i) == 0\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpfkmpt79t.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: no method matching rem(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:81\n    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:82\n    ...\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpfkmpt79t.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfkmpt79t.jl:21 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfkmpt79t.jl:20\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFunction to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpxjsfnof5.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpxjsfnof5.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpxjsfnof5.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpxjsfnof5.jl:14\ntest set: Error During Test at /tmp/tmpxjsfnof5.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpxjsfnof5.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFunction to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tif isdivisible(i)\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmpbvkqzrho.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: isdivisible not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpbvkqzrho.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvkqzrho.jl:21 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvkqzrho.jl:20\ntest set: Error During Test at /tmp/tmpbvkqzrho.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: isdivisible not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpbvkqzrho.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvkqzrho.jl:22 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvkqzrho.jl:20\ntest set: Error During Test at /tmp/tmpbvkqzrho.jl:23\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  UndefVarError: isdivisible not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpbvkqzrho.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbvkqzrho.jl:23 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbvkqzrho.jl:20\nTest Summary: | Error  Total\ntest set      |     3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpbvkqzrho.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tresult = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp4j6pncv6.jl:18\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp4j6pncv6.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp4j6pncv6.jl:18 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp4j6pncv6.jl:17\ntest set: Error During Test at /tmp/tmp4j6pncv6.jl:19\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp4j6pncv6.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp4j6pncv6.jl:19 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp4j6pncv6.jl:1",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tReturns a vector of numbers between startnum and endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmpck_g405n.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpck_g405n.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpck_g405n.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpck_g405n.jl:14\ntest set: Error During Test at /tmp/tmpck_g405n.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpck_g405n.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpbwj1ltc2.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpbwj1ltc2.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpbwj1ltc2.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpbwj1ltc2.jl:11\ntest set: Error During Test at /tmp/tmpbwj1ltc2.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpbwj1ltc2.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(mod(x,y)==0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmp1zimkxcb.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlined]\n   [11] #1\n      @ /tmp/tmp1zimkxcb.jl:5 [inlined]\n   [12] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp1zimkxcb.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp1zimkxcb.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp1zimkxcb.jl:11\ntest set: Error During Test at /tmp/tmp1zimkxcb.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp1zimkxcb.jl:9\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % Int64(y) == 0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmpyc6drs4t.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpyc6drs4t.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpyc6drs4t.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpyc6drs4t.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpyc6drs4t.jl:11\ntest set: Error During Test at /tmp/tmpyc6drs4t.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpyc6drs4t.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpyc6drs4t.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpyc6drs4t.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [i for i in startnum:endnum if all(i%j == 0 for j in digits(i))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmp9s8xfoif.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp9s8xfoif.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp9s8xfoif.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp9s8xfoif.jl:14\ntest set: Error During Test at /tmp/tmp9s8xfoif.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp9s8xfoif.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFunction to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmptdlc9glr.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmptdlc9glr.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmptdlc9glr.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmptdlc9glr.jl:14\ntest set: Error During Test at /tmp/tmptdlc9glr.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tdigits = digits(i)\n\t\tif all(i % j == 0 for j in digits)\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmpybgglvp4.jl:19\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpybgglvp4.jl:7\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpybgglvp4.jl:19 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybgglvp4.jl:18\ntest set: Error During Test at /tmp/tmpybgglvp4.jl:20\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpybgglvp4.jl:7\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpybgglvp4.jl:20 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybgglvp4.jl:18\ntest set: Error During Test at /tmp/tmpybgglvp4.jl:21\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpybgglvp4.jl:7\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpybgglvp4.jl:21 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybgglvp4.jl:18\nTest Summary: | Error  Total\ntest set      |     3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpybgglvp4.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [i for i in startnum:endnum if all([i % j == 0 for j in digits(i)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp886lps0n.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp886lps0n.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp886lps0n.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp886lps0n.jl:11\ntest set: Error During Test at /tmp/tmp886lps0n.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([y in digits(x) for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Test Failed at /tmp/tmp19xj3gwv.jl:12\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n   Evaluated: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  \u2026  13, 14, 15, 16, 17, 18, 19, 20, 21, 22] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:12 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\ntest set: Test Failed at /tmp/tmp19xj3gwv.jl:13\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n   Evaluated: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:13 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\ntest set: Test Failed at /tmp/tmp19xj3gwv.jl:14\n  Expression: candidate(20, 25) == [22, 24]\n   Evaluated: [20, 21, 22, 23, 24, 25] == [22, 24]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:14 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp19xj3gwv.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\tresult = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp4j6pncv6.jl:18\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp4j6pncv6.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp4j6pncv6.jl:18 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp4j6pncv6.jl:17\ntest set: Error During Test at /tmp/tmp4j6pncv6.jl:19\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp4j6pncv6.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp4j6pncv6.jl:19 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp4j6pncv6.jl:1",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpfl8_yk_o.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpfl8_yk_o.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpfl8_yk_o.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpfl8_yk_o.jl:11\ntest set: Error During Test at /tmp/tmpfl8_yk_o.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpfl8_yk_o.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [i for i in startnum:endnum if all(i % j == 0 for j in digits(i))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp4ldmvy_d.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp4ldmvy_d.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp4ldmvy_d.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp4ldmvy_d.jl:11\ntest set: Error During Test at /tmp/tmp4ldmvy_d.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpbwj1ltc2.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpbwj1ltc2.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpbwj1ltc2.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpbwj1ltc2.jl:11\ntest set: Error During Test at /tmp/tmpbwj1ltc2.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpbwj1ltc2.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(y -> x % y == 0, digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpoyg9j63z.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpoyg9j63z.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoyg9j63z.jl:12 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpoyg9j63z.jl:11\ntest set: Error During Test at /tmp/tmpoyg9j63z.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpoyg9j63z.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoyg9j63z.jl:13 [inlined]\n   [11] macro expansion\n      @ /home/a.guh",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpoyg9j63z.jl:9\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tReturns a vector of numbers between startnum and endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmppti5pw01.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmppti5pw01.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmppti5pw01.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmppti5pw01.jl:14\ntest set: Error During Test at /tmp/tmppti5pw01.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmppti5pw01.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(y -> x % y == 0, digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpoyg9j63z.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpoyg9j63z.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoyg9j63z.jl:12 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpoyg9j63z.jl:11\ntest set: Error During Test at /tmp/tmpoyg9j63z.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpoyg9j63z.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpoyg9j63z.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpoyg9j63z.jl:13 [inlined]\n   [11] macro expansion\n      @ /home/a.guh",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpoyg9j63z.jl:9\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    \"\"\"\n    Find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return [x for x in startnum:endnum if all([x % int(y) == 0 for y in string(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpcc2sl3no.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcc2sl3no.jl:8\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpcc2sl3no.jl:15 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpcc2sl3no.jl:14\ntest set: Error During Test at /tmp/tmpcc2sl3no.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::I",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [i for i in startnum:endnum if all([i % j == 0 for j in digits(i)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmp6ej2cihw.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp6ej2cihw.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp6ej2cihw.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp6ej2cihw.jl:14\ntest set: Error During Test at /tmp/tmp6ej2cihw.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp6ej2cihw.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(mod(x, parse(Int64, y)) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmpnodtrl52.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlined]\n   [11] #1\n      @ /tmp/tmpnodtrl52.jl:5 [inlined]\n   [12] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpnodtrl52.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpnodtrl52.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpnodtrl52.jl:11\ntest set: Error During Test at /tmp/tmpnodtrl52.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlin",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpnodtrl52.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([div(x, y) == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpc6udwkkg.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [9] collect\n      @ ./array.jl:721 [inlined]\n   [10] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpc6udwkkg.jl:5\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [12] macro expansion\n      @ /tmp/tmpc6udwkkg.jl:12 [inlined]\n   [13] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [14] top-level scope\n      @ /tmp/tmpc6udwkkg.jl:11\ntest set: Error During Test at /tmp/tmpc6udwkkg.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [9] collect\n      @ ./array.jl:72",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\t\tInput:\n\t\t\tstartnum: Start number\n\t\t\tendnum: End number\n\t\tOutput:\n\t\t\tVector of numbers that are divisible by their digits\n\t\"\"\"\n\t\n\t# Create a vector of numbers from startnum to endnum\n\tnumbers = collect(startnum:endnum)\n\t\n\t# Create a vector of numbers that are divisible by their digits\n\tdivisible_numbers = filter(x -> all(x % digit(y) == 0 for y in digits(x)), numbers)\n\t\n\treturn divisible_numbers\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp0pk9v7ba.jl:26\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmp0pk9v7ba.jl:17 [inlined]\n    [7] filter(f::var\"#1#3\", a::Vector{Int64})\n      @ Base ./array.jl:2484\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp0pk9v7ba.jl:17\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmp0pk9v7ba.jl:26 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmp0pk9v7ba.jl:25\ntest set: Error During Test at /tmp/tmp0pk9v7ba.jl:27\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmp0pk9v7ba.jl:17 [inlined]\n    [7] filter(f::var\"#1#3\", a::Vector{Int64})\n      @ Base ./array.jl:2484\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp0pk9v7ba.jl:17\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n    ",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [i for i in startnum:endnum if all(i % j == 0 for j in digits(i))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp4ldmvy_d.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp4ldmvy_d.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp4ldmvy_d.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp4ldmvy_d.jl:11\ntest set: Error During Test at /tmp/tmp4ldmvy_d.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [i for i in startnum:endnum if all(i%j == 0 for j in digits(i))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmp9s8xfoif.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp9s8xfoif.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp9s8xfoif.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp9s8xfoif.jl:14\ntest set: Error During Test at /tmp/tmp9s8xfoif.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp9s8xfoif.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % Int64(y) == 0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmpyc6drs4t.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpyc6drs4t.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpyc6drs4t.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpyc6drs4t.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpyc6drs4t.jl:11\ntest set: Error During Test at /tmp/tmpyc6drs4t.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpyc6drs4t.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpyc6drs4t.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpyc6drs4t.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % int(y) == 0 for y in string(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpb36i7ldz.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpb36i7ldz.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpb36i7ldz.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpb36i7ldz.jl:11\ntest set: Error During Test at /tmp/tmpb36i7ldz.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::I",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpb36i7ldz.jl:9\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % parse(Int64, y) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpsn6fejv7.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpsn6fejv7.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpsn6fejv7.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpsn6fejv7.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpsn6fejv7.jl:11\ntest set: Error During Test at /tmp/tmpsn6fejv7.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpsn6fejv7.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpsn6fejv7.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpsn6fejv7.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(mod(x, parse(Int64, y)) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Error During Test at /tmp/tmpnodtrl52.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlined]\n   [11] #1\n      @ /tmp/tmpnodtrl52.jl:5 [inlined]\n   [12] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpnodtrl52.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpnodtrl52.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpnodtrl52.jl:11\ntest set: Error During Test at /tmp/tmpnodtrl52.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlin",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpnodtrl52.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn filter(x -> all(x % y == 0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpr9lc4261.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpr9lc4261.jl:8 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpr9lc4261.jl:8\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpr9lc4261.jl:15 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpr9lc4261.jl:14\ntest set: Error During Test at /tmp/tmpr9lc4261.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpr9lc4261.jl:8 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpr9lc4261.jl:8\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpr9lc4261.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFind numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\tresult = []\n\tfor i in startnum:endnum\n\t\tif i % div(i) == 0\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpfklm5ymg.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: no method matching div(::Int64)\n  Closest candidates are:\n    div(::T, !Matched::Base.MultiplicativeInverses.SignedMultiplicativeInverse{T}) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/multinverses.jl:138\n    div(::T, !Matched::Base.MultiplicativeInverses.UnsignedMultiplicativeInverse{T}) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/multinverses.jl:143\n    div(::Union{Int128, Int16, Int32, Int64, Int8}, !Matched::Unsigned) at /home/a.guha/.conda/envs/polyglot/share/julia/base/int.jl:218\n    ...\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpfklm5ymg.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfklm5ymg.jl:21 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfklm5ymg.jl:20\ntest set: Error During Test at /tmp/tmpfklm5ymg.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: no method matching div(::Int64)\n  Closest candidates are:\n    div(::T, !Matched::Base.MultiplicativeInverses.SignedMultiplicativeInverse{T}) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/multinverses.jl:138\n    div(::T, !Matched::Base.MultiplicativeInverses.UnsignedMultiplicativeInverse{T}) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/multinverses.jl:143\n    div(::Union{Int128, Int16, Int32, Int64, Int8}, !Matched::Unsigned) at /home/a.guha/.conda/envs/polyglot/share/julia/base/int.jl:218\n    ...\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpfklm5ymg.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/j",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn filter(x -> all(y -> x % y == 0, digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpdx0u5hli.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpdx0u5hli.jl:8 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpdx0u5hli.jl:8 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpdx0u5hli.jl:8\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpdx0u5hli.jl:15 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpdx0u5hli.jl:14\ntest set: Error During Test at /tmp/tmpdx0u5hli.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ /tmp/tmpdx0u5hli.jl:8 [inlined]\n    [3] _all(f::var\"#2#4\"{Int64}, itr::Vector{Int64}, #unused#::Colon)\n      @ Base ./reduce.jl:1157\n    [4] #all#757\n      @ ./reducedim.jl:902 [inlined]\n    [5] all\n      @ ./reducedim.jl:902 [inlined]\n    [6] #1\n      @ /tmp/tmpdx0u5hli.jl:8 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpdx0u5hli.jl:8\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpdx0u5hli.jl:16 [inlined]\n   [11] macro expansion\n      @ /home/a.guh",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFinds numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp3f67yovu.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp3f67yovu.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp3f67yovu.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp3f67yovu.jl:14\ntest set: Error During Test at /tmp/tmp3f67yovu.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp3f67yovu.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % int(y) == 0 for y in string(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpb36i7ldz.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpb36i7ldz.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpb36i7ldz.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpb36i7ldz.jl:11\ntest set: Error During Test at /tmp/tmpb36i7ldz.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] collect(itr::Base.Generator{String, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [4] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [5] iterate\n      @ ./iterators.jl:447 [inlined]\n    [6] iterate\n      @ ./generator.jl:44 [inlined]\n    [7] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n    [8] collect\n      @ ./array.jl:721 [inlined]\n    [9] divisible_by_digits(startnum::Int64, endnum::I",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpb36i7ldz.jl:9\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\tresult = []\n\t\tfor i in startnum:endnum\n\t\t\tif all(i % j == 0 for j in digits(i))\n\t\t\t\tpush!(result, i)\n\t\t\tend\n\t\tend\n\t\treturn result\n\tend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpda4qofw1.jl:18\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpda4qofw1.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpda4qofw1.jl:18 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpda4qofw1.jl:17\ntest set: Error During Test at /tmp/tmpda4qofw1.jl:19\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpda4qofw1.jl:7\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpda4qofw1.jl:19 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpda4qofw1.jl:1",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tThis function returns a vector of numbers that are divisible by their digits.\n\t\"\"\"\n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpbvs8sfp_.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpbvs8sfp_.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpbvs8sfp_.jl:21 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpbvs8sfp_.jl:20\ntest set: Error During Test at /tmp/tmpbvs8sfp_.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpbvs8sfp_.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpbvs8sfp_.jl:22 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpbvs8sfp_.jl",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp3op3lpu9.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp3op3lpu9.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp3op3lpu9.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp3op3lpu9.jl:14\ntest set: Error During Test at /tmp/tmp3op3lpu9.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp3op3lpu9.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % digit(x, i) == 0 for i in 1:length(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp7onm5bgc.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmp7onm5bgc.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp7onm5bgc.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7onm5bgc.jl:12 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmp7onm5bgc.jl:11\ntest set: Error During Test at /tmp/tmp7onm5bgc.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmp7onm5bgc.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp7onm5bgc.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmp7onm5bgc.jl:13 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-l",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\tdivisible_by_digits = []\n\tfor i in startnum:endnum\n\t\tdigits = digits(i)\n\t\tif all(i % j == 0 for j in digits)\n\t\t\tpush!(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmp1x921da7.jl:22\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp1x921da7.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1x921da7.jl:22 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1x921da7.jl:21\ntest set: Error During Test at /tmp/tmp1x921da7.jl:23\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp1x921da7.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1x921da7.jl:23 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1x921da7.jl:21\ntest set: Error During Test at /tmp/tmp1x921da7.jl:24\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  UndefVarError: digits not defined\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmp1x921da7.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1x921da7.jl:24 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1x921da7.jl:21\nTest Summary: | Error  Total\ntest set      |     3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp1x921da7.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [i for i in startnum:endnum if all([i % j == 0 for j in digits(i)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp886lps0n.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp886lps0n.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp886lps0n.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp886lps0n.jl:11\ntest set: Error During Test at /tmp/tmp886lps0n.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(x%digit(x)==0 for digit in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122733,
      "stdout": "test set: Error During Test at /tmp/tmp_fxxeh8c.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: objects of type Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(digit::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmp_fxxeh8c.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_fxxeh8c.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmp_fxxeh8c.jl:12 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmp_fxxeh8c.jl:11\ntest set: Error During Test at /tmp/tmp_fxxeh8c.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: objects of type Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(digit::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmp_fxxeh8c.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_fxxeh8c.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n  ",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_fxxeh8c.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFunction to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\tresult = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmp0ll1is36.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp0ll1is36.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp0ll1is36.jl:21 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0ll1is36.jl:20\ntest set: Error During Test at /tmp/tmp0ll1is36.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp0ll1is36.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp0ll1is36.jl:22 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0ll1is36.jl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp0ll1is36.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t#returns a vector of numbers from startnum to endnum that are divisible by every digit they contain\n\t\n\t#convert startnum and endnum to strings\n\tstartnum_str = string(startnum)\n\tendnum_str = string(endnum)\n\t\n\t#create a vector of the digits in startnum and endnum\n\tstartnum_digits = [parse(Int64, x) for x in startnum_str]\n\tendnum_digits = [parse(Int64, x) for x in endnum_str]\n\t\n\t#create a vector of the numbers from startnum to endnum\n\tnum_range = collect(startnum:endnum)\n\t\n\t#create a vector of the numbers from startnum to endnum that are divisible by every digit they contain\n\tdivisible_by_digits = []\n\tfor num in num_range\n\t\tnum_str = string(num)\n\t\tnum_digits = [parse(Int64, x) for x in num_str]\n\t\tif all(num % digit == 0 for digit in num_digits)\n\t\t\tpush!(divisible_by_digits, num)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmp0srs1dqc.jl:34\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #4\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#4#8\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp0srs1dqc.jl:23\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp0srs1dqc.jl:34 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0srs1dqc.jl:33\ntest set: Error During Test at /tmp/tmp0srs1dqc.jl:35\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #4\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#4#8\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp0srs1dqc.jl:23\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmp0srs1dqc.jl:35 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0srs1dqc.jl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp0srs1dqc.jl:31\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [i for i in startnum:endnum if all([i % j == 0 for j in digits(i)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp886lps0n.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp886lps0n.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp886lps0n.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp886lps0n.jl:11\ntest set: Error During Test at /tmp/tmp886lps0n.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tDivisible by digits\n\t\"\"\"\n\tresult = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmpps3hj2de.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpps3hj2de.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpps3hj2de.jl:21 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpps3hj2de.jl:20\ntest set: Error During Test at /tmp/tmpps3hj2de.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpps3hj2de.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpps3hj2de.jl:22 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpps3hj2de.jl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpps3hj2de.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvmnc0lkv.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvmnc0lkv.jl:8\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpvmnc0lkv.jl:15 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpvmnc0lkv.jl:14\ntest set: Error During Test at /tmp/tmpvmnc0lkv.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvmnc0lkv.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(mod(x,y) == 0 for y in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmp97hy3fmn.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlined]\n   [11] #1\n      @ /tmp/tmp97hy3fmn.jl:5 [inlined]\n   [12] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp97hy3fmn.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp97hy3fmn.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp97hy3fmn.jl:11\ntest set: Error During Test at /tmp/tmp97hy3fmn.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp97hy3fmn.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % parse(Int64, y) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpsn6fejv7.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpsn6fejv7.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpsn6fejv7.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpsn6fejv7.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpsn6fejv7.jl:11\ntest set: Error During Test at /tmp/tmpsn6fejv7.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpsn6fejv7.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpsn6fejv7.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpsn6fejv7.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmp3op3lpu9.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp3op3lpu9.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp3op3lpu9.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp3op3lpu9.jl:14\ntest set: Error During Test at /tmp/tmp3op3lpu9.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp3op3lpu9.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([y in digits(x) for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Test Failed at /tmp/tmp19xj3gwv.jl:12\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n   Evaluated: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  \u2026  13, 14, 15, 16, 17, 18, 19, 20, 21, 22] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:12 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\ntest set: Test Failed at /tmp/tmp19xj3gwv.jl:13\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n   Evaluated: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:13 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\ntest set: Test Failed at /tmp/tmp19xj3gwv.jl:14\n  Expression: candidate(20, 25) == [22, 24]\n   Evaluated: [20, 21, 22, 23, 24, 25] == [22, 24]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:14 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp19xj3gwv.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(mod(x, parse(Int64, y)) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmpcs492sbc.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlined]\n   [11] #1\n      @ /tmp/tmpcs492sbc.jl:5 [inlined]\n   [12] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcs492sbc.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpcs492sbc.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpcs492sbc.jl:11\ntest set: Error During Test at /tmp/tmpcs492sbc.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] div\n      @ ./int.jl:284 [inlined]\n    [2] div\n      @ ./div.jl:257 [inlined]\n    [3] div\n      @ ./div.jl:302 [inlined]\n    [4] fld\n      @ ./div.jl:268 [inlined]\n    [5] mod\n      @ ./int.jl:276 [inlined]\n    [6] #2\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [9] all\n      @ ./reduce.jl:1152 [inlined]\n   [10] all\n      @ ./reduce.jl:1070 [inlin",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcs492sbc.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([y in digits(x) for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122728,
      "stdout": "test set: Test Failed at /tmp/tmp19xj3gwv.jl:12\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n   Evaluated: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10  \u2026  13, 14, 15, 16, 17, 18, 19, 20, 21, 22] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:12 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\ntest set: Test Failed at /tmp/tmp19xj3gwv.jl:13\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n   Evaluated: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:13 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\ntest set: Test Failed at /tmp/tmp19xj3gwv.jl:14\n  Expression: candidate(20, 25) == [22, 24]\n   Evaluated: [20, 21, 22, 23, 24, 25] == [22, 24]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp19xj3gwv.jl:14 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp19xj3gwv.jl:11\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp19xj3gwv.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\tresult = []\n\tfor i in startnum:endnum\n\t\tif i % digits(i) == 0\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122733,
      "stdout": "test set: Error During Test at /tmp/tmpb0sz24o9.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: no method matching rem(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:81\n    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:82\n    ...\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpb0sz24o9.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb0sz24o9.jl:21 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb0sz24o9.jl:20\ntest set: Error During Test at /tmp/tmpb0sz24o9.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: no method matching rem(::Int64, ::Vector{Int64})\n  Closest candidates are:\n    rem(::Any, ::Any, !Matched::RoundingMode{:ToZero}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:80\n    rem(::Any, ::Any, !Matched::RoundingMode{:Down}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:81\n    rem(::Any, ::Any, !Matched::RoundingMode{:Up}) at /home/a.guha/.conda/envs/polyglot/share/julia/base/div.jl:82\n    ...\n  Stacktrace:\n   [1] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpb0sz24o9.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb0sz24o9.jl:22 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpb0sz24o9.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [i for i in startnum:endnum if all([i % j == 0 for j in digits(i)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmp886lps0n.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp886lps0n.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp886lps0n.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp886lps0n.jl:11\ntest set: Error During Test at /tmp/tmp886lps0n.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(i::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x -> all(x % parse(Int64, y) == 0 for y in string(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122729,
      "stdout": "test set: Error During Test at /tmp/tmpsn6fejv7.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpsn6fejv7.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpsn6fejv7.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpsn6fejv7.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpsn6fejv7.jl:11\ntest set: Error During Test at /tmp/tmpsn6fejv7.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpsn6fejv7.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpsn6fejv7.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpsn6fejv7.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t# find all numbers in range\n\tnumbers = collect(startnum:endnum)\n\t# find all numbers divisible by their digits\n\tdivisible = filter(n -> all(n % digit(n) == 0 for digit in digits(n)), numbers)\n\treturn divisible\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122733,
      "stdout": "test set: Error During Test at /tmp/tmpz_gjfpwz.jl:16\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  MethodError: objects of type Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(digit::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmpz_gjfpwz.jl:8 [inlined]\n    [7] filter(f::var\"#1#3\", a::Vector{Int64})\n      @ Base ./array.jl:2484\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpz_gjfpwz.jl:8\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpz_gjfpwz.jl:16 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpz_gjfpwz.jl:15\ntest set: Error During Test at /tmp/tmpz_gjfpwz.jl:17\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  MethodError: objects of type Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(digit::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmpz_gjfpwz.jl:8 [inlined]\n    [7] filter(f::var\"#1#3\", a::Vector{Int64})\n      @ Base ./array.jl:2484\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpz_gjfpwz.jl:8\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ ",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpz_gjfpwz.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(x%d==0 for d in digits(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmpyt0xzdz2.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpyt0xzdz2.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpyt0xzdz2.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [11] macro expansion\n      @ /tmp/tmpyt0xzdz2.jl:12 [inlined]\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [13] top-level scope\n      @ /tmp/tmpyt0xzdz2.jl:11\ntest set: Error During Test at /tmp/tmpyt0xzdz2.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ /tmp/tmpyt0xzdz2.jl:5 [inlined]\n    [8] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [9] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpyt0xzdz2.jl:5\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpyt0xzdz2.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x%y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmpzywd4vjj.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpzywd4vjj.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpzywd4vjj.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpzywd4vjj.jl:11\ntest set: Error During Test at /tmp/tmpzywd4vjj.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpzywd4vjj.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\tresult = []\n\tfor i in startnum:endnum\n\t\tif all(i % j == 0 for j in digits(i))\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmpov0x1b0h.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpov0x1b0h.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpov0x1b0h.jl:21 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpov0x1b0h.jl:20\ntest set: Error During Test at /tmp/tmpov0x1b0h.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpov0x1b0h.jl:10\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpov0x1b0h.jl:22 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpov0x1b0h.jl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpov0x1b0h.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn filter(x->all(x % digit(x, i) == 0 for i in 1:length(x)), startnum:endnum)\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmpy1cwrmua.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmpy1cwrmua.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpy1cwrmua.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpy1cwrmua.jl:12 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpy1cwrmua.jl:11\ntest set: Error During Test at /tmp/tmpy1cwrmua.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmpy1cwrmua.jl:5 [inlined]\n    [7] filter(f::var\"#1#3\", a::UnitRange{Int64})\n      @ Base ./array.jl:2499\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpy1cwrmua.jl:5\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpy1cwrmua.jl:13 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-l",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpy1cwrmua.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tFind numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\t\"\"\"\n\tresult = []\n\tfor i in startnum:endnum\n\t\tif all([i % j == 0 for j in digits(i)])\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmpej3mjb5r.jl:21\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] #1\n     @ ./none:0 [inlined]\n   [3] iterate\n     @ ./generator.jl:47 [inlined]\n   [4] collect(itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}})\n     @ Base ./array.jl:724\n   [5] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpej3mjb5r.jl:10\n   [6] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [7] macro expansion\n     @ /tmp/tmpej3mjb5r.jl:21 [inlined]\n   [8] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [9] top-level scope\n     @ /tmp/tmpej3mjb5r.jl:20\ntest set: Error During Test at /tmp/tmpej3mjb5r.jl:22\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] #1\n     @ ./none:0 [inlined]\n   [3] iterate\n     @ ./generator.jl:47 [inlined]\n   [4] collect(itr::Base.Generator{Vector{Int64}, var\"#1#2\"{Int64}})\n     @ Base ./array.jl:724\n   [5] divisible_by_digits(startnum::Int64, endnum::Int64)\n     @ Main /tmp/tmpej3mjb5r.jl:10\n   [6] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [7] macro expansion\n     @ /tmp/tmpej3mjb5r.jl:22 [inlined]\n   [8] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [9] top-level scope\n     @ /tmp/tmpej3mjb5r.jl:20\ntest set: Error During Test at /tmp/tmpej3mjb5r.jl:23\n  Test threw exception\n  Expression: candidate(20, 25) == [22, 24]\n  DivideError: integer division error\n  Stacktrace:\n   [1] rem\n     @ ./int.jl:285 [inlined]\n   [2] #1\n     @ ./none:0 [inlined]\n   [3] iterate\n     @ ./generator.jl:47 [inl",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpej3mjb5r.jl:18\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n    return [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpbwj1ltc2.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpbwj1ltc2.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmpbwj1ltc2.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmpbwj1ltc2.jl:11\ntest set: Error During Test at /tmp/tmpbwj1ltc2.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpbwj1ltc2.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % parse(Int64, y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmppmje62l4.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmppmje62l4.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmppmje62l4.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmppmje62l4.jl:11\ntest set: Error During Test at /tmp/tmppmje62l4.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1164\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmppmje62l4.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t# Create a vector of numbers from startnum to endnum\n\tnumbers = collect(startnum:endnum)\n\t# Create a vector of numbers that are divisible by their digits\n\tdivisible_by_digits = filter(n -> all(n % digit(n, i) == 0 for i in 1:length(n)), numbers)\n\treturn divisible_by_digits\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122732,
      "stdout": "test set: Error During Test at /tmp/tmpurztwgz3.jl:16\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmpurztwgz3.jl:8 [inlined]\n    [7] filter(f::var\"#1#3\", a::Vector{Int64})\n      @ Base ./array.jl:2484\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpurztwgz3.jl:8\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpurztwgz3.jl:16 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level scope\n      @ /tmp/tmpurztwgz3.jl:15\ntest set: Error During Test at /tmp/tmpurztwgz3.jl:17\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: digit not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(i::Int64)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all\n      @ ./reduce.jl:1156 [inlined]\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ /tmp/tmpurztwgz3.jl:8 [inlined]\n    [7] filter(f::var\"#1#3\", a::Vector{Int64})\n      @ Base ./array.jl:2484\n    [8] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpurztwgz3.jl:8\n    [9] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [10] macro expansion\n      @ /tmp/tmpurztwgz3.jl:17 [inlined]\n   [11] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [12] top-level s",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpurztwgz3.jl:13\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % y == 0 for y in digits(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122723,
      "stdout": "test set: Error During Test at /tmp/tmp_sa_qxhk.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1152 [inlined]\n    [6] all\n      @ ./reduce.jl:1070 [inlined]\n    [7] #1\n      @ ./none:0 [inlined]\n    [8] iterate\n      @ ./iterators.jl:447 [inlined]\n    [9] iterate\n      @ ./generator.jl:44 [inlined]\n   [10] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n   [11] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [12] collect\n      @ ./array.jl:721 [inlined]\n   [13] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_sa_qxhk.jl:5\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [15] macro expansion\n      @ /tmp/tmp_sa_qxhk.jl:12 [inlined]\n   [16] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [17] top-level scope\n      @ /tmp/tmp_sa_qxhk.jl:11\ntest set: Error During Test at /tmp/tmp_sa_qxhk.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] _all(f::typeof(identity), itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [5] all\n      @ ./reduce.jl:1",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_sa_qxhk.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmpvncaws70.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpvncaws70.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpvncaws70.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpvncaws70.jl:11\ntest set: Error During Test at /tmp/tmpvncaws70.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpvncaws70.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\treturn [x for x in startnum:endnum if all(x % int(y) == 0 for y in string(x))]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1665509867,
      "stdout": "test set: Error During Test at /tmp/tmp_c19nqaw.jl:12\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:797\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmp_c19nqaw.jl:5\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmp_c19nqaw.jl:12 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmp_c19nqaw.jl:11\ntest set: Error During Test at /tmp/tmp_c19nqaw.jl:13\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  UndefVarError: int not defined\n  Stacktrace:\n    [1] (::var\"#2#4\"{Int64})(y::Char)\n      @ Main ./none:0\n    [2] iterate\n      @ ./generator.jl:47 [inlined]\n    [3] _all(f::typeof(identity), itr::Base.Generator{String, var\"#2#4\"{Int64}}, #unused#::Colon)\n      @ Base ./reduce.jl:1156\n    [4] all\n      @ ./reduce.jl:1152 [inlined]\n    [5] all\n      @ ./reduce.jl:1070 [inlined]\n    [6] #1\n      @ ./none:0 [inlined]\n    [7] iterate\n      @ ./iterators.jl:447 [inlined]\n    [8] iterate\n      @ ./generator.jl:44 [inlined]\n    [9] grow_to!(dest::Vector{",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp_c19nqaw.jl:9\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\nfunction divisible_by_digits(startnum::Int64, endnum::Int64)::Vector{Int64} \n\t\"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jlthon-exercises/lambda/jlthon-lambda-exercise-24.php\n\t\"\"\"\n\treturn [x for x in startnum:endnum if all([x % y == 0 for y in digits(x)])]\nend\nusing Test\n\n@testset begin\n\ncandidate = divisible_by_digits;\n\t@test(candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\n\t@test(candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\n\t@test(candidate(20, 25) == [22, 24])\nend\n",
      "timestamp": 1666122724,
      "stdout": "test set: Error During Test at /tmp/tmpcw_byx55.jl:15\n  Test threw exception\n  Expression: candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)}, st::Int64)\n      @ Base ./array.jl:828\n    [9] grow_to!(dest::Vector{Int64}, itr::Base.Generator{Base.Iterators.Filter{var\"#1#3\", UnitRange{Int64}}, typeof(identity)})\n      @ Base ./array.jl:801\n   [10] collect\n      @ ./array.jl:721 [inlined]\n   [11] divisible_by_digits(startnum::Int64, endnum::Int64)\n      @ Main /tmp/tmpcw_byx55.jl:8\n   [12] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [13] macro expansion\n      @ /tmp/tmpcw_byx55.jl:15 [inlined]\n   [14] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [15] top-level scope\n      @ /tmp/tmpcw_byx55.jl:14\ntest set: Error During Test at /tmp/tmpcw_byx55.jl:16\n  Test threw exception\n  Expression: candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n  DivideError: integer division error\n  Stacktrace:\n    [1] rem\n      @ ./int.jl:285 [inlined]\n    [2] #2\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{Vector{Int64}, var\"#2#4\"{Int64}})\n      @ Base ./array.jl:724\n    [5] (::var\"#1#3\")(x::Int64)\n      @ Main ./none:0\n    [6] iterate\n      @ ./iterators.jl:447 [inlined]\n    [7] iterate\n      @ ./generator.jl:44 [inlined]\n    [8] grow_to!(dest::Vec",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpcw_byx55.jl:12\n",
      "exit_code": -1,
      "status": "Timeout"
    }
  ]
}