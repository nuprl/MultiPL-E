{
  "name": "mbpp_586_split_Arr",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\n\t\"\"\"\nfunction split_Arr(l::Vector{Int64}, n::Int64)::Vector{Int64} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = split_Arr;\n\t@test(candidate([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10])\n\t@test(candidate([1, 2, 3, 4], 1) == [2, 3, 4, 1])\n\t@test(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3) == [3, 4, 5, 6, 7, 0, 1, 2])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\t\treturn [l[n+1:end];l[1:n]]\n\tend",
    "\tif n > length(l)\n\t\treturn l\n\tend\n\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n:end], l[1:n-1])\n\tend\nend",
    "\tif n > length(l)\n\t\tprintln(\"n is greater than length of vector\")\n\t\treturn l\n\tend\n\treturn [l[i] for i in n:length(l)] .+ [l[i] for i in 1:n-1]\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend",
    "\treturn [l[n+1:end]; l[1:n]]\nend",
    "\tif n == 0\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\treturn vcat(l2, l1)\nend",
    "\tl1 = l[1:n]\n\tl2 = l[n+1:end]\n\treturn vcat(l2, l1)\nend",
    "\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\treturn vcat(l[n:end], l[1:n-1])\nend",
    "\t\"\"\"\n\tWrite a jlthon function to split a vector at the nth eelment and add the first part to the end.\n\t\"\"\"\n\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tif n > length(l)\n\t\treturn l\n\telse\n\t\treturn vcat(l[n+1:end], l[1:n])\n\tend\nend",
    "\tl = [l[n+1:end]; l[1:n]]\n\treturn l\nend",
    "\tl_1 = l[1:n]\n\tl_2 = l[n+1:end]\n\treturn vcat(l_2, l_1)\nend",
    "\treturn vcat(l[n+1:end], l[1:n])\nend"
  ]
}