{
  "name": "mbpp_554_Split",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in 1:length(list)\n\t\tif list[i] % 2 == 1\n\t\t\tpush!(odds, list[i])\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds,i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x%2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds,i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tnew_list = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(new_list, i)\n\t\tend\n\tend\n\treturn new_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds,i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 == 1, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\t\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x%2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [i for i in list if i%2==1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x%2!=0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd_list = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn odd_list\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tresult = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 != 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn filter(x -> x % 2 != 0, list)\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\tresult = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todd = Vector{Int64}()\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odd, i)\n\t\tend\n\tend\n\treturn odd\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\treturn [x for x in list if x % 2 == 1]\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = Vector{Int64}()\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i%2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1666123096,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 == 1\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a jlthon function which takes a vector of integers and only returns the odd ones.\n\t\"\"\"\nfunction Split(list::Vector{Int64})::Vector{Int64} \n\todds = []\n\tfor i in list\n\t\tif i % 2 != 0\n\t\t\tpush!(odds, i)\n\t\tend\n\tend\n\treturn odds\nend\nusing Test\n\n@testset begin\n\ncandidate = Split;\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == [1, 3, 5])\n\t@test(candidate([10, 11, 12, 13]) == [11, 13])\n\t@test(candidate([7, 8, 9, 1]) == [7, 9, 1])\nend\n",
      "timestamp": 1665510246,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}