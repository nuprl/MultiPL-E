{
  "name": "mbpp_635_heap_sort",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\nfunction heap_sort(iterable::Vector{Int64})::Vector{Int64} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = heap_sort;\n\t@test(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85])\n\t@test(candidate([7, 1, 9, 5]) == [1, 5, 7, 9])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tSort the given vector using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\theap_sort = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\theap_sort[i] = pop!(heap)\n\tend\n\treturn heap_sort\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\theap = Heap()\n\tfor i in iterable\n\t\tpush!(heap, i)\n\tend\n\tsorted_vector = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_vector, pop!(heap))\n\tend\n\treturn sorted_vector\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\t# Build the heap\n\theap = build_heap(iterable)\n\t# Sort the heap\n\tsorted_heap = sort_heap(heap)\n\t# Return the sorted heap\n\treturn sorted_heap\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_vector = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted_vector[i] = pop!(heap)\n\tend\n\treturn sorted_vector\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_vector = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_vector, pop!(heap))\n\tend\n\treturn sorted_vector\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\t# Build the heap\n\theapify(iterable)\n\t# Sort the heap\n\tfor i in length(iterable):-1:1\n\t\titerable[1], iterable[i] = iterable[i], iterable[1]\n\t\tsift_down(iterable, 1, i-1)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t# Build a max heap\n\tbuild_max_heap(iterable)\n\t# The last element is already in place\n\tfor i in (length(iterable)-1):-1:1\n\t\t# Swap the first and the last element\n\t\titerable[1], iterable[i+1] = iterable[i+1], iterable[1]\n\t\t# Sift down the new root element to its correct position\n\t\tsift_down(iterable, 1, i)\n\tend\n\treturn iterable\nend",
    "\t\"\"\"\n\tSort the given vector using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_vector = []\n\tfor i in 1:length(iterable)\n\t\tpush!(sorted_vector, pop!(heap))\n\tend\n\treturn sorted_vector\nend",
    "\t\"\"\"\n\tWrite a function to sort the given vector.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\t\"\"\"\n\tSort the given vector using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\tsorted_vector = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted_vector[i] = pop!(heap)\n\tend\n\treturn sorted_vector\nend",
    "\theap = Heap(iterable)\n\treturn sort(heap)\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}(undef, length(iterable))\n\tfor i in 1:length(iterable)\n\t\tsorted[i] = pop!(heap)\n\tend\n\treturn sorted\nend",
    "\theap = Heap(iterable)\n\tsorted_vector = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted_vector, pop!(heap))\n\tend\n\treturn sorted_vector\nend",
    "\theap = Heap(iterable)\n\tsorted = Vector{Int64}()\n\twhile !isempty(heap)\n\t\tpush!(sorted, pop!(heap))\n\tend\n\treturn sorted\nend",
    "\t\"\"\"\n\tSort the given vector using heap sort.\n\t\"\"\"\n\theap = Heap(iterable)\n\treturn heap.sort()\nend",
    "\theap = Heap()\n\tfor i in iterable\n\t\tpush!(heap, i)\n\tend\n\treturn collect(heap)\nend"
  ]
}