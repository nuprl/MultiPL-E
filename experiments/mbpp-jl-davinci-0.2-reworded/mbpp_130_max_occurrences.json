{
  "name": "mbpp_130_max_occurrences",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the item with maximum frequency in a given vector.\n\t\"\"\"\nfunction max_occurrences(nums::Vector{Int64})::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = max_occurrences;\n\t@test(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]) == 2)\n\t@test(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]) == 8)\n\t@test(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]) == 20)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t# create a dictionary to store the frequency of each number\n\tfreq = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(freq, num)\n\t\t\tfreq[num] += 1\n\t\telse\n\t\t\tfreq[num] = 1\n\t\tend\n\tend\n\t# find the maximum frequency\n\tmax_freq = 0\n\tfor (num, freq) in freq\n\t\tif freq > max_freq\n\t\t\tmax_freq = freq\n\t\tend\n\tend\n\t# find the number with the maximum frequency\n\tfor (num, freq) in freq\n\t\tif freq == max_freq\n\t\t\treturn num\n\t\tend\n\tend\nend",
    "\tmax_count = 0\n\tmax_item = 0\n\tfor i in 1:length(nums)\n\t\tcount = 0\n\t\tfor j in 1:length(nums)\n\t\t\tif nums[i] == nums[j]\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_item = nums[i]\n\t\tend\n\tend\n\treturn max_item\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given vector.\n\t\"\"\"\n\t# create a dictionary to store the frequency of each item\n\tfreq = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(freq, i)\n\t\t\tfreq[i] += 1\n\t\telse\n\t\t\tfreq[i] = 1\n\t\tend\n\tend\n\t# find the maximum frequency\n\tmax_freq = 0\n\tfor i in freq\n\t\tif i[2] > max_freq\n\t\t\tmax_freq = i[2]\n\t\tend\n\tend\n\t# find the item with maximum frequency\n\tfor i in freq\n\t\tif i[2] == max_freq\n\t\t\treturn i[1]\n\t\tend\n\tend\nend",
    "\t# Initialize a dictionary to store the number of occurrences of each number\n\toccurrences = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(occurrences, num)\n\t\t\toccurrences[num] += 1\n\t\telse\n\t\t\toccurrences[num] = 1\n\t\tend\n\tend\n\t# Find the maximum number of occurrences\n\tmax_occurrence = 0\n\tfor (key, value) in occurrences\n\t\tif value > max_occurrence\n\t\t\tmax_occurrence = value\n\t\tend\n\tend\n\treturn max_occurrence\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given vector.\n\t\"\"\"\n\tcounts = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(counts, i)\n\t\t\tcounts[i] += 1\n\t\telse\n\t\t\tcounts[i] = 1\n\t\tend\n\tend\n\tmax_count = 0\n\tmax_item = 0\n\tfor (item, count) in counts\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_item = item\n\t\tend\n\tend\n\treturn max_item\nend",
    "\t# Initialize a dictionary to store the frequency of each element\n\tfreq = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(freq, num)\n\t\t\tfreq[num] += 1\n\t\telse\n\t\t\tfreq[num] = 1\n\t\tend\n\tend\n\t# Find the maximum frequency\n\tmax_freq = 0\n\tfor (num, freq) in freq\n\t\tif freq > max_freq\n\t\t\tmax_freq = freq\n\t\tend\n\tend\n\t# Find the element with maximum frequency\n\tfor (num, freq) in freq\n\t\tif freq == max_freq\n\t\t\treturn num\n\t\tend\n\tend\nend",
    "\tcounts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(counts, num)\n\t\t\tcounts[num] += 1\n\t\telse\n\t\t\tcounts[num] = 1\n\t\tend\n\tend\n\tmax_count = 0\n\tmax_num = 0\n\tfor (num, count) in counts\n\t\tif count > max_count\n\t\t\tmax_count = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend",
    "\tmax_occurrences = 0\n\tmax_occurrence = 0\n\tfor i in 1:length(nums)\n\t\toccurrences = 0\n\t\tfor j in 1:length(nums)\n\t\t\tif nums[i] == nums[j]\n\t\t\t\toccurrences += 1\n\t\t\tend\n\t\tend\n\t\tif occurrences > max_occurrences\n\t\t\tmax_occurrences = occurrences\n\t\t\tmax_occurrence = nums[i]\n\t\tend\n\tend\n\treturn max_occurrence\nend",
    "\tmax_occurrences = 0\n\tmax_occurrences_item = 0\n\tfor i in 1:length(nums)\n\t\toccurrences = 0\n\t\tfor j in 1:length(nums)\n\t\t\tif nums[i] == nums[j]\n\t\t\t\toccurrences += 1\n\t\t\tend\n\t\tend\n\t\tif occurrences > max_occurrences\n\t\t\tmax_occurrences = occurrences\n\t\t\tmax_occurrences_item = nums[i]\n\t\tend\n\tend\n\treturn max_occurrences_item\nend",
    "\tcounts = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(counts, i)\n\t\t\tcounts[i] += 1\n\t\telse\n\t\t\tcounts[i] = 1\n\t\tend\n\tend\n\treturn argmax(values(counts))\nend",
    "\tcounts = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(counts, i)\n\t\t\tcounts[i] += 1\n\t\telse\n\t\t\tcounts[i] = 1\n\t\tend\n\tend\n\tmax_count = maximum(values(counts))\n\tfor (k, v) in counts\n\t\tif v == max_count\n\t\t\treturn k\n\t\tend\n\tend\nend",
    "\t# Create a dictionary to store the frequencies of the elements in the vector\n\tfrequencies = Dict{Int64, Int64}()\n\t\n\t# Iterate through the vector and update the frequencies\n\tfor num in nums\n\t\tif haskey(frequencies, num)\n\t\t\tfrequencies[num] += 1\n\t\telse\n\t\t\tfrequencies[num] = 1\n\t\tend\n\tend\n\t\n\t# Find the maximum frequency\n\tmax_freq = 0\n\tfor (key, value) in frequencies\n\t\tif value > max_freq\n\t\t\tmax_freq = value\n\t\tend\n\tend\n\t\n\t# Find the element with the maximum frequency\n\tfor (key, value) in frequencies\n\t\tif value == max_freq\n\t\t\treturn key\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given vector.\n\t\"\"\"\n\t# Initialize the dictionary\n\td = Dict{Int64, Int64}()\n\t# Initialize the maximum frequency\n\tmax_freq = 0\n\t# Initialize the item with maximum frequency\n\tmax_item = 0\n\t# Iterate over the vector\n\tfor i in nums\n\t\t# If the item is not in the dictionary\n\t\tif !haskey(d, i)\n\t\t\t# Add the item to the dictionary\n\t\t\td[i] = 1\n\t\t# If the item is in the dictionary\n\t\telse\n\t\t\t# Increment the frequency of the item\n\t\t\td[i] += 1\n\t\tend\n\t\t# If the frequency of the item is greater than the maximum frequency\n\t\tif d[i] > max_freq\n\t\t\t# Update the maximum frequency\n\t\t\tmax_freq = d[i]\n\t\t\t# Update the item with maximum frequency\n\t\t\tmax_item = i\n\t\tend\n\tend\n\t# Return the item with maximum frequency\n\treturn max_item\nend",
    "\t# create a dictionary to store the frequency of each element\n\tfreq = Dict{Int64, Int64}()\n\t# iterate through the vector\n\tfor i in nums\n\t\t# if the element is not in the dictionary, add it with a frequency of 1\n\t\tif !(haskey(freq, i))\n\t\t\tfreq[i] = 1\n\t\t# if the element is already in the dictionary, increment its frequency by 1\n\t\telse\n\t\t\tfreq[i] += 1\n\t\tend\n\tend\n\t# find the maximum frequency\n\tmax_freq = maximum(values(freq))\n\t# find the element with the maximum frequency\n\tfor (key, value) in freq\n\t\tif value == max_freq\n\t\t\treturn key\n\t\tend\n\tend\nend",
    "\tcounts = Dict{Int64, Int64}()\n\tfor num in nums\n\t\tif haskey(counts, num)\n\t\t\tcounts[num] += 1\n\t\telse\n\t\t\tcounts[num] = 1\n\t\tend\n\tend\n\tmax_key = 0\n\tmax_val = 0\n\tfor (key, val) in counts\n\t\tif val > max_val\n\t\t\tmax_key = key\n\t\t\tmax_val = val\n\t\tend\n\tend\n\treturn max_key\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given vector.\n\t\"\"\"\n\t\n\t# Initialize a dictionary to store the frequency of each item\n\tfreq = Dict{Int64, Int64}()\n\t\n\t# Loop through the vector and count the frequency of each item\n\tfor i in nums\n\t\tif haskey(freq, i)\n\t\t\tfreq[i] += 1\n\t\telse\n\t\t\tfreq[i] = 1\n\t\tend\n\tend\n\t\n\t# Find the item with maximum frequency\n\tmax_freq = 0\n\tmax_item = 0\n\tfor (k, v) in freq\n\t\tif v > max_freq\n\t\t\tmax_freq = v\n\t\t\tmax_item = k\n\t\tend\n\tend\n\t\n\treturn max_item\nend",
    "\t# Initialize a dictionary to store the frequency of each element\n\tfreq = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(freq, i)\n\t\t\tfreq[i] += 1\n\t\telse\n\t\t\tfreq[i] = 1\n\t\tend\n\tend\n\t# Find the maximum value in the dictionary\n\tmax_freq = 0\n\tfor (key, value) in freq\n\t\tif value > max_freq\n\t\t\tmax_freq = value\n\t\tend\n\tend\n\treturn max_freq\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given vector.\n\t\"\"\"\n\t\n\t# Create a dictionary to store the frequency of each item\n\tfreq = Dict{Int64, Int64}()\n\t\n\t# Iterate over the vector\n\tfor i in nums\n\t\t# If the item is not in the dictionary, add it with a frequency of 1\n\t\tif !haskey(freq, i)\n\t\t\tfreq[i] = 1\n\t\t# If the item is in the dictionary, increment its frequency\n\t\telse\n\t\t\tfreq[i] += 1\n\t\tend\n\tend\n\t\n\t# Create a vector to store the frequencies\n\tfreq_vec = [freq[i] for i in keys(freq)]\n\t\n\t# Return the item with maximum frequency\n\treturn findmax(freq_vec)[2]\nend",
    "\t# Initialize a dictionary to store the frequency of each number\n\tfreq = Dict{Int64, Int64}()\n\t\n\t# Initialize the maximum frequency to 0\n\tmax_freq = 0\n\t\n\t# Initialize the number with maximum frequency to 0\n\tmax_num = 0\n\t\n\t# Iterate over the vector\n\tfor num in nums\n\t\t# If the number is not in the dictionary, initialize its frequency to 1\n\t\tif !haskey(freq, num)\n\t\t\tfreq[num] = 1\n\t\telse\n\t\t\t# Increment the frequency of the number\n\t\t\tfreq[num] += 1\n\t\tend\n\t\t\n\t\t# If the frequency of the number is greater than the maximum frequency, update the maximum frequency and the number with maximum frequency\n\t\tif freq[num] > max_freq\n\t\t\tmax_freq = freq[num]\n\t\t\tmax_num = num\n\t\tend\n\tend\n\t\n\t# Return the number with maximum frequency\n\treturn max_num\nend",
    "\t\"\"\"\n\tFind the item with maximum frequency in a given vector.\n\t\"\"\"\n\tcounts = Dict{Int64, Int64}()\n\tfor i in nums\n\t\tif haskey(counts, i)\n\t\t\tcounts[i] += 1\n\t\telse\n\t\t\tcounts[i] = 1\n\t\tend\n\tend\n\treturn argmax(values(counts))\nend"
  ]
}