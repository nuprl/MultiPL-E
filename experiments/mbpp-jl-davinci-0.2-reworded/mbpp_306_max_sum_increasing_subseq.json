{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\nfunction max_sum_increasing_subseq(a::Vector{Int64}, n::Int64, index::Int64, k::Int64)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = max_sum_increasing_subseq;\n\t@test(candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11)\n\t@test(candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7)\n\t@test(candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\t\n\tif k > index\n\t\treturn max_sum + a[index]\n\telse\n\t\treturn max_sum\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index < k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index-1))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tindex: index of element in array\n\tk: index of element in array\n\t\"\"\"\n\tif index == 0\n\t\treturn a[index]\n\tend\n\tif index == 1\n\t\treturn max(a[index], a[index-1])\n\tend\n\tif k == index\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k))\n\telse\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k))\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\tif index == 1\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tmax_sum = 0\n\tfor i in index:k\n\t\tif a[i] > a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn a[k]\n\telse\n\t\treturn max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, 1), a[index])\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), a[index])\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[k]\n\tend\n\tmax_sum = 0\n\tfor i in 1:index\n\t\tif a[i] < a[k]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\treturn max_sum + a[k]\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\tif index == 1\n\t\treturn a[index]\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\tif index < k\n\t\treturn max_sum + a[index]\n\telse\n\t\treturn max_sum\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index, k - 1))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[k]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\t\n\treturn max_sum + a[k]\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index > k\n\t\treturn 0\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\t\n\tif k == 0\n\t\treturn 0\n\tend\n\t\n\tif index == 1\n\t\tif a[1] < a[k]\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index-1) + a[index])\nend",
    "\t# Base case\n\tif index == 0\n\t\treturn 0\n\tend\n\t\n\t# Recursive case\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, index))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, 1)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k])\nend",
    "\tif index == n\n\t\treturn 0\n\tend\n\tif k == n\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k+1)\n\tend\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tindex: index to start from\n\tk: index to include\n\t\"\"\"\n\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k-1), a[k] + max_sum_increasing_subseq(a, n, index-1, k-1))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index < k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index < k\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, index - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif a[1] < a[k]\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == index\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), a[index])\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of the array\n\tindex: index of the array\n\tk: index of the array\n\t\"\"\"\n\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tif k <= index\n\t\treturn 0\n\tend\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\t\"\"\"\n\ta = array of elements\n\tn = size of array\n\tindex = index of element\n\tk = index of element to be included in the subsequence\n\t\"\"\"\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index < k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2) + a[index])\n\telse\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2))\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif a[1] < a[k]\n\t\t\treturn a[k]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[k])\nend",
    "\t\"\"\"\n\ta is the array of elements\n\tn is the length of array\n\tindex is the index of the element in the array\n\tk is the index of the element in the array which is after index\n\t\"\"\"\n\tif index == 0\n\t\treturn a[index]\n\tend\n\tif k == 0\n\t\treturn a[index]\n\tend\n\tif a[index] > a[k]\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k) + a[index]\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k-1)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\treturn max(a[k] + max_sum_increasing_subseq(a, n, index - 1, index), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 1\n\t\treturn max(a[k], max_sum_increasing_subseq(a, n, index-1, k))\n\tend\n\treturn max(a[k] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k))\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\treturn max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif a[1] < a[k]\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, index))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k-1), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\tif k > index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index < k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\tend\n\treturn max_sum_increasing_subseq(a, n, index-1, k)\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tindex: index to find the max sum\n\tk: index to include in the sum\n\t\"\"\"\n\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "    if index == 1\n        return a[index]\n    end\n    if k <= index\n        return max_sum_increasing_subseq(a, n, index-1, k)\n    end\n    return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, index))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == index\n\t\treturn sum(a[1:index])\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn a[index]\n\tend\n\tif k > index\n\t\treturn 0\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tmax_sum = 0\n\tfor i = 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index) + a[index])\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2) + a[index])\n\telse\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2))\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == n\n\t\treturn 0\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index > k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k+1) + a[index])\n\telse\n\t\tif a[k] < a[index]\n\t\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k+1) + a[index])\n\t\telse\n\t\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\ta : array of integers\n\tn : size of array\n\tindex : index of array\n\tk : index of array\n\t\"\"\"\n\tif index == 1\n\t\treturn a[index]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index > k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, 2) + a[index]\n\tend\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tif k == 1\n\t\treturn a[index]\n\tend\n\t\n\tif k < index\n\t\treturn 0\n\tend\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\treturn max(a[k] + max_sum_increasing_subseq(a, n, index - 1, index), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\t\"\"\"\n\ta: input array\n\tn: length of array\n\tindex: index of array\n\tk: index of array\n\t\"\"\"\n\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tif k <= index\n\t\treturn 0\n\tend\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index, k - 1))\nend",
    "\t\"\"\"\n\t\ta: array of elements\n\t\tn: length of array\n\t\tindex: index of the element\n\t\tk: index of the element to be included\n\t\"\"\"\n\tif index == 0\n\t\treturn a[k]\n\tend\n\t\n\tif k == 0\n\t\treturn a[k]\n\tend\n\t\n\tif k < index\n\t\treturn 0\n\tend\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[k] + max_sum_increasing_subseq(a, n, index - 1, index - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), a[index])\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\t\"\"\"\n\ta = input array\n\tn = length of array\n\tindex = index of array\n\tk = kth element\n\t\"\"\"\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn max_sum_increasing_subseq(a, n, index-1, index)\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[k]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\t\n\treturn max_sum + a[index]\nend",
    "\tif index == n \n\t\treturn 0\n\tend\n\tif k == n\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k + 1)\n\tend\nend",
    "\t\"\"\"\n\ta: array of elements\n\tn: length of array\n\tindex: index of element\n\tk: index of element to be included\n\t\"\"\"\n\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "    if index == 0\n        return 0\n    end\n    if index == 1\n        if k == 1\n            return a[1]\n        else\n            return 0\n        end\n    end\n    if k == 1\n        return max(a[1], max_sum_increasing_subseq(a, n, index-1, k))\n    end\n    return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\t\"\"\"\n\tFind the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif a[1] <= a[k]\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == index\n\t\treturn max_sum_increasing_subseq(a, n, index-1, index-1)\n\tend\n\tif a[index] <= a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index-1) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tif index == k\n\t\treturn a[index]\n\tend\n\t\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index < k\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif index == 1\n\t\treturn a[1] + max_sum_increasing_subseq(a, n, index - 1, k - 1)\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index])\nend",
    "\t\"\"\"\n\ta: array of elements\n\tn: length of array\n\tindex: index of the element\n\tk: index of the element after index\n\t\"\"\"\n\tif index == n\n\t\treturn 0\n\tend\n\tif k == n\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, index+1) + a[k])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k+1)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(a[1], max_sum_increasing_subseq(a, n, index-1, 1))\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == n\n\t\treturn 0\n\tend\n\tif k == n\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index + 1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\tif index < k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index))\n\t\tend\n\tend\n\t\n\treturn max_sum + a[index]\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index > k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index, k-1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index, k-1), a[k] + max_sum_increasing_subseq(a, n, index-1, index-1))\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\t\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\t\n\tif index < k\n\t\treturn max_sum\n\telse\n\t\treturn max_sum + a[index]\n\tend\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[k])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\tif k > index\n\t\treturn -1\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, 1)\n\tend\nend",
    "\t\"\"\"\n\ta: input array\n\tn: length of array\n\tindex: index of array\n\tk: index of array\n\t\"\"\"\n\tif index == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\t\"\"\"\n\tThis function returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif a[1] < a[k]\n\t\t\treturn a[k]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k > index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k > index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[k]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, i) + a[k])\n\t\tend\n\tend\n\treturn max_sum\nend",
    "\t\"\"\"\n\t\ta: array of elements\n\t\tn: length of array\n\t\tindex: index of element\n\t\tk: index of element to be included\n\t\"\"\"\n\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "    if index == 0\n        return 0\n    end\n    if index == 1\n        return a[1]\n    end\n    if k == index\n        return max_sum_increasing_subseq(a, n, index-1, k) + a[index]\n    end\n    return max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\nend",
    "\tif index == n\n\t\treturn 0\n\tend\n\tif k == n\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k+1)\n\tend\nend",
    "\t# Base case \n\tif index == n \n\t\treturn 0\n\tend\n\t# if k is not in range of i then return 0 \n\tif k < index \n\t\treturn 0\n\tend\n\t# if a[k] is less than a[i] then return 0 \n\tif a[k] < a[index] \n\t\treturn 0\n\tend\n\t# return maximum of two cases \n\t# (i) including a[k] in increasing subsequence \n\t# (ii) excluding a[k] from increasing subsequence \n\treturn max(a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[k] + max_sum_increasing_subseq(a, n, index-1, index))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif k == n\n\t\treturn 0\n\tend\n\tif index == k\n\t\treturn a[k]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, index, k+1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\t\"\"\"\n\ta: array of numbers\n\tn: length of array\n\tindex: index of the array\n\tk: index of the array\n\t\"\"\"\n\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 0\n\t\treturn a[k]\n\tend\n\treturn max(a[k] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k))\nend",
    "\t\"\"\"\n\ta: input array\n\tn: length of array\n\tindex: index of array\n\tk: kth element\n\t\"\"\"\n\t# base case\n\tif index == 0\n\t\treturn 0\n\tend\n\t# recursive case\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, index))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index))\n\t\tend\n\tend\n\treturn max_sum + a[index]\nend",
    "\tmax_sum = 0\n\tfor i in index:k\n\t\tif a[i] > a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\treturn max_sum + a[index]\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index > k\n\t\treturn 0\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k < index\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\t\"\"\"\n\ta: input array\n\tn: length of array\n\tindex: index of element to be included\n\tk: index of element to be included\n\t\"\"\"\n\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index, k-1), a[k] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index, k - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\t\"\"\"\n\ta: Array of elements\n\tn: length of array\n\tindex: index of element\n\tk: index of element\n\t\"\"\"\n\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k <= index\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k > index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\treturn a[index]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif index > k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tif index == k\n\t\treturn a[index]\n\tend\n\t\n\tif k > index\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\n\t\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif a[index] < a[k]\n\t\t\treturn a[index]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[k])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[k]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\treturn max_sum + a[k]\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn a[k]\n\telse\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[k])\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tif k == 1\n\t\treturn a[index]\n\tend\n\t\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tindex: index of the array\n\tk: index of the array\n\t\"\"\"\n\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index-1) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index, k-1), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\t# base case\n\tif index == 0\n\t\treturn 0\n\tend\n\t# recursive case\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, index))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\t\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index))\n\t\tend\n\tend\n\t\n\tif k > index\n\t\treturn max_sum + a[index]\n\telse\n\t\treturn max_sum\n\tend\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == index\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\t\"\"\"\n\t\ta: array of elements\n\t\tn: length of array\n\t\tindex: index of element\n\t\tk: index of element to be included\n\t\"\"\"\n\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[k] > a[index]\n\t\treturn max(a[k] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index, k-1))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[k])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\n\tif a[index] < a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k-1), a[index] + max_sum_increasing_subseq(a, n, index-1, k))\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\nend",
    "\t\"\"\"\n\ta: array of integers\n\tn: length of array\n\tindex: index of array\n\tk: index of array\n\t\"\"\"\n\tif index == 0\n\t\treturn a[k]\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[k])\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(a[1], max_sum_increasing_subseq(a, n, index-1, k))\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\t\"\"\"\n\t\ta: array of integers\n\t\tn: length of array\n\t\tindex: index of element to be included\n\t\tk: index of element to be included\n\t\"\"\"\n\tif index == 0\n\t\treturn a[k]\n\tend\n\t\n\tif k == 0\n\t\treturn 0\n\tend\n\t\n\tif a[k] > a[index]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k-1), max_sum_increasing_subseq(a, n, index-1, k-1) + a[k])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k-1)\n\tend\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\nend",
    "    if index == 0\n        return 0\n    end\n    if k == 0\n        return 0\n    end\n    if index == 1\n        if a[index] > a[k]\n            return a[index]\n        else\n            return 0\n        end\n    end\n    return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, index))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k <= index\n\t\treturn max_sum_increasing_subseq(a, n, index - 1, k)\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\tif k > index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\t\"\"\"\n\ta: input array\n\tn: size of array\n\tindex: index of array\n\tk: index of array\n\t\"\"\"\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k))\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k <= index\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index, k - 1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif index == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[k]\n\tend\n\tif index < k\n\t\treturn 0\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\nend",
    "\t\"\"\"\n\t\ta: input array\n\t\tn: size of array\n\t\tindex: index of array\n\t\tk: index of array\n\t\"\"\"\n\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif k < index\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif k == 0\n\t\treturn 0\n\tend\n\tif a[index] > a[k]\n\t\treturn max(max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index - 1, k) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index, k - 1)\n\tend\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k == 1\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, 1), max_sum_increasing_subseq(a, n, index-1, 2))\n\tend\n\tif k == index\n\t\treturn max_sum_increasing_subseq(a, n, index-1, index-1) + a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k+1))\nend",
    "\tif index == 0\n\t\treturn 0\n\tend\n\tif index == 1\n\t\tif k == 1\n\t\t\treturn a[1]\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\tif k <= index\n\t\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index])\n\telse\n\t\treturn max_sum_increasing_subseq(a, n, index-1, k)\n\tend\nend",
    "\t# Base case\n\tif index == 1\n\t\treturn a[1]\n\tend\n\t\n\t# Recursive case\n\tmax_sum = 0\n\tfor i in 1:index-1\n\t\tif a[i] < a[index]\n\t\t\tmax_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n\t\tend\n\tend\n\t\n\tif index < k\n\t\treturn max_sum\n\telse\n\t\treturn max_sum + a[index]\n\tend\nend",
    "\tif index == 1\n\t\treturn a[1]\n\tend\n\tif k == 1\n\t\treturn a[1]\n\tend\n\tif index == k\n\t\treturn a[index]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\nend",
    "\tif index == 0\n\t\treturn a[k]\n\tend\n\treturn max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, index) + a[k])\nend",
    "\tif index == 1\n\t\treturn a[index]\n\tend\n\tif k == 1\n\t\treturn a[index]\n\tend\n\tif index == k\n\t\treturn a[index] + max_sum_increasing_subseq(a, n, index-1, k-1)\n\tend\n\treturn max(a[index] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k))\nend"
  ]
}