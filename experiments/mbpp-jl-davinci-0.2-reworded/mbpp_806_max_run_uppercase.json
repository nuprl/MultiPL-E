{
  "name": "mbpp_806_max_run_uppercase",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find maximum run of uppercase characters in the given string.\n\t\"\"\"\nfunction max_run_uppercase(test_str::String)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = max_run_uppercase;\n\t@test(candidate(\"GeMKSForGERksISBESt\") == 5)\n\t@test(candidate(\"PrECIOusMOVemENTSYT\") == 6)\n\t@test(candidate(\"GooGLEFluTTER\") == 4)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tmax_run = 0\n\tcurrent_run = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\tcurrent_run += 1\n\t\telse\n\t\t\tcurrent_run = 0\n\t\tend\n\t\tif current_run > max_run\n\t\t\tmax_run = current_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcur_run = 0\n\tfor c in test_str\n\t\tif c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\t\t\tcur_run += 1\n\t\telse\n\t\t\tcur_run = 0\n\t\tend\n\t\tif cur_run > max_run\n\t\t\tmax_run = cur_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\trun += 1\n\t\t\tif run > max_run\n\t\t\t\tmax_run = run\n\t\telse\n\t\t\trun = 0\n\t\tend\n\tend\n\treturn max_run\nend",
    "\t\"\"\"\n\tFunction to find maximum run of uppercase characters in the given string.\n\t\"\"\"\n\tmax_run = 0\n\trun = 0\n\tfor i in test_str\n\t\tif i in uppercase(test_str)\n\t\t\trun += 1\n\t\t\tif run > max_run\n\t\t\t\tmax_run = run\n\t\telse\n\t\t\trun = 0\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\trun += 1\n\t\t\tif run > max_run\n\t\t\t\tmax_run = run\n\t\telse\n\t\t\trun = 0\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcurr_run = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\tcurr_run += 1\n\t\telse\n\t\t\tcurr_run = 0\n\t\tend\n\t\tif curr_run > max_run\n\t\t\tmax_run = curr_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcurr_run = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\tcurr_run += 1\n\t\telse\n\t\t\tcurr_run = 0\n\t\tend\n\t\tif curr_run > max_run\n\t\t\tmax_run = curr_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif test_str[i] in uppercase(test_str)\n\t\t\trun += 1\n\t\telse\n\t\t\trun = 0\n\t\tend\n\t\tif run > max_run\n\t\t\tmax_run = run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcurrent_run = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\tcurrent_run += 1\n\t\telse\n\t\t\tcurrent_run = 0\n\t\tend\n\t\tif current_run > max_run\n\t\t\tmax_run = current_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcurr_run = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\tcurr_run += 1\n\t\telse\n\t\t\tcurr_run = 0\n\t\tend\n\t\tif curr_run > max_run\n\t\t\tmax_run = curr_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcurrent_run = 0\n\tfor c in test_str\n\t\tif isupper(c)\n\t\t\tcurrent_run += 1\n\t\telse\n\t\t\tif current_run > max_run\n\t\t\t\tmax_run = current_run\n\t\t\tend\n\t\t\tcurrent_run = 0\n\t\tend\n\tend\n\tif current_run > max_run\n\t\tmax_run = current_run\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\trun += 1\n\t\t\tif run > max_run\n\t\t\t\tmax_run = run\n\t\telse\n\t\t\trun = 0\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\trun += 1\n\t\telse\n\t\t\trun = 0\n\t\tend\n\t\tif run > max_run\n\t\t\tmax_run = run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\trun += 1\n\t\telse\n\t\t\trun = 0\n\t\tend\n\t\tif run > max_run\n\t\t\tmax_run = run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcurr_run = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\tcurr_run += 1\n\t\telse\n\t\t\tcurr_run = 0\n\t\tend\n\t\tif curr_run > max_run\n\t\t\tmax_run = curr_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\trun += 1\n\t\telse\n\t\t\trun = 0\n\t\tend\n\t\tif run > max_run\n\t\t\tmax_run = run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcurrent_run = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\tcurrent_run += 1\n\t\telse\n\t\t\tif current_run > max_run\n\t\t\t\tmax_run = current_run\n\t\t\tend\n\t\t\tcurrent_run = 0\n\t\tend\n\tend\n\tif current_run > max_run\n\t\tmax_run = current_run\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\trun = 0\n\tfor i in 1:length(test_str)\n\t\tif isupper(test_str[i])\n\t\t\trun += 1\n\t\telse\n\t\t\trun = 0\n\t\tend\n\t\tif run > max_run\n\t\t\tmax_run = run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\tmax_run = 0\n\tcur_run = 0\n\tfor c in test_str\n\t\tif isupper(c)\n\t\t\tcur_run += 1\n\t\telse\n\t\t\tcur_run = 0\n\t\tend\n\t\tif cur_run > max_run\n\t\t\tmax_run = cur_run\n\t\tend\n\tend\n\treturn max_run\nend",
    "\t# Initialize max_run_length and current_run_length\n\tmax_run_length = 0\n\tcurrent_run_length = 0\n\t# Iterate through the string\n\tfor i in 1:length(test_str)\n\t\t# If the character is uppercase, increment current_run_length\n\t\tif isupper(test_str[i])\n\t\t\tcurrent_run_length += 1\n\t\t\t# If current_run_length is greater than max_run_length, update max_run_length\n\t\t\tif current_run_length > max_run_length\n\t\t\t\tmax_run_length = current_run_length\n\t\t\tend\n\t\t# If the character is not uppercase, reset current_run_length\n\t\telse\n\t\t\tcurrent_run_length = 0\n\t\tend\n\tend\n\t# Return max_run_length\n\treturn max_run_length\nend"
  ]
}