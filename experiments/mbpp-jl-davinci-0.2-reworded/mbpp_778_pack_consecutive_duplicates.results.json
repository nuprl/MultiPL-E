{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tlist2 = [list1[i]]\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tlist2 = append!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist3 = append!(list3, list2)\n\t\t\t\tlist2 = [list1[i]]\n\t\t\tend\n\t\tend\n\tend\n\tlist3 = append!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510439,
      "stdout": "test set: Test Failed at /tmp/tmp9wx9mysj.jl:30\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp9wx9mysj.jl:30 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp9wx9mysj.jl:29\ntest set: Test Failed at /tmp/tmp9wx9mysj.jl:31\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp9wx9mysj.jl:31 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp9wx9mysj.jl:29\ntest set: Error During Test at /tmp/tmp9wx9mysj.jl:32\n  Test threw exception\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n  MethodError: Cannot `convert` an object of type Char to an object of type String\n  Closest candidates are:\n    convert(::Type{String}, !Matched::String) at /home/a.guha/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T}, !Matched::T) where T<:AbstractString at /home/a.guha/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /home/a.guha/.conda/envs/polyglot/share/julia/base/strings/basic.jl:2",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\tlist3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[length(list3)] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of list elements into sublists.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list as an argument and returns a list of lists.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list and returns a list of lists containing consecutive duplicates.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tlist4 = []\n\tfor i in 1:length(list1)\n\t\tif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\tfor i in 1:length(list3)\n\t\tif length(list3[i]) == 0\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(list4,list3[i])\n\t\tend\n\tend\n\treturn list4\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510438,
      "stdout": "test set: Error During Test at /tmp/tmpw2t6o83l.jl:35\n  Test threw exception\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  BoundsError: attempt to access 16-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmpw2t6o83l.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw2t6o83l.jl:35 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw2t6o83l.jl:34\ntest set: Error During Test at /tmp/tmpw2t6o83l.jl:36\n  Test threw exception\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  BoundsError: attempt to access 12-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmpw2t6o83l.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw2t6o83l.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw2t6o83l.jl:34\ntest set: Error During Test at /tmp/tmpw2t6o83l.jl:37\n  Test threw exception\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n  BoundsError: attempt to access 6-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{String})\n     @ Main /tmp/tmpw2t6o83l.jl:12\n   [3] macro expansion\n     @ /home/a.guh",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpw2t6o83l.jl:32\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123462,
      "stdout": "test set: Test Failed at /tmp/tmp0423zwwu.jl:30\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[Any[0, 0], Any[0, 0], Any[1], Any[2], Any[3], Any[4, 4], Any[4, 4], Any[5], Any[6, 6, 6], Any[6, 6, 6], Any[6, 6, 6], Any[7], Any[8], Any[9], Any[4, 4], Any[4, 4]] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp0423zwwu.jl:30 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp0423zwwu.jl:29\ntest set: Test Failed at /tmp/tmp0423zwwu.jl:31\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[Any[10, 10], Any[10, 10], Any[15], Any[19], Any[18, 18], Any[18, 18], Any[17], Any[26, 26], Any[26, 26], Any[17], Any[18], Any[10]] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp0423zwwu.jl:31 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp0423zwwu.jl:29\ntest set: Test Failed at /tmp/tmp0423zwwu.jl:32\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[Any[\"a\", \"a\"], Any[\"a\", \"a\"], Any[\"b\"], Any[\"c\"], Any[\"d\", \"d\"], Any[\"d\", \"d\"]] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp0423zwwu.jl:32 [inlined]\n [3] macro",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp0423zwwu.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list and returns a list of lists with consecutive duplicates packed into sublists.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif list1[i] == list1[i-1]\n\t\t\tpush!(list3,list1[i])\n\t\telse\n\t\t\tpush!(list2,list3)\n\t\t\tlist3 = []\n\t\t\tpush!(list3,list1[i])\n\t\tend\n\tend\n\tpush!(list2,list3)\n\treturn list2\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123462,
      "stdout": "test set: Error During Test at /tmp/tmp8ir4b5k2.jl:27\n  Test threw exception\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  BoundsError: attempt to access 16-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmp8ir4b5k2.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8ir4b5k2.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8ir4b5k2.jl:26\ntest set: Error During Test at /tmp/tmp8ir4b5k2.jl:28\n  Test threw exception\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  BoundsError: attempt to access 12-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmp8ir4b5k2.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8ir4b5k2.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8ir4b5k2.jl:26\ntest set: Error During Test at /tmp/tmp8ir4b5k2.jl:29\n  Test threw exception\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n  BoundsError: attempt to access 6-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{String})\n     @ Main /tmp/tmp8ir4b5k2.jl:11\n   [3] macro expansion\n     @ /home/a.guh",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp8ir4b5k2.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\t\tpush!(list3,list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\t\tpush!(list3, list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function packs consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\t\tpush!(list3, list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2=[]\n\tlist3=[]\n\tfor i in 1:length(list1)\n\t\tif i==1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i]==list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2=[]\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[length(list3)] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\t\tpush!(list3, list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in list1\n\t\tif i in list2\n\t\t\tpush!(list3, i)\n\t\telse\n\t\t\tpush!(list2, i)\n\t\t\tpush!(list3, [i])\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123462,
      "stdout": "test set: Test Failed at /tmp/tmprvb3oyzl.jl:22\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[[0], 0, [1], [2], [3], [4], 4, [5], [6], 6, 6, [7], [8], [9], 4, 4] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\ntest set: Test Failed at /tmp/tmprvb3oyzl.jl:23\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[[10], 10, [15], [19], [18], 18, [17], [26], 26, 17, 18, 10] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:23 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\ntest set: Test Failed at /tmp/tmprvb3oyzl.jl:24\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[[\"a\"], \"a\", [\"b\"], [\"c\"], [\"d\"], \"d\"] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:24 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\nTest Summary: | Fail  Total\ntest set      |    3      3",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmprvb3oyzl.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in list1\n\t\tif i in list2\n\t\t\tpush!(list3,i)\n\t\telse\n\t\t\tpush!(list2,i)\n\t\t\tpush!(list3,[i])\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123462,
      "stdout": "test set: Test Failed at /tmp/tmp13qryd80.jl:22\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[[0], 0, [1], [2], [3], [4], 4, [5], [6], 6, 6, [7], [8], [9], 4, 4] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qryd80.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp13qryd80.jl:21\ntest set: Test Failed at /tmp/tmp13qryd80.jl:23\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[[10], 10, [15], [19], [18], 18, [17], [26], 26, 17, 18, 10] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qryd80.jl:23 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp13qryd80.jl:21\ntest set: Test Failed at /tmp/tmp13qryd80.jl:24\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[[\"a\"], \"a\", [\"b\"], [\"c\"], [\"d\"], \"d\"] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp13qryd80.jl:24 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp13qryd80.jl:21\nTest Summary: | Fail  Total\ntest set      |    3      3",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp13qryd80.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\t\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tlist1 : Any\n\t\t\tThe list of elements.\n\t\t\t\n\t\tReturns\n\t\t-------\n\t\tAny\n\t\t\tThe list of subvectors.\n\t\t\t\n\t\tExamples\n\t\t--------\n\t\t>>> pack_consecutive_duplicates([1,1,1,2,2,2,3,3,3])\n\t\t[[1,1,1],[2,2,2],[3,3,3]]\n\t\t\n\t\t>>> pack_consecutive_duplicates([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6])\n\t\t[[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6]]\n\t\t\n\t\t>>> pack_consecutive_duplicates([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10])\n\t\t[[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6],[7,7,7],[8,8,8],[9,9,9],[10,10,10]]\n\t\"\"\"\n\t\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp904g_1ao.jl:46\nin expression starting at /tmp/tmp904g_1ao.jl:46\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list of any type and returns a list of lists of the same type.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list as an argument and returns a list of lists containing consecutive duplicates.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = Array{Any}(undef,0)\n\tlist3 = Array{Any}(undef,0)\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tlist2 = Array{Any}(undef,0)\n\t\t\t\tpush!(list2,list1[i])\n\t\t\t\tpush!(list3,list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tlist4 = []\n\tlist5 = []\n\tlist6 = []\n\tlist7 = []\n\tlist8 = []\n\tlist9 = []\n\tlist10 = []\n\tlist11 = []\n\tlist12 = []\n\tlist13 = []\n\tlist14 = []\n\tlist15 = []\n\tlist16 = []\n\tlist17 = []\n\tlist18 = []\n\tlist19 = []\n\tlist20 = []\n\tlist21 = []\n\tlist22 = []\n\tlist23 = []\n\tlist24 = []\n\tlist25 = []\n\tlist26 = []\n\tlist27 = []\n\tlist28 = []\n\tlist29 = []\n\tlist30 = []\n\tlist31 = []\n\tlist32 = []\n\tlist33 = []\n\tlist34 = []\n\tlist35 = []\n\tlist36 = []\n\tlist37 = []\n\tlist38 = []\n\tlist39 = []\n\tlist40 = []\n\tlist41 = []\n\tlist42 = []\n\tlist43 = []\n\tlist44 = []\n\tlist45 = []\n\tlist46 = []\n\tlist47 = []\n\tlist48 = []\n\tlist49 = []\n\tlist50 = []\n\tlist51 = []\n\tlist52 = []\n\tlist53 = []\n\tlist54 = []\n\tlist55 = []\n\tlist56 = []\n\tlist57 = []\n\tlist58 = []\n\tlist59 = []\n\tlist60 = []\n\tlist61 = []\n\tlist62 = []\n\tlist63 = []\n\tlist64 = []\n\tlist65 = []\n\tlist66 = []\n\tlist67 = []\n\tlist68 = []\n\tlist69 = []\n\tlist70 = []\n\tlist71 = []\n\tlist72 = []\n\tlist73 = []\n\tlist74 = []\n\tlist75 = []\n\tlist76 = []\n\tlist77 = []\n\tlist78 = []\n\tlist79 = []\n\tlist80 = []\n\tlist81 = []\n\tlist82 = []\n\tlist83 = []\n\tlist84 = []\n\tlist85 = []\n\tlist86 = []\n\t\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl181nlae.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl181nlae.jl:1\nin expression starting at /tmp/tmpl181nlae.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tlist4 = []\n\tlist5 = []\n\tlist6 = []\n\tlist7 = []\n\tlist8 = []\n\tlist9 = []\n\tlist10 = []\n\tlist11 = []\n\tlist12 = []\n\tlist13 = []\n\tlist14 = []\n\tlist15 = []\n\tlist16 = []\n\tlist17 = []\n\tlist18 = []\n\tlist19 = []\n\tlist20 = []\n\tlist21 = []\n\tlist22 = []\n\tlist23 = []\n\tlist24 = []\n\tlist25 = []\n\tlist26 = []\n\tlist27 = []\n\tlist28 = []\n\tlist29 = []\n\tlist30 = []\n\tlist31 = []\n\tlist32 = []\n\tlist33 = []\n\tlist34 = []\n\tlist35 = []\n\tlist36 = []\n\tlist37 = []\n\tlist38 = []\n\tlist39 = []\n\tlist40 = []\n\tlist41 = []\n\tlist42 = []\n\tlist43 = []\n\tlist44 = []\n\tlist45 = []\n\tlist46 = []\n\tlist47 = []\n\tlist48 = []\n\tlist49 = []\n\tlist50 = []\n\tlist51 = []\n\tlist52 = []\n\tlist53 = []\n\tlist54 = []\n\tlist55 = []\n\tlist56 = []\n\tlist57 = []\n\tlist58 = []\n\tlist59 = []\n\tlist60 = []\n\tlist61 = []\n\tlist62 = []\n\tlist63 = []\n\tlist64 = []\n\tlist65 = []\n\tlist66 = []\n\tlist67 = []\n\tlist68 = []\n\tlist69 = []\n\tlist70 = []\n\tlist71 = []\n\tlist72 = []\n\tlist73 = []\n\tlist74 = []\n\tlist75 = []\n\tlist76 = []\n\tlist77 = []\n\tlist78 = []\n\tlist79 = []\n\tlist80 = []\n\tlist81 = []\n\tlist82 = []\n\tlist83 = []\n\tlist84 = []\n\tlist85 = []\n\tlist86 = []\n\t\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl181nlae.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl181nlae.jl:1\nin expression starting at /tmp/tmpl181nlae.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[length(list3)] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[length(list3)] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list and returns a list of lists with consecutive duplicates packed into sublists.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif list1[i] == list1[i-1]\n\t\t\tpush!(list3,list1[i])\n\t\telse\n\t\t\tpush!(list2,list3)\n\t\t\tlist3 = []\n\t\t\tpush!(list3,list1[i])\n\t\tend\n\tend\n\tpush!(list2,list3)\n\treturn list2\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123462,
      "stdout": "test set: Error During Test at /tmp/tmp8ir4b5k2.jl:27\n  Test threw exception\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  BoundsError: attempt to access 16-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmp8ir4b5k2.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8ir4b5k2.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8ir4b5k2.jl:26\ntest set: Error During Test at /tmp/tmp8ir4b5k2.jl:28\n  Test threw exception\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  BoundsError: attempt to access 12-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmp8ir4b5k2.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8ir4b5k2.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8ir4b5k2.jl:26\ntest set: Error During Test at /tmp/tmp8ir4b5k2.jl:29\n  Test threw exception\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n  BoundsError: attempt to access 6-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{String})\n     @ Main /tmp/tmp8ir4b5k2.jl:11\n   [3] macro expansion\n     @ /home/a.guh",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp8ir4b5k2.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list as input and returns a list of lists.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\t\tpush!(list3, list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\t\tpush!(list3,list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123463,
      "stdout": "test set: Test Failed at /tmp/tmpi3rnc6i1.jl:27\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[Any[0, 0], Any[0, 0], Any[1], Any[2], Any[3], Any[4, 4], Any[4, 4], Any[5], Any[6, 6, 6], Any[6, 6, 6], Any[6, 6, 6], Any[7], Any[8], Any[9], Any[4, 4], Any[4, 4]] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpi3rnc6i1.jl:27 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpi3rnc6i1.jl:26\ntest set: Test Failed at /tmp/tmpi3rnc6i1.jl:28\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[Any[10, 10], Any[10, 10], Any[15], Any[19], Any[18, 18], Any[18, 18], Any[17], Any[26, 26], Any[26, 26], Any[17], Any[18], Any[10]] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpi3rnc6i1.jl:28 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpi3rnc6i1.jl:26\ntest set: Test Failed at /tmp/tmpi3rnc6i1.jl:29\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[Any[\"a\", \"a\"], Any[\"a\", \"a\"], Any[\"b\"], Any[\"c\"], Any[\"d\", \"d\"], Any[\"d\", \"d\"]] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpi3rnc6i1.jl:29 [inlined]\n [3] macro",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpi3rnc6i1.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[length(list3)] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif list1[i] == list1[i+1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123463,
      "stdout": "test set: Error During Test at /tmp/tmp2v0cnwnl.jl:23\n  Test threw exception\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  BoundsError: attempt to access 16-element Vector{Int64} at index [17]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmp2v0cnwnl.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2v0cnwnl.jl:23 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2v0cnwnl.jl:22\ntest set: Error During Test at /tmp/tmp2v0cnwnl.jl:24\n  Test threw exception\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  BoundsError: attempt to access 12-element Vector{Int64} at index [13]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmp2v0cnwnl.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2v0cnwnl.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2v0cnwnl.jl:22\ntest set: Error During Test at /tmp/tmp2v0cnwnl.jl:25\n  Test threw exception\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n  BoundsError: attempt to access 6-element Vector{String} at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{String})\n     @ Main /tmp/tmp2v0cnwnl.jl:8\n   [3] macro expansion\n     @ /home/a.guha",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp2v0cnwnl.jl:20\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tlist4 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tlist2 = [list1[i]]\n\t\t\tlist3 = [list2]\n\t\telseif list1[i] == list1[i-1]\n\t\t\tlist2 = [list2; list1[i]]\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = [list1[i]]\n\t\t\tlist3 = [list3; list2]\n\t\tend\n\tend\n\tfor i in 1:length(list3)\n\t\tlist4 = [list4; list3[i][1]]\n\tend\n\treturn list4\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123464,
      "stdout": "test set: Test Failed at /tmp/tmp4_ktpr1q.jl:33\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_ktpr1q.jl:33 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_ktpr1q.jl:32\ntest set: Test Failed at /tmp/tmp4_ktpr1q.jl:34\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[10, 15, 19, 18, 17, 26, 17, 18, 10] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_ktpr1q.jl:34 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_ktpr1q.jl:32\ntest set: Test Failed at /tmp/tmp4_ktpr1q.jl:35\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[\"a\", 'b', 'c', \"d\"] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_ktpr1q.jl:35 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_ktpr1q.jl:32\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp4_ktpr1q.jl:30\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2=[]\n\tlist3=[]\n\tfor i in 1:length(list1)\n\t\tif i==1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i]==list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2=[]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in list1\n\t\tif i in list2\n\t\t\tpush!(list3,i)\n\t\telse\n\t\t\tpush!(list2,i)\n\t\t\tpush!(list3,i)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123463,
      "stdout": "test set: Test Failed at /tmp/tmp3e5p3vnc.jl:25\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp3e5p3vnc.jl:25 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp3e5p3vnc.jl:24\ntest set: Test Failed at /tmp/tmp3e5p3vnc.jl:26\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp3e5p3vnc.jl:26 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp3e5p3vnc.jl:24\ntest set: Test Failed at /tmp/tmp3e5p3vnc.jl:27\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp3e5p3vnc.jl:27 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp3e5p3vnc.jl:24\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp3e5p3vnc.jl:22\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in list1\n\t\tif i in list2\n\t\t\tpush!(list3, i)\n\t\telse\n\t\t\tpush!(list2, i)\n\t\t\tpush!(list3, [i])\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123462,
      "stdout": "test set: Test Failed at /tmp/tmprvb3oyzl.jl:22\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[[0], 0, [1], [2], [3], [4], 4, [5], [6], 6, 6, [7], [8], [9], 4, 4] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\ntest set: Test Failed at /tmp/tmprvb3oyzl.jl:23\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[[10], 10, [15], [19], [18], 18, [17], [26], 26, 17, 18, 10] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:23 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\ntest set: Test Failed at /tmp/tmprvb3oyzl.jl:24\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[[\"a\"], \"a\", [\"b\"], [\"c\"], [\"d\"], \"d\"] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:24 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\nTest Summary: | Fail  Total\ntest set      |    3      3",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmprvb3oyzl.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tlist4 = []\n\tlist5 = []\n\tlist6 = []\n\tlist7 = []\n\tlist8 = []\n\tlist9 = []\n\tlist10 = []\n\tlist11 = []\n\tlist12 = []\n\tlist13 = []\n\tlist14 = []\n\tlist15 = []\n\tlist16 = []\n\tlist17 = []\n\tlist18 = []\n\tlist19 = []\n\tlist20 = []\n\tlist21 = []\n\tlist22 = []\n\tlist23 = []\n\tlist24 = []\n\tlist25 = []\n\tlist26 = []\n\tlist27 = []\n\tlist28 = []\n\tlist29 = []\n\tlist30 = []\n\tlist31 = []\n\tlist32 = []\n\tlist33 = []\n\tlist34 = []\n\tlist35 = []\n\tlist36 = []\n\tlist37 = []\n\tlist38 = []\n\tlist39 = []\n\tlist40 = []\n\tlist41 = []\n\tlist42 = []\n\tlist43 = []\n\tlist44 = []\n\tlist45 = []\n\tlist46 = []\n\tlist47 = []\n\tlist48 = []\n\tlist49 = []\n\tlist50 = []\n\tlist51 = []\n\tlist52 = []\n\tlist53 = []\n\tlist54 = []\n\tlist55 = []\n\tlist56 = []\n\tlist57 = []\n\tlist58 = []\n\tlist59 = []\n\tlist60 = []\n\tlist61 = []\n\tlist62 = []\n\tlist63 = []\n\tlist64 = []\n\tlist65 = []\n\tlist66 = []\n\tlist67 = []\n\tlist68 = []\n\tlist69 = []\n\tlist70 = []\n\tlist71 = []\n\tlist72 = []\n\tlist73 = []\n\tlist74 = []\n\tlist75 = []\n\tlist76 = []\n\tlist77 = []\n\tlist78 = []\n\tlist79 = []\n\tlist80 = []\n\tlist81 = []\n\tlist82 = []\n\tlist83 = []\n\tlist84 = []\n\tlist85 = []\n\tlist86 = []\n\t\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl181nlae.jl:4 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl181nlae.jl:1\nin expression starting at /tmp/tmpl181nlae.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[length(list3)] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif list1[i] == list1[i-1]\n\t\t\tpush!(list3,list1[i])\n\t\telse\n\t\t\tpush!(list2,list3)\n\t\t\tlist3 = []\n\t\t\tpush!(list3,list1[i])\n\t\tend\n\tend\n\tpush!(list2,list3)\n\treturn list2\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123463,
      "stdout": "test set: Error During Test at /tmp/tmpo4tatnb9.jl:27\n  Test threw exception\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  BoundsError: attempt to access 16-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmpo4tatnb9.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo4tatnb9.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo4tatnb9.jl:26\ntest set: Error During Test at /tmp/tmpo4tatnb9.jl:28\n  Test threw exception\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  BoundsError: attempt to access 12-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmpo4tatnb9.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo4tatnb9.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo4tatnb9.jl:26\ntest set: Error During Test at /tmp/tmpo4tatnb9.jl:29\n  Test threw exception\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n  BoundsError: attempt to access 6-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] pack_consecutive_duplicates(list1::Vector{String})\n     @ Main /tmp/tmpo4tatnb9.jl:11\n   [3] macro expansion\n     @ /home/a.guh",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpo4tatnb9.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\t\tpush!(list3, list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in list1\n\t\tif i in list2\n\t\t\tpush!(list3, i)\n\t\telse\n\t\t\tpush!(list2, i)\n\t\t\tpush!(list3, [i])\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123462,
      "stdout": "test set: Test Failed at /tmp/tmprvb3oyzl.jl:22\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[[0], 0, [1], [2], [3], [4], 4, [5], [6], 6, 6, [7], [8], [9], 4, 4] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\ntest set: Test Failed at /tmp/tmprvb3oyzl.jl:23\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[[10], 10, [15], [19], [18], 18, [17], [26], 26, 17, 18, 10] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:23 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\ntest set: Test Failed at /tmp/tmprvb3oyzl.jl:24\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[[\"a\"], \"a\", [\"b\"], [\"c\"], [\"d\"], \"d\"] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmprvb3oyzl.jl:24 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmprvb3oyzl.jl:21\nTest Summary: | Fail  Total\ntest set      |    3      3",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmprvb3oyzl.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tlist2 = [list1[i]]\n\t\telseif list1[i] == list1[i-1]\n\t\t\tlist2[end] = [list2[end]; list1[i]]\n\t\telse\n\t\t\tlist2 = [list2; list1[i]]\n\t\tend\n\tend\n\treturn list2\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123464,
      "stdout": "test set: Error During Test at /tmp/tmpzjjcoqn7.jl:22\n  Test threw exception\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::Vector{Int64}, i1::Int64)\n     @ Base ./array.jl:903\n   [2] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmpzjjcoqn7.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzjjcoqn7.jl:22 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzjjcoqn7.jl:21\ntest set: Error During Test at /tmp/tmpzjjcoqn7.jl:23\n  Test threw exception\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{Int64}, x::Vector{Int64}, i1::I",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list as input and returns a list of lists with consecutive duplicates.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3, list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\ttemp = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(temp, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(temp, list1[i])\n\t\telse\n\t\t\tpush!(list2, temp)\n\t\t\ttemp = []\n\t\t\tpush!(temp, list1[i])\n\t\tend\n\tend\n\tpush!(list2, temp)\n\treturn list2\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\t\tpush!(list3, list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list as an argument and returns a list of lists, where each sublist contains consecutive duplicates of the elements of the argument list.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2, list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2, list1[i])\n\t\t\t\tpush!(list3, list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tPack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\t\tpush!(list3,list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123460,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\t\tpush!(list3,list2)\n\t\t\telse\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\t\tpush!(list3,list2)\n\t\t\tend\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123463,
      "stdout": "test set: Test Failed at /tmp/tmp6cwb0gnb.jl:29\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[Any[0, 0], Any[0, 0], Any[1], Any[2], Any[3], Any[4, 4], Any[4, 4], Any[5], Any[6, 6, 6], Any[6, 6, 6], Any[6, 6, 6], Any[7], Any[8], Any[9], Any[4, 4], Any[4, 4]] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cwb0gnb.jl:29 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cwb0gnb.jl:28\ntest set: Test Failed at /tmp/tmp6cwb0gnb.jl:30\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[Any[10, 10], Any[10, 10], Any[15], Any[19], Any[18, 18], Any[18, 18], Any[17], Any[26, 26], Any[26, 26], Any[17], Any[18], Any[10]] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cwb0gnb.jl:30 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp6cwb0gnb.jl:28\ntest set: Test Failed at /tmp/tmp6cwb0gnb.jl:31\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[Any[\"a\", \"a\"], Any[\"a\", \"a\"], Any[\"b\"], Any[\"c\"], Any[\"d\", \"d\"], Any[\"d\", \"d\"]] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp6cwb0gnb.jl:31 [inlined]\n [3] macro",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp6cwb0gnb.jl:26\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2,list1[i])\n\t\t\telse\n\t\t\t\tpush!(list3,list2)\n\t\t\t\tlist2 = []\n\t\t\t\tpush!(list2,list1[i])\n\t\t\tend\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function takes a list as an argument and returns a list of lists.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\t\tlist3[length(list3)] = list2\n\t\telse\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123463,
      "stdout": "test set: Test Failed at /tmp/tmpsbysioaf.jl:27\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n   Evaluated: Any[Any[0, 0, 1], Any[0, 0, 1], Any[2], Any[3], Any[4, 5], Any[4, 5], Any[6, 6, 7], Any[6, 6, 7], Any[8], Any[9], Any[4]] == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbysioaf.jl:27 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbysioaf.jl:26\ntest set: Test Failed at /tmp/tmpsbysioaf.jl:28\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n   Evaluated: Any[Any[10, 10, 15], Any[10, 10, 15], Any[19], Any[18, 17], Any[18, 17], Any[26, 17], Any[26, 17], Any[18], Any[10]] == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbysioaf.jl:28 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbysioaf.jl:26\ntest set: Test Failed at /tmp/tmpsbysioaf.jl:29\n  Expression: candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n   Evaluated: Any[Any[\"a\", \"a\", \"b\"], Any[\"a\", \"a\", \"b\"], Any[\"c\"], Any[\"d\"]] == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbysioaf.jl:29 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Te",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpsbysioaf.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tThis function packs consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tlist2 = [[list1[i]]]\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tpush!(list2[end], list1[i])\n\t\t\telse\n\t\t\t\tpush!(list2, [list1[i]])\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tpack_consecutive_duplicates(list1::Any)::Any\n\t\n\tThis function packs consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123461,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tlist2 = [list1[i]]\n\t\telse\n\t\t\tif list1[i] == list1[i-1]\n\t\t\t\tlist2[end] = append!(list2[end], list1[i])\n\t\t\telse\n\t\t\t\tlist2 = append!(list2, list1[i])\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123464,
      "stdout": "test set: Error During Test at /tmp/tmpx47yino5.jl:27\n  Test threw exception\n  Expression: candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n  MethodError: no method matching append!(::Int64, ::Int64)\n  Closest candidates are:\n    append!(!Matched::BitVector, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n    append!(!Matched::AbstractVector, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1050\n    append!(!Matched::AbstractVector, ::Any...) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1053\n  Stacktrace:\n   [1] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmpx47yino5.jl:14\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx47yino5.jl:27 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx47yino5.jl:26\ntest set: Error During Test at /tmp/tmpx47yino5.jl:28\n  Test threw exception\n  Expression: candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n  MethodError: no method matching append!(::Int64, ::Int64)\n  Closest candidates are:\n    append!(!Matched::BitVector, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/bitarray.jl:782\n    append!(!Matched::AbstractVector, ::Any) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1050\n    append!(!Matched::AbstractVector, ::Any...) at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:1053\n  Stacktrace:\n   [1] pack_consecutive_duplicates(list1::Vector{Int64})\n     @ Main /tmp/tmpx47yino5.jl:14\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx47yino5.jl:28 [inlined]\n   ",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpx47yino5.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tpush!(list3,list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\tend\n\tend\n\tpush!(list3,list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2,list1[i])\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2,list1[i])\n\t\t\tpush!(list3,list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1666123459,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\t\tlist3[end] = list2\n\t\telse\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\t\tpush!(list3, list2)\n\t\tend\n\tend\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\nfunction pack_consecutive_duplicates(list1::Any)::Any \n\t\"\"\"\n\tFunction to pack consecutive duplicates of a given vector elements into subvectors.\n\t\"\"\"\n\tlist2 = []\n\tlist3 = []\n\tfor i in 1:length(list1)\n\t\tif i == 1\n\t\t\tpush!(list2, list1[i])\n\t\telseif list1[i] == list1[i-1]\n\t\t\tpush!(list2, list1[i])\n\t\telse\n\t\t\tpush!(list3, list2)\n\t\t\tlist2 = []\n\t\t\tpush!(list2, list1[i])\n\t\tend\n\tend\n\tpush!(list3, list2)\n\treturn list3\nend\nusing Test\n\n@testset begin\n\ncandidate = pack_consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])\nend\n",
      "timestamp": 1665510436,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}