{
  "name": "mbpp_576_is_Sub_Array",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to check whether a vector is subvector of another or not.\n\t\"\"\"\nfunction is_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = is_Sub_Array;\n\t@test(candidate([1, 4, 3, 5], [1, 2]) == false)\n\t@test(candidate([1, 2, 1], [1, 2, 1]) == true)\n\t@test(candidate([1, 0, 2, 2], [2, 2, 0]) == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\t\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\tfor i in 1:length(B)-length(A)+1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend",
    "\t\"\"\"\n\t\tA is the main vector and B is the sub vector.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tA is the subvector of B.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i = 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tfor i in 1:length(B)\n\t\tif B[i] in A\n\t\t\tcontinue\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\n\tThis function checks whether a vector is subvector of another or not.\n\t\n\tExample:\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\t\ttrue\n\t\t\n\t\tjulia> is_Sub_Array([1,2,3,4,5],[1,2,",
    "\tn = length(A)\n\tm = length(B)\n\tif m < n\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\ti = 1\n\tj = 1\n\twhile i < n && j < m\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\ti = i - j + 2\n\t\t\tj = 1\n\t\tend\n\tend\n\tif j == m\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\ti = 1\n\tj = 1\n\twhile i <= length(A) && j <= length(B)\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\tj += 1\n\t\tend\n\tend\n\tif i == length(A) + 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tThis function takes two vectors as input and returns true if the first vector is a subvector of the second vector.\n\t\"\"\"\n\t\n\t# Check if the length of the first vector is greater than the second vector.\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# Check if the first vector is a subvector of the second vector.\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tReturns true if B is a subvector of A.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(B) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[i+1:end], B[2:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i + length(A) - 1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\t\tCheck whether a vector is subvector of another or not.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tA : Vector{Int64}\n\t\t\tVector to be checked.\n\t\tB : Vector{Int64}\n\t\t\tVector to be checked.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tBool\n\t\t\tTrue if A is subvector of B.\n\t\t\tFalse if A is not subvector of B.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif m < n\n\t\treturn false\n\tend\n\ti = 1\n\tj = 1\n\twhile i <= n && j <= m\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\tj += 1\n\t\tend\n\tend\n\tif i == n + 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    if length(A) > length(B)\n        return false\n    end\n    for i in 1:length(B)-length(A)+1\n        if A == B[i:i+length(A)-1]\n            return true\n        end\n    end\n    return false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    n = length(A)\n    m = length(B)\n    if m < n\n        return false\n    end\n    for i in 1:m-n+1\n        if A == B[i:i+n-1]\n            return true\n        end\n    end\n    return false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\ti = 1\n\tj = 1\n\twhile i <= n && j <= m\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\ti = i - j + 2\n\t\t\tj = 1\n\t\tend\n\tend\n\tif j > m\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tReturns true if B is a subvector of A\n\t\"\"\"\n\tif length(B) > length(A)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i + 1 >= length(B)\n\t\t\t\tif A[i:i+length(B)-1] == B\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tn = length(A)\n\tm = length(B)\n\ti = 1\n\tj = 1\n\twhile i <= n && j <= m\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\tj += 1\n\t\tend\n\tend\n\tif i == n+1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t#A is the subarray\n\t#B is the array\n\t#returns true if A is a subarray of B\n\t#returns false if A is not a subarray of B\n\t\n\t#check if A is empty\n\tif length(A) == 0\n\t\treturn true\n\tend\n\t\n\t#check if A is longer than B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t#check if A is a subarray of B\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\t#check if the rest of A is a subarray of B\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\t\n\t#if A is not a subarray of B\n\treturn false\nend",
    "\t\"\"\"\n\tThis function checks whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tj = 1\n\tfor i in 1:m\n\t\tif A[j] == B[i]\n\t\t\tj += 1\n\t\tend\n\t\tif j == n+1\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tA is a subarray of B if all elements of A are in B.\n\t\"\"\"\n\tfor i in A\n\t\tif i in B\n\t\t\tcontinue\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i + length(A) - 1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t# A is the subarray of B\n\t# A is a vector of Int64\n\t# B is a vector of Int64\n\t# return true if A is a subarray of B\n\t# return false if A is not a subarray of B\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B, return true\n\t# if A is not a subarray of B, return false\n\t\n\t# check if A is a subarray of B\n\t# if A is a subarray of B",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tThis function checks whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray of B if all elements of A are present in B in the same order.\n\t# A is a subarray",
    "\t# A is the subvector of B\n\t# B is the vector\n\t# A and B are 1D vectors\n\t# A and B are of same type\n\t\n\t# check if A is empty\n\tif length(A) == 0\n\t\treturn true\n\tend\n\t\n\t# check if B is empty\n\tif length(B) == 0\n\t\treturn false\n\tend\n\t\n\t# check if A is longer than B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# check if A is subvector of B\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif m < n\n\t\treturn false\n\tend\n\tfor i = 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n\t\n\tReturn true if B is a subvector of A.\n\t\"\"\"\n\t\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i < length(B)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\t\n\tif n > m\n\t\treturn false\n\tend\n\t\n\tfor i in 1:m-n+1\n\t\tj = 1\n\t\twhile j <= n\n\t\t\tif A[j] != B[i+j-1]\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj += 1\n\t\tend\n\t\tif j == n+1\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\ti = 1\n\tj = 1\n\twhile i <= n && j <= m\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\ti = i - j + 2\n\t\t\tj = 1\n\t\tend\n\tend\n\tif j > m\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t# A is subarray of B iff all elements of A are in B\n\tfor i in A\n\t\tif !(i in B)\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif A[j] != B[i+j-1]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif m < n\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t# A is the subvector and B is the vector\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t# A is the sub array\n\t# B is the array\n\t# Return true if A is sub array of B, else return false\n\t\n\t# Check the length of A and B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\t# Check if A is sub array of B\n\tfor i in 1:length(B)\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tA is a subarray of B if all the elements of A are in B.\n\t\"\"\"\n\tfor i in A\n\t\tif i in B\n\t\t\tcontinue\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    n = length(A)\n    m = length(B)\n    if n > m\n        return false\n    end\n    for i in 1:m-n+1\n        if A == B[i:i+n-1]\n            return true\n        end\n    end\n    return false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n\t\n\tThis function checks whether a vector is subvector of another or not.\n\t\n\tParameters\n\t----------\n\tA : Vector{Int64}\n\t\tThe first vector.\n\tB : Vector{Int64}\n\t\tThe second vector.\n\t\n\tReturns\n\t-------\n\tBool\n\t\tReturns true if A is subvector of B, else returns false.\n\t\n\tExamples\n\t--------\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n\ttrue\n\t\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n\ttrue\n\t\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\ttrue\n\t\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\ttrue\n\t\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\ttrue\n\t\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\ttrue\n\t\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\ttrue\n\t\n\t>>> is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\ttrue\n\t",
    "\t\"\"\"\n\tA is a subarray of B if A is a contiguous subarray of B.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n\t\n\tCheck whether A is a subvector of B or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A, B)\n\t\n\tCheck whether a vector is subvector of another or not.\n\t\n\tParameters\n\t----------\n\tA : Vector{Int64}\n\t\tVector A\n\tB : Vector{Int64}\n\t\tVector B\n\t\n\tReturns\n\t-------\n\tBool\n\t\tTrue if B is subvector of A, False otherwise.\n\t\"\"\"\n\t\n\tif length(B) > length(A)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)\n\t\tif A[1] == B[i]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif A[j] != B[i+j-1]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tA is a subarray of B if all elements of A are present in B in the same order.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tThis function takes two vectors as input and checks whether the first vector is a subvector of the second or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\t\tA is a subarray of B if all elements of A are in B.\n\t\"\"\"\n\tfor i in A\n\t\tif i in B\n\t\t\tcontinue\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool \n\t\n\tThis function checks whether a vector is subvector of another or not.\n\t\n\tParameters\n\t----------\n\tA::Vector{Int64}\n\t\tA vector of integer numbers.\n\tB::Vector{Int64}\n\t\tA vector of integer numbers.\n\t\n\tReturns\n\t-------\n\tBool\n\t\tReturns true if A is subvector of B, false otherwise.\n\t\"\"\"\n\t\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether A is subvector of B or not.\n\t\"\"\"\n\t# If B is empty, then A is subvector of B.\n\tif length(B) == 0\n\t\treturn true\n\tend\n\t# If A is empty, then A is not subvector of B.\n\tif length(A) == 0\n\t\treturn false\n\tend\n\t# If A and B are not empty, then check whether A is subvector of B or not.\n\tif A[1] == B[1]\n\t\treturn is_Sub_Array(A[2:end], B[2:end])\n\telse\n\t\treturn is_Sub_Array(A, B[2:end])\n\tend\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend",
    "\t\"\"\"\n\tCheck if A is subvector of B.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A, B)\n\t\n\tCheck whether a vector is subvector of another or not.\n\t\n\tParameters\n\t----------\n\tA : Vector{Int64}\n\t\tA vector.\n\tB : Vector{Int64}\n\t\tA vector.\n\t\n\tReturns\n\t-------\n\tBool\n\t\tTrue if A is subvector of B, False otherwise.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tThis function checks whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tThis function checks whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tFunction to check whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\ti = 1\n\tj = 1\n\twhile i <= length(A) && j <= length(B)\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\ti = 1\n\t\t\tj += 1\n\t\tend\n\tend\n\tif i == length(A) + 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})\n\t\n\tThis function checks whether a vector is subvector of another or not.\n\t\n\tExample:\n\t\n\tjulia> is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9])\n\ttrue\n\t\n\tjulia> is_Sub_Array([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10])\n\tfalse\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif B[i+j-1] != A[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m \n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\ti = 1\n\tj = 1\n\twhile i <= n && j <= m\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\ti = i - j + 2\n\t\t\tj = 1\n\t\tend\n\tend\n\tif j > m\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif i + length(A) - 1 > length(B)\n\t\t\treturn false\n\t\tend\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tA is subvector of B\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B)\n\t\tif A[1] == B[i]\n\t\t\tfor j in 1:length(A)\n\t\t\t\tif A[j] != B[i+j-1]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(A)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\t\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    n = length(A)\n    m = length(B)\n    for i in 1:m-n+1\n        if A == B[i:i+n-1]\n            return true\n        end\n    end\n    return false\nend",
    "\t# A is a subarray of B iff A is a subsequence of B\n\t# A is a subsequence of B iff A is a subsequence of B[1:end]\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tif length(A) == 0\n\t\treturn true\n\tend\n\tif A[1] == B[1]\n\t\treturn is_Sub_Array(A[2:end], B[2:end])\n\telse\n\t\treturn is_Sub_Array(A, B[2:end])\n\tend\nend",
    "\t# A is subvector of B\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)\n\t\tif B[i] == A[1]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tif is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A, B)\n\t\n\tCheck whether a vector is subvector of another or not.\n\t\n\tParameters\n\t----------\n\tA : Vector{Int64}\n\t\tVector to be checked.\n\tB : Vector{Int64}\n\t\tVector to be checked.\n\t\n\tReturns\n\t-------\n\tBool\n\t\tTrue if A is subvector of B, False otherwise.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A, B)\n\t\n\tCheck whether a vector is subvector of another or not.\n\t\n\tParameters\n\t----------\n\tA : Vector{Int64}\n\t\tThe vector to be checked.\n\tB : Vector{Int64}\n\t\tThe vector to be checked.\n\t\n\tReturns\n\t-------\n\tBool\n\t\tTrue if A is subvector of B, False otherwise.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tif A == B\n\t\treturn true\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck if B is a subarray of A.\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tA is a subvector of B iff A is a contiguous subsequence of B.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\ti = 1\n\tj = 1\n\twhile i <= length(A) && j <= length(B)\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\tend\n\t\tj += 1\n\tend\n\treturn i > length(A)\nend",
    "\t\"\"\"\n\tInput:\n\t\tA: Vector of integers\n\t\tB: Vector of integers\n\tOutput:\n\t\tTrue if B is subvector of A\n\t\tFalse otherwise\n\t\"\"\"\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tThis function checks whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif m < n\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif m < n\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tis_Sub_Array(A,B)\n\t\n\tReturns true if B is a subvector of A, false otherwise.\n\t\"\"\"\n\t\n\tif length(A) < length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(A)-length(B)+1\n\t\tif A[i:i+length(B)-1] == B\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\telse\n\t\t\tfor i in 1:length(A)\n\t\t\t\tif A[i] != B[i]\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\tend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t# A is the subarray and B is the array\n\t# A is a subarray of B iff A is a subsequence of B\n\t# A is a subsequence of B iff A can be obtained from B by deleting some elements of B without changing the order of the remaining elements.\n\t# We will use the dynamic programming approach to solve this problem.\n\t# First we will create a matrix of size (m+1)x(n+1) where m is the length of A and n is the length of B.\n\t# We will initialize the first row and column of the matrix with 0.\n\t# Now we will traverse the matrix and fill the matrix with the following logic:\n\t# if A[i] == B[j] then T[i][j] = T[i-1][j-1] + 1\n\t# else T[i][j] = max(T[i-1][j], T[i][j-1])\n\t# if T[m][n] == m then A is a subarray of B else A is not a subarray of B.\n\tm = length(A)\n\tn = length(B)\n\tT = zeros(m+1, n+1)\n\tfor i in 1:m+1\n\t\tfor j in 1:n+1\n\t\t\tif i == 1 || j == 1\n\t\t\t\tT[i,j] = 0\n\t\t\telseif A[i-1] == B[j-1]\n\t\t\t\tT[i,j] = T[i-1,j-1] + 1\n\t\t\telse\n\t\t\t\tT[i,j] = max(T[i-1,j], T[i,j-1])\n\t\t\tend\n\t\tend\n\tend\n\tif T[m+1,n+1] == m\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\t\"\"\"\n\t\tis_Sub_Array(A::Vector{Int64}, B::Vector{Int64})::Bool\n\t\t\n\t\tThis function checks whether a vector is subvector of another or not.\n\t\t\"\"\"\n\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\t\n\t\tfor i in 1:length(B)-length(A)+1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\t\n\t\treturn false\n\tend\n\t\n\t\"\"\"\n\tWrite a jlthon function to check whether a vector is subvector of another or not.\n\t\"\"\"",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t\"\"\"\n\tThis function checks whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tFunction to check whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tfor i = 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tfor i in 1:m-n+1\n\t\tif A == B[i:i+n-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\t\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend",
    "\t\n\t#if length(A) > length(B)\n\t#\treturn false\n\t#end\n\t\n\tfor i in 1:length(B)\n\t\tif A[1] == B[i]\n\t\t\tif length(A) == 1\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn is_Sub_Array(A[2:end], B[i+1:end])\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\tif n > m\n\t\treturn false\n\tend\n\tfor i = 1:m - n + 1\n\t\tif A == B[i:i + n - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\tif length(A) > length(B)\n\t\t\treturn false\n\t\tend\n\t\t\n\t\tfor i in 1:length(B) - length(A) + 1\n\t\t\tif A == B[i:i+length(A)-1]\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\t\n\t\treturn false\n\tend",
    "\tj = 1\n\tfor i in 1:length(A)\n\t\tif A[i] == B[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\tif j == length(B) + 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\t\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tA is a subvector of B if A is a contiguous subarray of B.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t# A is the sub array and B is the main array\n\t# A = [1,2,3,4,5]\n\t# B = [1,2,3,4,5,6,7,8,9,10]\n\t# A is the sub array of B\n\t# A = [1,2,3,4,5,6,7,8,9,10]\n\t# B = [1,2,3,4,5]\n\t# A is not the sub array of B\n\t# A = [1,2,3,4,5]\n\t# B = [1,2,3,4,5,6,7,8,9,10,11]\n\t# A is not the sub array of B\n\t# A = [1,2,3,4,5,6,7,8,9,10,11]\n\t# B = [1,2,3,4,5]\n\t# A is not the sub array of B\n\t# A = [1,2,3,4,5]\n\t# B = [1,2,3,4,5]\n\t# A is the sub array of B\n\t# A = [1,2,3,4,5]\n\t# B = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\t# A is the sub array of B\n\t# A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\t# B = [1,2,3,4,5]\n\t# A is not the sub array of B\n\t# A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\t# B = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\t# A",
    "\t# A is a subarray of B iff A is a subsequence of B\n\t# A is a subsequence of B iff A is a subsequence of B[1:end-1] or A is a subsequence of B[2:end]\n\tif length(A) == 0\n\t\treturn true\n\telseif length(B) == 0\n\t\treturn false\n\telseif A[1] == B[1]\n\t\treturn is_Sub_Array(A[2:end], B[2:end])\n\telse\n\t\treturn is_Sub_Array(A, B[2:end])\n\tend\nend",
    "\t\"\"\"\n\tCheck if B is a subvector of A.\n\t\"\"\"\n\tif length(B) > length(A)\n\t\treturn false\n\tend\n\tfor i in 1:length(A)\n\t\tif A[i] == B[1]\n\t\t\tif length(A) - i + 1 < length(B)\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tfor j in 1:length(B)\n\t\t\t\tif A[i+j-1] != B[j]\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tif j == length(B)\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\t\"\"\"\n\tCheck whether a vector is subvector of another or not.\n\t\"\"\"\n\tif length(A) > length(B)\n\t\treturn false\n\tend\n\t\n\tfor i in 1:length(B) - length(A) + 1\n\t\tif A == B[i:i + length(A) - 1]\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\treturn false\nend",
    "\t# A is the subvector and B is the vector\n\t# A is a subvector of B if all the elements of A are present in B\n\t# and the elements of A are in the same order in B\n\t# if A is a subvector of B, return true, else return false\n\t\n\t# check if A is empty\n\tif isempty(A)\n\t\treturn true\n\tend\n\t\n\t# check if B is empty\n\tif isempty(B)\n\t\treturn false\n\tend\n\t\n\t# check if the first element of A is in B\n\tif A[1] in B\n\t\t# if it is, find the index of the first element of A in B\n\t\tindex = findfirst(B, A[1])\n\t\t# check if the rest of A is in B\n\t\tif is_Sub_Array(A[2:end], B[index+1:end])\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\t# if the first element of A is not in B, or if the rest of A is not in B,\n\t# then A is not a subvector of B\n\treturn false\nend",
    "\tn = length(A)\n\tm = length(B)\n\ti = 1\n\tj = 1\n\twhile i < n && j < m\n\t\tif A[i] == B[j]\n\t\t\ti += 1\n\t\t\tj += 1\n\t\telse\n\t\t\ti = i - j + 2\n\t\t\tj = 1\n\t\tend\n\tend\n\tif j == m\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif length(A) > length(B)\n\t\treturn false\n\tend\n\tfor i in 1:length(B)-length(A)+1\n\t\tif A == B[i:i+length(A)-1]\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend"
  ]
}