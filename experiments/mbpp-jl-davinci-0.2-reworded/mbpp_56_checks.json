{
  "name": "mbpp_56_checks",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a jlthon function to check if a given number is one less than twice its reverse.\n\t\"\"\"\nfunction checks(n::Int64)::Bool \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = checks;\n\t@test(candidate(70) == false)\n\t@test(candidate(23) == false)\n\t@test(candidate(73) == true)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\treturn n == 2*reverse(n)-1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn == 2*reverse(n)-1\nend",
    "\treturn n == (2*reverse(n)-1)\nend",
    "\treturn n == (n + reverse(n)) / 2\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\t\n\trev = 0\n\twhile n > 0\n\t\trev = 10*rev + n%10\n\t\tn = n/10\n\tend\n\t\n\treturn n == 2*rev - 1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == 2*reverse(n) - 1\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n-1)*2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tn_rev = reverse(n)\n\treturn n_rev == n - 1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn1 = n\n\trev = 0\n\twhile n1 != 0\n\t\trev = rev*10 + n1%10\n\t\tn1 = n1/10\n\tend\n\treturn n == 2*rev - 1\nend",
    "\treturn n == 2*reverse(n) - 1\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn1 = n-1\n\tn2 = reverse(n)\n\tn1 == 2*n2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n+1)/2\nend",
    "\treturn (n == (2*reverse(n) - 1))\nend",
    "\t\"\"\"\n\tChecks if a given number is one less than twice its reverse.\n\t\"\"\"\n\tn_rev = reverse(n)\n\treturn n == 2*n_rev - 1\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == (n+1)/2\nend",
    "\tn == (n-1)/2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn1 = n\n\tn2 = 0\n\twhile n1 > 0\n\t\tn2 = n2*10 + n1%10\n\t\tn1 = n1/10\n\tend\n\treturn n == 2*n2 - 1\nend",
    "\tn1 = n\n\trev = 0\n\twhile n1 > 0\n\t\trev = rev * 10 + n1 % 10\n\t\tn1 = n1 / 10\n\tend\n\treturn n + 1 == 2 * rev\nend",
    "\tn_rev = reverse(n)\n\tif n == n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n == (2*reverse(n)-1)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\tif n == 10\n\t\treturn true\n\tend\n\tif n % 10 == 0\n\t\treturn false\n\tend\n\treturn checks(n/10) && (n % 10 == (n/10) % 10 - 1)\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn1 = n\n\trev = 0\n\twhile n1 > 0\n\t\trev = rev*10 + n1%10\n\t\tn1 = n1/10\n\tend\n\tif n == 2*rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\tif n < 10\n\t\t\treturn false\n\t\tend\n\t\trev = 0\n\t\tnum = n\n\t\twhile num > 0\n\t\t\trev = rev * 10 + num % 10\n\t\t\tnum = num / 10\n\t\tend\n\t\tif n == rev\n\t\t\treturn false\n\t\tend\n\t\tif n == 2 * rev - 1\n\t\t\treturn true\n\t\tend\n\t\treturn false\n\tend\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tn == 2*reverse(n)-1\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1)/2\nend",
    "\tn_rev = reverse(n)\n\treturn n == n_rev - 1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n % 10) * 2 + (n % 100 - n % 10) / 10 * 2 + (n % 1000 - n % 100) / 100 * 2 + (n % 10000 - n % 1000) / 1000 * 2 + (n % 100000 - n % 10000) / 10000 * 2 + (n % 1000000 - n % 100000) / 100000 * 2 + (n % 10000000 - n % 1000000) / 1000000 * 2 + (n % 100000000 - n % 10000000) / 10000000 * 2 + (n % 1000000000 - n % 100000000) / 100000000 * 2 + (n % 10000000000 - n % 1000000000) / 1000000000 * 2 + (n % 100000000000 - n % 10000000000) / 10000000000 * 2 + (n % 1000000000000 - n % 100000000000) / 100000000000 * 2 + (n % 10000000000000 - n % 1000000000000) / 1000000000000 * 2 + (n % 100000000000000 - n % 10000000000000) / 10000000000000 * 2 + (n % 1000000000000000 - n % 100000000000000) / 100000000000000 * 2 + (n % 10000000000000000 - n % 1000000000000000) / 1000000000000000 * 2 + (n % 100000000000000000 - n % 10000000000000000) / 10000000000000000 * 2 + (n % 1000000000000000000 - n % 100000000000000000) / 100000000000000000 * 2 + (n % 10000000000000000000 - n % 1000000000000000000) / 1000000000000000000 * 2 + (n % 100000000000000000000 - n % 10000000000000000000) / 10000000000000000000 * 2 + (n % 1000000000000000000000 - n % 100000000000000000000) / 100000000000000000000 * 2 + (n % 10000000000000000000000 - n % 1000000000000000000000) / 1000000000000000000000 * 2 + (n % 100000000000000000000000 - n % 10000000000000000000000) / 10000000000000000000000 * 2 + (n % 1000000000000000000000000 - n % 100000000000000000000000) / 100000000000000000000000 * 2 + (n % 10000000000000000000000000 - n % 1000000000000000000000000) / 1000000000000000000000000 * 2 + (n % 100000000000000000000000000 - n % 10000000000000000000000000) / 10000000000000000000000000 * 2 + (n % 1000000000000000000000000000 - n % 100000000000000000000000000) / 100000000000000000000000000 * 2 + (n % 10000000000000000000000000000 - n % 1000000000000000000000000000) / 1000000000000000000",
    "\treturn n == (n - 1) / 2\nend",
    "\tn == 2*reverse(n)-1\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\treturn n == 2*reverse(n) - 1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn == (n-1) * 2\nend",
    "\treturn n == (n-1)*2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) * 2\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\tn_rev = reverse(n)\n\tif n == n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\t\"\"\"\n\tChecks if n is one less than twice its reverse.\n\t\"\"\"\n\tif n < 10\n\t\treturn false\n\tend\n\treturn n == 2*reverse(n) - 1\nend",
    "\treturn (n == (n-1) * 2)\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tn1=n+1\n\tn2=n*2\n\tn1_rev=parse(Int64,reverse(string(n1)))\n\tn2_rev=parse(Int64,reverse(string(n2)))\n\tif n1_rev==n2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\trev = 0\n\twhile n > 0\n\t\trev = rev*10 + n%10\n\t\tn = n/10\n\tend\n\treturn (rev+1)%2 == 0\nend",
    "\tnum = n\n\trev = 0\n\twhile n != 0\n\t\trev = rev * 10 + n % 10\n\t\tn = n / 10\n\tend\n\treturn num == 2 * rev - 1\nend",
    "\trev = reverse(n)\n\tif n == 2*rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tn == (n-1)/2\nend",
    "\tif n == reverse(n-1) * 2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1)*2\nend",
    "\tn_rev = reverse(n)\n\treturn (n_rev == n-1)\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn_str = string(n)\n\tn_rev = parse(Int64, reverse(n_str))\n\tif n == 2n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n - 1) * 2\nend",
    "\t\"\"\"\n\tChecks if a given number is one less than twice its reverse.\n\t\"\"\"\n\tif n < 10\n\t\treturn false\n\tend\n\t\n\tn_rev = reverse(n)\n\t\n\tif (n_rev * 2) - 1 == n\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\tif n == reverse(n) + 1\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tn_rev = parse(Int64,reverse(string(n)))\n\tif n == n_rev + 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\t\n\trev = 0\n\twhile n > 0\n\t\trev = rev * 10 + n % 10\n\t\tn = div(n, 10)\n\tend\n\t\n\treturn rev == 2 * n + 1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn_rev = reverse(n)\n\tif n == n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tn_rev = parse(Int64,reverse(string(n)))\n\treturn n == 2*n_rev - 1\nend",
    "\ta = n\n\tb = 0\n\twhile a != 0\n\t\tb = b*10 + a%10\n\t\ta = a/10\n\tend\n\treturn n == 2*b - 1\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\tif n == reverse(n-1) * 2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\treturn (n == (2*reverse(n) - 1))\nend",
    "\tn1 = n\n\trev = 0\n\twhile n1 > 0\n\t\trev = rev*10 + n1%10\n\t\tn1 = n1/10\n\tend\n\tif n == 2*rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1)/2\nend",
    "\tn1 = reverse(n)\n\tif n1 == 2n - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\trev = reverse(n)\n\tif n == 2*rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\tif n == 10\n\t\treturn true\n\tend\n\tif n % 10 == 0\n\t\treturn false\n\tend\n\tif n % 10 == 1\n\t\treturn true\n\tend\n\treturn checks(n/10)\nend",
    "\treturn n == (n-1)*2\nend",
    "\treturn n == (2*reverse(n)-1)\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tn1 = reverse(n)\n\tif n1 == 2*n-1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\treturn n == 2*reverse(n) - 1\nend",
    "\tn_rev = parse(Int64,reverse(string(n)))\n\tif n == n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n + 1) / 2\nend",
    "\treturn n == (n-1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn_rev = reverse(n)\n\tif n == n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tn_rev = reverse(n)\n\treturn (n_rev == 2*n - 1)\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn_rev = reverse(n)\n\tif (n_rev == n-1)\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n-1)/2\nend",
    "\tif n == 0\n\t\treturn true\n\tend\n\tif n < 0\n\t\treturn false\n\tend\n\tm = n\n\trev = 0\n\twhile m > 0\n\t\trev = rev * 10 + m % 10\n\t\tm = m / 10\n\tend\n\treturn n == rev * 2 - 1\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\tn_rev = reverse(n)\n\treturn n == 2*n_rev - 1\nend",
    "\tn == (n-1)/2\nend",
    "\treturn n == (n*2 - 1)\nend",
    "\tn_rev = reverse(n)\n\tif n == n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\tif n == reverse(n) + 1\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tn_rev = reverse(n)\n\tif n == 2*n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == 2*reverse(n) - 1\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\tif n < 100\n\t\treturn n == (n % 10) * 2 - 1\n\tend\n\tif n < 1000\n\t\treturn n == (n % 10) * 2 - 1 && n == (n % 100) * 2 - 1\n\tend\n\tif n < 10000\n\t\treturn n == (n % 10) * 2 - 1 && n == (n % 100) * 2 - 1 && n == (n % 1000) * 2 - 1\n\tend\n\tif n < 100000\n\t\treturn n == (n % 10) * 2 - 1 && n == (n % 100) * 2 - 1 && n == (n % 1000) * 2 - 1 && n == (n % 10000) * 2 - 1\n\tend\n\tif n < 1000000\n\t\treturn n == (n % 10) * 2 - 1 && n == (n % 100) * 2 - 1 && n == (n % 1000) * 2 - 1 && n == (n % 10000) * 2 - 1 && n == (n % 100000) * 2 - 1\n\tend\n\tif n < 10000000\n\t\treturn n == (n % 10) * 2 - 1 && n == (n % 100) * 2 - 1 && n == (n % 1000) * 2 - 1 && n == (n % 10000) * 2 - 1 && n == (n % 100000) * 2 - 1 && n == (n % 1000000) * 2 - 1\n\tend\n\tif n < 100000000\n\t\treturn n == (n % 10) * 2 - 1 && n == (n % 100) * 2 - 1 && n == (n % 1000) * 2 - 1 && n == (n % 10000) * 2 - 1 && n == (n % 100000) * 2 - 1 && n == (n % 1000000) * 2 - 1 && n == (n % 10000000) * 2 - 1\n\tend\n\tif n < 1000000000\n\t\treturn n == (n % 10) * 2 - 1 && n == (n % 100) * 2 - 1 && n == (n % 1000) * 2 - 1 && n == (n % 10000) * 2 - 1 && n == (n % 100000) *",
    "\tn_rev = reverse(n)\n\treturn n == n_rev - 1\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tif n == reverse(n-1) * 2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (2*reverse(n) - 1)\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\tif n == reverse(n) - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tr = reverse(n)\n\treturn (n == 2*r - 1)\nend",
    "\tn_rev = parse(Int64,reverse(string(n)))\n\treturn n == 2*n_rev - 1\nend",
    "\tn_rev = reverse(n)\n\treturn n == 2*n_rev - 1\nend",
    "\ta = n\n\tb = 0\n\twhile a != 0\n\t\tb = b*10 + a%10\n\t\ta = a/10\n\tend\n\treturn (b == 2*n-1)\nend",
    "\treturn n == (n-1) * 2\nend",
    "\t\"\"\"\n\tChecks if a given number is one less than twice its reverse.\n\t\"\"\"\n\tn_rev = reverse(n)\n\tif n == 2*n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn (n == (2*(reverse(n))-1))\nend",
    "\tif n == reverse(n-1) * 2\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n == reverse(n) - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\tn_rev = parse(Int64,reverse(string(n)))\n\treturn n == 2*n_rev - 1\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\treturn n == (n-1)*2\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\ta = n\n\tb = 0\n\twhile a > 0\n\t\tb = b*10 + a%10\n\t\ta = a/10\n\tend\n\treturn b == 2*n - 1\nend",
    "\treturn n == (n-1)*2\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tn_rev = reverse(n)\n\treturn n == n_rev - 1\nend",
    "\treturn n == (n-1)/2\nend",
    "\treturn n == (2*reverse(n) - 1)\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\t\"\"\"\n\tChecks if a given number is one less than twice its reverse.\n\t\"\"\"\n\trev = reverse(n)\n\treturn n == 2*rev - 1\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\tif n == 10\n\t\treturn true\n\tend\n\tif n % 10 == 0\n\t\treturn false\n\tend\n\tif n < 100\n\t\treturn n == (n % 10) * 2 + 1\n\tend\n\tif n < 1000\n\t\treturn n == (n % 10) * 20 + (n % 100 - n % 10) / 10 + 1\n\tend\n\tif n < 10000\n\t\treturn n == (n % 10) * 200 + (n % 100 - n % 10) / 10 * 2 + (n % 1000 - n % 100) / 100 + 1\n\tend\n\tif n < 100000\n\t\treturn n == (n % 10) * 2000 + (n % 100 - n % 10) / 10 * 20 + (n % 1000 - n % 100) / 100 * 2 + (n % 10000 - n % 1000) / 1000 + 1\n\tend\n\tif n < 1000000\n\t\treturn n == (n % 10) * 20000 + (n % 100 - n % 10) / 10 * 200 + (n % 1000 - n % 100) / 100 * 20 + (n % 10000 - n % 1000) / 1000 * 2 + (n % 100000 - n % 10000) / 10000 + 1\n\tend\n\tif n < 10000000\n\t\treturn n == (n % 10) * 200000 + (n % 100 - n % 10) / 10 * 2000 + (n % 1000 - n % 100) / 100 * 200 + (n % 10000 - n % 1000) / 1000 * 20 + (n % 100000 - n % 10000) / 10000 * 2 + (n % 1000000 - n % 100000) / 100000 + 1\n\tend\n\tif n < 100000000\n\t\treturn n == (n % 10) * 2000000 + (n % 100 - n % 10) / 10 * 20000 + (n % 1000 - n % 100) / 100 * 2000 + (n % 10000 - n % 1000) / 1000 * 200 + (n % 100000 - n % 10000) / 10000 * 20 + (n % 1000000 - n % 100000) / 100000 * 2 + (n % 10000000 - n % 1000000) / 1000000 + 1\n",
    "\treturn n == (n-1) / 2\nend",
    "\treturn n == 2*reverse(n) - 1\nend",
    "\tif n < 10 return false end\n\treturn n == 2*reverse(n) - 1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn n == 2*reverse(n) - 1\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\ta = n\n\tb = 0\n\twhile a > 0\n\t\tb = b*10 + a%10\n\t\ta = div(a,10)\n\tend\n\treturn n == b-1\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n-1) * 2\nend\n\"\"\"\n\tWrite a jlthon function to check if a given number is a palindrome.\n\t\"\"\"",
    "\tn == 2*reverse(n)-1\nend",
    "\tif n < 10\n\t\treturn false\n\tend\n\t\n\treverse = 0\n\twhile n > 0\n\t\treverse = reverse * 10 + n % 10\n\t\tn = n / 10\n\tend\n\t\n\treturn n == reverse - 1\nend",
    "\treturn n == 2*reverse(n) - 1\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\t\"\"\"\n\tchecks(n::Int64)::Bool\n\t\n\tChecks if a given number is one less than twice its reverse.\n\t\"\"\"\n\tif n < 10\n\t\treturn false\n\tend\n\t\n\trev = reverse(n)\n\t\n\tif n == 2*rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\trev = reverse(n)\n\tif n == 2*rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tn == (n-1)/2\nend",
    "\treturn n == 2*reverse(n)-1\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tn == (n-1) * 2\nend",
    "\treturn n == (n-1) * 2\nend",
    "\treturn n == (n - 1) / 2\nend",
    "\treturn (n == (2*reverse(n) - 1))\nend",
    "\treturn n == (n-1) * 2\nend",
    "\tn_rev = reverse(n)\n\tif n_rev == n-1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tn_rev = reverse(n)\n\tif n == 2n_rev - 1\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn n == (n-1)*2\nend"
  ]
}