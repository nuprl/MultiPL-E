{
  "name": "mbpp_799_left_rotate",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\nfunction left_rotate(n::Int64, d::Int64)::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = left_rotate;\n\t@test(candidate(16, 2) == 64)\n\t@test(candidate(10, 2) == 40)\n\t@test(candidate(99, 3) == 792)\n\t@test(candidate(99, 3) == 792)\n\t@test(candidate(1, 3) == 8)\n\t@test(candidate(5, 3) == 40)\n\t@test(candidate(29, 3) == 232)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32-d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tThis function rotates the bits of a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tn: number to rotate\n\td: number of bits to rotate\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tThis function rotates the bits of a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tn: number to rotate\n\td: number of bits to rotate\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn bit_shift_left(n, d) | bit_shift_right(n, 32 - d)\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn bit_shift(n, d) | bit_shift(n, -(32 - d))\nend",
    "\t\"\"\"\n\tRotate left bits by d bits a given number.\n\t\"\"\"\n\treturn bit_shift(n, d) | bit_shift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate bits by d bits a given number.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn bit_shift(bit_shift(n, d), -32 + d)\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn bit_shift(n, -d) | bit_shift(n, 32-d)\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32-d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> n after left rotation of d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32 - d))\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> n rotated left by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tThis function rotates the bits of a number n by d bits to the left.\n\t\"\"\"\n\treturn (n << d) | (n >> (32-d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tFunction to rotate left bits by d bits a given number.\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> Int64\n\t\n\tRotate left bits by d bits a given number n. We assume that the number is 32 bit.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> rotate left bits of n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tFunction to left rotate bits of a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tThis function left rotates the number n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tFunction to rotate left bits by d bits a given number. \n\t\"\"\"\n\treturn bit_shift_left(n, d) | bit_shift_right(n, 32 - d)\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tThis function rotates the bits of a number n by d bits to the left.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bit_shift(n, -d) | bit_shift(n, 32-d)\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tThis function rotates the bits of a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> Int64\n\t\n\tRotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bit_shift(n, -d) | bit_shift(n, 32-d)\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bit_shift(n, d) | bit_shift(n, -32 + d)\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> Int64\n\t\n\tRotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tRotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bit_shift(n, -d) | bit_shift(n, 32-d)\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn bit_shift_left(n, d) | bit_shift_right(n, 32 - d)\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tn: number to be rotated\n\td: number of bits to be rotated\n\t\"\"\"\n\treturn bitshift(n, d) + bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tThis function rotates the bits of the number n by d bits to the left.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tleft_rotate(n::Int64, d::Int64)",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn bit_shift(n, -d) | bit_shift(n, 32 - d)\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\t# In the following expression, we use the bitwise and operator to get the last d bits of the number.\n\t# Then we shift the number by d bits.\n\t# Finally, we use the bitwise or operator to combine the last d bits with the shifted number.\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tn: number to rotate\n\td: number of bits to rotate\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the number n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> Int64\n\t\n\tRotate the bits of n by d bits to the left.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tRotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n\tmask = (1 << d) - 1\n\treturn (n << d) | (n >> (32 - d) & mask)\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> Int64\n\t\n\tRotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tRotate bits of n by d bits to the left.\n\t\"\"\"\n\treturn bit_shift_left(n, d) | bit_shift_right(n, 32-d)\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\t\tn is the number to be rotated\n\t\td is the number of bits to be rotated\n\t\"\"\"\n\tmask = (1 << d) - 1\n\tmask = bitstring(mask)\n\tn = bitstring(n)\n\tn = n[d+1:end] * mask\n\treturn parse(Int64, n, base=2)\nend",
    "\t\"\"\"\n\tleft_rotate(n, d) -> rotate left n by d bits\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tFunction to left rotate bits of a number by d bits\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate the bits of n by d bits.\n\t\"\"\"\n\treturn (n << d) | (n >> (32 - d))\nend",
    "\treturn (n << d) | (n >> (32 - d))\nend",
    "\t\"\"\"\n\tLeft rotate n by d bits.\n\t\"\"\"\n\treturn bitshift(n, d) | bitshift(n, -(32-d))\nend",
    "\treturn bit_shift(n, -d) | bit_shift(n, 32-d)\nend"
  ]
}