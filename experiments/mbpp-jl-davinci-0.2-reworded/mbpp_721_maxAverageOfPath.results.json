{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "jl",
  "prompt": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpkzsvt1h6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkzsvt1h6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzsvt1h6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkzsvt1h6.jl:23\ntest set: Error During Test at /tmp/tmpkzsvt1h6.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkzsvt1h6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpkzsvt1h6.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\n\t# Initialize the matrix of size N*N\n\tN = size(cost, 1)\n\tmaxAvg = zeros(N, N)\n\t\n\t# Initialize the first row and column of the matrix\n\tmaxAvg[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tmaxAvg[1, i] = maxAvg[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:N\n\t\tmaxAvg[i, 1] = maxAvg[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Compute the maximum average for each cell\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tmaxAvg[i, j] = max(maxAvg[i-1, j], maxAvg[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\t# Return the maximum average\n\treturn maxAvg[N, N] / (N*N)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmphf4spe2_.jl:34\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphf4spe2_.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphf4spe2_.jl:34 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphf4spe2_.jl:33\ntest set: Error During Test at /tmp/tmphf4spe2_.jl:35\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphf4spe2_.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmphf4spe2_.jl:31\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpv49ecww9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv49ecww9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv49ecww9.jl:23\ntest set: Error During Test at /tmp/tmpv49ecww9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpv49ecww9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmprs8zbbr1.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprs8zbbr1.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprs8zbbr1.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprs8zbbr1.jl:23\ntest set: Error During Test at /tmp/tmprs8zbbr1.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprs8zbbr1.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmprs8zbbr1.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = size(cost, 1)\n\tdp = zeros(Int64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (2 * N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp4blfp6zk.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp4blfp6zk.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4blfp6zk.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4blfp6zk.jl:23\ntest set: Error During Test at /tmp/tmp4blfp6zk.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp4blfp6zk.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp4blfp6zk.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpb8u0z5l9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb8u0z5l9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb8u0z5l9.jl:23\ntest set: Error During Test at /tmp/tmpb8u0z5l9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpb8u0z5l9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmphpf6c9yv.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphpf6c9yv.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphpf6c9yv.jl:26\ntest set: Error During Test at /tmp/tmphpf6c9yv.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmphpf6c9yv.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpoqkn4gxq.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoqkn4gxq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoqkn4gxq.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoqkn4gxq.jl:23\ntest set: Error During Test at /tmp/tmpoqkn4gxq.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoqkn4gxq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpoqkn4gxq.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpo2jomfno.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpo2jomfno.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo2jomfno.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo2jomfno.jl:25\ntest set: Error During Test at /tmp/tmpo2jomfno.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpo2jomfno.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpo2jomfno.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the first row and column\n\tfor i = 2:n\n\t\tcost[i,1] += cost[i-1,1]\n\tend\n\tfor j = 2:m\n\t\tcost[1,j] += cost[1,j-1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tcost[i,j] += max(cost[i-1,j], cost[i,j-1])\n\t\tend\n\tend\n\t\n\treturn cost[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509922,
      "stdout": "test set: Error During Test at /tmp/tmpkl2nn98i.jl:30\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkl2nn98i.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkl2nn98i.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkl2nn98i.jl:29\ntest set: Error During Test at /tmp/tmpkl2nn98i.jl:31\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkl2nn98i.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkl2nn98i.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkl2nn98i.jl:29\ntest set: Error During Test at /tmp/tmpkl2nn98i.jl:32\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkl2nn98i.jl:13\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkl2nn98i.jl:32 [inlined]\n   [5] macro expansion\n     @ /h",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpkl2nn98i.jl:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmphpf6c9yv.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphpf6c9yv.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphpf6c9yv.jl:26\ntest set: Error During Test at /tmp/tmphpf6c9yv.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmphpf6c9yv.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp6kau7fah.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6kau7fah.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6kau7fah.jl:23\ntest set: Error During Test at /tmp/tmp6kau7fah.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp6kau7fah.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = zeros(n,n)\n\tm[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tm[1,i] = m[1,i-1] + cost[1,i]\n\t\tm[i,1] = m[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tm[i,j] = max(m[i-1,j],m[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn m[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp0z7tfck_.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp0z7tfck_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0z7tfck_.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0z7tfck_.jl:23\ntest set: Error During Test at /tmp/tmp0z7tfck_.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp0z7tfck_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp0z7tfck_.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tavg = zeros(n, m)\n\tavg[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tavg[i, 1] = avg[i-1, 1] + cost[i, 1]\n\tend\n\tfor j = 2:m\n\t\tavg[1, j] = avg[1, j-1] + cost[1, j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tavg[i, j] = max(avg[i-1, j], avg[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn avg[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp0jv7ryc8.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp0jv7ryc8.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0jv7ryc8.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0jv7ryc8.jl:26\ntest set: Error During Test at /tmp/tmp0jv7ryc8.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp0jv7ryc8.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp0jv7ryc8.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n    n = size(cost, 1)\n    dp = zeros(n, n)\n    dp[1, 1] = cost[1, 1]\n    for i in 2:n\n        dp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n        dp[1, i] = dp[1, i - 1] + cost[1, i]\n    end\n    for i in 2:n\n        for j in 2:n\n            dp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        end\n    end\n    return dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp8ln_8y5e.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp8ln_8y5e.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8ln_8y5e.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8ln_8y5e.jl:23\ntest set: Error During Test at /tmp/tmp8ln_8y5e.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp8ln_8y5e.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp8ln_8y5e.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp_z702ck4.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_z702ck4.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_z702ck4.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_z702ck4.jl:26\ntest set: Error During Test at /tmp/tmp_z702ck4.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_z702ck4.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp_z702ck4.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpfeaeglb3.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpfeaeglb3.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfeaeglb3.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfeaeglb3.jl:26\ntest set: Error During Test at /tmp/tmpfeaeglb3.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpfeaeglb3.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# your code here\n\treturn 0.0\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124100,
      "stdout": "test set: Test Failed at /tmp/tmp8ekbx2jg.jl:13\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n   Evaluated: 0.0 == 5.2\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ekbx2jg.jl:13 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ekbx2jg.jl:12\ntest set: Test Failed at /tmp/tmp8ekbx2jg.jl:14\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n   Evaluated: 0.0 == 6.2\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ekbx2jg.jl:14 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ekbx2jg.jl:12\ntest set: Test Failed at /tmp/tmp8ekbx2jg.jl:15\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n   Evaluated: 0.0 == 7.2\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ekbx2jg.jl:15 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ekbx2jg.jl:12\ntest set: Test Failed at /tmp/tmp8ekbx2jg.jl:16\n  Expression: candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n   Evaluated: 0.0 == 5.8\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ekbx2jg.jl:16 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ekbx2jg.jl:12\nTest Summary: | Fail  Total\ntest set      |    4      4\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp8ekbx2jg.jl:10\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpjlbwahtr.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpjlbwahtr.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjlbwahtr.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjlbwahtr.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmps6z3j93y.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps6z3j93y.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmps6z3j93y.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmps6z3j93y.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# Initialize the first row and column of the matrix\n\tfor i in 2:n\n\t\tcost[1,i] += cost[1,i-1]\n\t\tcost[i,1] += cost[i-1,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tcost[i,j] += max(cost[i-1,j], cost[i,j-1])\n\t\tend\n\tend\n\treturn cost[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmp1a18wd88.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp1a18wd88.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1a18wd88.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1a18wd88.jl:23\ntest set: Error During Test at /tmp/tmp1a18wd88.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp1a18wd88.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1a18wd88.jl:25 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1a18wd88.jl:23\ntest set: Error During Test at /tmp/tmp1a18wd88.jl:26\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access 3-element Vector{Vector{Int64}} at index [1, 2]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:862 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp1a18wd88.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1a18wd88.jl:26 [inlined]\n   [5] macro expansion\n     @ /home",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp6kau7fah.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6kau7fah.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6kau7fah.jl:23\ntest set: Error During Test at /tmp/tmp6kau7fah.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp6kau7fah.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpt90p1gv6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpt90p1gv6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt90p1gv6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt90p1gv6.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpd801gop7.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd801gop7.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd801gop7.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd801gop7.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t# Create a matrix to store results of subproblems\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\t# Fill the first column\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn dp[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpeqly9nct.jl:32\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\t\n\t# Initialize the matrix\n\tmatrix = zeros(n, m)\n\tmatrix[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tmatrix[1, j] = matrix[1, j-1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tmatrix[i, 1] = matrix[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tmatrix[i, j] = max(matrix[i-1, j], matrix[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn matrix[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpq6y9iqgi.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpq6y9iqgi.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpq6y9iqgi.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpq6y9iqgi.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\t\n\t# Create a matrix to store results of subproblems\n\tdp = zeros(n, m)\n\t\n\t# Initialize first column of total cost(tc) matrix\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Initialize first row of tc matrix\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\t\n\t# Construct rest of the tc array\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = cost[i, j] + max(dp[i-1, j], dp[i, j-1])\n\t\tend\n\tend\n\t\n\treturn dp[n, m] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmp18orgdwx.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp18orgdwx.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp18orgdwx.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp18orgdwx.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\t\n\t# create a matrix of size n*m to store the average cost of each cell\n\tavg = zeros(n, m)\n\t\n\t# initialize the first cell\n\tavg[1, 1] = cost[1, 1]\n\t\n\t# initialize the first row\n\tfor j = 2:m\n\t\tavg[1, j] = avg[1, j-1] + cost[1, j]\n\tend\n\t\n\t# initialize the first column\n\tfor i = 2:n\n\t\tavg[i, 1] = avg[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# compute the average cost of each cell\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tavg[i, j] = max(avg[i-1, j], avg[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\t# return the average cost of the last cell\n\treturn avg[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpg1fajuct.jl:39\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmp_nfkzj6p.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_nfkzj6p.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_nfkzj6p.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_nfkzj6p.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/2n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpd3w5qx2n.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd3w5qx2n.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd3w5qx2n.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd3w5qx2n.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tmatrix = zeros(n,m)\n\tmatrix[1,1] = cost[1,1]\n\t\n\t# Initialize the first row\n\tfor i in 2:m\n\t\tmatrix[1,i] = matrix[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Initialize the first column\n\tfor i in 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\t# Return the maximum average\n\treturn matrix[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmprkxgb8qq.jl:37\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprkxgb8qq.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprkxgb8qq.jl:37 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprkxgb8qq.jl:36\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpdv0obvf_.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdv0obvf_.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdv0obvf_.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdv0obvf_.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\"\"\"\n\tcost: a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost.\n\treturn: a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n\tN = length(cost)\n\t# initialize the matrix\n\tavg = zeros(N,N)\n\tavg[1,1] = cost[1,1]\n\t# fill the first row\n\tfor i in 2:N\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\tend\n\t# fill the first column\n\tfor j in 2:N\n\t\tavg[j,1] = avg[j-1,1] + cost[j,1]\n\tend\n\t# fill the rest\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tavg[i,j] = max(avg[i-1,j],avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn avg[N,N]/N\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpc6iny6x6.jl:34\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc6iny6x6.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc6iny6x6.jl:34 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc6iny6x6.jl:33\ntest set: Error During Test at /tmp/tmpc6iny6x6.jl:35\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc6iny6x6.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(N,N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N]/((N-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmphqkae7ad.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphqkae7ad.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphqkae7ad.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphqkae7ad.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/2n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmps5g1tvla.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmps5g1tvla.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmps5g1tvla.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmps5g1tvla.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpdv0obvf_.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdv0obvf_.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdv0obvf_.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdv0obvf_.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpd_atason.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd_atason.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd_atason.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd_atason.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmp9l1cqtsg.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp9l1cqtsg.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9l1cqtsg.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9l1cqtsg.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tdp = zeros(Float64,n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpg30pdbfb.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpg30pdbfb.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg30pdbfb.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg30pdbfb.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tmatrix = zeros(Float64, n, m)\n\tmatrix[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor i in 2:m\n\t\tmatrix[1,i] = matrix[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Fill the first column\n\tfor i in 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn matrix[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpwfsc99tn.jl:36\n  Test threw exception\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix\n\tn = length(cost)\n\tmatrix = zeros(n,n)\n\tmatrix[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor j = 2:n\n\t\tmatrix[1,j] = matrix[1,j-1] + cost[1,j]\n\tend\n\t# Fill the first column\n\tfor i = 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn matrix[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpluldmv9f.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpluldmv9f.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpluldmv9f.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpluldmv9f.jl:30\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tdp = zeros(Int64,n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124105,
      "stdout": "test set: Error During Test at /tmp/tmpeks3nqf7.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpeks3nqf7.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeks3nqf7.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeks3nqf7.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j = 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124106,
      "stdout": "test set: Error During Test at /tmp/tmpoo77m9yn.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoo77m9yn.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoo77m9yn.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoo77m9yn.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm = length(cost)\n\tn = length(cost[1])\n\tdp = zeros(Int64, m, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:m\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor j = 2:n\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\tfor i = 2:m\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124106,
      "stdout": "test set: Error During Test at /tmp/tmpomvcrg_0.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpomvcrg_0.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpomvcrg_0.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpomvcrg_0.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124106,
      "stdout": "test set: Error During Test at /tmp/tmpt19bd6e1.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpt19bd6e1.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt19bd6e1.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt19bd6e1.jl:26\ntest set: Error During Test at /tmp/tmpt19bd6e1.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpt19bd6e1.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (2N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124106,
      "stdout": "test set: Error During Test at /tmp/tmpmgii5wma.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmgii5wma.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmgii5wma.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmgii5wma.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n*(n+1))/2)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124106,
      "stdout": "test set: Error During Test at /tmp/tmpuusdg7db.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpuusdg7db.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuusdg7db.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuusdg7db.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124106,
      "stdout": "test set: Error During Test at /tmp/tmp_bul7w53.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_bul7w53.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_bul7w53.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_bul7w53.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the cost matrix\n\tcost_matrix = zeros(Int64, n, m)\n\tcost_matrix[1, 1] = cost[1, 1]\n\t\n\t# Initialize the path matrix\n\tpath_matrix = zeros(Int64, n, m)\n\tpath_matrix[1, 1] = 1\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tcost_matrix[1, j] = cost_matrix[1, j-1] + cost[1, j]\n\t\tpath_matrix[1, j] = path_matrix[1, j-1]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tcost_matrix[i, 1] = cost_matrix[i-1, 1] + cost[i, 1]\n\t\tpath_matrix[i, 1] = path_matrix[i-1, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tif cost_matrix[i-1, j] > cost_matrix[i, j-1]\n\t\t\t\tcost_matrix[i, j] = cost_matrix[i-1, j] + cost[i, j]\n\t\t\t\tpath_matrix[i, j] = path_matrix[i-1, j]\n\t\t\telse\n\t\t\t\tcost_matrix[i, j] = cost_matrix[i, j-1] + cost[i, j]\n\t\t\t\tpath_matrix[i, j] = path_matrix[i, j-1]\n\t\t\tend\n\t\tend\n\tend\n\t\n\t# Compute the average\n\treturn cost_matrix[n, m] / path_matrix[n, m]\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpeixp_yl8.jl:49\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpeixp_yl8.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeixp_yl8.jl:49 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeixp_yl8.jl:48\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t\n\t# Initialize the matrix to store the maximum average of the path\n\tmaxAvg = zeros(n,n)\n\t\n\t# Initialize the first element of the matrix\n\tmaxAvg[1,1] = cost[1,1]\n\t\n\t# Initialize the first row of the matrix\n\tfor j = 2:n\n\t\tmaxAvg[1,j] = maxAvg[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Initialize the first column of the matrix\n\tfor i = 2:n\n\t\tmaxAvg[i,1] = maxAvg[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Compute the maximum average of the path\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tmaxAvg[i,j] = max(maxAvg[i-1,j], maxAvg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn maxAvg[n,n]/n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpx5s2bupy.jl:37\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpx5s2bupy.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx5s2bupy.jl:37 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx5s2bupy.jl:36\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix\n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tmatrix = zeros(Int64, n, m)\n\tmatrix[1, 1] = cost[1, 1]\n\t# Fill the first row\n\tfor i in 2:m\n\t\tmatrix[1, i] = matrix[1, i - 1] + cost[1, i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tmatrix[i, 1] = matrix[i - 1, 1] + cost[i, 1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tmatrix[i, j] = max(matrix[i - 1, j], matrix[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t# Return the result\n\treturn matrix[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpmhp6g7lc.jl:32\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmhp6g7lc.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmhp6g7lc.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmhp6g7lc.jl:31\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpd801gop7.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd801gop7.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd801gop7.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd801gop7.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmp5_qqrtv_.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp5_qqrtv_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5_qqrtv_.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5_qqrtv_.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp6kau7fah.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6kau7fah.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6kau7fah.jl:23\ntest set: Error During Test at /tmp/tmp6kau7fah.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp6kau7fah.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpmsorys3s.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmsorys3s.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmsorys3s.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmsorys3s.jl:26\ntest set: Error During Test at /tmp/tmpmsorys3s.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpmsorys3s.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp6kau7fah.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6kau7fah.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6kau7fah.jl:23\ntest set: Error During Test at /tmp/tmp6kau7fah.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp6kau7fah.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpv49ecww9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv49ecww9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv49ecww9.jl:23\ntest set: Error During Test at /tmp/tmpv49ecww9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpv49ecww9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpsro6wxtj.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsro6wxtj.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsro6wxtj.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsro6wxtj.jl:25\ntest set: Error During Test at /tmp/tmpsro6wxtj.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsro6wxtj.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmp70kb9we5.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp70kb9we5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp70kb9we5.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp70kb9we5.jl:23\ntest set: Error During Test at /tmp/tmp70kb9we5.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp70kb9we5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# initialize the matrix to store the average of path\n\tavg = zeros(n,n)\n\t# initialize the first row and column\n\tavg[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\t# compute the average of path\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tavg[i,j] = max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn avg[n,n]/(n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpauh8fi1o.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpauh8fi1o.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpauh8fi1o.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpauh8fi1o.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(Float64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (N + N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpoe08v19o.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoe08v19o.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoe08v19o.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoe08v19o.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = size(cost, 1)\n\tdp = zeros(N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (N + N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmplzwsknov.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmplzwsknov.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmplzwsknov.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmplzwsknov.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpd801gop7.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd801gop7.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd801gop7.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd801gop7.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpb39wsjuc.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb39wsjuc.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb39wsjuc.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb39wsjuc.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpn35fngml.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpn35fngml.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn35fngml.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn35fngml.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpws8qn8l2.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpws8qn8l2.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpws8qn8l2.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpws8qn8l2.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# Initialize the DP matrix\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpaz9grbd9.jl:30\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpaz9grbd9.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaz9grbd9.jl:30 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaz9grbd9.jl:29\ntest set: Error During Test at /tmp/tmpaz9grbd9.jl:31\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpaz9grbd9.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp6kau7fah.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6kau7fah.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6kau7fah.jl:23\ntest set: Error During Test at /tmp/tmp6kau7fah.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp6kau7fah.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmphpf6c9yv.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphpf6c9yv.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphpf6c9yv.jl:26\ntest set: Error During Test at /tmp/tmphpf6c9yv.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmphpf6c9yv.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm = size(cost,1)\n\tn = size(cost,2)\n\tdp = zeros(m,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:m\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:m\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[m,n]/(m+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpjct06yt1.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpjct06yt1.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjct06yt1.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjct06yt1.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpn35fngml.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpn35fngml.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn35fngml.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn35fngml.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpo2jomfno.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpo2jomfno.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpo2jomfno.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpo2jomfno.jl:25\ntest set: Error During Test at /tmp/tmpo2jomfno.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpo2jomfno.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpo2jomfno.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmppg5p5zn3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmppg5p5zn3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmppg5p5zn3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmppg5p5zn3.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = size(cost,1)\n\tM = size(cost,2)\n\t\n\t# Initialize the matrix\n\tmatrix = zeros(Int64, N, M)\n\tmatrix[1,1] = cost[1,1]\n\t\n\t# Initialize the first row\n\tfor i = 2:M\n\t\tmatrix[1,i] = matrix[1,i-1] + cost[1,i]\n\tend\n\t\n\t# Initialize the first column\n\tfor i = 2:N\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:N\n\t\tfor j = 2:M\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn matrix[N,M] / (N+M-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124110,
      "stdout": "test set: Error During Test at /tmp/tmp5odyz12i.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp5odyz12i.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5odyz12i.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5odyz12i.jl:35\ntest set: Error During Test at /tmp/tmp5odyz12i.jl:37\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp5odyz12i.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124111,
      "stdout": "test set: Error During Test at /tmp/tmp9309tnlc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp9309tnlc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp9309tnlc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp9309tnlc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t#initialize the matrix\n\tmatrix = zeros(n,m)\n\tmatrix[1,1] = cost[1,1]\n\t\n\t#fill the first row\n\tfor i in 2:m\n\t\tmatrix[1,i] = matrix[1,i-1] + cost[1,i]\n\tend\n\t\n\t#fill the first column\n\tfor i in 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t\n\t#fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn matrix[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124111,
      "stdout": "test set: Error During Test at /tmp/tmpfzm93ufc.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpfzm93ufc.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfzm93ufc.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfzm93ufc.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tm = size(cost,2)\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmphpf6c9yv.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphpf6c9yv.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphpf6c9yv.jl:26\ntest set: Error During Test at /tmp/tmphpf6c9yv.jl:28\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphpf6c9yv.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmphpf6c9yv.jl:24\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124111,
      "stdout": "test set: Error During Test at /tmp/tmp74viv56b.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp74viv56b.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp74viv56b.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp74viv56b.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# create a matrix to store the average cost of each cell\n\tavg = zeros(n,n)\n\t# initialize the first row and column of the matrix\n\tavg[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\t# compute the average cost of each cell\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tavg[i,j] = (avg[i-1,j] + avg[i,j-1] + cost[i,j])/2\n\t\tend\n\tend\n\treturn avg[n,n]\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpj5n8sgf1.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpj5n8sgf1.jl:9\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj5n8sgf1.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj5n8sgf1.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmph68xg5_n.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph68xg5_n.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph68xg5_n.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph68xg5_n.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpkzsvt1h6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkzsvt1h6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkzsvt1h6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkzsvt1h6.jl:23\ntest set: Error During Test at /tmp/tmpkzsvt1h6.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpkzsvt1h6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpkzsvt1h6.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmp5id3jeej.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp5id3jeej.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5id3jeej.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5id3jeej.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpdwfm7s3e.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdwfm7s3e.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdwfm7s3e.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdwfm7s3e.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpnbfnuwrc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpnbfnuwrc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnbfnuwrc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnbfnuwrc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = length(cost)\n\tdp = zeros(Int64, N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:N\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:N\n\t\tfor j = 2:N\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (N*N)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpudjysx_g.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpudjysx_g.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpudjysx_g.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpudjysx_g.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmp6kau7fah.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6kau7fah.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6kau7fah.jl:23\ntest set: Error During Test at /tmp/tmp6kau7fah.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp6kau7fah.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmp6kau7fah.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# Initialize the DP matrix\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\t# Fill the first row\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\t# Fill the first column\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t# Return the maximum average\n\treturn dp[n,n]/(2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpejg34nah.jl:31\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpejg34nah.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpejg34nah.jl:31 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpejg34nah.jl:30\ntest set: Error During Test at /tmp/tmpejg34nah.jl:32\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpejg34nah.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n    n = length(cost)\n    dp = zeros(n,n)\n    dp[1,1] = cost[1,1]\n    for i in 2:n\n        dp[1,i] = dp[1,i-1] + cost[1,i]\n        dp[i,1] = dp[i-1,1] + cost[i,1]\n    end\n    for i in 2:n\n        for j in 2:n\n            dp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n        end\n    end\n    return dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpt404un7m.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpt404un7m.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt404un7m.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt404un7m.jl:23\ntest set: Error During Test at /tmp/tmpt404un7m.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpt404un7m.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = Array{Float64}(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpdm4e2w1a.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: no method matching (Array{Float64})(::Int64, ::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer) where T at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::UndefInitializer, ::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:471\n    (Array{T})(!Matched::UndefInitializer, ::Int64, !Matched::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:472\n    ...\n  Stacktrace:\n   [1] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdm4e2w1a.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdm4e2w1a.jl:24 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdm4e2w1a.jl:23\ntest set: Error During Test at /tmp/tmpdm4e2w1a.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: no method matching (Array{Float64})(::Int64, ::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer) where T at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::UndefInitializer, ::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:471\n    (Array{T})(!Matched::UndefInitializer, ::Int64, !Matched::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:472\n    ...\n  Stacktrace:\n   [1] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdm4e2w1a.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/ju",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmph68xg5_n.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph68xg5_n.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph68xg5_n.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph68xg5_n.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmph68xg5_n.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph68xg5_n.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph68xg5_n.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph68xg5_n.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpoqkn4gxq.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoqkn4gxq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoqkn4gxq.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoqkn4gxq.jl:23\ntest set: Error During Test at /tmp/tmpoqkn4gxq.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoqkn4gxq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpoqkn4gxq.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmp0c7nzvuq.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp0c7nzvuq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0c7nzvuq.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0c7nzvuq.jl:23\ntest set: Error During Test at /tmp/tmp0c7nzvuq.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp0c7nzvuq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tmatrix = zeros(n,m)\n\tmatrix[1,1] = cost[1,1]\n\t\n\t# Initialize the first row\n\tfor j = 2:m\n\t\tmatrix[1,j] = matrix[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Initialize the first column\n\tfor i = 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn matrix[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpvt2hs9a4.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpvt2hs9a4.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvt2hs9a4.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvt2hs9a4.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmph68xg5_n.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph68xg5_n.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph68xg5_n.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph68xg5_n.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Float64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmp1mwu_y7x.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp1mwu_y7x.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1mwu_y7x.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1mwu_y7x.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpb8u0z5l9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb8u0z5l9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb8u0z5l9.jl:23\ntest set: Error During Test at /tmp/tmpb8u0z5l9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpb8u0z5l9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpnbfnuwrc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpnbfnuwrc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnbfnuwrc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnbfnuwrc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpsqcx0kc2.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsqcx0kc2.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsqcx0kc2.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsqcx0kc2.jl:23\ntest set: Error During Test at /tmp/tmpsqcx0kc2.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpsqcx0kc2.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmph68xg5_n.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph68xg5_n.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph68xg5_n.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph68xg5_n.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpb39wsjuc.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb39wsjuc.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb39wsjuc.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb39wsjuc.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124101,
      "stdout": "test set: Error During Test at /tmp/tmpt90p1gv6.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpt90p1gv6.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt90p1gv6.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt90p1gv6.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t\n\t# Initialize the matrix of size N*N\n\tN = size(cost, 1)\n\tdp = zeros(Int64, N, N)\n\t\n\t# Initialize the first row and column of the matrix\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\t# Return the maximum average\n\treturn dp[N, N] / (2 * N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpc090yq4s.jl:32\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc090yq4s.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc090yq4s.jl:32 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc090yq4s.jl:31\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# dp[i,j] = maximum average of path from (0,0) to (i,j)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmp_zflfc6i.jl:25\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_zflfc6i.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_zflfc6i.jl:25 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_zflfc6i.jl:24\ntest set: Error During Test at /tmp/tmp_zflfc6i.jl:26\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_zflfc6i.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\t\n\t# create a matrix to store the cost of the path\n\tpath_cost = zeros(Int64, n, m)\n\t\n\t# initialize the first row and column\n\tpath_cost[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tpath_cost[i, 1] = path_cost[i-1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tpath_cost[1, j] = path_cost[1, j-1] + cost[1, j]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tpath_cost[i, j] = cost[i, j] + max(path_cost[i-1, j], path_cost[i, j-1])\n\t\tend\n\tend\n\t\n\t# compute the average\n\treturn path_cost[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpwpefh06b.jl:35\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpwpefh06b.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwpefh06b.jl:35 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwpefh06b.jl:34\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm = size(cost, 1)\n\tn = size(cost, 2)\n\t\n\t# initialize the dp matrix\n\tdp = zeros(m, n)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# initialize the first row\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\t\n\t# initialize the first column\n\tfor i in 2:m\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# fill the rest of the matrix\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\t# return the maximum average\n\treturn dp[m, n] / (m + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmp38t2pf36.jl:37\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp38t2pf36.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp38t2pf36.jl:37 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp38t2pf36.jl:36\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\t\n\t# Initialize the DP matrix\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j-1] + cost[1, j]\n\tend\n\t\n\t# Fill the first column\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmpib1_nt_3.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpib1_nt_3.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpib1_nt_3.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpib1_nt_3.jl:35\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmp3s7lwp3o.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp3s7lwp3o.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3s7lwp3o.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3s7lwp3o.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n    n = length(cost)\n    dp = zeros(Float64, n, n)\n    dp[1, 1] = cost[1, 1]\n    for i = 2:n\n        dp[1, i] = dp[1, i-1] + cost[1, i]\n        dp[i, 1] = dp[i-1, 1] + cost[i, 1]\n    end\n    for i = 2:n\n        for j = 2:n\n            dp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n        end\n    end\n    return dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124115,
      "stdout": "test set: Error During Test at /tmp/tmp34t38_ld.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp34t38_ld.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp34t38_ld.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp34t38_ld.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpv49ecww9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv49ecww9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv49ecww9.jl:23\ntest set: Error During Test at /tmp/tmpv49ecww9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpv49ecww9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tm,n = size(cost)\n\tdp = zeros(m,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:m\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:m\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[m,n]/(m+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124116,
      "stdout": "test set: Error During Test at /tmp/tmpd4uglsr7.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd4uglsr7.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd4uglsr7.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd4uglsr7.jl:25\ntest set: Error During Test at /tmp/tmpd4uglsr7.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd4uglsr7.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd4uglsr7.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd4uglsr7.jl:25\ntest set: Error During Test at /tmp/tmpd4uglsr7.jl:28\n  Test threw exception\n  Expression: candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n  BoundsError: attempt to access Tuple{Int64} at index [2]\n  Stacktrace:\n   [1] indexed_iterate\n     @ ./tuple.jl:89 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpd4uglsr7.jl:5\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd4uglsr7.jl:28 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/",
      "stderr": "ERROR: LoadError: ",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpn35fngml.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpn35fngml.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpn35fngml.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpn35fngml.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = Array{Float64}(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124116,
      "stdout": "test set: Error During Test at /tmp/tmp2_mg27tc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: no method matching (Array{Float64})(::Int64, ::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer) where T at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::UndefInitializer, ::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:471\n    (Array{T})(!Matched::UndefInitializer, ::Int64, !Matched::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:472\n    ...\n  Stacktrace:\n   [1] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp2_mg27tc.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2_mg27tc.jl:24 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_mg27tc.jl:23\ntest set: Error During Test at /tmp/tmp2_mg27tc.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: no method matching (Array{Float64})(::Int64, ::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer) where T at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::UndefInitializer, ::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:471\n    (Array{T})(!Matched::UndefInitializer, ::Int64, !Matched::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:472\n    ...\n  Stacktrace:\n   [1] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp2_mg27tc.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/ju",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpb8u0z5l9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb8u0z5l9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb8u0z5l9.jl:23\ntest set: Error During Test at /tmp/tmpb8u0z5l9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpb8u0z5l9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpv49ecww9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv49ecww9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv49ecww9.jl:23\ntest set: Error During Test at /tmp/tmpv49ecww9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpv49ecww9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\t# Initialize the matrix with the cost of the first cell\n\tmatrix = zeros(Int64, size(cost, 1), size(cost, 2))\n\tmatrix[1, 1] = cost[1, 1]\n\t\n\t# Fill the first row and column with the cost of the first cell plus the cost of the next cell\n\tfor i in 2:size(cost, 1)\n\t\tmatrix[i, 1] = matrix[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:size(cost, 2)\n\t\tmatrix[1, j] = matrix[1, j - 1] + cost[1, j]\n\tend\n\t\n\t# Fill the rest of the matrix with the maximum cost between the cell above and the cell to the left plus the cost of the current cell\n\tfor i in 2:size(cost, 1)\n\t\tfor j in 2:size(cost, 2)\n\t\t\tmatrix[i, j] = max(matrix[i - 1, j], matrix[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\t\n\t# Return the maximum average\n\treturn matrix[size(cost, 1), size(cost, 2)] / (size(cost, 1) + size(cost, 2) - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpbrespibr.jl:32\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(Int64, n, m)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j = 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m] / (n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpg_v32gzi.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpg_v32gzi.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg_v32gzi.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg_v32gzi.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpb8u0z5l9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb8u0z5l9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb8u0z5l9.jl:23\ntest set: Error During Test at /tmp/tmpb8u0z5l9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpb8u0z5l9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = size(cost, 1)\n\tdp = zeros(N, N)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:N\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[N, N] / (2*N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmp_xpgn311.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_xpgn311.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_xpgn311.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_xpgn311.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\t\n\t# Initialize the first row and column\n\tfor i = 2:n\n\t\tcost[i, 1] += cost[i-1, 1]\n\tend\n\tfor j = 2:m\n\t\tcost[1, j] += cost[1, j-1]\n\tend\n\t\n\t# Fill the rest of the table\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tcost[i, j] += max(cost[i-1, j], cost[i, j-1])\n\t\tend\n\tend\n\t\n\treturn cost[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: ",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(n,m)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124112,
      "stdout": "test set: Error During Test at /tmp/tmph68xg5_n.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmph68xg5_n.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmph68xg5_n.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmph68xg5_n.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n    n = length(cost)\n    dp = zeros(n,n)\n    dp[1,1] = cost[1,1]\n    for i in 2:n\n        dp[1,i] = dp[1,i-1] + cost[1,i]\n    end\n    for i in 2:n\n        dp[i,1] = dp[i-1,1] + cost[i,1]\n    end\n    for i in 2:n\n        for j in 2:n\n            dp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n        end\n    end\n    return dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpyedetqce.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpyedetqce.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyedetqce.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyedetqce.jl:25\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpqmij8ibu.jl:24\n  Test threw exception\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\tdp = zeros(Int64, n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpu1d43fgw.jl:27\n  Test threw exception\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tm = size(cost, 2)\n\tdp = zeros(n, m)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor j in 2:m\n\t\tdp[1, j] = dp[1, j - 1] + cost[1, j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, m] / (n + m - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmpb39wsjuc.jl:27\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb39wsjuc.jl:8\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb39wsjuc.jl:27 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb39wsjuc.jl:26\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpb8u0z5l9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb8u0z5l9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb8u0z5l9.jl:23\ntest set: Error During Test at /tmp/tmpb8u0z5l9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpb8u0z5l9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpb8u0z5l9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpoqkn4gxq.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoqkn4gxq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpoqkn4gxq.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpoqkn4gxq.jl:23\ntest set: Error During Test at /tmp/tmpoqkn4gxq.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpoqkn4gxq.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpoqkn4gxq.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = Array{Float64}(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpcsun2ue2.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: no method matching (Array{Float64})(::Int64, ::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer) where T at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::UndefInitializer, ::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:471\n    (Array{T})(!Matched::UndefInitializer, ::Int64, !Matched::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:472\n    ...\n  Stacktrace:\n   [1] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpcsun2ue2.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcsun2ue2.jl:26 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcsun2ue2.jl:25\ntest set: Error During Test at /tmp/tmpcsun2ue2.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: no method matching (Array{Float64})(::Int64, ::Int64)\n  Closest candidates are:\n    (Array{T})(!Matched::LinearAlgebra.UniformScaling, ::Integer, !Matched::Integer) where T at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:495\n    (Array{T})(!Matched::UndefInitializer, ::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:471\n    (Array{T})(!Matched::UndefInitializer, ::Int64, !Matched::Int64) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:472\n    ...\n  Stacktrace:\n   [1] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpcsun2ue2.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/ju",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124107,
      "stdout": "test set: Error During Test at /tmp/tmp5_qqrtv_.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp5_qqrtv_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5_qqrtv_.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5_qqrtv_.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpyu05m180.jl:24\n  Test threw exception\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmp76eeu3u4.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp76eeu3u4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp76eeu3u4.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp76eeu3u4.jl:23\ntest set: Error During Test at /tmp/tmp76eeu3u4.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp76eeu3u4.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] ma",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix\n\tmatrix = zeros(n,m)\n\tmatrix[1,1] = cost[1,1]\n\t\n\t# Fill the first row\n\tfor j = 2:m\n\t\tmatrix[1,j] = matrix[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Fill the first column\n\tfor i = 2:n\n\t\tmatrix[i,1] = matrix[i-1,1] + cost[i,1]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i = 2:n\n\t\tfor j = 2:m\n\t\t\tmatrix[i,j] = max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\t\n\treturn matrix[n,m]/(n+m-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmp_q8qd630.jl:36\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_q8qd630.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_q8qd630.jl:36 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_q8qd630.jl:35\ntest set: Error During Test at /tmp/tmp_q8qd630.jl:37\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmp_q8qd630.jl:10\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpv49ecww9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv49ecww9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv49ecww9.jl:23\ntest set: Error During Test at /tmp/tmpv49ecww9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpv49ecww9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i = 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/2n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpgx4pyjjb.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpgx4pyjjb.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgx4pyjjb.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgx4pyjjb.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Int64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpwpsvwm1t.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpwpsvwm1t.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwpsvwm1t.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwpsvwm1t.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tavg = zeros(n,n)\n\tavg[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tavg[1,i] = avg[1,i-1] + cost[1,i]\n\t\tavg[i,1] = avg[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tavg[i,j] = max(avg[i-1,j],avg[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn avg[n,n]/(n+n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpdodo74hc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpdodo74hc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdodo74hc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdodo74hc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpnrq46a5n.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpnrq46a5n.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnrq46a5n.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnrq46a5n.jl:23\ntest set: Error During Test at /tmp/tmpnrq46a5n.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpnrq46a5n.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpv49ecww9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv49ecww9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv49ecww9.jl:23\ntest set: Error During Test at /tmp/tmpv49ecww9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpv49ecww9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpv49ecww9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\t# Initialize the matrix to store the average of the path\n\tavg = zeros(n,n)\n\t# Initialize the matrix to store the number of paths\n\tnum_paths = zeros(n,n)\n\t# Initialize the matrix to store the cost of the path\n\tcost_path = zeros(n,n)\n\t# Initialize the first row and column of the matrix\n\tfor i in 1:n\n\t\tavg[i,1] = cost[i,1]\n\t\tnum_paths[i,1] = 1\n\t\tcost_path[i,1] = cost[i,1]\n\t\tavg[1,i] = cost[1,i]\n\t\tnum_paths[1,i] = 1\n\t\tcost_path[1,i] = cost[1,i]\n\tend\n\t# Fill the matrix\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\t# If the path is from the top\n\t\t\tif avg[i-1,j] > avg[i,j-1]\n\t\t\t\tavg[i,j] = avg[i-1,j]\n\t\t\t\tnum_paths[i,j] = num_paths[i-1,j]\n\t\t\t\tcost_path[i,j] = cost_path[i-1,j] + cost[i,j]\n\t\t\t# If the path is from the left\n\t\t\telseif avg[i-1,j] < avg[i,j-1]\n\t\t\t\tavg[i,j] = avg[i,j-1]\n\t\t\t\tnum_paths[i,j] = num_paths[i,j-1]\n\t\t\t\tcost_path[i,j] = cost_path[i,j-1] + cost[i,j]\n\t\t\t# If the path is from the top and left\n\t\t\telse\n\t\t\t\tavg[i,j] = avg[i-1,j]\n\t\t\t\tnum_paths[i,j]\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp2wa5cfll.jl:30 requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2wa5cfll.jl:1\nin expression starting at /tmp/tmp2wa5cfll.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tN = size(cost, 1)\n\tdp = zeros(Int64, N, N)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:N\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:N\n\t\tfor j in 2:N\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[N,N] / (2*N - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpyux4_v8h.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at /home/a.guha/.conda/envs/polyglot/share/julia/base/pointer.jl:23\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpyux4_v8h.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyux4_v8h.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyux4_v8h.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[1, i] = dp[1, i - 1] + cost[1, i]\n\t\tdp[i, 1] = dp[i - 1, 1] + cost[i, 1]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2 * n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmppa7bb0lc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmppa7bb0lc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmppa7bb0lc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmppa7bb0lc.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpqmij8ibu.jl:24\n  Test threw exception\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124117,
      "stdout": "test set: Error During Test at /tmp/tmpjo6aedpf.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpjo6aedpf.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjo6aedpf.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjo6aedpf.jl:23\n",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tm = length(cost[1])\n\t\n\t# Initialize the matrix to store the average cost of the path\n\tavg_cost = zeros(n,m)\n\t\n\t# Initialize the first row and column of the matrix\n\tavg_cost[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tavg_cost[i,1] = avg_cost[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:m\n\t\tavg_cost[1,j] = avg_cost[1,j-1] + cost[1,j]\n\tend\n\t\n\t# Fill the rest of the matrix\n\tfor i in 2:n\n\t\tfor j in 2:m\n\t\t\tavg_cost[i,j] = cost[i,j] + max(avg_cost[i-1,j], avg_cost[i,j-1])\n\t\tend\n\tend\n\t\n\t# Return the average cost of the path\n\treturn avg_cost[n,m]/n\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124119,
      "stdout": "test set: Error During Test at /tmp/tmprlfsznjq.jl:35\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprlfsznjq.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmprlfsznjq.jl:35 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmprlfsznjq.jl:34\ntest set: Error During Test at /tmp/tmprlfsznjq.jl:36\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmprlfsznjq.jl:12\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmprlfsznjq.jl:32\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124120,
      "stdout": "test set: Error During Test at /tmp/tmplx0n46gs.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmplx0n46gs.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmplx0n46gs.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmplx0n46gs.jl:25\ntest set: Error During Test at /tmp/tmplx0n46gs.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmplx0n46gs.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmplx0n46gs.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n + n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124120,
      "stdout": "test set: Error During Test at /tmp/tmpru5pfyei.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpru5pfyei.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpru5pfyei.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpru5pfyei.jl:23\ntest set: Error During Test at /tmp/tmpru5pfyei.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpru5pfyei.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpru5pfyei.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124121,
      "stdout": "test set: Error During Test at /tmp/tmpxxqzr95_.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpxxqzr95_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxxqzr95_.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxxqzr95_.jl:23\ntest set: Error During Test at /tmp/tmpxxqzr95_.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpxxqzr95_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpxxqzr95_.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor j in 2:n\n\t\tdp[1,j] = dp[1,j-1] + cost[1,j]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124121,
      "stdout": "test set: Error During Test at /tmp/tmpwqqyejn1.jl:26\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpwqqyejn1.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwqqyejn1.jl:26 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwqqyejn1.jl:25\ntest set: Error During Test at /tmp/tmpwqqyejn1.jl:27\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpwqqyejn1.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpwqqyejn1.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (n*n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124121,
      "stdout": "test set: Error During Test at /tmp/tmpr2xjl4gu.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpr2xjl4gu.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr2xjl4gu.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr2xjl4gu.jl:23\ntest set: Error During Test at /tmp/tmpr2xjl4gu.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpr2xjl4gu.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpr2xjl4gu.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost, 1)\n\tdp = zeros(Float64, n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i = 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i = 2:n\n\t\tfor j = 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124120,
      "stdout": "test set: Error During Test at /tmp/tmphrpjuegc.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphrpjuegc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmphrpjuegc.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmphrpjuegc.jl:23\ntest set: Error During Test at /tmp/tmphrpjuegc.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmphrpjuegc.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmphrpjuegc.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n\t\tend\n\tend\n\treturn dp[n, n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124121,
      "stdout": "test set: Error During Test at /tmp/tmpxxqzr95_.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpxxqzr95_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxxqzr95_.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxxqzr95_.jl:23\ntest set: Error During Test at /tmp/tmpxxqzr95_.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpxxqzr95_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpxxqzr95_.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1, 1] = cost[1, 1]\n\tfor i in 2:n\n\t\tdp[1, i] = dp[1, i-1] + cost[1, i]\n\t\tdp[i, 1] = dp[i-1, 1] + cost[i, 1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i, j] = cost[i, j] + max(dp[i-1, j], dp[i, j-1])\n\t\tend\n\tend\n\treturn dp[n, n] / (n * n)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124120,
      "stdout": "test set: Error During Test at /tmp/tmpneo5mds9.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpneo5mds9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpneo5mds9.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpneo5mds9.jl:23\ntest set: Error During Test at /tmp/tmpneo5mds9.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpneo5mds9.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpneo5mds9.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n, n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n] / (2*n - 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124121,
      "stdout": "test set: Error During Test at /tmp/tmpj42hgr20.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpj42hgr20.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj42hgr20.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj42hgr20.jl:23\ntest set: Error During Test at /tmp/tmpj42hgr20.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpj42hgr20.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpj42hgr20.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = size(cost,1)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124121,
      "stdout": "test set: Error During Test at /tmp/tmpzq1vhsr_.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpzq1vhsr_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzq1vhsr_.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzq1vhsr_.jl:23\ntest set: Error During Test at /tmp/tmpzq1vhsr_.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpzq1vhsr_.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpzq1vhsr_.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2 + 1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1666124121,
      "stdout": "test set: Error During Test at /tmp/tmpez9ul3h5.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpez9ul3h5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpez9ul3h5.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpez9ul3h5.jl:23\ntest set: Error During Test at /tmp/tmpez9ul3h5.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpez9ul3h5.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpez9ul3h5.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/((n-1)*2+1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpw1zcskmo.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpw1zcskmo.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpw1zcskmo.jl:23\ntest set: Error During Test at /tmp/tmpw1zcskmo.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpw1zcskmo.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpw1zcskmo.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tGiven a square matrix of size N*N given as a vector of vectors, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\nfunction maxAverageOfPath(cost::Vector{Vector{Int64}})::Float64 \n\tn = length(cost)\n\tdp = zeros(n,n)\n\tdp[1,1] = cost[1,1]\n\tfor i in 2:n\n\t\tdp[1,i] = dp[1,i-1] + cost[1,i]\n\t\tdp[i,1] = dp[i-1,1] + cost[i,1]\n\tend\n\tfor i in 2:n\n\t\tfor j in 2:n\n\t\t\tdp[i,j] = max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n\t\tend\n\tend\n\treturn dp[n,n]/(2*n-1)\nend\nusing Test\n\n@testset begin\n\ncandidate = maxAverageOfPath;\n\t@test(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2)\n\t@test(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2)\n\t@test(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2)\n\t@test(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8)\nend\n",
      "timestamp": 1665509923,
      "stdout": "test set: Error During Test at /tmp/tmpc86f5bc3.jl:24\n  Test threw exception\n  Expression: candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc86f5bc3.jl:24 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc86f5bc3.jl:23\ntest set: Error During Test at /tmp/tmpc86f5bc3.jl:25\n  Test threw exception\n  Expression: candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n  MethodError: Cannot `convert` an object of type Vector{Int64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /home/a.guha/.conda/envs/polyglot/share/julia/base/twiceprecision.jl:262\n    ...\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:905 [inlined]\n   [2] maxAverageOfPath(cost::Vector{Vector{Int64}})\n     @ Main /tmp/tmpc86f5bc3.jl:7\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/st",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored, 0 broken.\nin expression starting at /tmp/tmpc86f5bc3.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}