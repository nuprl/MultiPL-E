{
  "name": "mbpp_619_move_num",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\nfunction move_num(test_str::String)::String \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = move_num;\n\t@test(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\")\n\t@test(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\")\n\t@test(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\")\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tFunction to move all the numbers to the end of the given string.\n\t\"\"\"\n\t#initialize the string to be returned\n\tret_str = \"\"\n\t#initialize the string to store the numbers\n\tnum_str = \"\"\n\t#iterate through the string\n\tfor i in test_str\n\t\t#check if the character is a number\n\t\tif i in \"0123456789\"\n\t\t\t#add the number to the number string\n\t\t\tnum_str = num_str * i\n\t\telse\n\t\t\t#add the character to the return string\n\t\t\tret_str = ret_str * i\n\t\tend\n\tend\n\t#add the number string to the return string\n\tret_str = ret_str * num_str\n\t#return the string\n\treturn ret_str\nend",
    "\t# test_str = \"a1b2c3d4\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m3\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p\"\n\t# test_str = \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\"\n\t# test_str = \"a1b2",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\t\n\t# Split the string into a list of characters\n\ttest_list = split(test_str)\n\t\n\t# Initialize empty lists for numbers and characters\n\tnum_list = []\n\tchar_list = []\n\t\n\t# Loop through the list of characters\n\tfor i in test_list\n\t\t# If the character is a number, append it to the num_list\n\t\tif isdigit(i)\n\t\t\tpush!(num_list, i)\n\t\telse\n\t\t\t# If the character is not a number, append it to the char_list\n\t\t\tpush!(char_list, i)\n\t\tend\n\tend\n\t\n\t# Join the two lists together\n\tjoined_list = join([char_list, num_list])\n\t\n\t# Join the list of characters into a string\n\tjoined_str = join(joined_list)\n\t\n\treturn joined_str\nend",
    "\ttest_str = replace(test_str, r\"[^0-9]\", \"\")\n\ttest_str = replace(test_str, r\"[0-9]\", \"\")\n\treturn test_str\nend",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\tnum_str = \"\"\n\tchar_str = \"\"\n\tfor i in test_str\n\t\tif isdigit(i)\n\t\t\tnum_str = num_str * i\n\t\telse\n\t\t\tchar_str = char_str * i\n\tend\n\treturn char_str * num_str\nend",
    "\tnum_str = \"\"\n\tchar_str = \"\"\n\tfor i in test_str\n\t\tif i in \"0123456789\"\n\t\t\tnum_str = num_str * i\n\t\telse\n\t\t\tchar_str = char_str * i\n\t\tend\n\tend\n\treturn char_str * num_str\nend",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\tnumbers = \"0123456789\"\n\tnum_str = \"\"\n\tfor i in test_str\n\t\tif i in numbers\n\t\t\tnum_str = num_str * i\n\t\tend\n\tend\n\treturn test_str * num_str\nend",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\t# Split the string into words\n\twords = split(test_str)\n\t# Split the string into numbers\n\tnumbers = split(test_str, r\"\\D+\")\n\t# Remove the empty strings\n\tnumbers = filter(x -> x != \"\", numbers)\n\t# Join the words\n\twords = join(words)\n\t# Join the numbers\n\tnumbers = join(numbers)\n\t# Concatenate the words and numbers\n\treturn words * numbers\nend",
    "\t\"\"\"\n\tFunction to move all the numbers to the end of the given string.\n\t\"\"\"\n\t# initialize the output string\n\tout_str = \"\"\n\t# initialize the number string\n\tnum_str = \"\"\n\t# loop through the input string\n\tfor i in 1:length(test_str)\n\t\t# check if the character is a number\n\t\tif isdigit(test_str[i])\n\t\t\t# add the character to the number string\n\t\t\tnum_str = num_str * string(test_str[i])\n\t\telse\n\t\t\t# add the character to the output string\n\t\t\tout_str = out_str * string(test_str[i])\n\t\tend\n\tend\n\t# return the output string\n\treturn out_str * num_str\nend",
    "\t\"\"\"\n\tFunction to move all the numbers to the end of the given string.\n\t\"\"\"\n\tnum_str = \"\"\n\tchar_str = \"\"\n\tfor i in test_str\n\t\tif i in \"0123456789\"\n\t\t\tnum_str = num_str * i\n\t\telse\n\t\t\tchar_str = char_str * i\n\tend\n\treturn char_str * num_str\nend",
    "\tnum_str = \"\"\n\tfor i in test_str\n\t\tif i in \"0123456789\"\n\t\t\tnum_str = num_str * i\n\t\tend\n\tend\n\treturn test_str * num_str\nend",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\t\n\t# Split the string into words\n\twords = split(test_str)\n\t\n\t# Find the indices of the words that are numbers\n\tnum_ind = findall(x->isdigit(x[1]), words)\n\t\n\t# Find the indices of the words that are not numbers\n\tnot_num_ind = findall(x->!isdigit(x[1]), words)\n\t\n\t# Concatenate the words that are not numbers\n\tnot_num_str = join(words[not_num_ind])\n\t\n\t# Concatenate the words that are numbers\n\tnum_str = join(words[num_ind])\n\t\n\t# Concatenate the words that are not numbers and the words that are numbers\n\treturn not_num_str * num_str\nend",
    "\t\"\"\"\n\tThis function moves all the numbers to the end of the given string.\n\t\"\"\"\n\tnum_str = \"\"\n\tfor i in test_str\n\t\tif i in \"0123456789\"\n\t\t\tnum_str = num_str * i\n\t\tend\n\tend\n\treturn test_str * num_str\nend",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\t# Split the string into two parts\n\t# One part contains all the numbers\n\t# The other part contains all the characters\n\t# Join the two parts together\n\tnum_str = \"\"\n\tchar_str = \"\"\n\tfor i in test_str\n\t\tif isdigit(i)\n\t\t\tnum_str = num_str * i\n\t\telse\n\t\t\tchar_str = char_str * i\n\tend\n\treturn char_str * num_str\nend",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\tnumbers = \"0123456789\"\n\tnumbers_list = []\n\tfor i in test_str\n\t\tif i in numbers\n\t\t\tpush!(numbers_list, i)\n\t\tend\n\tend\n\ttest_str = replace(test_str, r\"[0-9]\", \"\")\n\ttest_str = test_str * join(numbers_list)\n\treturn test_str\nend",
    "\t\"\"\"\n\tMove all the numbers to the end of the given string.\n\t\"\"\"\n\t# Split the string into a list of characters\n\tchar_list = split(test_str, \"\")\n\t# Split the string into a list of words\n\tword_list = split(test_str, r\"\\W+\")\n\t# Create a list of numbers\n\tnum_list = []\n\t# Create a list of characters that are not numbers\n\tchar_list_no_num = []\n\t# Create a list of words that are not numbers\n\tword_list_no_num = []\n\t# Create a list of words that are numbers\n\tword_list_num = []\n\t# Create a list of characters that are numbers\n\tchar_list_num = []\n\t# Create a list of characters that are not numbers\n\tchar_list_no_num = []\n\t# Create a list of words that are not numbers\n\tword_list_no_num = []\n\t# Create a list of words that are numbers\n\tword_list_num = []\n\t# Create a list of characters that are numbers\n\tchar_list_num = []\n\t# Create a list of words that are not numbers\n\tword_list_no_num = []\n\t# Create a list of words that are numbers\n\tword_list_num = []\n\t# Create a list of characters that are numbers\n\tchar_list_num = []\n\t# Create a list of words that are not numbers\n\tword_list_no_num = []\n\t# Create a list of words that are numbers\n\tword_list_num = []\n\t# Create a list of characters that are numbers\n\tchar_list_num = []\n\t# Create a list of words that are not numbers\n\tword_list_no_num = []\n\t# Create a list of words that are numbers\n\tword_list_num = []\n\t# Create a list of characters that are numbers\n\tchar_list_num = []\n\t# Create a list of words that are not numbers\n\tword_list_no_num = []\n\t# Create a list of words that are numbers\n\tword_list_num = []\n\t# Create a list of characters that are numbers\n\tchar_list_num =",
    "\ttest_str = test_str.replace(\" \",\"\")\n\tnum_str = \"\"\n\talpha_str = \"\"\n\tfor i in test_str\n\t\tif i in \"0123456789\"\n\t\t\tnum_str = num_str * i\n\t\telse\n\t\t\talpha_str = alpha_str * i\n\t\tend\n\tend\n\treturn alpha_str * num_str\nend",
    "\t\"\"\"\n\tFunction to move all the numbers to the end of the given string.\n\t\"\"\"\n\t# Initialize empty string\n\tres = \"\"\n\t# Initialize empty string\n\tnum = \"\"\n\t# Traverse through the string\n\tfor i in test_str\n\t\t# Check if character is a number\n\t\tif i in \"0123456789\"\n\t\t\t# Add the number to num\n\t\t\tnum = num * i\n\t\telse\n\t\t\t# Add the character to res\n\t\t\tres = res * i\n\t# Return the result\n\treturn res * num\nend",
    "\tnum_str = \"\"\n\tfor i in test_str\n\t\tif i in \"0123456789\"\n\t\t\tnum_str *= i\n\t\tend\n\tend\n\treturn test_str * num_str\nend",
    "\tnum_str = \"\"\n\tfor i in test_str\n\t\tif isdigit(i)\n\t\t\tnum_str = num_str * i\n\t\tend\n\tend\n\treturn test_str * num_str\nend"
  ]
}