{
  "name": "mbpp_622_get_median",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the median of two sorted vectors of same size.\n\t\"\"\"\nfunction get_median(arr1::Vector{Int64}, arr2::Vector{Int64}, n::Int64)::Float64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = get_median;\n\t@test(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0)\n\t@test(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5)\n\t@test(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t# if n is odd, then median is middle element of sorted array\n\t# if n is even, then median is average of middle two elements of sorted array\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\t\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\t\n\tif m1 == m2\n\t\treturn m1\n\tend\n\t\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\tend\n\t\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\tBoth ar1[] and ar2[] are sorted arrays\n\t\tBoth have n elements\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\t# Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\t# Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2 # Store the prev median\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2 # Store the prev median\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\t\n\t\tcount += 1\n\tend\n\t\n\treturn (m1 + m2)/2\nend",
    "\ti, j, count, m1, m2 = 0, 0, 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n-n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n-n/2+1)\n\t\tend\n\tend\n\tif n % 2 == 0\n\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n-n/2+1)\n\telse\n\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n-n/2+1)\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\t\n\treturn (m1 + m2) / 2\nend",
    "    if n == 1\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\n    m1 = median(arr1)\n    m2 = median(arr2)\n    if m1 == m2\n        return m1\n    end\n    if m1 > m2\n        if n % 2 == 0\n            return get_median(arr1[1:n/2], arr2[n/2:n], n/2)\n        else\n            return get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n        end\n    else\n        if n % 2 == 0\n            return get_median(arr2[1:n/2], arr1[n/2:n], n/2)\n        else\n            return get_median(arr2[1:n/2+1], arr1[n/2:n], n/2+1)\n        end\n    end\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\tfor count = 0:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[((n/2)+1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[((n/2)+1):n], n/2)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[n/2+1:n], arr2[1:n/2], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2], arr2[n/2:n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2], arr2[n/2+1:n], n/2)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tmedian1 = get_median(arr1, n)\n\tmedian2 = get_median(arr2, n)\n\tif median1 == median2\n\t\treturn median1\n\tend\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2 - 1)::Int64], arr2[0:(n/2 + 1):Int64], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2)::Int64], arr2[0:(n/2 + 1):Int64], n - n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[0:(n/2 + 1):Int64], arr2[(n/2 - 1)::Int64], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[0:(n/2 + 1):Int64], arr2[(n/2)::Int64], n - n/2)\n\t\tend\n\tend\nend",
    "\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tfor count in 1:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tGet the median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\tend\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n - n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n - n/2)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tmedian1::Int64 = 0\n\tmedian2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (median1 + median2)/2\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\t- Both ar1[] and ar2[] are sorted arrays\n\t\t- Both have n elements\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tThis function returns the median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tmedian1::Int64 = 0\n\tmedian2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (median1 + median2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tcount, m1, m2 = 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors.\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\tBoth ar1[] and ar2[] are sorted arrays\n\t\tBoth have n elements\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Float64 = 0\n\tm2::Float64 = 0\n\tfor count in 1:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t# if size of array is 1, then median is the first element of array\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\t# if size of array is 2, then median is the average of the two elements\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\t# if size of array is odd, then median is the middle element of the array\n\tif n % 2 != 0\n\t\tmedian1 = arr1[(n+1)/2]\n\t\tmedian2 = arr2[(n+1)/2]\n\t\tif median1 > median2\n\t\t\treturn median1\n\t\telse\n\t\t\treturn median2\n\t\tend\n\tend\n\t# if size of array is even, then median is the average of the two middle elements\n\tif n % 2 == 0\n\t\tmedian1 = (arr1[n/2] + arr1[n/2 + 1])/2\n\t\tmedian2 = (arr2[n/2] + arr2[n/2 + 1])/2\n\t\tif median1 > median2\n\t\t\treturn median1\n\t\telse\n\t\t\treturn median2\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThe function assumes that both the arrays are of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tmedian1 = get_median(arr1, n)\n\tmedian2 = get_median(arr2, n)\n\tif median1 == median2\n\t\treturn median1\n\tend\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2 - 1):n], arr2[1:(n/2 + 1)], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2 + 1)], n - n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2 + 1)], arr2[(n/2 - 1):n], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2 + 1)], arr2[(n/2):n], n - n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\tfor count in 1:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti, j = 1, 1\n\tcount, m1, m2 = 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\t- Both ar1[] and ar2[] are sorted arrays\n\t\t- Both have n elements\n\t\"\"\"\n\ti, j = 0, 0\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\tend\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2)], n / 2)\n\t\telse\n\t\t\treturn get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n / 2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n / 2)], arr2[(n / 2) + 1:n], n / 2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n / 2 + 1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "    if n == 0\n        return -1.0\n    end\n    if n == 1\n        return (arr1[1] + arr2[1]) / 2.0\n    end\n    if n == 2\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n    end\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2\n        return m1\n    end\n    if m1 < m2\n        if n % 2 == 0\n            return get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n        else\n            return get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n        end\n    else\n        if n % 2 == 0\n            return get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n        else\n            return get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n        end\n    end\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\t\n\tmedian1 = get_median(arr1, n)\n\tmedian2 = get_median(arr2, n)\n\t\n\tif median1 == median2\n\t\treturn median1\n\tend\n\t\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\t1) Both ar1[] and ar2[] are sorted arrays\n\t\t2) Both have n elements\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\telseif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "    if n == 1\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\n    m1 = median(arr1)\n    m2 = median(arr2)\n    if m1 == m2\n        return m1\n    end\n    if m1 > m2\n        if n % 2 == 0\n            return get_median(arr1[1:n/2], arr2[n/2:n], n/2)\n        else\n            return get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n        end\n    else\n        if n % 2 == 0\n            return get_median(arr1[n/2:n], arr2[1:n/2], n/2)\n        else\n            return get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n        end\n    end\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2) + 1:n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2) + 2:n], arr2[1:(n/2) + 1], n/2 + 1)\n\t\tend\n\tend\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2) + 1:n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2) + 1], arr2[(n/2) + 2:n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2], arr2[n/2:n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays.\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tcount = 0\n\tm1 = 0\n\tm2 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2.0\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2) + 1:n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2) + 1:n], arr2[1:(n/2) + 1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2) + 1:n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2) + 1], arr2[(n/2) + 1:n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1+m2)/2\nend",
    "    if n == 0\n        return -1\n    end\n    if n == 1\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2\n        return m1\n    end\n    if m1 < m2\n        if n % 2 == 0\n            return get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2)], n / 2)\n        else\n            return get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n / 2 + 1)\n        end\n    else\n        if n % 2 == 0\n            return get_median(arr1[1:(n / 2)], arr2[(n / 2) + 1:n], n / 2)\n        else\n            return get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n / 2 + 1)\n        end\n    end\nend",
    "\t\"\"\"\n\tThis function returns the median of two sorted vectors of same size.\n\t\"\"\"\n\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\tend\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns the median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tmedian1 = median(arr1, n)\n\tmedian2 = median(arr2, n)\n\tif median1 == median2\n\t\treturn median1\n\tend\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns the median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\t\n\twhile count < n\n\t\tcount += 1\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\t\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\tBoth ar1[] and ar2[] are sorted arrays\n\t\tBoth have n elements\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\tBoth ar1[] and ar2[] are sorted arrays\n\t\tBoth have n elements\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\t\n\t# Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging ar1 and ar2\n\twhile count < n + 1\n\t\t# Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\t# Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif arr1[i] < arr2[j]\n\t\t\t# Store the prev median\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\t# Store the prev median\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\t\n\treturn (m1 + m2)/2\nend",
    "\ti, j = 1, 1\n\tcount, m1, m2 = 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size\n\t\"\"\"\n\ti, j = 0, 0\n\tm1, m2 = 0, 0\n\tfor count in 1:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\t# If the size of the array is even, then the median is the average of the middle two elements.\n\tif n % 2 == 0\n\t\treturn (arr1[n/2] + arr2[n/2])/2\n\telse\n\t\treturn (arr1[n/2] + arr2[n/2 + 1])/2\n\tend\nend",
    "\tm1 = 0\n\tm2 = 0\n\ti = 0\n\tj = 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\t1) Both ar1[] and ar2[] are sorted arrays\n\t\t2) Both have n elements\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2) - 1:n], arr2[1:(n/2) + 1], n - (n/2) + 1)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n - (n/2))\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2) + 1], arr2[(n/2) - 1:n], n - (n/2) + 1)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n - (n/2))\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "    if n == 0\n        return -1\n    end\n    if n == 1\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2\n        return m1\n    end\n    if m1 < m2\n        if n % 2 == 0\n            return get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n        else\n            return get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n        end\n    end\n    if n % 2 == 0\n        return get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n    else\n        return get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n    end\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tmedian1 = median(arr1, n)\n\tmedian2 = median(arr2, n)\n\tif median1 == median2\n\t\treturn median1\n\tend\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2)::Int64], arr2[1:(n/2 - 1):Int64], n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2)::Int64], arr2[1:(n/2):Int64], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2 - 1):Int64], arr2[(n/2)::Int64], n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2):Int64], arr2[(n/2)::Int64], n/2 + 1)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tcount, m1, m2 = 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\telseif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\telseif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tmedian::Float64 = 0.0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\tmedian = (m1 + m2) / 2\n\treturn median\nend",
    "\t\"\"\"\n\tarr1: first sorted array\n\tarr2: second sorted array\n\tn: size of both arrays\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2+1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2+1):n], n/2)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\tend\n\tif n % 2 == 0\n\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\telse\n\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\tend\nend",
    "\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2], arr2[n/2:n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2 + 1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n%2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n%2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns the median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\t\tThis function returns median of ar1[] and ar2[].\n\t\tAssumptions in this function:\n\t\t\t1) Both ar1[] and ar2[] are sorted arrays\n\t\t\t2) Both have n elements\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\t# Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\t# Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2 # Store the prev median\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2 # Store the prev median\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\t\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2 - 1:n], arr2[1:n/2 + 1], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2 + 1], n - n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2 + 1], arr2[n/2 - 1:n], n - n/2 + 1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2 + 1], arr2[n/2:n], n - n/2 + 1)\n\t\tend\n\tend\nend",
    "\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tThe function returns the median of two sorted vectors.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tmedian1::Int64 = 0\n\tmedian2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (median1 + median2)/2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\tBoth ar1[] and ar2[] are sorted arrays\n\t\tBoth have n elements\n\t\"\"\"\n\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count < n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[1]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[1]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\telseif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\telseif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\t\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\t\n\tif m1 == m2\n\t\treturn m1\n\telseif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tm1 = median(arr1)\n\tm2 = median(arr2)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2)+1:n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2)+1:n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2)+1:n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2)+1:n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tcount, m1, m2 = 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2.0\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\t- Both ar1[] and ar2[] are sorted arrays\n\t\t- Both have n elements\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\t# Below is to handle case where all elements of ar1[] are smaller than smallest(or first) element of ar2[]\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\t# Below is to handle case where all elements of ar2[] are smaller than smallest(or first) element of ar1[]\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2 # Store the prev median\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2 # Store the prev median\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\t\n\t\tcount += 1\n\tend\n\t\n\treturn (m1 + m2)/2.0\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti, j, count, m1, m2 = 0, 0, 0, 0, 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2)], n / 2)\n\t\telse\n\t\t\treturn get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n / 2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n / 2)], arr2[(n / 2) + 1:n], n / 2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n / 2 + 1)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\tend\n\tif n % 2 == 0\n\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\telse\n\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\tend\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[0:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[0:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[0:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[0:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tmedian1::Int64 = 0\n\tmedian2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tmedian1 = median2\n\t\t\tmedian2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (median1 + median2) / 2\nend",
    "\t\"\"\"\n\tFunction to return median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):(n/2 + 1)], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):(n/2 + 1)], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\t\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tThis function returns the median of two sorted vectors of same size.\n\t\"\"\"\n\tm1 = 0\n\tm2 = 0\n\ti = 0\n\tj = 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Float64 = 0\n\tm2::Float64 = 0\n\tfor count::Int64 = 0:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\tend\n\tif m1 > m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\t- Both ar1[] and ar2[] are sorted arrays\n\t\t- Both have n elements\n\t\"\"\"\n\t\n\t# return -1 for invalid input\n\tif n <= 0\n\t\treturn -1\n\tend\n\t\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\t\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\t\n\t# get the median of the first array\n\tm1 = median(arr1, n)\n\t\n\t# get the median of the second array\n\tm2 = median(arr2, n)\n\t\n\t# if medians are equal then return either m1 or m2\n\tif m1 == m2\n\t\treturn m1\n\tend\n\t\n\t# if m1 < m2 then median must exist in ar1[m1....] and ar2[....m2]\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[div(n, 2)..n], arr2[1:div(n, 2)], div(n, 2))\n\t\telse\n\t\t\treturn get_median(arr1[div(n, 2)..n], arr2[1:div(n, 2) + 1], div(n, 2) + 1)\n\t\tend\n\tend\n\t\n\t# if m1 > m2 then median must exist in ar1[....m1] and ar2[m2...]\n\tif n % 2 == 0\n\t\treturn get_median(arr1[1:div(n, 2)], arr2[div(n, 2)..n], div(n, 2))\n\telse\n\t\treturn get_median(arr1[1:div(n, 2) + 1], arr2[div(n, 2)..n], div(n, 2) + 1)\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tfor k in 1:n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\ti, j = 0, 0\n\tmed1, med2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif arr1[i] < arr2[j]\n\t\t\tmed1 = med2\n\t\t\tmed2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tmed1 = med2\n\t\t\tmed2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (med1 + med2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\t1) Both ar1[] and ar2[] are sorted arrays\n\t\t2) Both have n elements\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\t\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1+m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\t\"\"\"\n\t\tFunction to get median of two sorted vectors of same size.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tarr1 : Vector{Int64}\n\t\t\tSorted vector of integers.\n\t\tarr2 : Vector{Int64}\n\t\t\tSorted vector of integers.\n\t\tn : Int64\n\t\t\tSize of the vectors.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tmedian : Float64\n\t\t\tMedian of the two vectors.\n\t\"\"\"\n\t\n\ti = 0\n\tj = 0\n\tmedian = 0.0\n\tcount = 0\n\t\n\twhile count <= n\n\t\tcount += 1\n\t\t\n\t\tif i == n\n\t\t\tmedian = arr2[0]\n\t\t\tbreak\n\t\telseif j == n\n\t\t\tmedian = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\tif arr1[i] < arr2[j]\n\t\t\tmedian = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tmedian = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\t\n\treturn median\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):(n/2+1)], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):(n/2+1)], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns median of ar1[] and ar2[].\n\tAssumptions in this function:\n\t\tBoth ar1[] and ar2[] are sorted arrays\n\t\tBoth have n elements\n\t\"\"\"\n\ti = 0\n\tj = 0\n\tm1 = 0\n\tm2 = 0\n\tcount = 0\n\twhile count < n+1\n\t\tcount += 1\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1+m2)/2\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size\n\t\"\"\"\n\ti, j = 0, 0\n\tm1, m2 = 0, 0\n\tfor count in 1:n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2)/2\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tcount::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\telseif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\telseif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\t\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\t\n\tif m1 == m2\n\t\treturn m1\n\telseif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tmedian1 = get_median(arr1, n)\n\tmedian2 = get_median(arr2, n)\n\tif median1 == median2\n\t\treturn median1\n\tend\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2, n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2, n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1, arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1, arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function returns the median of two sorted vectors of same size.\n\t\"\"\"\n\ti, j = 1, 1\n\tm1, m2 = 0, 0\n\tcount = 0\n\twhile count <= n\n\t\tcount += 1\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):(n/2+1)], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):(n/2+1)], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\ti, j = 1, 1\n\tcount, m1, m2 = 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2.0\nend",
    "\ti, j = 1, 1\n\tcount, m1, m2 = 0, 0, 0\n\twhile count <= n\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2) / 2\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[n/2+1:n], arr2[1:n/2], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2], arr2[n/2:n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2], arr2[n/2+1:n], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size.\n\t\"\"\"\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted vectors of same size.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2.0\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2.0\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n\t\tend\n\tend\nend",
    "\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[n/2-1:n], arr2[1:n/2+1], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[n/2:n], arr2[1:n/2+1], n/2+1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2-1:n], n/2+1)\n\t\telse\n\t\t\treturn get_median(arr1[1:n/2+1], arr2[n/2:n], n/2+1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to get median of two sorted arrays of same size\n\t\"\"\"\n\tif n == 0\n\t\treturn -1.0\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1])/2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2]))/2\n\tend\n\tm1 = median(arr1, n)\n\tm2 = median(arr2, n)\n\tif m1 == m2\n\t\treturn m1\n\tend\n\tif m1 < m2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\t\tFunction to get median of two sorted arrays of same size.\n\t\t\n\t\tParameters\n\t\t----------\n\t\tarr1 : Vector{Int64}\n\t\t\tFirst sorted array.\n\t\tarr2 : Vector{Int64}\n\t\t\tSecond sorted array.\n\t\tn : Int64\n\t\t\tSize of array.\n\t\t\n\t\tReturns\n\t\t-------\n\t\tmedian : Float64\n\t\t\tMedian of two sorted arrays.\n\t\"\"\"\n\tif n == 0\n\t\treturn -1\n\tend\n\tif n == 1\n\t\treturn (arr1[1] + arr2[1]) / 2\n\tend\n\tif n == 2\n\t\treturn (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\tend\n\t\n\tmedian1 = median(arr1, n)\n\tmedian2 = median(arr2, n)\n\t\n\tif median1 == median2\n\t\treturn median1\n\tend\n\t\n\tif median1 < median2\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1)\n\t\tend\n\telse\n\t\tif n % 2 == 0\n\t\t\treturn get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n\t\telse\n\t\t\treturn get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1)\n\t\tend\n\tend\nend",
    "\ti::Int64 = 0\n\tj::Int64 = 0\n\tm1::Int64 = 0\n\tm2::Int64 = 0\n\tcount::Int64 = 0\n\twhile count <= n\n\t\tif i == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[0]\n\t\t\tbreak\n\t\tend\n\t\tif j == n\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[0]\n\t\t\tbreak\n\t\tend\n\t\tif arr1[i] < arr2[j]\n\t\t\tm1 = m2\n\t\t\tm2 = arr1[i]\n\t\t\ti += 1\n\t\telse\n\t\t\tm1 = m2\n\t\t\tm2 = arr2[j]\n\t\t\tj += 1\n\t\tend\n\t\tcount += 1\n\tend\n\treturn (m1 + m2)/2\nend"
  ]
}