{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\nfunction consecutive_duplicates(nums::Any)::Any \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = consecutive_duplicates;\n\t@test(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])\n\t@test(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [10, 15, 19, 18, 17, 26, 17, 18, 10])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"])\n\t@test(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]) == [\"a\", \"b\", \"c\", \"d\", \"a\"])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tresult = []\n\tfor i in nums\n\t\tif i != last(result)\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tReturn a vector with consecutive duplicates removed.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tnew_nums = []\n\tfor i in nums\n\t\tif i in new_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_nums, i)\n\t\tend\n\tend\n\treturn new_nums\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]]*(nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tConsecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tnums: a vector of numbers\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tnums_new = []\n\tfor i in nums\n\t\tif i != nums_new[end]\n\t\t\tpush!(nums_new, i)\n\t\tend\n\tend\n\treturn nums_new\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tInput:\n\t\tnums: a vector of numbers\n\tOutput:\n\t\ta vector of numbers with consecutive duplicates removed\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tnew_nums = [nums[1]]\n\t\tfor i in 2:length(nums)\n\t\t\tif nums[i] != nums[i-1]\n\t\t\t\tpush!(new_nums, nums[i])\n\t\t\tend\n\t\tend\n\t\treturn new_nums\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a vector and returns a vector without consecutive duplicates.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tresult = []\n\tfor i in nums\n\t\tif i != result[end]\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\treturn [nums[1]] if nums[1] != nums[2] else []\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tnew_nums = [nums[1]]\n\t\tfor i in 2:length(nums)\n\t\t\tif nums[i] != nums[i-1]\n\t\t\t\tpush!(new_nums, nums[i])\n\t\t\tend\n\t\tend\n\t\treturn new_nums\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tnums = [nums[i] for i in 1:length(nums) if nums[i] != nums[i-1]]\n\treturn nums\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a vector.\n\t\"\"\"\n\tif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tnew_nums = []\n\tfor i in nums\n\t\tif i in new_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_nums,i)\n\t\tend\n\tend\n\treturn new_nums\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tnew_nums = []\n\tfor i in nums\n\t\tif i in new_nums\n\t\t\tcontinue\n\t\telse\n\t\t\tpush!(new_nums, i)\n\t\tend\n\tend\n\treturn new_nums\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\t\t>>> consecutive_duplicates([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tInput:\n\t\tnums: Any\n\tOutput:\n\t\tAny\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0 \n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telse\n\t\tresult = [nums[1]]\n\t\tfor i in 2:length(nums)\n\t\t\tif nums[i] != nums[i-1]\n\t\t\t\tpush!(result, nums[i])\n\t\t\tend\n\t\tend\n\t\treturn result\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]]*(nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tInput:\n\t\tnums: a vector of any type\n\tOutput:\n\t\ta vector of the same type as nums with consecutive duplicates removed\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif nums == []\n\t\treturn []\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn [nums[1]]\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telseif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn [nums[1]]\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tThis function removes consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemoves consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\t\n\tif nums == []\n\t\treturn []\n\tend\n\t\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\t\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\tend\n\t\n\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tFunction to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\telseif length(nums) == 1\n\t\treturn nums\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tThis function takes a vector and returns a vector with consecutive duplicates removed.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn nums\n\telse\n\t\treturn [nums[1]]*(nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif length(nums) == 0\n\t\treturn []\n\tend\n\tif length(nums) == 1\n\t\treturn nums\n\tend\n\tif nums[1] == nums[2]\n\t\treturn consecutive_duplicates(nums[2:end])\n\telse\n\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tconsecutive_duplicates(nums::Any)::Any \n\t\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]]*consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\treturn [nums[1]] * (nums[1] != nums[2]) + consecutive_duplicates(nums[2:end])\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tWrite a function to remove consecutive duplicates of a given vector.\n\t\"\"\"\n\tif nums == []\n\t\treturn []\n\telse\n\t\tif nums[1] == nums[2]\n\t\t\treturn consecutive_duplicates(nums[2:end])\n\t\telse\n\t\t\treturn [nums[1]] * consecutive_duplicates(nums[2:end])\n\t\tend\n\tend\nend",
    "\t\"\"\"\n\tRemove consecutive duplicates from a vector.\n\t\"\"\"\n\ti = 1\n\twhile i <= length(nums)\n\t\tif nums[i] == nums[i-1]\n\t\t\tdeleteat!(nums, i)\n\t\telse\n\t\t\ti += 1\n\t\tend\n\tend\n\treturn nums\nend"
  ]
}