{
  "name": "mbpp_450_extract_string",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "results": [
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in 1:length(str)\n\t\tif length(str[i]) == l\n\t\t\tpush!(str_new, str[i])\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\tstr_l = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_l, i)\n\t\tend\n\tend\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = String[]\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given vector of string values.\n\t\"\"\"\n\tstr_l = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_l, i)\n\t\tend\n\tend\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\t\n\t# Initialize an empty vector to store the extracted strings\n\textracted_strings = Vector{String}()\n\t\n\t# Loop through the vector of strings\n\tfor i in 1:length(str)\n\t\t# Check if the length of the string is equal to l\n\t\tif length(str[i]) == l\n\t\t\t# If yes, push the string to the vector of extracted strings\n\t\t\tpush!(extracted_strings, str[i])\n\t\tend\n\tend\n\t\n\t# Return the vector of extracted strings\n\treturn extracted_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of specified length from a vector of strings.\n\t\n\tParameters\n\t----------\n\tstr : Vector{String}\n\t\tVector of strings.\n\tl : Int64\n\t\tLength of strings to be extracted.\n\t\n\tReturns\n\t-------\n\tVector{String}\n\t\tVector of strings of specified length.\n\t\"\"\"\n\t\n\t# Initialize empty vector to store extracted strings\n\textracted_strings = Vector{String}()\n\t\n\t# Loop over strings in vector\n\tfor s in str\n\t\t# Check if string length is equal to specified length\n\t\tif length(s) == l\n\t\t\t# Append string to extracted strings vector\n\t\t\tpush!(extracted_strings, s)\n\t\tend\n\tend\n\t\n\t# Return extracted strings\n\treturn extracted_strings\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123795,
      "stdout": "test set: Error During Test at /tmp/tmpv8922kno.jl:15\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmpv8922kno.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpv8922kno.jl:15 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpv8922kno.jl:14\ntest set: Error During Test at /tmp/tmpv8922kno.jl:16\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmpv8922kno.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpv8922kno.jl:16 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/e",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpv8922kno.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\treturn [s for s in str if length(s) == l]\n\tend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of specified length from a vector of strings.\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpns__0bx0.jl:1\nin expression starting at /tmp/tmpns__0bx0.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\t# Initialize an empty vector to store the extracted strings\n\textracted_str = String[]\n\t# Iterate through the vector of strings\n\tfor i in 1:length(str)\n\t\t# Check if the length of the string is equal to l\n\t\tif length(str[i]) == l\n\t\t\t# If yes, append the string to the vector of extracted strings\n\t\t\tpush!(extracted_str, str[i])\n\t\tend\n\tend\n\t# Return the vector of extracted strings\n\treturn extracted_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\tresult = Vector{String}()\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\tresult = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(result, i)\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extracted = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_extracted, i)\n\t\tend\n\tend\n\treturn str_extracted\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of string values.\n\t\"\"\"\n\tif l > 0\n\t\treturn [x for x in str if length(x) == l]\n\telse\n\t\treturn []\n\tend\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t# create a new vector to store the extracted strings\n\textracted_str = Vector{String}(undef, length(str))\n\t# loop through the vector of strings\n\tfor i in 1:length(str)\n\t\t# extract the specified size of string\n\t\textracted_str[i] = str[i][1:l]\n\tend\n\treturn extracted_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123795,
      "stdout": "test set: Error During Test at /tmp/tmp3mb0sepq.jl:19\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 6-codeunit String at index [1:8]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmp3mb0sepq.jl:10\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3mb0sepq.jl:19 [inlined]\n   [6] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3mb0sepq.jl:18\ntest set: Error During Test at /tmp/tmp3mb0sepq.jl:20\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 4-codeunit String at index [1:6]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmp3mb0sepq.jl:10\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [5] macro expansion\n     @ /tmp/tmp3mb0sepq.jl:20 [inlined]\n   [6] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [7] top-level scope\n     @ /tmp/tmp3mb0sepq.jl:18\ntest set: Error During Test at /tmp/tmp3mb0sepq.jl:21\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n  BoundsError: attempt to access 6-codeunit String at index [1:9]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] getindex\n     @ ./strings/string.jl:261 [inlined]\n   [3] extract_string(str::Vecto",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmp3mb0sepq.jl:16\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tFunction to extract specified size of strings from a given vector of string values.\n\t\"\"\"\n\tstr_extract = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_extract, i)\n\t\tend\n\tend\n\treturn str_extract\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn str[findall(x->length(x)==l, str)]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\tif l > length(str)\n\t\tprintln(\"The length of string should be less than the length of the vector\")\n\t\treturn\n\tend\n\t\n\tstr_extract = Vector{String}(l)\n\tfor i in 1:l\n\t\tstr_extract[i] = str[i]\n\tend\n\treturn str_extract\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123796,
      "stdout": "The length of string should be less than the length of the vector\ntest set: Error During Test at /tmp/tmpa61kjhjz.jl:24\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /home/a.guha/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpa61kjhjz.jl:10\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa61kjhjz.jl:24 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa61kjhjz.jl:23\nThe length of string should be less than the length of the vector\ntest set: Error During Test at /tmp/tmpa61kjhjz.jl:25\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  MethodError: Cannot `convert` an object of type Nothing to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T}, !Matched::",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpa61kjhjz.jl:21\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\tstr_l = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_l, i)\n\t\tend\n\tend\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of a given length from a vector of strings.\n\t\n\tParameters\n\t----------\n\tstr : Vector{String}\n\t\tVector of strings.\n\tl : Int64\n\t\tLength of strings to extract.\n\t\n\tReturns\n\t-------\n\tVector{String}\n\t\tVector of strings of length l.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of specified length from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123795,
      "stdout": "test set: Error During Test at /tmp/tmpv8922kno.jl:15\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmpv8922kno.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpv8922kno.jl:15 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpv8922kno.jl:14\ntest set: Error During Test at /tmp/tmpv8922kno.jl:16\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmpv8922kno.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpv8922kno.jl:16 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/e",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpv8922kno.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of specified length from a vector of strings.\n\t\n\tParameters\n\t----------\n\tstr : Vector{String}\n\t\tVector of strings.\n\tl : Int64\n\t\tLength of strings to extract.\n\t\n\tReturns\n\t-------\n\tVector{String}\n\t\tVector of strings of specified length.\n\t\"\"\"\n\t\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\n\t# Create a vector of strings of length l\n\tstr_l = Vector{String}(undef,l)\n\t\n\t# Extract the first l strings from the vector of strings\n\tfor i in 1:l\n\t\tstr_l[i] = str[i]\n\tend\n\t\n\t# Return the vector of strings of length l\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123796,
      "stdout": "test set: Error During Test at /tmp/tmpzq48uh7s.jl:22\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpzq48uh7s.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzq48uh7s.jl:22 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzq48uh7s.jl:21\ntest set: Error During Test at /tmp/tmpzq48uh7s.jl:23\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpzq48uh7s.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzq48uh7s.jl:23 [inlined]\n   [5] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzq48uh7s.jl:21\ntest set: Error During Test at /tmp/tmpzq48uh7s.jl:24\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpzq48uh7s.jl:11\n   [3] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4] macro e",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpzq48uh7s.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of specified length from a vector of strings.\n\t\n\tParameters\n\t----------\n\tstr : Vector{String}\n\t\tVector of strings.\n\tl : Int64\n\t\tLength of strings to extract.\n\t\n\tReturns\n\t-------\n\tVector{String}\n\t\tVector of strings of specified length.\n\t\"\"\"\n\t\n\t# Initialize vector of strings\n\tstr_extract = Vector{String}()\n\t\n\t# Loop over strings\n\tfor i = 1:length(str)\n\t\t\n\t\t# Check if string length is equal to specified length\n\t\tif length(str[i]) == l\n\t\t\t\n\t\t\t# Add string to vector\n\t\t\tpush!(str_extract, str[i])\n\t\tend\n\tend\n\t\n\t# Return vector of strings\n\treturn str_extract\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extract = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_extract, i)\n\t\tend\n\tend\n\treturn str_extract\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\tstr_out = []\n\tfor i in 1:length(str)\n\t\tif length(str[i]) == l\n\t\t\tpush!(str_out, str[i])\n\t\tend\n\tend\n\treturn str_out\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t# create a new vector\n\tnew_str = Vector{String}(undef, length(str))\n\t# iterate over the vector\n\tfor i in 1:length(str)\n\t\t# check if the length of the string is greater than the specified length\n\t\tif length(str[i]) > l\n\t\t\t# if yes, then extract the first l characters\n\t\t\tnew_str[i] = str[i][1:l]\n\t\telse\n\t\t\t# if not, then just assign the string to the new vector\n\t\t\tnew_str[i] = str[i]\n\t\tend\n\tend\n\t# return the new vector\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123795,
      "stdout": "test set: Test Failed at /tmp/tmp_10q3igt.jl:26\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n   Evaluated: [\"Python\", \"list\", \"exercise\", \"practice\", \"solution\"] == [\"practice\", \"solution\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp_10q3igt.jl:26 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp_10q3igt.jl:25\ntest set: Test Failed at /tmp/tmp_10q3igt.jl:27\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n   Evaluated: [\"Python\", \"list\", \"exerci\", \"practi\", \"soluti\"] == [\"Python\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp_10q3igt.jl:27 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp_10q3igt.jl:25\ntest set: Test Failed at /tmp/tmp_10q3igt.jl:28\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"exercises\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmp_10q3igt.jl:28 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmp_10q3igt.jl:25\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmp_10q3igt.jl:23\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\tif l < 1\n\t\tprintln(\"Length of string must be greater than 0.\")\n\t\treturn []\n\tend\n\t\n\tresult = []\n\tfor i in 1:length(str)\n\t\tif length(str[i]) == l\n\t\t\tpush!(result, str[i])\n\t\tend\n\tend\n\treturn result\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_len = length(str)\n\tstr_new = Vector{String}(str_len)\n\tfor i = 1:str_len\n\t\tstr_new[i] = str[i][1:l]\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123797,
      "stdout": "test set: Error During Test at /tmp/tmpz_48ipr1.jl:17\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /home/a.guha/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/range.jl:1286\n    ...\n  Stacktrace:\n   [1] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpz_48ipr1.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_48ipr1.jl:17 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_48ipr1.jl:16\ntest set: Error During Test at /tmp/tmpz_48ipr1.jl:18\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  MethodError: no method matching Vector{String}(::Int64)\n  Closest candidates are:\n    Vector{T}() where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/boot.jl:476\n    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at /home/a.guha/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at /home/a.guha/.conda/envs/polyglot/share/julia/base/range.jl:1286\n    ...\n  Stacktrace:\n   [1] extract_string(str::Vector{String}, l::Int64)\n     @ Main /tmp/tmpz_48ipr1.jl:6\n   [2] macro expansion\n     @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz_48ipr1.jl:18 [inlined]\n   [4] macro expansion\n     @ /home/a.guha/.c",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpz_48ipr1.jl:14\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extracted = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_extracted, i)\n\t\tend\n\tend\n\treturn str_extracted\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\textract_string(str, l)\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppiqelfjr.jl:1\nin expression starting at /tmp/tmppiqelfjr.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123795,
      "stdout": "test set: Error During Test at /tmp/tmpv8922kno.jl:15\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmpv8922kno.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpv8922kno.jl:15 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [11] top-level scope\n      @ /tmp/tmpv8922kno.jl:14\ntest set: Error During Test at /tmp/tmpv8922kno.jl:16\n  Test threw exception\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n  BoundsError: attempt to access 5-element Vector{String} at index [6]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:861 [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n    [4] collect_to!\n      @ ./array.jl:782 [inlined]\n    [5] collect_to_with_first!\n      @ ./array.jl:760 [inlined]\n    [6] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"{Vector{String}}})\n      @ Base ./array.jl:734\n    [7] extract_string(str::Vector{String}, l::Int64)\n      @ Main /tmp/tmpv8922kno.jl:8\n    [8] macro expansion\n      @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n    [9] macro expansion\n      @ /tmp/tmpv8922kno.jl:16 [inlined]\n   [10] macro expansion\n      @ /home/a.guha/.conda/e",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored, 0 broken.\nin expression starting at /tmp/tmpv8922kno.jl:12\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from vector of strings str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tstr_extract = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_extract, i)\n\t\tend\n\tend\n\treturn str_extract\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\tstr_len = length(str)\n\tif str_len == 0\n\t\treturn []\n\tend\n\tif l > str_len\n\t\treturn str\n\tend\n\treturn str[1:l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123796,
      "stdout": "test set: Test Failed at /tmp/tmpdp0ieg2n.jl:22\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"practice\", \"solution\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp0ieg2n.jl:22 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp0ieg2n.jl:21\ntest set: Test Failed at /tmp/tmpdp0ieg2n.jl:23\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"Python\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp0ieg2n.jl:23 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp0ieg2n.jl:21\ntest set: Test Failed at /tmp/tmpdp0ieg2n.jl:24\n  Expression: candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"]\n   Evaluated: [\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"] == [\"exercises\"]\nStacktrace:\n [1] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp0ieg2n.jl:24 [inlined]\n [3] macro expansion\n   @ /home/a.guha/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp0ieg2n.jl:21\nTest Summary: | Fail  Total\ntest set      |    3      3\n",
      "stderr": "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored, 0 broken.\nin expression starting at /tmp/tmpdp0ieg2n.jl:19\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\tstr_new = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_new, i)\n\t\tend\n\tend\n\treturn str_new\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given vector of strings.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\n\t# Initialize a vector to store the extracted strings\n\textracted_str = Vector{String}()\n\t\n\t# Loop through the vector of strings\n\tfor i in 1:length(str)\n\t\t\n\t\t# Check if the length of the string is equal to the length specified\n\t\tif length(str[i]) == l\n\t\t\t\n\t\t\t# If yes, append the string to the vector\n\t\t\tpush!(extracted_str, str[i])\n\t\tend\n\tend\n\t\n\t# Return the vector of extracted strings\n\treturn extracted_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn filter(x->length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [i for i in str if length(i) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123795,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb9uww5u9.jl:1\nin expression starting at /tmp/tmpb9uww5u9.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\tnew_str = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(new_str, i)\n\t\tend\n\tend\n\treturn new_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from a vector of strings.\n\t\"\"\"\n\tstr_l = []\n\tfor i in str\n\t\tif length(i) == l\n\t\t\tpush!(str_l, i)\n\t\tend\n\tend\n\treturn str_l\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tFunction to extract specified size of strings from a given vector of string values.\n\t\"\"\"\n\t# Initialize empty vector to store extracted strings\n\textracted_str = []\n\t# Loop through vector of strings\n\tfor i in str\n\t\t# Check if length of string is equal to specified size\n\t\tif length(i) == l\n\t\t\t# Append string to vector\n\t\t\tpush!(extracted_str, i)\n\t\tend\n\tend\n\t# Return vector of extracted strings\n\treturn extracted_str\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of specified length from a vector of strings.\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpns__0bx0.jl:1\nin expression starting at /tmp/tmpns__0bx0.jl:1\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from a given vector of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of specified length from a vector of strings.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn filter(x -> length(x) == l, str)\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtract strings of length l from str.\n\t\"\"\"\n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509706,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\t\"\"\"\n\tExtracts strings of length l from str.\n\t\"\"\"\n\treturn [x for x in str if length(x) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [str[i] for i in 1:length(str) if length(str[i]) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1666123793,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\"\"\"\n\tWrite a function to extract specified size of strings from a given vector of string values.\n\t\"\"\"\nfunction extract_string(str::Vector{String}, l::Int64)::Vector{String} \n\treturn [s for s in str if length(s) == l]\nend\nusing Test\n\n@testset begin\n\ncandidate = extract_string;\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8) == [\"practice\", \"solution\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6) == [\"Python\"])\n\t@test(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9) == [\"exercises\"])\nend\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "Test Summary: | Pass  Total\ntest set      |    3      3\n",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}