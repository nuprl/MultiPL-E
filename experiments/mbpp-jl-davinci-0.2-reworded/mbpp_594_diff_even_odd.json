{
  "name": "mbpp_594_diff_even_odd",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to find the difference of the first even and first odd number of a given vector.\n\t\"\"\"\nfunction diff_even_odd(list1::Vector{Int64})::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = diff_even_odd;\n\t@test(candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 3)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\n\t@test(candidate([1, 5, 7, 9, 10]) == 9)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\teven_list = filter(x -> x%2 == 0, list1)\n\todd_list = filter(x -> x%2 != 0, list1)\n\treturn even_list[1] - odd_list[1]\nend",
    "\teven_list = []\n\todd_list = []\n\tfor i in list1\n\t\tif i % 2 == 0\n\t\t\tpush!(even_list, i)\n\t\telse\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn even_list[1] - odd_list[1]\nend",
    "\t# find the first even number\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 == 0\n\t\t\teven = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\t# find the first odd number\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 != 0\n\t\t\todd = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even - odd\nend",
    "\teven_list = [x for x in list1 if x % 2 == 0]\n\todd_list = [x for x in list1 if x % 2 != 0]\n\treturn even_list[1] - odd_list[1]\nend",
    "\teven_list = []\n\todd_list = []\n\tfor i in list1\n\t\tif i % 2 == 0\n\t\t\tpush!(even_list,i)\n\t\telse\n\t\t\tpush!(odd_list,i)\n\t\tend\n\tend\n\treturn even_list[1] - odd_list[1]\nend",
    "\teven_index = findfirst(list1, iseven)\n\todd_index = findfirst(list1, isodd)\n\tdiff = list1[even_index] - list1[odd_index]\n\treturn diff\nend",
    "\teven_list = []\n\todd_list = []\n\tfor i in list1\n\t\tif i%2 == 0\n\t\t\tpush!(even_list, i)\n\t\telse\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn even_list[1] - odd_list[1]\nend",
    "\teven = 0\n\todd = 0\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 == 0\n\t\t\teven = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 != 0\n\t\t\todd = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even - odd\nend",
    "\teven_num = 0\n\todd_num = 0\n\tfor i in list1\n\t\tif i%2 == 0\n\t\t\teven_num = i\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i in list1\n\t\tif i%2 != 0\n\t\t\todd_num = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even_num - odd_num\nend",
    "\teven_list = []\n\todd_list = []\n\tfor i in list1\n\t\tif i % 2 == 0\n\t\t\tpush!(even_list, i)\n\t\telse\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn even_list[1] - odd_list[1]\nend",
    "\teven_index = 0\n\todd_index = 0\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 == 0\n\t\t\teven_index = i\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 != 0\n\t\t\todd_index = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even_index - odd_index\nend",
    "\teven = 0\n\todd = 0\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 == 0\n\t\t\teven = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 != 0\n\t\t\todd = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even - odd\nend",
    "\teven_num = 0\n\todd_num = 0\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 == 0\n\t\t\teven_num = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 != 0\n\t\t\todd_num = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even_num - odd_num\nend",
    "\teven_num = 0\n\todd_num = 0\n\tfor i in list1\n\t\tif i % 2 == 0\n\t\t\teven_num = i\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i in list1\n\t\tif i % 2 != 0\n\t\t\todd_num = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even_num - odd_num\nend",
    "\teven_index = findfirst(list1, iseven)\n\todd_index = findfirst(list1, isodd)\n\tif even_index == nothing\n\t\treturn 0\n\telseif odd_index == nothing\n\t\treturn 0\n\telse\n\t\treturn abs(list1[even_index] - list1[odd_index])\n\tend\nend",
    "\teven_list = []\n\todd_list = []\n\tfor i in list1\n\t\tif i%2 == 0\n\t\t\tpush!(even_list,i)\n\t\telse\n\t\t\tpush!(odd_list,i)\n\t\tend\n\tend\n\treturn even_list[1] - odd_list[1]\nend",
    "\teven_list = []\n\todd_list = []\n\tfor i in list1\n\t\tif i % 2 == 0\n\t\t\tpush!(even_list, i)\n\t\telse\n\t\t\tpush!(odd_list, i)\n\t\tend\n\tend\n\treturn even_list[1] - odd_list[1]\nend",
    "\teven_index = findfirst(list1, x -> x % 2 == 0)\n\todd_index = findfirst(list1, x -> x % 2 != 0)\n\treturn list1[even_index] - list1[odd_index]\nend",
    "\teven_index = findall(x->x%2==0, list1)\n\todd_index = findall(x->x%2!=0, list1)\n\tif length(even_index)==0\n\t\treturn -1\n\telseif length(odd_index)==0\n\t\treturn -1\n\telse\n\t\treturn list1[even_index[1]]-list1[odd_index[1]]\n\tend\nend",
    "\teven_num = 0\n\todd_num = 0\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 == 0\n\t\t\teven_num = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i in 1:length(list1)\n\t\tif list1[i] % 2 != 0\n\t\t\todd_num = list1[i]\n\t\t\tbreak\n\t\tend\n\tend\n\treturn even_num - odd_num\nend"
  ]
}