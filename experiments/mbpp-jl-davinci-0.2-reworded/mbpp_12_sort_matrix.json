{
  "name": "mbpp_12_sort_matrix",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\nfunction sort_matrix(M::Vector{Vector{Int64}})::Vector{Vector{Int64}} \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = sort_matrix;\n\t@test(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]])\n\t@test(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]])\n\t@test(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]])\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t\n\t# Get the sum of each row\n\trow_sums = [sum(row) for row in M]\n\t\n\t# Sort the matrix according to the row sums\n\tsorted_M = sort(zip(row_sums, M), by=x->x[1])\n\t\n\t# Return the sorted matrix\n\treturn [row for (row_sum, row) in sorted_M]\nend",
    "\t\"\"\"\n\tSort the matrix M according to the sum of its rows.\n\t\"\"\"\n\t# Sort the rows of M according to the sum of their elements\n\tsorted_M = sort(M, by=sum)\n\treturn sorted_M\nend",
    "\t\n\t# Get the sum of each row\n\trow_sums = [sum(row) for row in M]\n\t\n\t# Sort the rows according to the sums\n\tsorted_rows = sortperm(row_sums)\n\t\n\t# Return the sorted matrix\n\treturn M[sorted_rows, :]\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\torder = sortperm(sums)\n\treturn M[order]\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t\n\t# Sort the rows of the matrix according to the sum of the elements in each row.\n\tM = sortrows(M, by = sum)\n\t\n\treturn M\nend",
    "\t# Sort the rows of the matrix according to the sum of the elements in each row.\n\t# The sort function returns a tuple of the sorted matrix and the indices of the rows in the original matrix.\n\t# We only want the sorted matrix, so we index into the tuple to get the first element.\n\treturn sort(M, by = sum)[1]\nend",
    "\t\"\"\"\n\tSort a matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t# Get the sum of each row\n\tsums = [sum(row) for row in M]\n\t# Sort the matrix according to the sums\n\treturn M[sortperm(sums)]\nend",
    "\tn = length(M)\n\tfor i in 1:n\n\t\tfor j in 1:n-1\n\t\t\tif sum(M[j]) > sum(M[j+1])\n\t\t\t\tM[j], M[j+1] = M[j+1], M[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend",
    "\t# sort the matrix by the sum of the rows\n\treturn sort(M, by = sum)\nend",
    "\t\"\"\"\n\tSort the matrix M according to the sum of its rows.\n\t\"\"\"\n\tn, m = size(M)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i,:])\n\tend\n\treturn M[sortperm(sums),:]\nend",
    "\t\"\"\"\n\tSort a matrix according to the sum of its rows.\n\t\"\"\"\n\tn = size(M, 1)\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i, :])\n\tend\n\tsorted_indices = sortperm(sums)\n\treturn M[sorted_indices, :]\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t\n\t# Get the sum of each row\n\trow_sums = [sum(row) for row in M]\n\t\n\t# Sort the matrix according to the row sums\n\treturn M[sortperm(row_sums)]\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t# get the sum of each row\n\trow_sums = [sum(row) for row in M]\n\t# sort the matrix according to the row sums\n\tsorted_matrix = sortperm(row_sums)\n\treturn M[sorted_matrix]\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tm = length(M[1])\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\tsorted_indices = sortperm(sums)\n\tsorted_matrix = zeros(n,m)\n\tfor i in 1:n\n\t\tsorted_matrix[i,:] = M[sorted_indices[i],:]\n\tend\n\treturn sorted_matrix\nend",
    "\t\"\"\"\n\tSort the matrix M according to the sum of its rows.\n\t\"\"\"\n\t# Sort the matrix according to the sum of its rows\n\tsorted_M = sort(M, by = sum)\n\treturn sorted_M\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tm = length(M[1])\n\t\n\t# Calculate the sum of each row\n\tsums = [sum(M[i,:]) for i in 1:n]\n\t\n\t# Sort the sums\n\tsorted_sums = sort(sums)\n\t\n\t# Create a new matrix\n\tM_sorted = zeros(Int64, n, m)\n\t\n\t# Fill the new matrix with the rows of the old matrix in the order of the sorted sums\n\tfor i in 1:n\n\t\tM_sorted[i,:] = M[findall(sums .== sorted_sums[i])[1],:]\n\tend\n\t\n\treturn M_sorted\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\t\n\t# sort the matrix\n\tsorted_matrix = sort(M, by=sum)\n\t\n\treturn sorted_matrix\nend",
    "\tn = length(M)\n\tm = length(M[1])\n\tsums = zeros(n)\n\tfor i in 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\tindices = sortperm(sums)\n\tM = M[indices]\n\treturn M\nend",
    "\t# sort the rows of the matrix according to the sum of the elements\n\t# in each row\n\tsorted_rows = sort(M, by = sum)\n\treturn sorted_rows\nend",
    "\t\"\"\"\n\tSort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n\tn = length(M)\n\tm = length(M[1])\n\t\n\t# Calculate the sum of each row\n\tsums = zeros(n)\n\tfor i = 1:n\n\t\tsums[i] = sum(M[i])\n\tend\n\t\n\t# Sort the sums\n\tsorted_sums = sort(sums)\n\t\n\t# Sort the matrix\n\tsorted_M = zeros(n, m)\n\tfor i = 1:n\n\t\tfor j = 1:n\n\t\t\tif sums[j] == sorted_sums[i]\n\t\t\t\tsorted_M[i, :] = M[j, :]\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn sorted_M\nend"
  ]
}