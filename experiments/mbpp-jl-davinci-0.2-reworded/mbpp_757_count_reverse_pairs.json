{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to count the pairs of reverse strings in the given string vector. https://www.geeksforgeeks.org/jlthon-program-to-count-the-pairs-of-reverse-strings/\n\t\"\"\"\nfunction count_reverse_pairs(test_list::Vector{String})::Int64 \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = count_reverse_pairs;\n\t@test(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2)\n\t@test(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1)\n\t@test(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j\n\t\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\t\tcount += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j && test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j && test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j && test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in i+1:length(test_list)\n\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j && test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j\n\t\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\t\tcount += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j && test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j && test_list[i] == reverse(test_list[j])\n\t\t\t\tcount += 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tcount = 0\n\tfor i in 1:length(test_list)\n\t\tfor j in 1:length(test_list)\n\t\t\tif i != j\n\t\t\t\tif test_list[i] == reverse(test_list[j])\n\t\t\t\t\tcount += 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend"
  ]
}