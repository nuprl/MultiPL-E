{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "jl",
  "prompt": "\"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\"\"\"\nfunction text_lowercase_underscore(text::String)::Bool \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "using Test\n\n@testset begin\n\ncandidate = text_lowercase_underscore;\n\t@test(candidate(\"aab_cbbbc\") == true)\n\t@test(candidate(\"aab_Abbbc\") == false)\n\t@test(candidate(\"Aaab_abbbc\") == false)\nend\n",
  "stop_tokens": [
    "\nfunction",
    "\nmacro",
    "\n\n"
  ],
  "completions": [
    "\tfor i in 1:length(text)\n\t\tif text[i] == \"_\"\n\t\t\tif text[i-1] == text[i+1]\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\nend",
    "\treturn match(r\"^[a-z]+(_[a-z]+)*$\", text) != nothing\nend",
    "\treturn match(r\"[a-z_]+\", text) != nothing\nend",
    "\treturn match(r\"^[a-z]+(_[a-z]+)*$\", text) != nothing\nend",
    "\treturn match(r\"^[a-z]+_[a-z]+$\", text) != nothing\nend",
    "\treturn match(r\"^[a-z_]+$\", text) != nothing\nend",
    "\treturn match(r\"[a-z]+_[a-z]+\", text) != nothing\nend",
    "\treturn match(r\"^[a-z]+(_[a-z]+)*$\", text) != nothing\nend",
    "\tif match(r\"^[a-z]+_[a-z]+$\", text) != nothing\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\treturn match(r\"^[a-z]+(_[a-z]+)*$\", text) != nothing\nend",
    "\tfor i in 1:length(text)\n\t\tif text[i] == \"_\"\n\t\t\tif text[i-1] in \"abcdefghijklmnopqrstuvwxyz\" && text[i+1] in \"abcdefghijklmnopqrstuvwxyz\"\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\treturn match(r\"([a-z]_[a-z])\", text) != nothing\nend",
    "\treturn match(r\"^[a-z]+_[a-z]+$\", text) != nothing\nend",
    "\t\n\t# Split the string into a vector of words\n\twords = split(text, \" \")\n\t\n\t# Loop through the words\n\tfor word in words\n\t\t\n\t\t# Check if the word contains an underscore\n\t\tif occursin(\"_\", word)\n\t\t\t\n\t\t\t# Check if the word is all lowercase\n\t\t\tif islowercase(word)\n\t\t\t\t\n\t\t\t\t# If the word is all lowercase and contains an underscore, return true\n\t\t\t\treturn true\n\t\t\t\t\n\t\t\telse\n\t\t\t\t\n\t\t\t\t# If the word is not all lowercase, return false\n\t\t\t\treturn false\n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\tend\n\t\t\n\tend\n\t\n\t# If the word does not contain an underscore, return false\n\treturn false\n\t\nend",
    "\treturn match(r\"^[a-z]+(_[a-z]+)*$\", text) != nothing\nend",
    "\tif length(text) == 0\n\t\treturn false\n\tend\n\tfor i in 1:length(text)\n\t\tif islower(text[i]) == false && text[i] != \"_\"\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\treturn match(r\"^[a-z_]+$\", text) != nothing\nend",
    "\t# check if the string contains a lowercase letter followed by an underscore\n\t# followed by a lowercase letter\n\tif match(r\"[a-z]_[a-z]\", text) == nothing\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend",
    "\tfor i in 1:length(text)\n\t\tif (text[i] == \"_\") && (text[i+1] in \"abcdefghijklmnopqrstuvwxyz\")\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend",
    "\treturn match(r\"^[a-z]+_[a-z]+$\", text) != nothing\nend"
  ]
}