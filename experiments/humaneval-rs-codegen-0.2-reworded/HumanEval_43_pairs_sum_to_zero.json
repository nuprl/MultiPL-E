{
  "name": "HumanEval_43_pairs_sum_to_zero",
  "language": "rs",
  "prompt": "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it returns true if there are two distinct elements in the vector that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1, 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 31]), false);\n}\n",
  "completions": [
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i > 0 {\n      pairs.push(i);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in 0..len(pairs) - 1 {\n    if pairs[i] + pairs[i + 1] != 0 {\n      return false;\n    }\n  }\n  return true;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    pairs_sum += i;\n    if pairs_sum == 0 {\n      pairs_count += 1;\n      pairs.push(i);\n      pairs_sum = 0;\n    }\n  }\n  return pairs_count == 2;",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  for (i; i < l.len; i++) {\n    let mut j = i + 1;\n    for (j; j < l.len; j++) {\n      if (l[i] + l[j] == 0) {\n        pairs.push(i, j);\n      }\n    }\n  }\n  return !pairs.is_empty();",
    "  if len(l) == 0 {\n    return false\n  }\n  let sum = 0\n  for i in l {\n    sum += i\n  }\n  if sum == 0 {\n    return false\n  }\n  for i in l {\n    if i == sum {\n      return true\n    }\n  }\n  return false",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    for j in l {\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len(); i++) {\n    let num = l[i];\n    if (num == 0) {\n      count += 1;\n      continue;\n    }\n    if (count > 0) {\n      pairs.push(count);\n      count = 0;\n    }\n    count += 1;\n  }\n  if (count > 0) {\n    pairs.push(count);\n  }\n  return pairs.len() > 1;",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  for (i = 0; i < l.len; i++) {\n    if (l[i] == 0) {\n      break;\n    }\n  }\n  if (i == l.len) {\n    return false;\n  }\n  for (i = i + 1; i < l.len; i++) {\n    if (l[i] == 0) {\n      break;\n    }\n  }\n  if (i == l.len) {\n    return false;\n  }\n  pairs.extend(l.slice(i, i + 1));\n  pairs.extend(l.slice(0, i));\n  return true;",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if (i + j) % 2 == 0 {\n      pairs.push_back(i);\n      pairs.push_back(j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  if len(l) == 0 {\n    return false\n  }\n  let (a, b) = (0, 0)\n  for i in 0..len(l) {\n    if a == 0 {\n      a = l[i]\n      continue\n    }\n    if b == 0 {\n      b = l[i]\n      continue\n    }\n    if a + b == 0 {\n      return true\n    }\n  }\n  return false",
    "  let mut pairs = Vec::new();\n  let mut seen = Vec::new();\n  let mut seen_count = 0;\n  let mut seen_sum = 0;\n  for i in l {\n    if seen_count == 0 {\n      seen_sum = i;\n      seen_count = 1;\n    } else if seen_sum == i {\n      seen_count += 1;\n    } else {\n      pairs.push(seen_sum, i);\n      seen_count = 0;\n      seen_sum = i;\n      seen_count = 1;\n    }\n  }\n  if seen_count == 0 {\n    return false;\n  } else {\n    return true;\n  }",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    let mut j = i - 1;\n    while j >= 0 && l[j] == 0 {\n      j -= 1;\n    }\n    if j >= 0 {\n      pairs.push_back(i - j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let count = 0;\n  for i in 0..l.len - 1 {\n    if l[i] + l[i + 1] == 0 {\n      count += 1;\n    }\n  }\n  return count >= 2;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i % 2 == 0 {\n      continue;\n    }\n    pairs.push_back(i);\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in 0..len(pairs) - 1 {\n    if pairs[i] + pairs[i + 1] == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let count = 0;\n  for i in 0..l.len - 1 {\n    if l[i] == 0 {\n      count += 1;\n      if count > 1 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  let mut pairs_sum_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      pairs_sum -= i;\n      pairs_sum_count += 1;\n    } else {\n      pairs_sum += i;\n      pairs_sum_count += 1;\n    }\n    if pairs_sum_count == 2 {\n      pairs.push(i);\n      pairs_count += 1;\n      pairs_sum_count = 0;\n    }\n  }\n  return pairs_count == 2 && pairs_sum_count == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (i, j) in l.enumerate() {\n    if i == j {\n      continue;\n    }\n    let sum = i + j;\n    if sum == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = Vec::new();\n  let mut seen = Vec::new();\n  let mut seen_count = 0;\n  for i in l {\n    if seen_count == 0 {\n      pairs.push(i);\n      seen.push(i);\n      seen_count = 1;\n    } else {\n      if (seen.contains(i - seen_count)) {\n        return true;\n      }\n      seen_count += 1;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum % i != 0 {\n      return false;\n    }\n  }\n  return true;",
    "  let mut pairs = false;\n  for i in l {\n    for j in l {\n      if i + j == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let count = 0;\n  for i in l {\n    if i == 0 {\n      count += 1;\n    }\n  }\n  return count >= 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum - i == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i in pairs {\n      continue;\n    }\n    pairs_count += 1;\n    pairs.push(i);\n  }\n  return pairs_count == 2;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i > 0 {\n      pairs.push(i);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in 0..len(pairs) - 1 {\n    if pairs[i] + pairs[i + 1] != 0 {\n      return false;\n    }\n  }\n  return true;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push(i);\n      pairs_count += 1;\n    }\n  }\n  if pairs_count == 0 {\n    return false;\n  }\n  if pairs_count == 1 {\n    return true;\n  }\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut l = 0;\n  let mut m = 0;\n  let mut n = 0;\n  let mut o = 0;\n  let mut p = 0;\n  let mut q = 0;\n  let mut r = 0;\n  let mut s = 0;\n  let mut t = 0;\n  let mut u = 0;\n  let mut v = 0;\n  let mut w = 0;\n  let mut x = 0;\n  let mut y = 0;\n  let mut z = 0;\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 0;\n  let mut d = 0;\n  let mut e = 0;\n  let mut f = 0;\n  let mut g = 0;\n  let mut h = 0;\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut l = 0;\n  let mut m = 0;\n  let mut n = 0;\n  let mut o = 0;\n  let mut p = 0;\n  let mut q = 0;\n  let mut r = 0;\n  let mut s = 0;\n  let mut t = 0;\n  let mut u = 0;\n  let mut v = 0;\n  let mut w = 0;\n  let mut x = 0;\n  let mut y = 0;\n  let mut z = 0;\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 0;\n  let mut d = 0;\n  let mut e = 0;\n  let mut f = 0;\n  let mut g",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    pairs_sum += i;\n    if pairs_sum == 0 {\n      pairs_count += 1;\n      pairs.push(i);\n      pairs_sum = 0;\n    }\n  }\n  return pairs_count == 2;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push(i);\n      pairs_count += 1;\n    }\n  }\n  if pairs_count == 0 {\n    return false;\n  }\n  if pairs_count == 2 {\n    return true;\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut seen = Vec::new();\n  let mut seen_count = 0;\n  let mut seen_sum = 0;\n  for i in l {\n    if seen_count == 0 {\n      seen_sum = i;\n      seen_count = 1;\n    } else if seen_sum == i {\n      seen_count += 1;\n    } else {\n      pairs.push(seen_sum, i);\n      seen_sum = i;\n      seen_count = 1;\n    }\n  }\n  return seen_count == 2;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push_back(i);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  if len(pairs) == 1 {\n    return false;\n  }\n  for i in pairs {\n    for j in pairs {\n      if i == j {\n        continue;\n      }\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i in pairs {\n      return false;\n    }\n    pairs.push(i);\n  }\n  return true;",
    "  let mut pairs = vec![];\n  for (let i = 0; i < l.len; i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a + b == 0) {\n      pairs.push(a);\n      pairs.push(b);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    for j in 0..i {\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i in pairs {\n      continue;\n    }\n    pairs.push(i);\n    count += 1;\n  }\n  return count == 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    if l[i] == 0 {\n      continue;\n    }\n    for j in 0..i {\n      if l[j] == 0 {\n        continue;\n      }\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  let count = 0;\n  for i in l {\n    if i == 0 {\n      count += 1;\n    }\n  }\n  return count >= 2;",
    "  let count = 0;\n  for i in l {\n    if i == 0 {\n      count += 1;\n    }\n  }\n  return count >= 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum == i {\n      return true;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum == i {\n      return true;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let count = 0;\n  for i in l {\n    if i == 0 {\n      count += 1;\n    }\n  }\n  return count > 1;",
    "  let count = 0;\n  for i in 0..l.len - 1 {\n    if l[i] + l[i + 1] == 0 {\n      count += 1;\n    }\n  }\n  return count >= 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  for (i = 0; i < l.len(); i++) {\n    for (j = i + 1; j < l.len(); j++) {\n      if (l[i] + l[j] == 0) {\n        pairs.push_back(l[i]);\n        pairs.push_back(l[j]);\n        pairs_count += 1;\n        if (pairs_count == 2) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut sum = 0;\n  let mut i = 0;\n  for i in l {\n    let mut j = i + 1;\n    while j < l.len() {\n      if l[i] + l[j] == 0 {\n        pairs.push(i, j);\n        sum += l[i] + l[j];\n        j += 1;\n      } else {\n        break;\n      }\n    }\n  }\n  return sum == 0 && pairs.len() > 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    for j in l {\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = vec![];\n  for (i, j) in l.enumerate() {\n    if i == j {\n      continue;\n    }\n    if i > j {\n      std::swap(i, j);\n    }\n    pairs.push_back(i);\n    pairs.push_back(j);\n  }\n  return !pairs.is_empty() && pairs.length() % 2 == 0;",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if l[i] + l[j] == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    for j in l {\n      if i == j {\n        continue;\n      }\n      if i + j == sum {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  for (let i = 0; i < l.len(); i++) {\n    for (let j = i + 1; j < l.len(); j++) {\n      if (l[i] + l[j] == 0) {\n        pairs.push_back(i);\n        pairs.push_back(j);\n      }\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i == -1 {\n      return false;\n    }\n    if i > 0 {\n      pairs_sum += i;\n    } else {\n      pairs_sum -= i;\n    }\n    if pairs_sum == 0 {\n      pairs_count += 1;\n    }\n  }\n  return pairs_count == 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    pairs_sum += i;\n    if pairs_sum == 0 {\n      pairs_count += 1;\n      pairs.push(i);\n      pairs_sum = 0;\n    }\n  }\n  return pairs_count == 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    for j in l {\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  for (i, j) in l.iter().zip(l.iter().rev()) {\n    if i.as_isize() + j.as_isize() == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  if l.len == 0 {\n    return false\n  }\n  if l.len == 1 {\n    return false\n  }\n  let sum = 0\n  for i in 0..l.len-1 {\n    sum += l[i]\n  }\n  return sum == 0",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  for (let i = 0; i < l.len(); i++) {\n    let num = l[i];\n    if (num > 0) {\n      pairs.push(num - 1);\n      pairs_count += 1;\n    }\n  }\n  if (pairs_count == 0) {\n    return false;\n  }\n  if (pairs_count == 1) {\n    return true;\n  }\n  let mut pairs_count_2 = 0;\n  for (let i = 0; i < pairs.len(); i++) {\n    let num = pairs[i];\n    for (let j = i + 1; j < pairs.len(); j++) {\n      let num2 = pairs[j];\n      if (num + num2 == 0) {\n        pairs_count_2 += 1;\n      }\n    }\n  }\n  return pairs_count_2 == 2;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  for (let i = 0; i < l.len(); i++) {\n    if (l[i] == 0) {\n      continue;\n    }\n    if (pairs_count == 0) {\n      pairs_sum = l[i];\n      pairs_count = 1;\n      continue;\n    }\n    if (pairs_sum == l[i]) {\n      pairs_count += 1;\n      continue;\n    }\n    pairs.push(pairs_count);\n    pairs_count = 1;\n    pairs_sum = l[i];\n  }\n  if (pairs_count == 0) {\n    return false;\n  }\n  pairs.push(pairs_count);\n  return true;",
    "  let mut pairs = false;\n  for (i, j) in l.zip(l.rev()).enumerate() {\n    if i == j {\n      continue;\n    }\n    if (i + j) % 2 == 0 {\n      pairs = true;\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i == -i {\n      pairs.push_back(i);\n      count += 1;\n    }\n  }\n  return count == 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i > 0 {\n      pairs_sum += i;\n    } else {\n      pairs_sum -= i;\n    }\n    if pairs_sum == 0 {\n      pairs_count += 1;\n    }\n  }\n  return pairs_count == 2;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      continue;\n    }\n    pairs.push(i);\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in pairs {\n    for j in pairs {\n      if i == j {\n        continue;\n      }\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut sum = 0;\n  for (i = 0; i < l.len; i += 1) {\n    sum = l[i];\n    for (j = i + 1; j < l.len; j += 1) {\n      if (sum == l[j]) {\n        pairs.push_back(i);\n        pairs.push_back(j);\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut pairs_sum = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i == -i {\n      pairs.push(i);\n      pairs_sum += i;\n    }\n  }\n  return pairs_sum == 0;",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    for j in i + 1..l.len() {\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = vec![];\n  for (i, j) in l.enumerate() {\n    if i == j {\n      continue;\n    }\n    if l[i] + l[j] == 0 {\n      pairs.push_back(i);\n      pairs.push_back(j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().zip(l.iter().rev()) {\n    if i == j {\n      continue;\n    }\n    if i + j == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if (j - i) % 2 == 0 {\n      pairs.push_back(i);\n      pairs.push_back(j);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for (i, j) in pairs.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if (j - i) % 2 == 0 {\n      return false;\n    }\n  }\n  return true;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut sum = 0;\n  for (i = 0; i < l.len(); i++) {\n    sum = l[i];\n    for (j = i + 1; j < l.len(); j++) {\n      if (sum == l[j]) {\n        pairs.push_back(Pair(i, j));\n      }\n    }\n  }\n  if (pairs.len() == 0) {\n    return false;\n  }\n  for (i = 0; i < pairs.len(); i++) {\n    if (pairs[i].a == pairs[i].b) {\n      return false;\n    }\n  }\n  return true;",
    "  let mut pairs = vec![];\n  let mut i = 0;\n  for (i; i < l.len; i += 1) {\n    if (l[i] == 0) {\n      continue;\n    }\n    if (pairs.len == 0) {\n      pairs = vec![l[i]];\n      continue;\n    }\n    if (pairs[0] == l[i]) {\n      continue;\n    }\n    return false;\n  }\n  return true;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs: Vec<(isize, isize)> = Vec::new();\n  let mut seen: Vec<bool> = Vec::new();\n  let mut seen_index: isize = 0;\n  for i in l {\n    if !seen_index {\n      seen_index = i;\n    } else if seen_index == i {\n      return false;\n    } else {\n      pairs.push((seen_index, i));\n      seen.push(true);\n      seen_index = i;\n    }\n  }\n  return true;",
    "  if len(l) == 0 {\n    return false\n  }\n  if len(l) == 1 {\n    return false\n  }\n  let (a, b) = (l[0], l[1]);\n  let sum = a + b;\n  for i in l.slice(2) {\n    let (c, d) = (l[i], l[i + 1]);\n    let sum2 = c + d;\n    if sum == sum2 {\n      return true\n    }\n  }\n  return false",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut sum = 0;\n  let mut count = 0;\n  for (i = 0; i < l.len; i++) {\n    sum = 0;\n    for (j = i; j < l.len; j++) {\n      sum += l[j];\n      if (sum == 0) {\n        pairs.push_back(i);\n        pairs.push_back(j);\n        count += 1;\n        if (count == 2) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  if len(l) == 0 {\n    return false\n  }\n  if len(l) == 1 {\n    return false\n  }\n  let sum = 0\n  for i in l {\n    sum += i\n  }\n  return sum == 0",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if (j == 0) {\n      continue;\n    }\n    if (pairs.contains(i) || pairs.contains(j - i)) {\n      return false;\n    }\n    pairs.push(i);\n    pairs.push(j - i);\n  }\n  return true;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  if l.len() == 0 {\n    return false\n  }\n  let sum = 0\n  for i in l.iter() {\n    sum += i\n  }\n  return sum == 0",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs: Vec<(isize, isize)> = Vec::new();\n  for (i, j) in l.iter().enumerate() {\n    if i > j {\n      continue;\n    }\n    let sum = i + j;\n    if sum == 0 {\n      pairs.push((i, j));\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs: Vec<(isize, isize)> = Vec::new();\n  let mut i: isize = 0;\n  let mut j: isize = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    for j in l {\n      if j == 0 {\n        continue;\n      }\n      if i + j == 0 {\n        pairs.push((i, j));\n      }\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push_back(i);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in pairs {\n    for j in pairs {\n      if i == j {\n        continue;\n      }\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = vec![];\n  for (i, j) in l.enumerate() {\n    if i == j {\n      continue;\n    }\n    let sum = i + j;\n    if sum == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push_back(i);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in pairs {\n    for j in pairs {\n      if i == j {\n        continue;\n      }\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut seen = Vec::new();\n  let mut seen_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if seen_count > 0 {\n      pairs.push(i);\n      seen_count = 0;\n    }\n    if seen.contains(i) {\n      seen_count += 1;\n    } else {\n      seen.push(i);\n      seen_count = 1;\n    }\n  }\n  return seen_count > 1;",
    "  let mut pairs = Vec::new();\n  let mut seen = Vec::new();\n  for (let i = 0; i < l.len(); i++) {\n    let num = l[i];\n    if (num == 0) {\n      continue;\n    }\n    for (let j = 0; j < i; j++) {\n      if (l[j] == num) {\n        continue;\n      }\n      if (seen.contains(num - l[j])) {\n        return false;\n      }\n      seen.push(num - l[j]);\n      pairs.push(num - l[j]);\n    }\n  }\n  return true;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if l[i] + l[j] == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    for j in 0..i {\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n  }\n  return pairs;",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    if l[i] == 0 {\n      continue;\n    }\n    for j in 0..i {\n      if l[j] == 0 {\n        continue;\n      }\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len(); i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a + b == 0) {\n      count += 1;\n      pairs.push(a);\n      pairs.push(b);\n    }\n  }\n  return count >= 2;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len(); i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a + b == 0) {\n      pairs.push(a);\n      pairs.push(b);\n      count += 1;\n    }\n  }\n  return count == 2;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i == -1 {\n      count += 1;\n      continue;\n    }\n    if i == 1 {\n      count += 1;\n      continue;\n    }\n    if i == -2 {\n      count += 1;\n      continue;\n    }\n    if i == 2 {\n      count += 1;\n      continue;\n    }\n    if i == -3 {\n      count += 1;\n      continue;\n    }\n    if i == 3 {\n      count += 1;\n      continue;\n    }\n    if i == -4 {\n      count += 1;\n      continue;\n    }\n    if i == 4 {\n      count += 1;\n      continue;\n    }\n    if i == -5 {\n      count += 1;\n      continue;\n    }\n    if i == 5 {\n      count += 1;\n      continue;\n    }\n    if i == -6 {\n      count += 1;\n      continue;\n    }\n    if i == 6 {\n      count += 1;\n      continue;\n    }\n    if i == -7 {\n      count += 1;\n      continue;\n    }\n    if i == 7 {\n      count += 1;\n      continue;\n    }\n    if i == -8 {\n      count += 1;\n      continue;\n    }\n    if i == 8 {\n      count += 1;\n      continue;\n    }\n    if i == -9 {\n      count += 1;\n      continue;\n    }\n    if i == 9 {\n      count += 1;\n      continue;\n    }\n    if i == -10 {\n      count += 1;\n      continue;\n    }\n    if i == 10 {\n      count += 1;\n      continue;\n    }\n    if i == -11 {\n      count += 1;\n      continue;\n    }\n    if i == 11 {\n      count += 1;\n      continue;\n    }\n    if i == -12 {\n      count += 1;\n      continue;\n    }\n    ",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push(i);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in pairs {\n    for j in pairs {\n      if i == j {\n        continue;\n      }\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().zip(l.iter().rev()) {\n    if (j == 0) {\n      continue;\n    }\n    if (pairs.contains(i + j)) {\n      return false;\n    }\n    pairs.push(i + j);\n  }\n  return true;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i == -1 {\n      return false;\n    }\n    if i % 2 == 0 {\n      pairs.push(i);\n    }\n  }\n  return true;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push(i);\n    }\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in pairs {\n    for j in pairs {\n      if i == j {\n        continue;\n      }\n      if i + j == 0 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = false;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    for j in l {\n      if i + j == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = false;\n  for i in l {\n    for j in l {\n      if i + j == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len(); i++) {\n    let num = l[i];\n    if (num == 0) {\n      continue;\n    }\n    if (count > 0) {\n      pairs.push(num);\n    }\n    count++;\n  }\n  return count > 1;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if (i + j) % 2 == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (i, j) in l.iter().zip(l.iter().rev()) {\n    if (j.is_neg()) {\n      continue;\n    }\n    if (j.is_zero()) {\n      return false;\n    }\n    pairs.push(i, j);\n  }\n  return true;",
    "  let count = 0;\n  for i in 0..l.len - 1 {\n    if l[i] == 0 {\n      count += 1;\n      if count > 1 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  for (let i = 0; i < l.len(); i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a + b == 0) {\n      pairs.push(a);\n      pairs.push(b);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i % 2 == 0 {\n      continue;\n    }\n    if i in pairs {\n      continue;\n    }\n    pairs_count += 1;\n    pairs.push(i);\n  }\n  return pairs_count == 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  let mut i = 0;\n  for (i; i < l.len; i += 1) {\n    if (l[i] == 0) {\n      continue;\n    }\n    if (pairs.len == 0) {\n      pairs = vec![l[i]];\n      continue;\n    }\n    if (pairs[0] == l[i]) {\n      continue;\n    }\n    return true;\n  }\n  return false;",
    "  let mut pairs: Vec<(isize, isize)> = Vec::new();\n  let mut i: isize = 0;\n  let mut j: isize = 0;\n  let mut sum: isize = 0;\n  let mut count: isize = 0;\n  let mut found: bool = false;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    sum += i;\n    if found {\n      continue;\n    }\n    if sum == 0 {\n      found = true;\n      continue;\n    }\n    pairs.push((i, sum));\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    sum -= i;\n    if found {\n      continue;\n    }\n    if sum == 0 {\n      found = true;\n      continue;\n    }\n    pairs.push((i, sum));\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    sum -= i;\n    if found {\n      continue;\n    }\n    if sum == 0 {\n      found = true;\n      continue;\n    }\n    pairs.push((i, sum));\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    sum += i;\n    if found {\n      continue;\n    }\n    if sum == 0 {\n      found = true;\n      continue;\n    }\n    pairs.push((i, sum));\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    sum += i;\n    if found {\n      continue;\n    }\n    if sum == 0 {\n      found = true;\n      continue;\n    }\n    pairs.push((i, sum));\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    sum -= i;\n    if found {\n      continue;\n    }\n    if sum == 0 {\n      found = true;\n      continue;\n    }\n    pairs.push((i, sum));\n  }",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len(); i++) {\n    if (l[i] == 0) {\n      count += 1;\n      continue;\n    }\n    if (count > 0) {\n      pairs.push(i);\n      count = 0;\n    }\n  }\n  if (count > 0) {\n    pairs.push(l.len());\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    for j in 0..i {\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (let i = 0; i < l.len(); i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a + b == 0) {\n      pairs.push(a);\n      pairs.push(b);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum - i == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let count = 0;\n  for i in 0..l.len - 1 {\n    if l[i] == 0 {\n      count += 1;\n      if count == 2 {\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      pairs.push(i);\n      pairs_count += 1;\n    }\n  }\n  if pairs_count == 0 {\n    return false;\n  }\n  if pairs_count == 1 {\n    return true;\n  }\n  let mut pairs_sum = 0;\n  for i in pairs {\n    pairs_sum += i;\n  }\n  return pairs_sum == 0;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len(); i++) {\n    if (l[i] == 0) {\n      count += 1;\n      continue;\n    }\n    if (count > 0) {\n      pairs.push(i - count);\n      count = 0;\n    }\n  }\n  if (count > 0) {\n    pairs.push(l.len() - count);\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = Vec::new();\n  for (let i = 0; i < l.len(); i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a == b) {\n      continue;\n    }\n    if (a + b == 0) {\n      pairs.push(a);\n      pairs.push(b);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if l[i] + l[j] == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if i == j {\n      continue;\n    }\n    if (i + j) % 2 == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum - i == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum - i == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let mut pairs = vec![];\n  for (i, j) in l.iter().enumerate() {\n    if (j == 0) {\n      continue;\n    }\n    if (j == i + 1) {\n      continue;\n    }\n    pairs.push(vec![i, j]);\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == sum {\n      return true;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (let i = 0; i < l.len(); i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a + b == 0) {\n      pairs.push(a);\n      pairs.push(b);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (i, j) in l.iter().enumerate() {\n    if (j == 0) {\n      continue;\n    }\n    if (pairs.contains(i) || pairs.contains(j - i)) {\n      return false;\n    }\n    pairs.push(i);\n    pairs.push(j - i);\n  }\n  return true;",
    "  if len(l) == 0 {\n    return false\n  }\n  let sum = 0\n  for i in l {\n    sum += i\n  }\n  return sum == 0",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    let mut j = i + 1;\n    while j < l.len() && l[i] + l[j] == 0 {\n      j += 1;\n    }\n    if j - i > 1 {\n      pairs = true;\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i == -i {\n      pairs.push(i, i);\n    } else {\n      pairs.push(i, -i);\n    }\n  }\n  let mut count = 0;\n  for i in pairs {\n    if i.x == i.y {\n      count += 1;\n    }\n  }\n  return count == 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (let i = 0; i < l.len(); i += 2) {\n    let a = l[i];\n    let b = l[i + 1];\n    if (a + b == 0) {\n      pairs.push(a);\n      pairs.push(b);\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum % i != 0 {\n      return false;\n    }\n  }\n  return true;",
    "  let count = 0;\n  for i in 0..l.len - 1 {\n    if l[i] + l[i + 1] == 0 {\n      count += 1;\n    }\n  }\n  return count >= 2;",
    "  let mut pairs = Vec::new();\n  let mut seen = Vec::new();\n  for i in l {\n    if !seen.contains(i) {\n      pairs.push(i);\n      seen.push(i);\n    }\n  }\n  return !pairs.is_empty() && pairs.length() == 2;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = vec![];\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      i = -i;\n    }\n    if i == 0 {\n      continue;\n    }\n    if i % 2 == 0 {\n      continue;\n    }\n    pairs.push_back(i);\n  }\n  if len(pairs) == 0 {\n    return false;\n  }\n  for i in 0..len(pairs) - 1 {\n    if pairs[i] + pairs[i + 1] == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut sum = 0;\n  for (i = 0; i < l.len(); i++) {\n    sum = l[i];\n    for (j = i + 1; j < l.len(); j++) {\n      if (sum == l[j]) {\n        pairs.push_back(i);\n        pairs.push_back(j);\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    for j in 0..i {\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len; i++) {\n    let num = l[i];\n    if (num == 0) {\n      continue;\n    }\n    if (pairs.len > 0 && pairs[0] == num) {\n      continue;\n    }\n    pairs.push(num);\n    count++;\n  }\n  return count > 1;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum - i == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let mut pairs = false;\n  for i in 0..l.len() {\n    for j in 0..i {\n      if l[i] + l[j] == 0 {\n        pairs = true;\n        break;\n      }\n    }\n    if pairs {\n      break;\n    }\n  }\n  return pairs;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (let i = 0; i < l.len(); i++) {\n    for (let j = i + 1; j < l.len(); j++) {\n      let a = l[i];\n      let b = l[j];\n      if (a + b == 0) {\n        pairs.push_back(a);\n        pairs.push_back(b);\n      }\n    }\n  }\n  return !pairs.is_empty();",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs: Vec<(isize, isize)> = Vec::new();\n  let mut count: isize = 0;\n  for (let i = 0; i < l.len(); i++) {\n    let num: isize = l[i];\n    if (num == 0) {\n      continue;\n    }\n    for (let j = i + 1; j < l.len(); j++) {\n      let num2: isize = l[j];\n      if (num + num2 == 0) {\n        pairs.push((i, j));\n        count += 1;\n      }\n    }\n  }\n  return count > 1;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  let mut pairs_sum_count = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i < 0 {\n      pairs_sum_count += 1;\n      pairs_sum += i;\n    } else {\n      pairs_count += 1;\n      pairs.push(i);\n    }\n  }\n  if pairs_count == 0 {\n    return false;\n  }\n  if pairs_sum_count == 0 {\n    return true;\n  }\n  if pairs_sum_count == 1 {\n    return false;\n  }\n  if pairs_sum_count == 2 {\n    return true;\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  for (i = 0; i < l.len(); i++) {\n    if (l[i] == 0) {\n      continue;\n    }\n    if (pairs.len() == 2) {\n      return false;\n    }\n    pairs.push(l[i]);\n  }\n  return true;",
    "  let mut pairs = Vec::new();\n  let mut pairs_count = 0;\n  let mut pairs_sum = 0;\n  let mut pairs_sum_count = 0;\n  for (let i = 0; i < l.len(); i++) {\n    let num = l[i];\n    if (num == 0) {\n      continue;\n    }\n    if (pairs_sum_count == 0) {\n      pairs_sum = num;\n      pairs_sum_count = 1;\n    } else if (pairs_sum == num) {\n      pairs_sum_count += 1;\n    } else {\n      pairs.push(pairs_sum_count);\n      pairs_sum = num;\n      pairs_sum_count = 1;\n    }\n  }\n  if (pairs_sum_count == 0) {\n    return false;\n  }\n  pairs.push(pairs_sum_count);\n  return true;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  if sum == 0 {\n    return false;\n  }\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if sum - i == 0 {\n      return true;\n    }\n  }\n  return false;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let sum = 0;\n  for i in l {\n    sum += i;\n  }\n  return sum == 0;",
    "  let mut pairs = Vec::new();\n  for (i, j) in l.iter().zip(l.iter().rev()) {\n    if i == j {\n      continue;\n    }\n    if i + j == 0 {\n      pairs.push(i, j);\n    }\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = Vec::new();\n  let mut count = 0;\n  for (let i = 0; i < l.len(); i++) {\n    if (l[i] == 0) {\n      count++;\n      continue;\n    }\n    if (count > 0) {\n      pairs.push(i - count);\n      count = 0;\n    }\n  }\n  if (count > 0) {\n    pairs.push(l.len() - count);\n  }\n  return !pairs.is_empty();",
    "  let mut pairs = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut sum = 0;\n  for (i = 0; i < l.len(); i++) {\n    sum = l[i];\n    for (j = i + 1; j < l.len(); j++) {\n      if (sum == l[j]) {\n        pairs.push_back(i);\n        pairs.push_back(j);\n        return true;\n      }\n    }\n  }\n  return false;",
    "  let mut pairs = Vec::new();\n  let mut pairs_sum = 0;\n  let mut pairs_sum_prev = 0;\n  let mut pairs_sum_prev_prev = 0;\n  for i in l {\n    if i == 0 {\n      continue;\n    }\n    if i == -i {\n      pairs_sum += i;\n      pairs.push(i);\n      continue;\n    }\n    if i == pairs_sum_prev {\n      pairs_sum_prev_prev = pairs_sum_prev;\n      pairs_sum_prev = pairs_sum;\n      pairs_sum = i;\n      continue;\n    }\n    if i == pairs_sum_prev_prev {\n      pairs_sum_prev_prev = pairs_sum_prev;\n      pairs_sum_prev = i;\n      continue;\n    }\n    pairs.push(i);\n  }\n  return pairs_sum_prev_prev != 0 && pairs_sum_prev != 0 && pairs_sum != 0;",
    "  let mut pairs = Vec::new();\n  let mut seen = Vec::new();\n  for i in l {\n    if !seen.contains(&i) {\n      pairs.push(i);\n      seen.push(&i);\n    }\n  }\n  return !pairs.is_empty();"
  ],
  "stop_tokens": [
    "\n}"
  ]
}