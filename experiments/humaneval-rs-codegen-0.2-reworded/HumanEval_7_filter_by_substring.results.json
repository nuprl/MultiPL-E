{
  "name": "HumanEval_7_filter_by_substring",
  "language": "rs",
  "prompt": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n        }\n    }\n    return out;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpdvwtlfwo.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n        }\n    }\n    return out;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpdvwtlfwo.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n        }\n    }\n    return out;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpdvwtlfwo.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut out = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            out.push(s);\n        }\n    }\n    return out;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpdvwtlfwo.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for string in strings {\n        if string.contains(substring) {\n            result.push(string);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpmx5coip9.rs:9:28\n     |\n9    |         if string.contains(substring) {\n     |                   -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |                   |\n     |                   required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if string.contains(&substring) {\n     |                            +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.contains(substring) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpjrivufkh.rs:9:23\n     |\n9    |         if s.contains(substring) {\n     |              -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |         if s.contains(&substring) {\n     |                       +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.contains(substring) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp7mcwhsq8.rs:9:19\n     |\n9    |     if s.contains(substring) {\n     |          -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if s.contains(&substring) {\n     |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that contain given substring\n/// >>> filter_by_substring(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_substring(vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"bacd\"), String::from(\"array\")]\nfn filter_by_substring(strings: Vec<String>, substring: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.contains(substring) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_substring;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"aaaxxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xx\")), vec![String::from(\"xxx\"), String::from(\"aaaxxy\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n    assert_eq!(candidate(vec![String::from(\"grunt\"), String::from(\"trumpet\"), String::from(\"prune\"), String::from(\"gruesome\")], String::from(\"run\")), vec![String::from(\"grunt\"), String::from(\"prune\")]);\n}\n",
      "timestamp": 1664292904,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpojmebzt3.rs:9:24\n     |\n9    |     if string.contains(substring) {\n     |               -------- ^^^^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::contains`\nhelp: consider borrowing here\n     |\n9    |     if string.contains(&substring) {\n     |                        +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}