{
  "name": "HumanEval_90_next_smallest",
  "language": "rs",
  "prompt": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi39k2pye.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpi39k2pye.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpi39k2pye.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpi39k2pye.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi39k2pye.rs:21:12\n   |\n21 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi39k2pye.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi39k2pye.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7im6fxbz.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp7im6fxbz.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp7im6fxbz.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7im6fxbz.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7im6fxbz.rs:21:12\n   |\n21 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7im6fxbz.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7im6fxbz.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      return Some(i)\n    }\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4w94g5r5.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4w94g5r5.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp4w94g5r5.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4w94g5r5.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4w94g5r5.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4w94g5r5.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4w94g5r5.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp4w94g5r5.rs:25:10\n   |\n25 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let lst_len = lst.len();\n  if lst_len == 0 {\n    return None;\n  }\n  let min_index = 0;\n  let min_value = lst[0];\n  for i in 1..lst_len {\n    if lst[i] < min_value {\n      min_value = lst[i];\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzv32z_r0.rs:28:15\n   |\n28 |   return Some(min_index);\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n28 |   return Some(min_index.try_into().unwrap());\n   |                        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxju31xij.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxju31xij.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxju31xij.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxju31xij.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:18:16\n   |\n18 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min_index = 0\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9clkixqp.rs:16:20\n   |\n16 |   let min_index = 0\n   |                    ^ help: add `;` here\n17 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9clkixqp.rs:17:25\n   |\n17 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9clkixqp.rs:20:20\n   |\n20 |       min_value = i\n   |                    ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9clkixqp.rs:26:20\n   |\n26 |       min_value = i\n   |                    ^ help: add `;` here\n27 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9clkixqp.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9clkixqp.rs:19:12\n   |\n19 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9clkixqp.rs:20:19\n   |\n17 |   let min_value = lst[0]\n   |                   ------ expected due to this value\n...\n20 |       min_value = i\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min_value = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9clkixqp.rs:21:19\n   |\n16 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0308]:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcckbyqai.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcckbyqai.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpcckbyqai.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcckbyqai.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcckbyqai.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcckbyqai.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprjvg79kl.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprjvg79kl.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmprjvg79kl.rs:21:19\n   |\n21 |       min = lst[i]\n   |                   ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmprjvg79kl.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmprjvg79kl.rs:19:19\n   |\n19 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n19 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprjvg79kl.rs:30:15\n   |\n30 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n30 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  for i in lst.iter() {\n    if i < min {\n      min = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      continue\n    }\n    return Some(i)\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy43cxsz3.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpy43cxsz3.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:18:12\n   |\n18 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:19:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n19 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |       min = *i\n   |             +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy43cxsz3.rs:23:10\n   |\n23 |     if i == min {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:26:17\n   |\n26 |     return Some(i)\n   |                 ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |     return Some(*i)\n   |                 +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min_index = 0\n  let min_value = lst[0]\n  for i in 1..lst.len {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9by6az9u.rs:16:20\n   |\n16 |   let min_index = 0\n   |                    ^ help: add `;` here\n17 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9by6az9u.rs:17:25\n   |\n17 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9by6az9u.rs:20:25\n   |\n20 |       min_value = lst[i]\n   |                         ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9by6az9u.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9by6az9u.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9by6az9u.rs:27:15\n   |\n27 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n27 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzqncijr7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzqncijr7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzqncijr7.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzqncijr7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpzqncijr7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzqncijr7.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzqncijr7.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq76osslb.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq76osslb.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpq76osslb.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpq76osslb.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxju31xij.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxju31xij.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxju31xij.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxju31xij.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:18:16\n   |\n18 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzyf_s4mz.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzyf_s4mz.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzyf_s4mz.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzyf_s4mz.rs:29:14\n   |\n29 |       min = i\n   |              ^ help: add `;` here\n30 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzyf_s4mz.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyf_s4mz.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyf_s4mz.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyf_s4mz.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpzyf_s4mz.rs:25:10\n   |\n25 |     if i == ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if lst.len == 1 {\n    return Some(min_index)\n  }\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjxcd6vam.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjxcd6vam.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpjxcd6vam.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpjxcd6vam.rs:32:14\n   |\n32 |       min = i\n   |              ^ help: add `;` here\n33 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjxcd6vam.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjxcd6vam.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjxcd6vam.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjxcd6vam.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpjxcd6vam.rs:26:10\n   |\n26 |   if lst.len ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9d1u6pab.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9d1u6pab.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9d1u6pab.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9d1u6pab.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9d1u6pab.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9d1u6pab.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9d1u6pab.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp9d1u6pab.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i > min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:16:12\n   |\n16 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp04cuou4x.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp04cuou4x.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp04cuou4x.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp04cuou4x.rs:32:14\n   |\n32 |       min = i\n   |              ^ help: add `;` here\n33 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp04cuou4x.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04cuou4x.rs:20:12\n   |\n20 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04cuou4x.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04cuou4x.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp04cuou4x.rs:27:10\n   |\n27 |     if i == ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxju31xij.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxju31xij.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxju31xij.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxju31xij.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:18:16\n   |\n18 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n    }\n  }\n  for i in 0..lst.len {\n    if lst[i] == min {\n      return Some(i + 1)\n    }\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp1brpcj0e.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp1brpcj0e.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp1brpcj0e.rs:17:19\n   |\n17 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n17 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp1brpcj0e.rs:22:19\n   |\n22 |   for i in 0..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   for i in 0..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1brpcj0e.rs:24:19\n   |\n24 |       return Some(i + 1)\n   |                   ^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |       return Some((i + 1).try_into().unwrap())\n   |                   +     +++++++++++++++++++++\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp952yug4t.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp952yug4t.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp952yug4t.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp952yug4t.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmp952yug4t.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp952yug4t.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  let second_min = lst.get(min_index - 1)\n  for i in lst.iter() {\n    if i < second_min {\n      second_min = i\n    }\n  }\n\n  return second_min\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcsgbbz7z.rs:17:21\n   |\n17 |   let min = lst.head\n   |                     ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcsgbbz7z.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpcsgbbz7z.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcsgbbz7z.rs:30:42\n   |\n30 |   let second_min = lst.get(min_index - 1)\n   |                                          ^ help: add `;` here\n31 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpcsgbbz7z.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpcsgbbz7z.rs:17:17\n   |\n17 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsgbbz7z.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsgbbz7z.rs:32:12\n   |\n32 |     if i < second_min {\n   |            ^^^^^^^^^^ expected `&isize`, found enum `Option`\n   |\n   = note: expected reference `&isize`\n                   found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcsgbbz7z.rs:33:20\n   |\n30 |   let second_min = lst.get(min_index - 1)\n   |                    ---------------------- expected due to this",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  for i in lst.iter() {\n    if i == min_index {\n      continue;\n    }\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp_baifbuu.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_baifbuu.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_baifbuu.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp_baifbuu.rs:25:10\n   |\n25 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_baifbuu.rs:28:12\n   |\n28 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_baifbuu.rs:29:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n29 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n29 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_baifbuu.rs:30:19\n   |\n14 |   let min_index = 0;\n   |                   - expected d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4q41dimj.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4q41dimj.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp4q41dimj.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4q41dimj.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4q41dimj.rs:21:12\n   |\n21 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4q41dimj.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4q41dimj.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp4q41dimj.rs:32:10\n   |\n32 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if len(lst) == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp968hhb83.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp968hhb83.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp968hhb83.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp968hhb83.rs:13:6\n   |\n13 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp968hhb83.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp968hhb83.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp968hhb83.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if len(lst) == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..len(lst) {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpic2rqbl7.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpic2rqbl7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..len(lst) {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpic2rqbl7.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpic2rqbl7.rs:13:6\n   |\n13 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpic2rqbl7.rs:18:15\n   |\n18 |   for i in 1..len(lst) {\n   |               ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpic2rqbl7.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzyf_s4mz.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzyf_s4mz.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzyf_s4mz.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzyf_s4mz.rs:29:14\n   |\n29 |       min = i\n   |              ^ help: add `;` here\n30 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzyf_s4mz.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyf_s4mz.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyf_s4mz.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzyf_s4mz.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpzyf_s4mz.rs:25:10\n   |\n25 |     if i == ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzqncijr7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzqncijr7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzqncijr7.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzqncijr7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpzqncijr7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzqncijr7.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzqncijr7.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min_idx = 0\n  let min_val = lst[0]\n  for i in 1..lst.len {\n    if lst[i] < min_val {\n      min_idx = i\n      min_val = lst[i]\n    }\n  }\n  if min_idx == 0 {\n    return None\n  }\n  return Some(min_idx)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprm2g22uv.rs:16:18\n   |\n16 |   let min_idx = 0\n   |                  ^ help: add `;` here\n17 |   let min_val = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprm2g22uv.rs:17:23\n   |\n17 |   let min_val = lst[0]\n   |                       ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_val`\n  --> /tmp/tmprm2g22uv.rs:20:18\n   |\n20 |       min_idx = i\n   |                  ^ help: add `;` here\n21 |       min_val = lst[i]\n   |       ------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmprm2g22uv.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmprm2g22uv.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprm2g22uv.rs:27:15\n   |\n27 |   return Some(min_idx)\n   |               ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n27 |   return Some(min_idx.try_into().unwrap())\n   |                      ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp_b3_tsta.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp_b3_tsta.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp_b3_tsta.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_b3_tsta.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_b3_tsta.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_b3_tsta.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in 1..lst.len() {\n    if lst[i] < min {\n      min = lst[i];\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpwouolfn2.rs:24:15\n   |\n24 |   return Some(min_index);\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap());\n   |                        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if len(lst) == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnu5r_qq1.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnu5r_qq1.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpnu5r_qq1.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpnu5r_qq1.rs:28:14\n   |\n28 |       min = i\n   |              ^ help: add `;` here\n29 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnu5r_qq1.rs:13:6\n   |\n13 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnu5r_qq1.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnu5r_qq1.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnu5r_qq1.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnu5r_qq1.rs:27:12\n   |\n27 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min_index = 0\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9clkixqp.rs:16:20\n   |\n16 |   let min_index = 0\n   |                    ^ help: add `;` here\n17 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9clkixqp.rs:17:25\n   |\n17 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9clkixqp.rs:20:20\n   |\n20 |       min_value = i\n   |                    ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9clkixqp.rs:26:20\n   |\n26 |       min_value = i\n   |                    ^ help: add `;` here\n27 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9clkixqp.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9clkixqp.rs:19:12\n   |\n19 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9clkixqp.rs:20:19\n   |\n17 |   let min_value = lst[0]\n   |                   ------ expected due to this value\n...\n20 |       min_value = i\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min_value = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9clkixqp.rs:21:19\n   |\n16 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0308]:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if (i < min) {\n      min = i;\n      min_index = i;\n    }\n  }\n  if (min_index == 0) {\n    return None;\n  }\n  for i in lst.iter() {\n    if (i == min) {\n      return Some(min);\n    }\n  }\n  return None;\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqcr76d66.rs:16:8\n   |\n16 |     if (i < min) {\n   |        ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i < min) {\n16 +     if i < min {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqcr76d66.rs:21:6\n   |\n21 |   if (min_index == 0) {\n   |      ^              ^\n   |\nhelp: remove these parentheses\n   |\n21 -   if (min_index == 0) {\n21 +   if min_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqcr76d66.rs:25:8\n   |\n25 |     if (i == min) {\n   |        ^        ^\n   |\nhelp: remove these parentheses\n   |\n25 -     if (i == min) {\n25 +     if i == min {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqcr76d66.rs:16:13\n   |\n16 |     if (i < min) {\n   |             ^^^\n   |             |\n   |             expected `&isize`, found `isize`\n   |             help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqcr76d66.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqcr76d66.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpqcr76d66.rs:25:11\n   |\n25 |     if (i == min) {\n   |           ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i > min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:16:12\n   |\n16 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4q41dimj.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4q41dimj.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp4q41dimj.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4q41dimj.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4q41dimj.rs:21:12\n   |\n21 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4q41dimj.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4q41dimj.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp4q41dimj.rs:32:10\n   |\n32 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min_index = 0\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i < min_value && i != min_index {\n      min_value = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpgcldkdj5.rs:16:20\n   |\n16 |   let min_index = 0\n   |                    ^ help: add `;` here\n17 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpgcldkdj5.rs:17:25\n   |\n17 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpgcldkdj5.rs:20:20\n   |\n20 |       min_value = i\n   |                    ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpgcldkdj5.rs:26:20\n   |\n26 |       min_value = i\n   |                    ^ help: add `;` here\n27 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpgcldkdj5.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgcldkdj5.rs:19:12\n   |\n19 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgcldkdj5.rs:20:19\n   |\n17 |   let min_value = lst[0]\n   |                   ------ expected due to this value\n...\n20 |       min_value = i\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min_value = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgcldkdj5.rs:21:19\n   |\n16 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0308]:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == lst[0] {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi8kuif92.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpi8kuif92.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpi8kuif92.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpi8kuif92.rs:28:14\n   |\n28 |       min = i\n   |              ^ help: add `;` here\n29 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpi8kuif92.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi8kuif92.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi8kuif92.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi8kuif92.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi8kuif92.rs:27:12\n   |\n27 |     if i < min {\n   |            ^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzqncijr7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzqncijr7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzqncijr7.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzqncijr7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpzqncijr7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpzqncijr7.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzqncijr7.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst.head()\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpod8_dkzo.rs:16:23\n   |\n16 |   let min = lst.head()\n   |                       ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpod8_dkzo.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpod8_dkzo.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0599]: no method named `head` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpod8_dkzo.rs:16:17\n   |\n16 |   let min = lst.head()\n   |                 ^^^^ method not found in `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpod8_dkzo.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in 1..lst.len() {\n    if lst[i] < min {\n      min = lst[i];\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpwouolfn2.rs:24:15\n   |\n24 |   return Some(min_index);\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap());\n   |                        ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxju31xij.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxju31xij.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxju31xij.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxju31xij.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:18:16\n   |\n18 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj890gt67.rs:17:21\n   |\n17 |   let min = lst.head\n   |                     ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpj890gt67.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpj890gt67.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpj890gt67.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpj890gt67.rs:17:17\n   |\n17 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpj890gt67.rs:19:16\n   |\n19 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst.head\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnh6pjgv3.rs:17:21\n   |\n17 |   let min = lst.head\n   |                     ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnh6pjgv3.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpnh6pjgv3.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnh6pjgv3.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpnh6pjgv3.rs:17:17\n   |\n17 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnh6pjgv3.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  let second_min = lst[min_index]\n  let second_min_index = min_index\n  for i in lst.iter() {\n    if i < second_min {\n      second_min = i\n      second_min_index = i\n    }\n  }\n\n  if second_min_index == min_index {\n    return None\n  }\n\n  return second_min\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp86fu91au.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp86fu91au.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp86fu91au.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp86fu91au.rs:30:34\n   |\n30 |   let second_min = lst[min_index]\n   |                                  ^ help: add `;` here\n31 |   let second_min_index = min_index\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp86fu91au.rs:31:35\n   |\n31 |   let second_min_index = min_index\n   |                                   ^ help: add `;` here\n32 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `second_min_index`\n  --> /tmp/tmp86fu91au.rs:34:21\n   |\n34 |       second_min = i\n   |                     ^ help: add `;` here\n35 |       second_min_index = i\n   |       ---------------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp86fu91au.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86fu91au.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86fu91au.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcckbyqai.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcckbyqai.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpcckbyqai.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcckbyqai.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcckbyqai.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcckbyqai.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq76osslb.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq76osslb.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpq76osslb.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpq76osslb.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i > min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:16:12\n   |\n16 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min_index = 0\n  let min_value = lst[0]\n\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  for i in lst.iter() {\n    if i == min_value {\n      continue\n    }\n\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwvr_xz4e.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwvr_xz4e.rs:18:25\n   |\n18 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpwvr_xz4e.rs:22:20\n   |\n22 |       min_value = i\n   |                    ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpwvr_xz4e.rs:37:20\n   |\n37 |       min_value = i\n   |                    ^ help: add `;` here\n38 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwvr_xz4e.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwvr_xz4e.rs:21:12\n   |\n21 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwvr_xz4e.rs:22:19\n   |\n18 |   let min_value = lst[0]\n   |                   ------ expected due to this value\n...\n22 |       min_value = i\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_value = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwvr_xz4e.rs:23:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror[E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxb5ng0w0.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxb5ng0w0.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxb5ng0w0.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpxb5ng0w0.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxb5ng0w0.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpi39k2pye.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpi39k2pye.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpi39k2pye.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpi39k2pye.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi39k2pye.rs:21:12\n   |\n21 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi39k2pye.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi39k2pye.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4swmtwf0.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp4swmtwf0.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp4swmtwf0.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp4swmtwf0.rs:29:14\n   |\n29 |       min = i\n   |              ^ help: add `;` here\n30 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4swmtwf0.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4swmtwf0.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4swmtwf0.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp4swmtwf0.rs:25:10\n   |\n25 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n     ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpsq3nsono.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsq3nsono.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpsq3nsono.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpsq3nsono.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsq3nsono.rs:21:12\n   |\n21 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsq3nsono.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsq3nsono.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  for i in lst.iter() {\n    if i < min {\n      min = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      continue\n    }\n    return Some(i)\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy43cxsz3.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpy43cxsz3.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:18:12\n   |\n18 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:19:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n19 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |       min = *i\n   |             +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy43cxsz3.rs:23:10\n   |\n23 |     if i == min {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:26:17\n   |\n26 |     return Some(i)\n   |                 ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |     return Some(*i)\n   |                 +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if lst.len == 1 {\n    return min\n  }\n\n  let second_min = lst[min_index + 1]\n  for i in lst.iter() {\n    if i < second_min {\n      second_min = i\n    }\n  }\n\n  return second_min\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpva6ol5as.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpva6ol5as.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpva6ol5as.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpva6ol5as.rs:30:38\n   |\n30 |   let second_min = lst[min_index + 1]\n   |                                      ^ help: add `;` here\n31 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpva6ol5as.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpva6ol5as.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpva6ol5as.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpva6ol5as.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpaavevc8d.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpaavevc8d.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpaavevc8d.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpaavevc8d.rs:28:14\n   |\n28 |       min = i\n   |              ^ help: add `;` here\n29 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaavevc8d.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaavevc8d.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaavevc8d.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaavevc8d.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpaavevc8d.rs:27:12\n   |\n27 |     if i < min {\n   |            ^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq76osslb.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq76osslb.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpq76osslb.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpq76osslb.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq76osslb.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i];\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpp4x2lqvk.rs:15:19\n   |\n15 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp4x2lqvk.rs:24:15\n   |\n24 |   return Some(min_index);\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap());\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index + 1 < lst.len() {\n    return Some(min_index + 1)\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5n12ca7c.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp5n12ca7c.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp5n12ca7c.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5n12ca7c.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5n12ca7c.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5n12ca7c.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5n12ca7c.rs:25:17\n   |\n25 |     return Some(min_index + 1)\n   |                 ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n25 |     return Some((min_index + 1).try_into().unwrap())\n   |                 +             +++++++++++++++++++++\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n\n  let min_index = 0\n  let min_value = lst[0]\n  for i in 1..lst.len() {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzls0dpty.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzls0dpty.rs:18:25\n   |\n18 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n19 |   for i in 1..lst.len() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpzls0dpty.rs:21:25\n   |\n21 |       min_value = lst[i]\n   |                         ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzls0dpty.rs:30:15\n   |\n30 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n30 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  for i in lst.iter() {\n    if i < min {\n      min = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min {\n      continue\n    }\n    return Some(i)\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpy43cxsz3.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpy43cxsz3.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:18:12\n   |\n18 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:19:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n19 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |       min = *i\n   |             +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy43cxsz3.rs:23:10\n   |\n23 |     if i == min {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy43cxsz3.rs:26:17\n   |\n26 |     return Some(i)\n   |                 ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |     return Some(*i)\n   |                 +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxju31xij.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxju31xij.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxju31xij.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxju31xij.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpxju31xij.rs:18:16\n   |\n18 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp04a_831w.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if len(lst) == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpznqzvbfr.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpznqzvbfr.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpznqzvbfr.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpznqzvbfr.rs:13:6\n   |\n13 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpznqzvbfr.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpznqzvbfr.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpznqzvbfr.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpaxhv4nwi.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpaxhv4nwi.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpaxhv4nwi.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpaxhv4nwi.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpaxhv4nwi.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpaxhv4nwi.rs:18:16\n   |\n18 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  for i in lst.iter() {\n    if i < min {\n      min = i;\n      min_index = i;\n    }\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpc7jpgb51.rs:16:12\n   |\n16 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7jpgb51.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7jpgb51.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7jpgb51.rs:25:12\n   |\n25 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7jpgb51.rs:26:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n26 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n26 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7jpgb51.rs:27:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n27 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min_index = 0\n  let min_value = lst[0]\n  for i in 1..lst.len {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9by6az9u.rs:16:20\n   |\n16 |   let min_index = 0\n   |                    ^ help: add `;` here\n17 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9by6az9u.rs:17:25\n   |\n17 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9by6az9u.rs:20:25\n   |\n20 |       min_value = lst[i]\n   |                         ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9by6az9u.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9by6az9u.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9by6az9u.rs:27:15\n   |\n27 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n27 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnameiao8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnameiao8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpnameiao8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpnameiao8.rs:26:14\n   |\n26 |       min = i\n   |              ^ help: add `;` here\n27 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnameiao8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnameiao8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnameiao8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnameiao8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnameiao8.rs:25:12\n   |\n25 |     if i < min {\n   |            ^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if (i < min) {\n      min = i;\n      min_index = i;\n    }\n  }\n  if (min_index == 0) {\n    return None;\n  }\n  for i in lst.iter() {\n    if (i == min_index) {\n      continue;\n    }\n    if (i < min) {\n      min = i;\n      min_index = i;\n    }\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx596pfyi.rs:16:8\n   |\n16 |     if (i < min) {\n   |        ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i < min) {\n16 +     if i < min {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx596pfyi.rs:21:6\n   |\n21 |   if (min_index == 0) {\n   |      ^              ^\n   |\nhelp: remove these parentheses\n   |\n21 -   if (min_index == 0) {\n21 +   if min_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx596pfyi.rs:25:8\n   |\n25 |     if (i == min_index) {\n   |        ^              ^\n   |\nhelp: remove these parentheses\n   |\n25 -     if (i == min_index) {\n25 +     if i == min_index {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx596pfyi.rs:28:8\n   |\n28 |     if (i < min) {\n   |        ^       ^\n   |\nhelp: remove these parentheses\n   |\n28 -     if (i < min) {\n28 +     if i < min {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx596pfyi.rs:16:13\n   |\n16 |     if (i < min) {\n   |             ^^^\n   |             |\n   |             expected `&isize`, found `isize`\n   |             help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx596pfyi.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx596pfyi.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpx596pfyi.rs:25:11\n   |\n25 |     if (i == min_index) {\n   |           ^^ ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n\n  let min_index = 0\n  let min_value = lst[0]\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2c6t9fev.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp2c6t9fev.rs:18:25\n   |\n18 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp2c6t9fev.rs:21:20\n   |\n21 |       min_value = i\n   |                    ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp2c6t9fev.rs:28:20\n   |\n28 |       min_value = i\n   |                    ^ help: add `;` here\n29 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2c6t9fev.rs:20:12\n   |\n20 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2c6t9fev.rs:21:19\n   |\n18 |   let min_value = lst[0]\n   |                   ------ expected due to this value\n...\n21 |       min_value = i\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_value = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2c6t9fev.rs:22:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2c6t9fev.rs:27:12\n   |\n27 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched ty",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if len(lst) == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..len(lst) {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpic2rqbl7.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpic2rqbl7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..len(lst) {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpic2rqbl7.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpic2rqbl7.rs:13:6\n   |\n13 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpic2rqbl7.rs:18:15\n   |\n18 |   for i in 1..len(lst) {\n   |               ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpic2rqbl7.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst.head\n  let min_index = 0\n  for i in lst.tail {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpo6m4qf8u.rs:17:21\n   |\n17 |   let min = lst.head\n   |                     ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo6m4qf8u.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.tail {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpo6m4qf8u.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpo6m4qf8u.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmpo6m4qf8u.rs:17:17\n   |\n17 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0609]: no field `tail` on type `Vec<isize>`\n  --> /tmp/tmpo6m4qf8u.rs:19:16\n   |\n19 |   for i in lst.tail {\n   |                ^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9fwxu5tf.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9fwxu5tf.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9fwxu5tf.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9fwxu5tf.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9fwxu5tf.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9fwxu5tf.rs:27:15\n   |\n27 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n27 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst.head\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmppn9m75t7.rs:16:21\n   |\n16 |   let min = lst.head\n   |                     ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmppn9m75t7.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmppn9m75t7.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmppn9m75t7.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0609]: no field `head` on type `Vec<isize>`\n  --> /tmp/tmppn9m75t7.rs:16:17\n   |\n16 |   let min = lst.head\n   |                 ^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppn9m75t7.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0609, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  if min_index == 0 {\n    return None\n  }\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuja5gvqc.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpuja5gvqc.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpuja5gvqc.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpuja5gvqc.rs:32:14\n   |\n32 |       min = i\n   |              ^ help: add `;` here\n33 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpuja5gvqc.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuja5gvqc.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuja5gvqc.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuja5gvqc.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuja5gvqc.rs:31:12\n   |\n31 |     if i < min {\n   |            ^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp34hzcqml.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp34hzcqml.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp34hzcqml.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp34hzcqml.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp34hzcqml.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp34hzcqml.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in 1..lst.len {\n    if lst[i] < min {\n      min = lst[i]\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9z4ai7l1.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9z4ai7l1.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9z4ai7l1.rs:20:19\n   |\n20 |       min = lst[i]\n   |                   ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9z4ai7l1.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9z4ai7l1.rs:24:15\n   |\n24 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n24 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min_index = 0\n  let min_value = lst[0]\n\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  if min_index != 0 {\n    return Some(min_index)\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqkwjzujf.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpqkwjzujf.rs:18:25\n   |\n18 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpqkwjzujf.rs:22:20\n   |\n22 |       min_value = i\n   |                    ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpqkwjzujf.rs:29:20\n   |\n29 |       min_value = i\n   |                    ^ help: add `;` here\n30 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqkwjzujf.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqkwjzujf.rs:21:12\n   |\n21 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqkwjzujf.rs:22:19\n   |\n18 |   let min_value = lst[0]\n   |                   ------ expected due to this value\n...\n22 |       min_value = i\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_value = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqkwjzujf.rs:23:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror[E",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      return Some(i)\n    }\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9d1u6pab.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9d1u6pab.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9d1u6pab.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9d1u6pab.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9d1u6pab.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9d1u6pab.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9d1u6pab.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmp9d1u6pab.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  for i in lst.iter() {\n    if i < min {\n      min = i\n    }\n  }\n  for i in lst.iter() {\n    if i < min {\n      return Some(i)\n    }\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpmo__1t56.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmo__1t56.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmo__1t56.rs:18:12\n   |\n18 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmo__1t56.rs:19:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n19 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmo__1t56.rs:23:12\n   |\n23 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmo__1t56.rs:24:19\n   |\n24 |       return Some(i)\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |       return Some(*i)\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpa47gvm14.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpa47gvm14.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpa47gvm14.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpa47gvm14.rs:29:14\n   |\n29 |       min = i\n   |              ^ help: add `;` here\n30 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa47gvm14.rs:21:12\n   |\n21 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa47gvm14.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa47gvm14.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa47gvm14.rs:28:12\n   |\n28 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa47gvm14.rs:29:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to th",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      return Some(i)\n    }\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmjun2820.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmjun2820.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpmjun2820.rs:21:14\n   |\n21 |       min = i\n   |              ^ help: add `;` here\n22 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpmjun2820.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmjun2820.rs:20:12\n   |\n20 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmjun2820.rs:21:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n21 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmjun2820.rs:22:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n22 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpmjun2820.rs:27:10\n   |\n27 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types impleme",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i > min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmph41hwdje.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmph41hwdje.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmph41hwdje.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmph41hwdje.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:19:12\n   |\n19 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph41hwdje.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if i > min {\n      min = i;\n      min_index = i;\n    }\n  }\n  if min_index == 0 {\n    return None;\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:16:12\n   |\n16 |     if i > min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnzpn8o14.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n\n  let min = lst[0]\n  let min_index = 0\n\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpytnsx7bw.rs:17:19\n   |\n17 |   let min = lst[0]\n   |                   ^ help: add `;` here\n18 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpytnsx7bw.rs:18:20\n   |\n18 |   let min_index = 0\n   |                    ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpytnsx7bw.rs:22:14\n   |\n22 |       min = i\n   |              ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpytnsx7bw.rs:21:12\n   |\n21 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpytnsx7bw.rs:22:13\n   |\n17 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n22 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpytnsx7bw.rs:23:19\n   |\n18 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min_index = 0\n  let min_value = lst[0]\n  for i in 1..lst.len {\n    if lst[i] < min_value {\n      min_value = lst[i]\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9by6az9u.rs:16:20\n   |\n16 |   let min_index = 0\n   |                    ^ help: add `;` here\n17 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9by6az9u.rs:17:25\n   |\n17 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n18 |   for i in 1..lst.len {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9by6az9u.rs:20:25\n   |\n20 |       min_value = lst[i]\n   |                         ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9by6az9u.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9by6az9u.rs:18:19\n   |\n18 |   for i in 1..lst.len {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n18 |   for i in 1..lst.len() {\n   |                      ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9by6az9u.rs:27:15\n   |\n27 |   return Some(min_index)\n   |               ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n27 |   return Some(min_index.try_into().unwrap())\n   |                        ++++++++++++++++++++\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len() == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  for i in lst.iter() {\n    if i == min_index {\n      continue\n    }\n    if i > min {\n      return Some(i)\n    }\n  }\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpo5xw0cvy.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpo5xw0cvy.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpo5xw0cvy.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo5xw0cvy.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo5xw0cvy.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo5xw0cvy.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpo5xw0cvy.rs:25:10\n   |\n25 |     if i == min_index {\n   |          ^^ no implementation for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo5xw0cvy.rs:28:12\n   |\n28 |  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  let min = lst[0];\n  let min_index = 0;\n  for i in lst.iter() {\n    if (i > min) {\n      min = i;\n      min_index = i;\n    }\n  }\n  if (min_index == 0) {\n    return None;\n  }\n  for i in lst.iter() {\n    if (i == min_index) {\n      continue;\n    }\n    if (i > min) {\n      min = i;\n      min_index = i;\n    }\n  }\n  return Some(min_index);\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpate1otga.rs:16:8\n   |\n16 |     if (i > min) {\n   |        ^       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (i > min) {\n16 +     if i > min {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpate1otga.rs:21:6\n   |\n21 |   if (min_index == 0) {\n   |      ^              ^\n   |\nhelp: remove these parentheses\n   |\n21 -   if (min_index == 0) {\n21 +   if min_index == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpate1otga.rs:25:8\n   |\n25 |     if (i == min_index) {\n   |        ^              ^\n   |\nhelp: remove these parentheses\n   |\n25 -     if (i == min_index) {\n25 +     if i == min_index {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpate1otga.rs:28:8\n   |\n28 |     if (i > min) {\n   |        ^       ^\n   |\nhelp: remove these parentheses\n   |\n28 -     if (i > min) {\n28 +     if i > min {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpate1otga.rs:16:13\n   |\n16 |     if (i > min) {\n   |             ^^^\n   |             |\n   |             expected `&isize`, found `isize`\n   |             help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpate1otga.rs:17:13\n   |\n13 |   let min = lst[0];\n   |             ------ expected due to this value\n...\n17 |       min = i;\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |       min = *i;\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpate1otga.rs:18:19\n   |\n14 |   let min_index = 0;\n   |                   - expected due to this value\n...\n18 |       min_index = i;\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n18 |       min_index = *i;\n   |                   +\n\nerror[E0277]: can't compare `&isize` with `{integer}`\n  --> /tmp/tmpate1otga.rs:25:11\n   |\n25 |     if (i == min_index) {\n   |           ^^ ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp9ekefgq8.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp9ekefgq8.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmp9ekefgq8.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9ekefgq8.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9ekefgq8.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n\n  let min_index = 0\n  let min_value = lst[0]\n\n  for i in lst.iter() {\n    if i < min_value {\n      min_value = i\n      min_index = i\n    }\n  }\n\n  if min_index + 1 < lst.len {\n    return Some(min_index + 1)\n  }\n\n  return None\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpx3ejs03j.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   let min_value = lst[0]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpx3ejs03j.rs:18:25\n   |\n18 |   let min_value = lst[0]\n   |                         ^ help: add `;` here\n19 | \n20 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpx3ejs03j.rs:22:20\n   |\n22 |       min_value = i\n   |                    ^ help: add `;` here\n23 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpx3ejs03j.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx3ejs03j.rs:21:12\n   |\n21 |     if i < min_value {\n   |            ^^^^^^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min_value`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx3ejs03j.rs:22:19\n   |\n18 |   let min_value = lst[0]\n   |                   ------ expected due to this value\n...\n22 |       min_value = i\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |       min_value = *i\n   |                   +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx3ejs03j.rs:23:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n23 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |       min_index = *i\n   |                   +\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpx3ejs03j.rs:27:26\n   |\n27 |   if min_index + 1 < lst.len {\n   |                          ^^^ private field\n   |\nhelp: a method `len` also exists, call",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// You are given a vector of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n/// Return None if there is no such element.\n/// >>> next_smallest(vec![1, 2, 3, 4, 5])\n/// Some(2)\n/// >>> next_smallest(vec![5, 1, 4, 3, 2])\n/// Some(2)\n/// >>> next_smallest(vec![])\n/// None\n/// >>> next_smallest(vec![1, 1])\n/// None\nfn next_smallest(lst: Vec<isize>) -> Option<isize> {\n  if lst.len == 0 {\n    return None\n  }\n  let min = lst[0]\n  let min_index = 0\n  for i in lst.iter() {\n    if i < min {\n      min = i\n      min_index = i\n    }\n  }\n  if min_index == 0 {\n    return None\n  }\n  return Some(min_index)\n}\n\nfn main() {\n    let candidate = next_smallest;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), Some(2));\n    assert_eq!(candidate(vec![5, 1, 4, 3, 2]), Some(2));\n    assert_eq!(candidate(Vec::<isize>::new()), None);\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 0]), Some(1));\n    assert_eq!(candidate(vec![1, 1]), None);\n    assert_eq!(candidate(vec![-35, 34, 12, -45]), Some(-35));\n}\n",
      "timestamp": 1664293056,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpxk5z6s9v.rs:16:19\n   |\n16 |   let min = lst[0]\n   |                   ^ help: add `;` here\n17 |   let min_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpxk5z6s9v.rs:17:20\n   |\n17 |   let min_index = 0\n   |                    ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror: expected `;`, found `min_index`\n  --> /tmp/tmpxk5z6s9v.rs:20:14\n   |\n20 |       min = i\n   |              ^ help: add `;` here\n21 |       min_index = i\n   |       --------- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxk5z6s9v.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:19:12\n   |\n19 |     if i < min {\n   |            ^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:20:13\n   |\n16 |   let min = lst[0]\n   |             ------ expected due to this value\n...\n20 |       min = i\n   |             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |       min = *i\n   |             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxk5z6s9v.rs:21:19\n   |\n17 |   let min_index = 0\n   |                   - expected due to this value\n...\n21 |       min_index = i\n   |                   ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |       min_index = *i\n   |                   +\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}