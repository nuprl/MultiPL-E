{
  "name": "HumanEval_104_unique_digits",
  "language": "rs",
  "prompt": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  while i < x.len() {\n    if x[i] % 2 == 0 {\n      i += 1;\n      continue;\n    }\n    ret.push(x[i]);\n    i += 1;\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpu28__6vv.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in x.iter() {\n        if i % 2 == 0 {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp8027tvtz.rs:18:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return result;\n   |            ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpszv7vovg.rs:23:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n23 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i as isize;\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0606]: casting `&isize` as `isize` is invalid\n  --> /tmp/tmpkoh_ykdm.rs:12:15\n   |\n12 |     let num = i as isize;\n   |               -^^^^^^^^^\n   |               |\n   |               cannot cast `&isize` as `isize`\n   |               help: dereference the expression: `*i`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0606`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if (digit % 2 == 0) {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    if (odd_count > 0) {\n      result.push(odd_digits[odd_index]);\n      odd_index += 1;\n      odd_count -= 1;\n    } else {\n      result.push(i);\n    }\n  }\n  for i in odd_digits.iter() {\n    if (even_count > 0) {\n      result.push(even_digits[even_index]);\n      even_index += 1;\n      even_count -= 1;\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpul376uf4.rs:19:8\n   |\n19 |     if (digit % 2 == 0) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (digit % 2 == 0) {\n19 +     if digit % 2 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpul376uf4.rs:28:8\n   |\n28 |     if (odd_count > 0) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n28 -     if (odd_count > 0) {\n28 +     if odd_count > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpul376uf4.rs:37:8\n   |\n37 |     if (even_count > 0) {\n   |        ^              ^\n   |\nhelp: remove these parentheses\n   |\n37 -     if (even_count > 0) {\n37 +     if even_count > 0 {\n   | \n\nerror[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmpul376uf4.rs:18:19\n   |\n18 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpul376uf4.rs:33:19\n   |\n33 |       result.push(i);\n   |                   ^- help: try using a conversion method: `.to_string()`\n   |                   |\n   |                   cyclic type of infinite size\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpul376uf4.rs:42:19\n   |\n42 |       result.push(i);\n   |                   ^- help: try using a conversion method: `.to_string()`\n   |                   |\n   |                   cyclic type of infinite size\n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for xi in x {\n    if xi % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(xi);\n      }\n    }\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpt8rqi7xu.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      even_digits.push(i);\n    } else {\n      result.push(i);\n    }\n  }\n  result.concat(even_digits);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: the method `concat` exists for struct `Vec<isize>`, but its trait bounds were not satisfied\n  --> /tmp/tmpvymb8gp1.rs:19:10\n   |\n19 |   result.concat(even_digits);\n   |          ^^^^^^ method cannot be called on `Vec<isize>` due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n           `[isize]: Concat<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      even_digits.push(num);\n      even_count += 1;\n    } else {\n      odd_digits.push(num);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    for j in odd_digits.iter() {\n      result.push(i * 10 + j);\n    }\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpbgxfad2g.rs:16:17\n   |\n16 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbgxfad2g.rs:34:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n34 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp5s_hok0i.rs:53:27\n   |\n53 |   let mut even_digit_index\n   |                           ^ help: add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5s_hok0i.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push_back(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmporrtstg9.rs:15:7\n   |\n15 |     y.push_back(i);\n   |       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = x.map(|x| x % 2).filter(|x| x == 0).sort();\n  y.unshift(0);\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpbguhgmky.rs:10:13\n    |\n10  |     let y = x.map(|x| x % 2).filter(|x| x == 0).sort();\n    |               ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp1c89qwcm.rs:54:14\n   |\n54 |   let mut odd\n   |              ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1c89qwcm.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_index = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even_index += 1;\n    } else {\n      result.push(i);\n    }\n  }\n  result.sort();\n  result.unshift_while(|i| i % 2 == 0);\n  result.unshift_while(|i| even_index > 0);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `unshift_while` found for struct `Vec<&isize>` in the current scope\n  --> /tmp/tmp9bvnjhp1.rs:20:10\n   |\n20 |   result.unshift_while(|i| i % 2 == 0);\n   |          ^^^^^^^^^^^^^ method not found in `Vec<&isize>`\n\nerror[E0599]: no method named `unshift_while` found for struct `Vec<&isize>` in the current scope\n  --> /tmp/tmp9bvnjhp1.rs:21:10\n   |\n21 |   result.unshift_while(|i| even_index > 0);\n   |          ^^^^^^^^^^^^^ method not found in `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9bvnjhp1.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  let mut cur = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpw3d3zyr3.rs:19:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n19 |   return ret;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmplt_gam4n.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for x in x {\n    if x % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(x);\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpdsght8vy.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  for i in x.iter() {\n    let d = i.to_int();\n    if d % 2 == 0 {\n      even_digits.push(d);\n    } else {\n      result.push(d);\n    }\n  }\n  result.extend(even_digits);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_int` found for reference `&isize` in the current scope\n  --> /tmp/tmpahwobfia.rs:13:15\n   |\n13 |     let d = i.to_int();\n   |               ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = x.map(|x| x % 2).filter(|x| x == 0).sort()\n  y.unshift(0)\n  return y\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `y`\n  --> /tmp/tmpxynkmpsm.rs:10:53\n   |\n10 |   let y = x.map(|x| x % 2).filter(|x| x == 0).sort()\n   |                                                     ^ help: add `;` here\n11 |   y.unshift(0)\n   |   - unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmpxynkmpsm.rs:11:15\n   |\n11 |   y.unshift(0)\n   |               ^ help: add `;` here\n12 |   return y\n   |   ------ unexpected token\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpxynkmpsm.rs:10:13\n    |\n10  |     let y = x.map(|x| x % 2).filter(|x| x == 0).sort()\n    |               ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push_back(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmporrtstg9.rs:15:7\n   |\n15 |     y.push_back(i);\n   |       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      even_digits.push(num);\n    } else {\n      odd_digits.push(num);\n    }\n  }\n  for i in even_digits.iter() {\n    result.push(i);\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmphhkljy_l.rs:14:17\n   |\n14 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphhkljy_l.rs:27:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n27 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp55rfferv.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return ret;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_digits_count = 0;\n  let mut odd_digits_count = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp7cflp429.rs:50:21\n   |\n50 |   let mut odd_digits\n   |                     ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp7cflp429.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmplt_gam4n.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if (digit % 2 == 0) {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    if (odd_count > 0) {\n      result.push(i);\n    }\n    odd_count -= 1;\n  }\n  for i in odd_digits.iter() {\n    if (even_count > 0) {\n      result.push(i);\n    }\n    even_count -= 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp13urpc6o.rs:17:8\n   |\n17 |     if (digit % 2 == 0) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (digit % 2 == 0) {\n17 +     if digit % 2 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp13urpc6o.rs:26:8\n   |\n26 |     if (odd_count > 0) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n26 -     if (odd_count > 0) {\n26 +     if odd_count > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp13urpc6o.rs:32:8\n   |\n32 |     if (even_count > 0) {\n   |        ^              ^\n   |\nhelp: remove these parentheses\n   |\n32 -     if (even_count > 0) {\n32 +     if even_count > 0 {\n   | \n\nerror[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp13urpc6o.rs:16:19\n   |\n16 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13urpc6o.rs:37:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n37 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors; 3 warnings emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in x.iter() {\n        if i % 2 == 0 {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp8027tvtz.rs:18:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return result;\n   |            ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut i = 0;\n  for x in x {\n    if x % 2 == 0 {\n      continue;\n    }\n    result.push(x);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[15, 33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpvm6medvo.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = x.map(|x| x % 2).filter(|x| x == 0).sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpba9ujsdq.rs:10:13\n    |\n10  |     let y = x.map(|x| x % 2).filter(|x| x == 0).sort();\n    |               ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    for x[i] in x {\n        if x[i] % 2 == 0 {\n            i += 1;\n        } else {\n            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmps2v0b0fk.rs:12:10\n   |\n12 |     for x[i] in x {\n   |          ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `in`\n  --> /tmp/tmps2v0b0fk.rs:12:14\n   |\n12 |     for x[i] in x {\n   |              ^^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmplt_gam4n.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if (digit % 2 == 0) {\n      even_count += 1;\n      even_digits.push(digit);\n    } else {\n      odd_count += 1;\n      odd_digits.push(digit);\n    }\n  }\n  for i in even_digits.iter() {\n    result.push(i);\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9hepncsa.rs:17:8\n   |\n17 |     if (digit % 2 == 0) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (digit % 2 == 0) {\n17 +     if digit % 2 == 0 {\n   | \n\nerror[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp9hepncsa.rs:16:19\n   |\n16 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9hepncsa.rs:32:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n32 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      last = i;\n    } else {\n      if last != 0 {\n        result.push_back(last);\n      }\n      last = i;\n    }\n  }\n  if last != 0 {\n    result.push_back(last);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpkmdoddoq.rs:14:14\n   |\n11 |   let mut last = 0;\n   |                  - expected due to this value\n...\n14 |       last = i;\n   |              ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |       last = *i;\n   |              +\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpkmdoddoq.rs:17:16\n   |\n17 |         result.push_back(last);\n   |                ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkmdoddoq.rs:19:14\n   |\n11 |   let mut last = 0;\n   |                  - expected due to this value\n...\n19 |       last = i;\n   |              ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n19 |       last = *i;\n   |              +\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpkmdoddoq.rs:23:12\n   |\n23 |     result.push_back(last);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpszv7vovg.rs:23:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n23 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut even_digits = Vec::new();\n    let mut odd_digits = Vec::new();\n    let mut even_index = 0;\n    let mut odd_index = 0;\n    for i in x.iter() {\n        let digit = i.to_int();\n        if digit % 2 == 0 {\n            even_digits.push(digit);\n            even_index += 1;\n        } else {\n            odd_digits.push(digit);\n            odd_index += 1;\n        }\n    }\n    for i in even_digits.iter() {\n        result.push(i);\n    }\n    for i in odd_digits.iter() {\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_int` found for reference `&isize` in the current scope\n  --> /tmp/tmpr1bmc835.rs:16:23\n   |\n16 |         let digit = i.to_int();\n   |                       ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr1bmc835.rs:32:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n32 |     return result;\n   |            ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let num = i.as_isize();\n    if num % 2 == 0 {\n      even_digits.push(num);\n      even_count += 1;\n    } else {\n      odd_digits.push(num);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    if odd_count > 0 {\n      result.push(i);\n    }\n  }\n  for i in odd_digits.iter() {\n    if even_count > 0 {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_isize` found for reference `&isize` in the current scope\n  --> /tmp/tmpu42wqcsa.rs:16:17\n   |\n16 |     let num = i.as_isize();\n   |                 ^^^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu42wqcsa.rs:35:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n35 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let d = i.as_u32();\n    if d % 2 == 0 {\n      continue;\n    }\n    result.push(d);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpgi0v1euq.rs:12:15\n   |\n12 |     let d = i.as_u32();\n   |               ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_index = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even_index += 1;\n    } else {\n      result.push(i);\n    }\n  }\n  result.sort();\n  result.unshift(even_index);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `unshift` found for struct `Vec<&isize>` in the current scope\n  --> /tmp/tmpn7u2px11.rs:20:10\n   |\n20 |   result.unshift(even_index);\n   |          ^^^^^^^ method not found in `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7u2px11.rs:21:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n21 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_count = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even_count += 1;\n    } else {\n      if even_count > 0 {\n        result.push(i - even_count);\n      }\n      even_count = 0;\n    }\n  }\n  if even_count > 0 {\n    result.push(i - even_count);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmpi9wtvyvy.rs:23:17\n   |\n23 |     result.push(i - even_count);\n   |                 ^ help: a local variable with a similar name exists: `x`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpszv7vovg.rs:23:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n23 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      even_digits.push(num);\n    } else {\n      result.push(num);\n    }\n  }\n  result.extend(even_digits);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmp5kqbnx3e.rs:13:17\n   |\n13 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n  --> /tmp/tmp79e4zdyv.rs:15:5\n   |\n10 |   let y = Vec::new();\n   |       - help: consider changing this to be mutable: `mut y`\n...\n15 |     y.push(i);\n   |     ^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n  --> /tmp/tmp79e4zdyv.rs:17:3\n   |\n10 |   let y = Vec::new();\n   |       - help: consider changing this to be mutable: `mut y`\n...\n17 |   y.sort();\n   |   ^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      even_digits.push(num);\n    } else {\n      result.push(num);\n    }\n  }\n  result.extend(even_digits);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmp5kqbnx3e.rs:13:17\n   |\n13 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push_back(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp1_fc5lm4.rs:15:7\n   |\n15 |     y.push_back(i);\n   |       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp55rfferv.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return ret;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even_count += 1;\n      even_digits.push(i);\n    } else {\n      odd_count += 1;\n      odd_digits.push(i);\n    }\n  }\n  for i in even_digits.iter() {\n    for j in odd_digits.iter() {\n      result.push(j + i);\n    }\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0369]: cannot add `&&isize` to `&&isize`\n  --> /tmp/tmp6mj87pzz.rs:26:21\n   |\n26 |       result.push(j + i);\n   |                   - ^ - &&isize\n   |                   |\n   |                   &&isize\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mj87pzz.rs:33:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n33 |   return result;\n   |          ^^^^^^ expected `isize`, found `&&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut odd_index = 0;\n  let mut even_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_digits_count = 0;\n  let mut odd_digits_count = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits_index = 0;\n  let mut even_digits_index = 0;\n  let mut odd_digits\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpcxejzzq5.rs:50:21\n   |\n50 |   let mut odd_digits\n   |                     ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpcxejzzq5.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if (digit % 2 == 0) {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    for j in odd_digits.iter() {\n      result.push(i * 10 + j);\n    }\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpc81aff11.rs:17:8\n   |\n17 |     if (digit % 2 == 0) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (digit % 2 == 0) {\n17 +     if digit % 2 == 0 {\n   | \n\nerror[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmpc81aff11.rs:16:19\n   |\n16 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc81aff11.rs:34:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n34 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even_digits.push(i);\n    } else {\n      result.push(i);\n    }\n  }\n  result.concat(even_digits);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: the method `concat` exists for struct `Vec<&isize>`, but its trait bounds were not satisfied\n  --> /tmp/tmphz37ka8q.rs:19:10\n   |\n19 |   result.concat(even_digits);\n   |          ^^^^^^ method cannot be called on `Vec<&isize>` due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n           `[&isize]: Concat<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphz37ka8q.rs:20:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n20 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  let z = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push_back(i);\n  }\n  for i in y {\n    z.push_back(i);\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp7_5mh62d.rs:16:7\n   |\n16 |     y.push_back(i);\n   |       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp7_5mh62d.rs:19:7\n   |\n19 |     z.push_back(i);\n   |       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push_back(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmporrtstg9.rs:15:7\n   |\n15 |     y.push_back(i);\n   |       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in x.iter() {\n        if i % 2 == 0 {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp8027tvtz.rs:18:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return result;\n   |            ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new(x.len);\n  for (i in 0..x.len) {\n    if (x[i] % 2 == 0) {\n      y[i] = x[i];\n    } else {\n      y[i] = 0;\n    }\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmp_6u7xrc7.rs:11:10\n   |\n11 |   for (i in 0..x.len) {\n   |          ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmp_6u7xrc7.rs:11:7\n   |\n11 |   for (i in 0..x.len) {\n   |       ^             ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n11 -   for (i in 0..x.len) {\n11 +   for i in 0..x.len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_6u7xrc7.rs:12:8\n   |\n12 |     if (x[i] % 2 == 0) {\n   |        ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n12 -     if (x[i] % 2 == 0) {\n12 +     if x[i] % 2 == 0 {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_6u7xrc7.rs:10:22\n   |\n10 |   let y = Vec::new(x.len);\n   |                      ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n10 |   let y = Vec::new(x.len());\n   |                         ++\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp_6u7xrc7.rs:10:11\n    |\n10  |   let y = Vec::new(x.len);\n    |           ^^^^^^^^ ----- supplied 1 argument\n    |           |\n    |           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_6u7xrc7.rs:11:18\n   |\n11 |   for (i in 0..x.len) {\n   |                  ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n11 |   for (i in 0..x.len()) {\n   |                     ++\n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0061, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.next();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    let digit = i.next();\n    if odd_count > 0 {\n      result.push(digit);\n      odd_count -= 1;\n    }\n  }\n  for i in odd_digits.iter() {\n    let digit = i.next();\n    if even_count > 0 {\n      result.push(digit);\n      even_count -= 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmp0yhzdhke.rs:18:19\n   |\n18 |     let digit = i.next();\n   |                   ^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u32();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    if odd_count > 0 {\n      result.push(i);\n    }\n    odd_count -= 1;\n  }\n  for i in odd_digits.iter() {\n    if even_count > 0 {\n      result.push(i);\n    }\n    even_count -= 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpk0zycjg7.rs:16:19\n   |\n16 |     let digit = i.as_u32();\n   |                   ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk0zycjg7.rs:37:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n37 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  let z = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  for i in y {\n    z.push(i);\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n  --> /tmp/tmpu7tr_p8o.rs:16:5\n   |\n10 |   let y = Vec::new();\n   |       - help: consider changing this to be mutable: `mut y`\n...\n16 |     y.push(i);\n   |     ^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `z` as mutable, as it is not declared as mutable\n  --> /tmp/tmpu7tr_p8o.rs:19:5\n   |\n11 |   let z = Vec::new();\n   |       - help: consider changing this to be mutable: `mut z`\n...\n19 |     z.push(i);\n   |     ^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  for i in x.iter() {\n    let digit = i.next();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n    } else {\n      odd_digits.push(digit);\n    }\n  }\n  for i in even_digits.iter() {\n    result.push(i.next());\n  }\n  for i in odd_digits.iter() {\n    result.push(i.next());\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmppliw0xbn.rs:14:19\n   |\n14 |     let digit = i.next();\n   |                   ^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  while i < x.len {\n    if x[i] % 2 == 0 {\n      i += 1;\n      continue;\n    }\n    if j < k {\n      ret.push_back(x[j]);\n      j += 1;\n      continue;\n    }\n    ret.push_back(x[i]);\n    k += 1;\n    i += 1;\n  }\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpy_9laqil.rs:14:15\n   |\n14 |   while i < x.len {\n   |               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |   while i < x.len() {\n   |                  ++\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpy_9laqil.rs:20:11\n   |\n20 |       ret.push_back(x[j]);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpy_9laqil.rs:24:9\n   |\n24 |     ret.push_back(x[i]);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push_back(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmporrtstg9.rs:15:7\n   |\n15 |     y.push_back(i);\n   |       ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      last = i;\n      continue;\n    }\n    if last == i - 1 {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpdw9pclzc.rs:14:14\n   |\n11 |   let mut last = 0;\n   |                  - expected due to this value\n...\n14 |       last = i;\n   |              ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |       last = *i;\n   |              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdw9pclzc.rs:21:12\n   |\n11 |   let mut last = 0;\n   |                  - expected due to this value\n...\n21 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |     last = *i;\n   |            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdw9pclzc.rs:23:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n23 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpx71cmgo6.rs:54:14\n   |\n54 |   let mut odd\n   |              ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx71cmgo6.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for x in x {\n    if x % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(x);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpc0i7o9mw.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpx71cmgo6.rs:54:14\n   |\n54 |   let mut odd\n   |              ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx71cmgo6.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmplt_gam4n.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in x.iter() {\n    let d = i.as_u32() % 10;\n    if d != last {\n      result.push(i);\n      last = d;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpbs9ub_n0.rs:13:15\n   |\n13 |     let d = i.as_u32() % 10;\n   |               ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbs9ub_n0.rs:19:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n19 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_max = 0;\n  let mut odd_max = 0;\n  let mut even_max_index = 0;\n  let mut odd_max_index = 0;\n  let mut even_max_count = 0;\n  let mut odd_max_count = 0;\n  let mut even_max_index_count = 0;\n  let mut odd_max_index_count = 0;\n  let mut even_max_index_count_count = 0;\n  let mut odd_max_index_count_count = 0;\n  let mut even_max_index_count_count_count = 0;\n  let mut odd_max_index_count_count_count = 0;\n  let mut even_max_index_count_count_count_count = 0;\n  let mut odd_max_index_count_count_count_count = 0;\n  let mut even_max_index_count_count_count_count_count = 0;\n  let mut odd_max_index_count_count_count_count_count = 0;\n  let mut even_max_index_count_count_count_count_count_count = 0;\n  let mut odd_max_index_count_count_count_count_count_count = 0;\n  let mut even_max_index_count_count_count_count_count_count_count = 0;\n  let mut odd_max_index_count_count_count_count_count_count_count = 0;\n  let mut even_max_index_count_count_count_count_count_count_count_count = 0;\n  let mut odd_max_index_count_count_count_count_count_count_count_count = 0;\n  let mut even_max_index_count_count_count_count_count_count_count_count_count = 0;\n  let\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected pattern, found `}`\n  --> /tmp/tmp4t789o9u.rs:41:1\n   |\n41 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp55rfferv.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return ret;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  let mut i = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp0w_24996.rs:19:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n19 |   return ret;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in x.iter() {\n        if i % 2 == 0 {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp8027tvtz.rs:18:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return result;\n   |            ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  let mut last = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      last = i;\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.push(last);\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfivugj7p.rs:14:14\n   |\n11 |   let mut last = 0;\n   |                  - expected due to this value\n...\n14 |       last = i;\n   |              ^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |       last = *i;\n   |              +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfivugj7p.rs:19:12\n   |\n19 |   ret.push(last);\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found integer\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfivugj7p.rs:20:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n20 |   return ret;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_index = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even_index += 1;\n    } else {\n      if even_index > 0 {\n        result.push(i - even_index);\n      }\n      even_index = 0;\n    }\n  }\n  if even_index > 0 {\n    result.push(i - even_index);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `i` in this scope\n  --> /tmp/tmp_otjoxos.rs:23:17\n   |\n23 |     result.push(i - even_index);\n   |                 ^ help: a local variable with a similar name exists: `x`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      even_count += 1;\n      even_digits.push(num);\n    } else {\n      odd_count += 1;\n      odd_digits.push(num);\n    }\n  }\n  for i in even_digits.iter() {\n    if odd_count > 0 {\n      result.push(odd_digits[odd_count - 1]);\n      odd_count -= 1;\n    }\n    result.push(i);\n  }\n  for i in odd_digits.iter() {\n    if even_count > 0 {\n      result.push(even_digits[even_count - 1]);\n      even_count -= 1;\n    }\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpdgrpvo2d.rs:16:17\n   |\n16 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdgrpvo2d.rs:30:17\n   |\n30 |     result.push(i);\n   |                 ^- help: try using a conversion method: `.to_string()`\n   |                 |\n   |                 cyclic type of infinite size\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdgrpvo2d.rs:37:17\n   |\n37 |     result.push(i);\n   |                 ^- help: try using a conversion method: `.to_string()`\n   |                 |\n   |                 cyclic type of infinite size\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      even_digits.push(i);\n    } else {\n      result.push(i);\n    }\n  }\n  result.extend(even_digits);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[15, 33, 1, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpjq6q3g6c.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = x.map(|x| x % 2 == 0 ? 0 : x);\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `0`\n  --> /tmp/tmpn29zj6qz.rs:10:34\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? 0 : x);\n   |                                 -^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                 |\n   |                                 help: missing `,`\n\nerror[E0573]: expected type, found local variable `x`\n  --> /tmp/tmpn29zj6qz.rs:10:38\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? 0 : x);\n   |                                      ^ expecting a type here because of type ascription\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpn29zj6qz.rs:10:13\n    |\n10  |     let y = x.map(|x| x % 2 == 0 ? 0 : x);\n    |               ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpn29zj6qz.rs:10:30\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? 0 : x);\n   |                              ^^^ the `?` operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n  --> /tmp/tmpn29zj6qz.rs:10:32\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? 0 : x);\n   |                 ---------------^\n   |                 |              |\n   |                 |              cannot use the `?` operator in a closure that returns `bool`\n   |                 this function should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not implemented for `bool`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0573, E0599.\nFor more information about an error, try `rustc -",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last_digit = 0;\n  for i in x.iter() {\n    let digit = i.as_u8() % 10;\n    if digit != last_digit {\n      result.push(i);\n      last_digit = digit;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp3gx4x3b7.rs:13:19\n   |\n13 |     let digit = i.as_u8() % 10;\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3gx4x3b7.rs:19:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n19 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      even_digits.push(i);\n    } else {\n      result.push(i);\n    }\n  }\n  result.extend(even_digits);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[15, 33, 1, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpjq6q3g6c.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmplt_gam4n.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new(0);\n  let z = Vec::new(0);\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y = y.push(i);\n  }\n  for i in y {\n    z = z.push(i);\n  }\n  return z;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpc5s9ucgs.rs:10:11\n    |\n10  |   let y = Vec::new(0);\n    |           ^^^^^^^^ - supplied 1 argument\n    |           |\n    |           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpc5s9ucgs.rs:11:11\n    |\n11  |   let z = Vec::new(0);\n    |           ^^^^^^^^ - supplied 1 argument\n    |           |\n    |           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc5s9ucgs.rs:16:9\n   |\n10 |   let y = Vec::new(0);\n   |           ----------- expected due to this value\n...\n16 |     y = y.push(i);\n   |         ^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc5s9ucgs.rs:19:9\n   |\n11 |   let z = Vec::new(0);\n   |           ----------- expected due to this value\n...\n19 |     z = z.push(i);\n   |         ^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    if odd_count > 0 {\n      result.push(i);\n    }\n    odd_count -= 1;\n  }\n  for i in odd_digits.iter() {\n    if even_count > 0 {\n      result.push(i);\n    }\n    even_count -= 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp101oc329.rs:16:19\n   |\n16 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp101oc329.rs:37:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n37 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in x.iter() {\n        let d = i.as_u16();\n        if d % 2 == 0 {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u16` found for reference `&isize` in the current scope\n  --> /tmp/tmpuo7k5l2w.rs:12:19\n   |\n12 |         let d = i.as_u16();\n   |                   ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuo7k5l2w.rs:19:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n19 |     return result;\n   |            ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if (digit % 2 == 0) {\n      even_count += 1;\n      even_digits.push(digit);\n    } else {\n      odd_count += 1;\n      odd_digits.push(digit);\n    }\n  }\n  for i in even_digits.iter() {\n    result.push(i);\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9hepncsa.rs:17:8\n   |\n17 |     if (digit % 2 == 0) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (digit % 2 == 0) {\n17 +     if digit % 2 == 0 {\n   | \n\nerror[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp9hepncsa.rs:16:19\n   |\n16 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9hepncsa.rs:32:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n32 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_index = 0;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even_index += 1;\n    } else {\n      result.push(i);\n    }\n  }\n  result.sort();\n  result.unshift(even_index);\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `unshift` found for struct `Vec<&isize>` in the current scope\n  --> /tmp/tmpn7u2px11.rs:20:10\n   |\n20 |   result.unshift(even_index);\n   |          ^^^^^^^ method not found in `Vec<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn7u2px11.rs:21:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n21 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.next();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    let digit = i.next();\n    if odd_count == 0 {\n      result.push(digit);\n    } else {\n      let index = even_index + odd_count;\n      result.push(index);\n      result.push(digit);\n      even_index = index;\n      odd_count -= 1;\n    }\n  }\n  for i in odd_digits.iter() {\n    let digit = i.next();\n    if even_count == 0 {\n      result.push(digit);\n    } else {\n      let index = odd_index + even_count;\n      result.push(index);\n      result.push(digit);\n      odd_index = index;\n      even_count -= 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmpve1ygvmm.rs:18:19\n   |\n18 |     let digit = i.next();\n   |                   ^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = x.map(|x| x % 2 == 0 ? None : x);\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `None`\n  --> /tmp/tmpj1lbiatc.rs:10:34\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? None : x);\n   |                                 -^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n   |                                 |\n   |                                 help: missing `,`\n\nerror[E0573]: expected type, found local variable `x`\n  --> /tmp/tmpj1lbiatc.rs:10:41\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? None : x);\n   |                                         ^ expecting a type here because of type ascription\n\nerror[E0599]: `Vec<isize>` is not an iterator\n   --> /tmp/tmpj1lbiatc.rs:10:13\n    |\n10  |     let y = x.map(|x| x % 2 == 0 ? None : x);\n    |               ^^^ `Vec<isize>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<isize>: Iterator`\n            which is required by `&mut Vec<isize>: Iterator`\n            `[isize]: Iterator`\n            which is required by `&mut [isize]: Iterator`\n\nerror[E0277]: the `?` operator can only be applied to values that implement `Try`\n  --> /tmp/tmpj1lbiatc.rs:10:30\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? None : x);\n   |                              ^^^ the `?` operator cannot be applied to type `{integer}`\n   |\n   = help: the trait `Try` is not implemented for `{integer}`\n\nerror[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n  --> /tmp/tmpj1lbiatc.rs:10:32\n   |\n10 |   let y = x.map(|x| x % 2 == 0 ? None : x);\n   |                 ---------------^\n   |                 |              |\n   |                 |              cannot use the `?` operator in a closure that returns `bool`\n   |                 this function should return `Result` or `Option` to accept `?`\n   |\n   = help: the trait `FromResidual<_>` is not implemented for `bool`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0573, E0599.\nFor more information abou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    if odd_count > 0 {\n      result.push(odd_digits[odd_index]);\n      odd_index += 1;\n      odd_count -= 1;\n    } else {\n      result.push(even_digits[even_index]);\n      even_index += 1;\n      even_count -= 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp_1xsqzkv.rs:18:19\n   |\n18 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    let num = i.as_u32();\n    if num % 2 == 0 {\n      continue;\n    }\n    result.push(num);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u32` found for reference `&isize` in the current scope\n  --> /tmp/tmpwa_o3ucc.rs:12:17\n   |\n12 |     let num = i.as_u32();\n   |                 ^^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  for i in x.iter() {\n    let digit = i.as_u8() % 10;\n    if digit == 0 {\n      even_digits.push(i);\n    } else {\n      odd_digits.push(i);\n    }\n  }\n  for i in even_digits.iter() {\n    result.push(i);\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmpb72yr1k6.rs:14:19\n   |\n14 |     let digit = i.as_u8() % 10;\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb72yr1k6.rs:27:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n27 |   return result;\n   |          ^^^^^^ expected `isize`, found `&&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&&isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpszv7vovg.rs:23:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n23 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpyf2ymv6l.rs:54:14\n   |\n54 |   let mut odd\n   |              ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpyf2ymv6l.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  let mut z = Vec::new();\n  let mut w = Vec::new();\n  let mut t = Vec::new();\n  let mut u = Vec::new();\n  let mut v = Vec::new();\n  let mut r = Vec::new();\n  let mut q = Vec::new();\n  let mut p = Vec::new();\n  let mut n = Vec::new();\n  let mut m = Vec::new();\n  let mut l = Vec::new();\n  let mut k = Vec::new();\n  let mut j = Vec::new();\n  let mut i = Vec::new();\n  let mut h = Vec::new();\n  let mut g = Vec::new();\n  let mut f = Vec::new();\n  let mut e = Vec::new();\n  let mut d = Vec::new();\n  let mut c = Vec::new();\n  let mut b = Vec::new();\n  let mut a = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:33:7\n   |\n33 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:34:7\n   |\n34 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:35:7\n   |\n35 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:36:7\n   |\n36 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:37:7\n   |\n37 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:38:7\n   |\n38 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:39:7\n   |\n39 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:40:7\n   |\n40 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpswqfdez1.rs:41:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in x.iter() {\n        if i % 2 == 0 {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp8027tvtz.rs:18:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return result;\n   |            ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  while i < x.len {\n    if x[i] % 2 == 0 {\n      i += 1;\n    } else {\n      result.push_back(x[i]);\n      i += 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpcq83ihg7.rs:14:15\n   |\n14 |   while i < x.len {\n   |               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n14 |   while i < x.len() {\n   |                  ++\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpcq83ihg7.rs:18:14\n   |\n18 |       result.push_back(x[i]);\n   |              ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpx71cmgo6.rs:54:14\n   |\n54 |   let mut odd\n   |              ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpx71cmgo6.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.next();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    let digit = i.next();\n    if odd_count == 0 {\n      result.push(digit);\n    }\n    if odd_count > 0 {\n      odd_count -= 1;\n    }\n  }\n  for i in odd_digits.iter() {\n    let digit = i.next();\n    if even_count == 0 {\n      result.push(digit);\n    }\n    if even_count > 0 {\n      even_count -= 1;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmpy7n2041a.rs:18:19\n   |\n18 |     let digit = i.next();\n   |                   ^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  let z = Vec::new();\n  let i = 0;\n  for i in x.iter() {\n    let j = 0;\n    for j in x.iter() {\n      if i % 2 == 0 {\n        break;\n      }\n      if j == i {\n        break;\n      }\n      j += 1;\n    }\n    if j == i {\n      z.push(i);\n    }\n  }\n  for i in x.iter() {\n    if i not in z {\n      y.push(i);\n    }\n  }\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `{`, found `not`\n  --> /tmp/tmpk4okq_ke.rs:29:10\n   |\n29 |     if i not in z {\n   |     --   ^^^ expected `{`\n   |     |\n   |     this `if` expression has a condition, but no block\n   |\nhelp: try placing this code inside a block\n   |\n29 |     if i { not } in z {\n   |          +     +\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&isize`\n  --> /tmp/tmpk4okq_ke.rs:22:7\n   |\n22 |       j += 1;\n   |       -^^^^^\n   |       |\n   |       cannot use `+=` on type `&isize`\n   |\nhelp: `+=` can be used on `isize`, you can dereference `j`\n   |\n22 |       *j += 1;\n   |       +\n\nerror[E0277]: can't compare `isize` with `&isize`\n  --> /tmp/tmpk4okq_ke.rs:24:10\n   |\n24 |     if j == i {\n   |          ^^ no implementation for `isize == &isize`\n   |\n   = help: the trait `PartialEq<&isize>` is not implemented for `isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut y = Vec::new();\n    for i in x {\n        if i % 2 == 0 {\n            continue;\n        }\n        y.push(i);\n    }\n    y.sort();\n    return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpea2ki20v.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_index_prev = 0;\n  let mut odd_index_prev = 0;\n  for i in x.iter() {\n    let digit = i.next();\n    if digit % 2 == 0 {\n      even_count += 1;\n      even_digits.push(digit);\n      if even_count == 1 {\n        even_index_prev = even_index;\n        even_index = result.len();\n      }\n    } else {\n      odd_count += 1;\n      odd_digits.push(digit);\n      if odd_count == 1 {\n        odd_index_prev = odd_index;\n        odd_index = result.len();\n      }\n    }\n  }\n  for i in even_digits.iter() {\n    result.push(i.next());\n  }\n  for i in odd_digits.iter() {\n    result.push(i.next());\n  }\n  for i in even_index_prev..odd_index_prev {\n    result.push(x[i]);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmp8fyqrw40.rs:20:19\n   |\n20 |     let digit = i.next();\n   |                   ^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp_x7i1cf6.rs:21:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n21 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in x.iter() {\n        if i % 2 == 0 {\n            continue;\n        }\n        result.push(i);\n    }\n    result.sort();\n    return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp8027tvtz.rs:18:12\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |     return result;\n   |            ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    let digit = i.as_u8();\n    if odd_count > 0 {\n      result.push(digit);\n      odd_count -= 1;\n    } else {\n      result.push(digit);\n      result.push(digit);\n    }\n  }\n  for i in odd_digits.iter() {\n    let digit = i.as_u8();\n    if even_count > 0 {\n      result.push(digit);\n      even_count -= 1;\n    } else {\n      result.push(digit);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmpcvlt8lc2.rs:18:19\n   |\n18 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpgmecoewe.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for x in x {\n    if x % 2 == 0 {\n      even = true;\n    } else if even {\n      result.push(x);\n    }\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1]`,\n right: `[1, 15, 33]`', /tmp/tmpi71rrooy.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if (digit % 2 == 0) {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    if (odd_count > 0) {\n      result.push(i);\n    }\n    odd_count -= 1;\n  }\n  for i in odd_digits.iter() {\n    if (even_count > 0) {\n      result.push(i);\n    }\n    even_count -= 1;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp13urpc6o.rs:17:8\n   |\n17 |     if (digit % 2 == 0) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (digit % 2 == 0) {\n17 +     if digit % 2 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp13urpc6o.rs:26:8\n   |\n26 |     if (odd_count > 0) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n26 -     if (odd_count > 0) {\n26 +     if odd_count > 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp13urpc6o.rs:32:8\n   |\n32 |     if (even_count > 0) {\n   |        ^              ^\n   |\nhelp: remove these parentheses\n   |\n32 -     if (even_count > 0) {\n32 +     if even_count > 0 {\n   | \n\nerror[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp13urpc6o.rs:16:19\n   |\n16 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp13urpc6o.rs:37:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n37 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors; 3 warnings emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.next();\n    if digit % 2 == 0 {\n      even_count += 1;\n      even_index = result.len();\n    } else {\n      odd_count += 1;\n      odd_index = result.len();\n    }\n    result.push(digit);\n  }\n  if even_count > 0 {\n    result.insert_at(even_index, 0);\n  }\n  if odd_count > 0 {\n    result.insert_at(odd_index, 0);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmpj8eyjhon.rs:16:19\n   |\n16 |     let digit = i.next();\n   |                   ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `insert_at` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpj8eyjhon.rs:27:12\n   |\n27 |     result.insert_at(even_index, 0);\n   |            ^^^^^^^^^ help: there is an associated function with a similar name: `insert`\n\nerror[E0599]: no method named `insert_at` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpj8eyjhon.rs:30:12\n   |\n30 |     result.insert_at(odd_index, 0);\n   |            ^^^^^^^^^ help: there is an associated function with a similar name: `insert`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[323]`,\n right: `[]`', /tmp/tmpzsvz09st.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp5s_hok0i.rs:53:27\n   |\n53 |   let mut even_digit_index\n   |                           ^ help: add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5s_hok0i.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  for i in x {\n    if i % 2 == 0 {\n      continue;\n    }\n    y.push(i);\n  }\n  y.sort();\n  return y;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n  --> /tmp/tmp79e4zdyv.rs:15:5\n   |\n10 |   let y = Vec::new();\n   |       - help: consider changing this to be mutable: `mut y`\n...\n15 |     y.push(i);\n   |     ^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n  --> /tmp/tmp79e4zdyv.rs:17:3\n   |\n10 |   let y = Vec::new();\n   |       - help: consider changing this to be mutable: `mut y`\n...\n17 |   y.sort();\n   |   ^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut ret = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    ret.push(i);\n  }\n  ret.sort();\n  return ret;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp55rfferv.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return ret;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let y = Vec::new();\n  let z = Vec::new();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < x.len) {\n    if (x[i] % 2 == 0) {\n      i += 1;\n      continue;\n    }\n    if (j < k) {\n      y.push(x[j]);\n      j += 1;\n      continue;\n    }\n    if (k < i) {\n      z.push(x[k]);\n      k += 1;\n      continue;\n    }\n    y.push(x[i]);\n    z.push(x[j]);\n    j += 1;\n    k += 1;\n    i += 1;\n  }\n  y.push_back(x[k]);\n  z.push_back(x[j]);\n  return y.concat(z);\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp6eq3cgs0.rs:15:9\n   |\n15 |   while (i < x.len) {\n   |         ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (i < x.len) {\n15 +   while i < x.len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6eq3cgs0.rs:16:8\n   |\n16 |     if (x[i] % 2 == 0) {\n   |        ^             ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (x[i] % 2 == 0) {\n16 +     if x[i] % 2 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6eq3cgs0.rs:20:8\n   |\n20 |     if (j < k) {\n   |        ^     ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (j < k) {\n20 +     if j < k {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6eq3cgs0.rs:25:8\n   |\n25 |     if (k < i) {\n   |        ^     ^\n   |\nhelp: remove these parentheses\n   |\n25 -     if (k < i) {\n25 +     if k < i {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp6eq3cgs0.rs:15:16\n   |\n15 |   while (i < x.len) {\n   |                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n15 |   while (i < x.len()) {\n   |                   ++\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp6eq3cgs0.rs:36:5\n   |\n36 |   y.push_back(x[k]);\n   |     ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp6eq3cgs0.rs:37:5\n   |\n37 |   z.push_back(x[j]);\n   |     ^^^^^^^^^ method not found in `Vec<isize>`\n\nerror[E0599]: the method `concat` exists for struct `Vec<isize>`, but its trait bounds were not satisfied\n  --> /tmp/tmp6eq3cgs0.rs:38:12\n   |\n38 |   return y.concat(z);\n   |            ^^^^^^ method cannot be called on `Vec<isize>` due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n           `[isize]: Concat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_count = 0;\n  let mut odd_digit_count = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index = 0;\n  let mut odd_digit_index = 0;\n  let mut even_digit_index\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp1dsqqk_9.rs:53:27\n   |\n53 |   let mut even_digit_index\n   |                           ^ help: add `;` here\n54 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1dsqqk_9.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  for i in x.iter() {\n    let digit = i.next();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n    } else {\n      odd_digits.push(digit);\n    }\n  }\n  for i in even_digits.iter() {\n    result.push(i.next());\n  }\n  for i in odd_digits.iter() {\n    result.push(i.next());\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmppliw0xbn.rs:14:19\n   |\n14 |     let digit = i.next();\n   |                   ^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  let mut even_index = 0;\n  let mut odd_index = 0;\n  let mut even_digit = 0;\n  let mut odd_digit = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if digit % 2 == 0 {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    let digit = i.as_u8();\n    if odd_count > 0 {\n      odd_digit = odd_digits[odd_index];\n      odd_count -= 1;\n      odd_index += 1;\n    } else {\n      result.push(digit);\n    }\n    if even_count > 0 {\n      even_digit = even_digits[even_index];\n      even_count -= 1;\n      even_index += 1;\n    } else {\n      result.push(even_digit);\n    }\n    result.push(odd_digit);\n    result.push(digit);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmp2xnk8wa8.rs:20:19\n   |\n20 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in x.iter() {\n    if i % 2 == 0 {\n      continue;\n    }\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfj6i6dx_.rs:18:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n18 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even_digits = Vec::new();\n  let mut odd_digits = Vec::new();\n  let mut even_count = 0;\n  let mut odd_count = 0;\n  for i in x.iter() {\n    let digit = i.as_u8();\n    if (digit % 2 == 0) {\n      even_digits.push(digit);\n      even_count += 1;\n    } else {\n      odd_digits.push(digit);\n      odd_count += 1;\n    }\n  }\n  for i in even_digits.iter() {\n    for j in odd_digits.iter() {\n      result.push(i * 10 + j);\n    }\n  }\n  for i in odd_digits.iter() {\n    result.push(i);\n  }\n  result.sort();\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpc81aff11.rs:17:8\n   |\n17 |     if (digit % 2 == 0) {\n   |        ^              ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n17 -     if (digit % 2 == 0) {\n17 +     if digit % 2 == 0 {\n   | \n\nerror[E0599]: no method named `as_u8` found for reference `&isize` in the current scope\n  --> /tmp/tmpc81aff11.rs:16:19\n   |\n16 |     let digit = i.as_u8();\n   |                   ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc81aff11.rs:34:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n34 |   return result;\n   |          ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut even = false;\n  for i in x.iter() {\n    if i % 2 == 0 {\n      even = true;\n    } else {\n      if !even {\n        result.push(i);\n      }\n      even = false;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpfxo5r2bd.rs:22:10\n   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                                    ---------- expected `Vec<isize>` because of return type\n...\n22 |   return result;\n   |          ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of positive integers x. return a sorted vector of all \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n/// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  let mut y = Vec::new();\n  let mut z = Vec::new();\n  let mut w = Vec::new();\n  let mut v = Vec::new();\n  let mut u = Vec::new();\n  let mut t = Vec::new();\n  let mut s = Vec::new();\n  let mut r = Vec::new();\n  let mut q = Vec::new();\n  let mut p = Vec::new();\n  let mut o = Vec::new();\n  let mut n = Vec::new();\n  let mut m = Vec::new();\n  let mut l = Vec::new();\n  let mut k = Vec::new();\n  let mut j = Vec::new();\n  let mut i = Vec::new();\n  let mut h = Vec::new();\n  let mut g = Vec::new();\n  let mut f = Vec::new();\n  let mut e = Vec::new();\n  let mut d = Vec::new();\n  let mut c = Vec::new();\n  let mut b = Vec::new();\n  let mut a = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let mut _ = Vec::new();\n  let\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n",
      "timestamp": 1664292694,
      "stdout": "",
      "stderr": "error: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:35:7\n   |\n35 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:36:7\n   |\n36 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:37:7\n   |\n37 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:38:7\n   |\n38 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:39:7\n   |\n39 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:40:7\n   |\n40 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:41:7\n   |\n41 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:42:7\n   |\n42 |   let mut _ = Vec::new();\n   |       ^^^^^ help: remove the `mut` prefix: `_`\n   |\n   = note: `mut` may be followed by `variable` and `variable @ pattern`\n\nerror: `mut` must be followed by a named binding\n  --> /tmp/tmpm2nhuvua.rs:43:7\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}