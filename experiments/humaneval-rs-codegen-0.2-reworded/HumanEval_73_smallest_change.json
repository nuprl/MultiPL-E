{
  "name": "HumanEval_73_smallest_change",
  "language": "rs",
  "prompt": "/// Given a vector arr of integers, find the minimum number of elements that\n/// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n/// is read the same backwards and forwards. In one change, you can change one element to any other element.\n/// For example:\n/// >>> smallest_change(vec![1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(vec![1, 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(vec![1, 2, 3, 2, 1])\n/// 0\nfn smallest_change(arr: Vec<isize>) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = smallest_change;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 4, 7, 9, 6]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 4, 4, 2]), 1);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 1]), 0);\n    assert_eq!(candidate(vec![3, 1, 1, 3]), 0);\n    assert_eq!(candidate(vec![1]), 0);\n    assert_eq!(candidate(vec![0, 1]), 1);\n}\n",
  "completions": [
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr[i];\n    let right = arr[arr.len() - 1 - i];\n    if left == right {\n      continue;\n    }\n    let change = 0;\n    for j in 0..arr.len() - 1 {\n      if arr[j] == left {\n        arr[j] = right;\n        change += 1;\n        break;\n      }\n      if arr[j] == right {\n        arr[j] = left;\n        change += 1;\n        break;\n      }\n    }\n    min_change = min_change.min(change);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    let sum = arr[i] + arr[j];\n    if sum == 0 {\n      min_change = 0;\n      break;\n    }\n    if sum % 2 == 0 {\n      min_change = min_change.min(j - i + 1);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  let min_index = isize::max();\n  for i in arr {\n    let j = i - 1;\n    if j < 0 {\n      j = arr.len() - 1;\n    }\n    let d = arr[i] - arr[j];\n    if d < 0 {\n      d = -d;\n    }\n    if d < min_change {\n      min_change = d;\n      min_index = i;\n    }\n  }\n  return min_index;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr[i];\n    let right = arr[arr.len() - 1 - i];\n    if left == right {\n      continue;\n    }\n    let change = arr.len() - i - 1;\n    min_change = min_change.min(change);\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        min_change = min(min_change, abs(i - j))\n      }\n    }\n  }\n  return min_change",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        min_change = min_change_helper(arr, i, j)\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr.iter() {\n    for j in arr.iter() {\n      if i != j and arr[i] != arr[j] {\n        min_change = min_change.min(j - i);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.len() - i - 1;\n    let right = i;\n    let min_change_left = smallest_change(arr.slice(left, i));\n    let min_change_right = smallest_change(arr.slice(i, right));\n    min_change = min_change_left < min_change_right ? min_change_left : min_change_right;\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(i + 1, j + 1);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    let d = arr.get(i) - arr.get(j);\n    if (d != 0) {\n      min_change = min_change.min(d);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let diff = arr.get(i) - arr.get(j);\n    if diff != 0 {\n      min_change = min_change.min(diff);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr.iter() {\n    let curr_change = 0;\n    for j in arr.iter() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        min_change = min_change - 1\n        arr[i], arr[j] = arr[j], arr[i]\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let diff = left - right;\n    if diff < 0 {\n      diff = -diff;\n    }\n    if diff < min_change {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() {\n      if arr[i] != arr[j] {\n        min_change = min_change.min(j - i);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.len() - i - 1;\n    let right = i;\n    let min_change_left = min_change;\n    let min_change_right = min_change;\n    for j in 0..left {\n      let left_val = arr[j];\n      let right_val = arr[right];\n      let min_change_left_val = min_change_left;\n      let min_change_right_val = min_change_right;\n      min_change_left = min_change_left_val + 1;\n      min_change_right = min_change_right_val + 1;\n      if left_val != right_val {\n        min_change = min(min_change, min_change_left, min_change_right);\n      }\n      right -= 1;\n    }\n    for j in 0..right {\n      let left_val = arr[left];\n      let right_val = arr[j];\n      let min_change_left_val = min_change_left;\n      let min_change_right_val = min_change_right;\n      min_change_left = min_change_left_val + 1;\n      min_change_right = min_change_right_val + 1;\n      if left_val != right_val {\n        min_change = min(min_change, min_change_left, min_change_right);\n      }\n      left += 1;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      min_change = isize::min(min_change, i + 1);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.len() - 1 - i;\n    let right = i;\n    let min_change_left = min_change;\n    let min_change_right = min_change;\n    for j in 0..left {\n      let left_val = arr[j];\n      let right_val = arr[right];\n      if left_val != right_val {\n        min_change_left = min_change_left.min(min_change_right.add(1));\n      }\n      right -= 1;\n    }\n    min_change = min_change.min(min_change_left);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr.get(i) != arr.get(i + j) {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() {\n      if arr[i] == arr[j] {\n        min_change = min_change - 1\n        arr[i], arr[j] = arr[j], arr[i]\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = abs(arr[i] - arr[j]);\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] == arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      let diff = arr.get(i) - arr.get(j);\n      if diff == 0 {\n        min_change = 0;\n        break;\n      } else if diff > 0 {\n        min_change = min_change + 1;\n      } else {\n        min_change = min_change + 2;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let diff = left - right;\n    if diff < 0 {\n      diff = -diff;\n    }\n    if diff < min_change {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    let diff = arr.get(i) - arr.get(j);\n    if diff == 0 {\n      continue;\n    }\n    min_change = min_change.min(diff);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let diff = abs(arr[i] - arr[j]);\n    if (diff < min_change) {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        let temp = arr.len() - i - 1\n        if temp < min_change {\n          min_change = temp\n        }\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr.get(i) != arr.get(i + j) {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let d = arr.get(i) - arr.get(j);\n    if d != 0 {\n      min_change = min_change.min(d);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] == arr[i + j] {\n        min_change = min_change - 1\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i != j and arr[i] == arr[j] {\n        min_change = min_change - 1\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1\n    let sum = arr[i] + arr[j]\n    if sum == 0 {\n      min_change = 0\n      break\n    }\n    if sum % 2 == 0 {\n      min_change = min_change + 1\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr[i];\n    let right = arr[arr.len() - 1 - i];\n    if left == right {\n      continue;\n    }\n    let change = arr.len() - i - 1;\n    if change < min_change {\n      min_change = change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let min_change_left = smallest_change(arr.slice(0, i + 1));\n    let min_change_right = smallest_change(arr.slice(i + 1, arr.len()));\n    min_change = min(min_change, min_change_left + min_change_right);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      let change = arr.len() - i - 1;\n      min_change = min_change.min(change);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] == arr[j] {\n      min_change = isize::min(min_change, i, j);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    let min_change_i = isize::max();\n    let min_change_j = isize::max();\n    for j in 0..arr.len() {\n      if arr[i] == arr[j] {\n        min_change_i = 0;\n        min_change_j = 0;\n        break;\n      }\n      min_change_i = min_change_i + 1;\n      min_change_j = min_change_j + 1;\n    }\n    min_change = min_change_i + min_change_j;\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr.iter() {\n    for j in arr.iter() {\n      if i != j {\n        min_change = min(min_change, abs(i - j));\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i == j {\n        continue;\n      }\n      let diff = arr.get(i) - arr.get(j);\n      if diff == 0 {\n        min_change = 0;\n        break;\n      }\n      if diff < 0 {\n        min_change = isize::min(min_change, abs(diff));\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    let min_change_i = arr.len() - 1 - i;\n    let min_change_j = arr.len() - 1 - j;\n    if arr[i] != arr[j] {\n      min_change = min_change_i;\n    } else {\n      min_change = min(min_change_i, min_change_j);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let sum = arr[i] + arr[j];\n    if sum == 0 {\n      min_change = 0;\n      break;\n    } else if sum == 1 {\n      min_change = 1;\n      break;\n    } else if sum == 2 {\n      min_change = 2;\n      break;\n    } else {\n      let dif = arr[i] - arr[j];\n      if dif == 0 {\n        min_change = 1;\n        break;\n      } else if dif == 1 {\n        min_change = 2;\n        break;\n      } else if dif == 2 {\n        min_change = 3;\n        break;\n      } else {\n        min_change = 4;\n        break;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr[i];\n    let right = arr[arr.len() - 1 - i];\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr.iter() {\n    let j = i.succ();\n    let diff = j.sub(i);\n    if (diff < min_change) {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    let diff = arr.get(i) - arr.get(j);\n    if (diff == 0) {\n      continue;\n    }\n    min_change = min_change.min(diff);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      let diff = arr.get(i) - arr.get(j);\n      if (diff == 0) {\n        min_change = 0;\n        break;\n      } else if (diff > 0) {\n        min_change = isize::min(min_change, diff);\n      } else {\n        min_change = isize::min(min_change, -diff);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i != j {\n        let c = arr.len() - j - i;\n        if c < min_change {\n          min_change = c;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let diff = arr[i] - arr[j];\n    if (diff < 0) {\n      diff = -diff;\n    }\n    min_change = min_change.min(diff);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.len() - i - 1;\n    let right = i;\n    let min_change_i = isize::max();\n    for j in 0..left {\n      let left_change = arr.get(j) - arr.get(left - j);\n      if left_change < min_change_i {\n        min_change_i = left_change;\n      }\n    }\n    for j in 0..right {\n      let right_change = arr.get(right) - arr.get(j);\n      if right_change < min_change_i {\n        min_change_i = right_change;\n      }\n    }\n    min_change = min_change_i;\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        min_change = min_change - 1\n        arr[i], arr[j] = arr[j], arr[i]\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr[i];\n    let right = arr[arr.len() - 1 - i];\n    if left == right {\n      continue;\n    }\n    let diff = left - right;\n    if diff < 0 {\n      diff = -diff;\n    }\n    min_change = min_change.min(diff);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() {\n      if arr[i] != arr[j] {\n        min_change = min_change_helper(arr, i, j)\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        min_change = min_change.min(j - i);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr[i];\n    let right = arr[arr.len() - 1 - i];\n    if left == right {\n      continue;\n    }\n    let change = 0;\n    for j in 0..arr.len() - 1 {\n      if arr[j] != left {\n        change += 1;\n        arr[j] = left;\n      }\n      if arr[arr.len() - 1 - j] != right {\n        change += 1;\n        arr[arr.len() - 1 - j] = right;\n      }\n      if change < min_change {\n        min_change = change;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        min_change = min(min_change, abs(i - j))\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] != arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let d = abs(arr[i] - arr[j]);\n      if d < min_change {\n        min_change = d;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.len() - i - 1;\n    let right = i;\n    let min_change_here = isize::max();\n    for j in 0..left {\n      let left_change = arr.get(j) - arr.get(right);\n      if left_change < min_change_here {\n        min_change_here = left_change;\n      }\n    }\n    for j in 0..right {\n      let right_change = arr.get(left) - arr.get(j);\n      if right_change < min_change_here {\n        min_change_here = right_change;\n      }\n    }\n    min_change = min_change_here;\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  let min_index = isize::max();\n  for i in arr {\n    let j = i + 1;\n    let k = i - 1;\n    let change = 0;\n    if (j < arr.len && arr[j] != arr[i]) {\n      change = 1;\n    }\n    if (k >= 0 && arr[k] != arr[i]) {\n      change = 1;\n    }\n    if (change < min_change) {\n      min_change = change;\n      min_index = i;\n    }\n  }\n  return min_index;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let d = arr.get(i) - arr.get(j);\n    if (d != 0) {\n      min_change = min_change.min(d);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        min_change = min_change.min(j - i);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr {\n    for j in arr {\n      if i != j {\n        let c = min_change_between(i, j);\n        if c < min_change {\n          min_change = c;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr {\n    for j in arr.slice(i + 1, arr.len() - i - 1) {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.slice(0, i).to_list();\n    let right = arr.slice(i, arr.len()).to_list();\n    let left_rev = reverse(left);\n    let right_rev = reverse(right);\n    let diff = 0;\n    for i in 0..arr.len() {\n      if left[i] != right[i] {\n        diff += 1;\n      }\n    }\n    if diff < min_change {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr[i];\n    let right = arr[arr.len() - 1 - i];\n    if left == right {\n      continue;\n    }\n    let min_change_i = isize::max();\n    for j in 0..arr.len() - 1 {\n      let left_j = arr[j];\n      let right_j = arr[arr.len() - 1 - j];\n      if left_j == right_j {\n        continue;\n      }\n      let change = abs(left_j - right_j);\n      if change < min_change_i {\n        min_change_i = change;\n      }\n    }\n    if min_change_i < min_change {\n      min_change = min_change_i;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i != j and arr[i] == arr[j] {\n        min_change = min_change.min(j - i);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr = arr[i];\n    for j in 0..arr.len() - 1 {\n      if i != j {\n        let next = arr[j];\n        if curr == next {\n          min_change = isize::min(min_change, j - i);\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let diff = left - right;\n    if diff < 0 {\n      diff = -diff;\n    }\n    min_change = min_change.min(diff);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let a = arr[i];\n    let b = arr[j];\n    if a == b {\n      continue;\n    }\n    let change = arr.len() - 1 - i - j;\n    if change < min_change {\n      min_change = change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i != j && arr[i] == arr[j] {\n        min_change = min(min_change, abs(i - j))\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] != arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] == arr[i + j] {\n        min_change = min_change - 1\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let diff = arr[i] - arr[j];\n    if (diff == 0) {\n      min_change = 0;\n      break;\n    } else if (diff > 0) {\n      min_change = min_change + 1;\n    } else {\n      min_change = min_change + 2;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() {\n      if arr[i] != arr[j] {\n        min_change = min_change - 1\n        arr[i], arr[j] = arr[j], arr[i]\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let change = arr.len() - i - j;\n      if change < min_change {\n        min_change = change;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let min_change_left = smallest_change(arr.slice(0, i + 1));\n    let min_change_right = smallest_change(arr.slice(i + 1, arr.len()));\n    min_change = min_change_left + min_change_right;\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1\n    let temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    min_change = min(min_change, smallest_change(arr))\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n  return min_change",
    "  let min_change = arr.len()\n  let min_change_index = 0\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1\n    let sum = arr[i] + arr[j]\n    if sum == 0 {\n      min_change = 0\n      min_change_index = i\n      break\n    }\n    if sum < 0 {\n      min_change = arr.len() - i\n      min_change_index = i\n      break\n    }\n    if sum > 0 {\n      min_change = arr.len() - j\n      min_change_index = j\n      break\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.slice(0, i).to_sorted_vec();\n    let right = arr.slice(i, arr.len()).to_sorted_vec();\n    let diff = left.len() - right.len();\n    if diff == 0 {\n      let min_diff = left.min_diff(right);\n      if min_diff < min_change {\n        min_change = min_diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let min_change_here = isize::max();\n    for j in 0..arr.len() - 1 {\n      let k = arr.len() - j - 1;\n      if arr[i] == arr[j] && arr[i] == arr[k] {\n        min_change_here = 0;\n        break;\n      } else if arr[i] == arr[j] {\n        min_change_here = 1;\n        break;\n      } else if arr[i] == arr[k] {\n        min_change_here = 2;\n        break;\n      }\n    }\n    if min_change_here < min_change {\n      min_change = min_change_here;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let d = arr[i] - arr[j];\n      if d < 0 {\n        d = -d;\n      }\n      min_change = min_change.min(d);\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1\n    let a = arr[i]\n    let b = arr[j]\n    if a == b {\n      continue\n    }\n    let c = arr.len() - 1 - i\n    let d = arr.len() - 1 - j\n    if a == arr[c] and b == arr[d] {\n      min_change = min(min_change, abs(i - j))\n    }\n  }\n  return min_change",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1\n    if arr[i] != arr[j] {\n      min_change = min_change - 1\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in arr {\n    for j in arr.slice(i + 1, arr.len() - i) {\n      let change = j - i;\n      if (change < 0) {\n        change = -change;\n      }\n      if (change < min_change) {\n        min_change = change;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr {\n    let j = arr.len() - i - 1;\n    let diff = abs(arr[i] - arr[j]);\n    if (diff < min_change) {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let left_change = smallest_change(arr.slice(0, i + 1));\n    let right_change = smallest_change(arr.slice(i + 1, arr.len()));\n    let min_change_here = min(left_change, right_change);\n    min_change = min(min_change, min_change_here);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] != arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] != arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let change = arr.len() - j - 1;\n      min_change = min_change.min(change);\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() {\n      if arr[i] != arr[j] {\n        min_change = min(min_change, abs(i - j))\n      }\n    }\n  }\n  return min_change",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1\n    if arr[i] != arr[j] {\n      min_change = min_change - 1\n    }\n  }\n  return min_change",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] == arr[i + j] {\n        min_change = min(min_change, j + 1)\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] == arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i != j and arr[i] == arr[j] {\n        min_change = min_change - 1\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  let min_index = isize::max();\n  for i in arr {\n    let j = i + 1;\n    let k = i - 1;\n    let diff = abs(j - k);\n    if (diff < min_change) {\n      min_change = diff;\n      min_index = i;\n    }\n  }\n  return min_index;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.slice(0, i).to_list();\n    let right = arr.slice(i, arr.len()).to_list();\n    let diff = left.len() - right.len();\n    if diff < 0 {\n      diff = -diff;\n    }\n    if diff < min_change {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr.iter() {\n    let min_change_i = isize::max();\n    for j in arr.iter() {\n      if i != j {\n        min_change_i = min(min_change_i, abs(i - j));\n      }\n    }\n    min_change = min(min_change, min_change_i);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let d = arr.get(i) - arr.get(j);\n    if d == 0 {\n      min_change = 0;\n      break;\n    }\n    min_change = min_change.min(d);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = abs(arr[i] - arr[j]);\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    let left = arr.len() - i - 1\n    let right = i\n    let left_change = arr.len() - left - 1\n    let right_change = right + 1\n    if arr[left] == arr[right] {\n      min_change = min_change if min_change > left_change else left_change\n      min_change = min_change if min_change > right_change else right_change\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] != arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      let min_change_here = arr.len() - i - 1;\n      if min_change_here < min_change {\n        min_change = min_change_here;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        min_change = min_change - 1\n        arr[i], arr[j] = arr[j], arr[i]\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let diff = arr[i] - arr[j];\n    if (diff == 0) {\n      min_change = 0;\n      break;\n    } else if (diff > 0) {\n      min_change = isize::min(min_change, diff);\n    } else {\n      min_change = isize::min(min_change, -diff);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr.get(i) != arr.get(i + j) {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let min_change_left = smallest_change(arr.slice(0, i + 1));\n    let min_change_right = smallest_change(arr.slice(i + 1, arr.len()));\n    min_change = min_change_left + min_change_right;\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    let diff = arr[i] - arr[j];\n    if (diff == 0) {\n      min_change = 0;\n      break;\n    } else if (diff > 0) {\n      min_change = min_change + 1;\n    } else {\n      min_change = min_change + 2;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in 0..arr.len() - i - 1 {\n      if arr[i] == arr[i + j] {\n        min_change = min_change.min(j + 1);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    let d = arr.get(i) - arr.get(j);\n    if (d == 0) {\n      min_change = 0;\n      break;\n    }\n    if (d > 0) {\n      min_change = min_change + 1;\n    } else {\n      min_change = min_change + 2;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    let left = arr.len() - i - 1\n    let right = i + 1\n    let min_change_left = smallest_change(arr.slice(left, i + 1))\n    let min_change_right = smallest_change(arr.slice(i, right))\n    min_change = min(min_change, min_change_left, min_change_right)\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in arr.iter() {\n    let min_change_i = isize::max();\n    for j in arr.iter() {\n      if i == j {\n        continue;\n      }\n      let min_change_j = isize::max();\n      for k in arr.iter() {\n        if i == k || j == k {\n          continue;\n        }\n        min_change_j = min(min_change_j, abs(i - k) + abs(j - k));\n      }\n      min_change_i = min(min_change_i, min_change_j);\n    }\n    min_change = min(min_change, min_change_i);\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        min_change = min_change - 1\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    let left_change = smallest_change(arr.drop(i + 1).append(left));\n    let right_change = smallest_change(arr.drop(i).append(right));\n    min_change = min_change.min(left_change + right_change);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let min_change_i = min_change;\n    let min_change_j = min_change;\n    for j in 0..arr.len() {\n      let diff = arr[i] - arr[j];\n      if (diff < 0) diff = -diff;\n      if (diff < min_change_i) min_change_i = diff;\n      if (diff < min_change_j) min_change_j = diff;\n    }\n    if (min_change_i < min_change) min_change = min_change_i;\n    if (min_change_j < min_change) min_change = min_change_j;\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i == j {\n        continue;\n      }\n      let diff = arr[i] - arr[j];\n      if diff == 0 {\n        min_change = isize::min(min_change, i - j);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        min_change = min_change.min(j - i);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1\n    if arr[i] != arr[j] {\n      min_change = min_change - 1\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  let min_index = isize::max();\n  for i in arr {\n    let curr_change = i;\n    for j in arr.iter().rev() {\n      if i != j {\n        curr_change = min_change;\n        break;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n      min_index = i;\n    }\n  }\n  return min_index;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    let diff = arr.get(i) - arr.get(j);\n    if (diff == 0) {\n      min_change = 0;\n      break;\n    } else if (diff > 0) {\n      min_change = isize::min(min_change, diff);\n    } else {\n      min_change = isize::min(min_change, -diff);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    let diff = arr[i] - arr[j];\n    if (diff == 0) {\n      min_change = 0;\n      break;\n    }\n    if (diff > 0) {\n      min_change = min_change + 1;\n    } else {\n      min_change = min_change + 2;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1\n    let a = arr[i]\n    let b = arr[j]\n    if a != b {\n      min_change = min_change - 1\n    }\n  }\n  return min_change",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1\n    if arr[i] != arr[j] {\n      min_change = min_change - 1\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr = arr.get(i);\n    let next = arr.get(i + 1);\n    let min_change_next = min_change;\n    if (curr != next) {\n      min_change_next = min_change + 1;\n    }\n    min_change = min_change_next;\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in arr {\n    let j = i - 1;\n    if j < 0 {\n      j = arr.len() - 1;\n    }\n    let diff = arr[i] - arr[j];\n    if diff < 0 {\n      diff = -diff;\n    }\n    if diff < min_change {\n      min_change = diff;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        min_change = min(min_change, abs(i - j))\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let left = arr.get(i);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(min_change.add(1));\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] != arr[j] {\n        min_change = min_change - 1\n        arr[i], arr[j] = arr[j], arr[i]\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() {\n    for j in 0..arr.len() {\n      if i != j and arr[i] == arr[j] {\n        min_change = min_change - 1\n        break\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() - 1 {\n      if arr[i] == arr[j] {\n        min_change = min_change.min(j - i);\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  let min_i = isize::max();\n  for i in arr {\n    let j = i - 1;\n    let d = arr[i] - arr[j];\n    if (d == 0) {\n      min_change = 0;\n      min_i = i;\n      break;\n    } else if (d < 0) {\n      min_change = isize::max();\n      min_i = i;\n      break;\n    } else {\n      min_change = isize::min(min_change, d);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      min_change = isize::min(min_change, i + 1);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.slice(0, i).to_sorted_vec();\n    let right = arr.slice(i, arr.len()).to_sorted_vec();\n    let min_left = smallest_change(left);\n    let min_right = smallest_change(right);\n    min_change = min_change.min(min_left + min_right);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let curr_change = 0;\n    for j in 0..arr.len() - i - 1 {\n      if arr[i + j] != arr[i + j + 1] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    let diff = arr.get(i) - arr.get(j);\n    if diff == 0 {\n      continue;\n    }\n    min_change = min_change.min(diff);\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1\n    if arr[i] != arr[j] {\n      min_change = min_change - 1\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let diff = abs(arr[i] - arr[j]);\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_min = isize::max();\n    for j in 0..arr.len() {\n      if i != j {\n        let curr_change = arr.get(i) - arr.get(j);\n        if curr_change < curr_min {\n          curr_min = curr_change;\n        }\n      }\n    }\n    if curr_min < min_change {\n      min_change = curr_min;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      let diff = arr[i] - arr[j];\n      if diff < min_change {\n        min_change = diff;\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      let d = arr[i] - arr[j];\n      if d < 0 {\n        d = -d;\n      }\n      min_change = min_change.min(d);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() - 1 {\n    let j = arr.len() - 1 - i;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n      }\n    }\n    if curr_change < min_change {\n      min_change = curr_change;\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] == arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = 0;\n    for j in 0..arr.len() {\n      if arr[i] != arr[j] {\n        curr_change += 1;\n        if curr_change < min_change {\n          min_change = curr_change;\n        }\n      }\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let left = arr.get(i - 1);\n    let right = arr.get(i + 1);\n    if left == right {\n      continue;\n    }\n    min_change = min_change.min(left.as_isize() + right.as_isize() - 2 * left.as_isize());\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] != arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;",
    "  let min_change = isize::max();\n  let min_index = isize::max();\n  for i in 0..arr.len() {\n    let curr_change = arr.len() - i;\n    if (arr.len() % 2 == 0) {\n      if (arr.len() == 2) {\n        if (arr[0] != arr[1]) {\n          curr_change = arr.len() - 1;\n        }\n      } else {\n        if (arr[i] != arr[arr.len() - 1 - i]) {\n          curr_change = arr.len() - 1;\n        }\n      }\n    }\n    if (curr_change < min_change) {\n      min_change = curr_change;\n      min_index = i;\n    }\n  }\n  return min_index;",
    "  let min_change = arr.len()\n  for i in 0..arr.len() - 1 {\n    for j in i + 1..arr.len() {\n      if arr[i] != arr[j] {\n        min_change = min(min_change, abs(i - j))\n      }\n    }\n  }\n  return min_change",
    "  let min_change = isize::max();\n  for i in 0..arr.len() {\n    let j = arr.len() - i - 1;\n    if arr[i] == arr[j] {\n      min_change = min_change.min(j - i);\n    }\n  }\n  return min_change;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}