{
  "name": "HumanEval_21_rescale_to_unit",
  "language": "rs",
  "prompt": "/// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n/// such that the smallest number will become 0 and the largest will become 1\n/// >>> rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0])\n/// vec![0.0, 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0, 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0, 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0, 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n",
  "completions": [
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  scaled.min(min);\n  scaled.max(max);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let scaled = numbers.map(x => x * scale);\n  scaled.min();\n  scaled.max();\n  return scaled;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => x - min) * scale + min;\n    return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n    let offset = min;\n    return numbers.map((n) => (n - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  scaled.min(min);\n  scaled.max(max);\n  return scaled;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / max;\n    let result = numbers.map(x => x * scale + min);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (max + min);\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    return numbers.map(n => (n - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (f64::from(x) - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map((x) => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map((x) => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let result = numbers.map(x => x * scale - min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let offset = min;\n  return numbers.map((x) => (x - offset) * scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len()));\n    let offset = min;\n    let result = numbers.map(x => (x - offset) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let scaled = numbers.map(x => x * scale);\n  return scaled.map(x => x + min);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n    let offset = min;\n    let result = numbers.map(x => (x - offset) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale + min);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (f64::from(x) - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (f64::from(x) - offset) * scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n    return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1));\n  let offset = min;\n  return numbers.map((x) => (x - offset) / scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(n => (n - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (f64::from(x) - f64::from(min)) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  scaled.min(min);\n  scaled.max(max);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale + f64::from(0.0));",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let offset = min;\n    let result = numbers.map((x) => (x - offset) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (f64::from(x) - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len()));\n    let result = numbers.map(x => (x - min) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  scaled.min(min);\n  scaled.max(max);\n  return scaled;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  scaled.min(min);\n  scaled.max(max);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / max;\n    let scaled = numbers.map(x => x * scale);\n    scaled.min(min);\n    scaled.max(max);\n    return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  return numbers.map(x => x * scale + min);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = Vec::new(numbers.len());\n  for (let i = 0; i < numbers.len(); i++) {\n    result[i] = (numbers[i] - min) / scale;\n  }\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n    let offset = min;\n    let result = numbers.map(x => (x - offset) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let result = numbers.map(x => x * scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / max;\n    let scaled = numbers.map(x => x * scale);\n    scaled.min(min);\n    scaled.max(max);\n    return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => x - min) * scale + min;\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len()));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => x - min) * scale;\n  result.min(0.0);\n  result.max(1.0);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = 1.0 / (max - min);\n    let scaled = numbers.map(x => x * scale);\n    return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  return scaled;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / max;\n    let result = numbers.map(x => x * scale + min);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / max;\n    let result = numbers.map(x => x * scale + min);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  return numbers.map(x => x * scale + min);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n    let offset = min;\n    return numbers.map(n => (n - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(n => (n - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  return scaled.map(x => x + min);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  scaled.min(min);\n  scaled.max(max);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => x - min) * scale + min;\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((n) => (n - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  return numbers.map(x => x * scale + min);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  return numbers.map(x => x * scale + min);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n    let offset = min;\n    return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / max;\n    let scaled = numbers.map(x => x * scale);\n    scaled.min(min);\n    scaled.max(max);\n    return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let scaled = numbers.map(x => x * scale);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let scaled = numbers.map(x => (x - offset) * scale);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let result = numbers.map(x => x * scale);\n  result.min(0.0);\n  result.max(1.0);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (max - min).abs();\n    let result = numbers.map(x => x - min).map(x => x * scale);\n    result.max();\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale);",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let offset = min;\n    let result = numbers.map(x => (x - offset) * scale);\n    return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / max;\n    let result = numbers.map(x => x * scale + min);\n    return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let offset = min;\n    let result = numbers.map(x => (x - offset) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) / scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map((x) => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let scaled = numbers.map(x => x * scale);\n  return scaled;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let result = numbers.map(x => (x - min) / scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map(x => (x - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) * scale);\n  result.min();\n  result.max();\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let result = numbers.map(x => x * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (x - min) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = 1.0 / (max - min);\n  let scaled = numbers.map(x => x * scale);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "    let min = numbers.min();\n    let max = numbers.max();\n    let scale = (max - min) / (f64::from(numbers.len() - 1));\n    let offset = min;\n    let result = numbers.map((x) => (x - offset) * scale);\n    return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  return numbers.map(x => (x - min) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map(x => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  return numbers.map((x) => (f64::from(x) - offset) * scale);",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let result = numbers.map(x => x * scale + min);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / max;\n  let scaled = numbers.map(x => x * scale);\n  return scaled;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let offset = min;\n  let result = numbers.map((x) => (x - offset) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(1.0) - f64::from(0.0));\n  let result = numbers.map(x => (f64::from(x) - f64::from(min)) * scale);\n  return result;",
    "  let min = numbers.min();\n  let max = numbers.max();\n  let scale = (max - min) / (f64::from(numbers.len() - 1));\n  let result = numbers.map(x => (x - min) / scale);\n  return result;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}