{
  "name": "HumanEval_126_is_sorted",
  "language": "rs",
  "prompt": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvwj22ijc.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvwj22ijc.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpvwj22ijc.rs:32:13\n   |\n32 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp247xqb33.rs:23:17\n   |\n23 |     if i != lst.nth(i) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:34:18\n   |\n34 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplnk5jlfq.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmplnk5jlfq.rs:26:13\n   |\n26 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if len(lst) == 2 {\n    if lst[0] > lst[1] {\n      return false\n    }\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  if lst[0] > lst[2] {\n    return false\n  }\n\n  if lst[1] > lst[2] {\n    return false\n  }\n\n  for i in lst[3:] {\n    if lst[i] > lst[i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpwkphlutp.rs:49:18\n   |\n49 |   for i in lst[3:] {\n   |                 -^ expected type\n   |                 |\n   |                 help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkphlutp.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkphlutp.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpwkphlutp.rs:30:6\n   |\n30 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in 1..lst.len() {\n    if lst[i] < last {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `last`\n  --> /tmp/tmp2l2qnh61.rs:27:5\n   |\n22 |   let last = lst[0];\n   |       ----\n   |       |\n   |       first assignment to `last`\n   |       help: consider making this binding mutable: `mut last`\n...\n27 |     last = lst[i];\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.data[0] < lst.data[1]\n  }\n  for i in 0..lst.len - 1 {\n    if lst.data[i] > lst.data[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:29:16\n   |\n29 |     return lst.data[0] < lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:29:30\n   |\n29 |     return lst.data[0] < lst.data[1]\n   |                              ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:31:19\n   |\n31 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:32:12\n   |\n32 |     if lst.data[i] > lst.data[i + 1] {\n   |            ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:32:26\n   |\n32 |     if lst.data[i] > lst.data[i + 1] {\n   |                          ^^^^ unknown field\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let lst_len = lst.len();\n  for i in 0..lst_len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpfp596cny.rs:23:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      return false\n    }\n    last = i;\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6odoph_5.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp6odoph_5.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i < last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:24:12\n   |\n24 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst.data[0] <= lst.data[1]\n  }\n\n  for i in 0..lst.len - 1 {\n    if lst.data[i] > lst.data[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpn9hcl71v.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpn9hcl71v.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpn9hcl71v.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpn9hcl71v.rs:31:16\n   |\n31 |     return lst.data[0] <= lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpn9hcl71v.rs:31:31\n   |\n31 |     return lst.data[0] <= lst.data[1]\n   |                               ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpn9hcl71v.rs:34:19\n   |\n34 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n34 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpn9hcl71v.rs:35:12\n   |\n35 |     if lst.data[i] > lst.data[i + 1] {\n   |            ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpn9hcl71v.rs:35:26\n   |\n35 |     if lst.data[i] > lst.data[i + 1] {\n   |                          ^^^^ unknown field\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i < last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:24:12\n   |\n24 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n\n  let i = 0\n  let j = lst.len - 1\n  while i < j {\n    if lst.0 < lst.1 {\n      i += 1\n    } else if lst.0 > lst.1 {\n      j -= 1\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp5s0whux3.rs:34:12\n   |\n34 |   let i = 0\n   |            ^ help: add `;` here\n35 |   let j = lst.len - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp5s0whux3.rs:35:22\n   |\n35 |   let j = lst.len - 1\n   |                      ^ help: add `;` here\n36 |   while i < j {\n   |   ----- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5s0whux3.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5s0whux3.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5s0whux3.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp5s0whux3.rs:31:16\n   |\n31 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp5s0whux3.rs:31:25\n   |\n31 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5s0whux3.rs:35:15\n   |\n35 |   let j = lst.len - 1\n   |               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n35 |   let j = lst.len() - 1\n   |                  ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp5s0whux3.rs:37:12\n   |\n37 |     if lst.0 < lst.1 {\n   |            ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp5s0whux3.rs:37:20\n   |\n37 |     if lst.0 < lst.1 {\n   |      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.data[0] < lst.data[1]\n  }\n  for i in 0..lst.len - 1 {\n    if lst.data[i] > lst.data[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:29:16\n   |\n29 |     return lst.data[0] < lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:29:30\n   |\n29 |     return lst.data[0] < lst.data[1]\n   |                              ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnupuk_v6.rs:31:19\n   |\n31 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:32:12\n   |\n32 |     if lst.data[i] > lst.data[i + 1] {\n   |            ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpnupuk_v6.rs:32:26\n   |\n32 |     if lst.data[i] > lst.data[i + 1] {\n   |                          ^^^^ unknown field\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.slice(1) {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpnzgcg472.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnzgcg472.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpnzgcg472.rs:27:16\n   |\n27 |   for i in lst.slice(1) {\n   |                ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n27 |   for i in lst.as_slice(1) {\n   |                ~~~~~~~~\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpz69e5ae9.rs:35:13\n   |\n35 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpk6ooe9zt.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpk6ooe9zt.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpk6ooe9zt.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i < last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:24:12\n   |\n24 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpz69e5ae9.rs:35:13\n   |\n35 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.slice(1) {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpnzgcg472.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpnzgcg472.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpnzgcg472.rs:27:16\n   |\n27 |   for i in lst.slice(1) {\n   |                ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n27 |   for i in lst.as_slice(1) {\n   |                ~~~~~~~~\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp247xqb33.rs:23:17\n   |\n23 |     if i != lst.nth(i) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2\n  }\n  if lst.len == 4 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3\n  }\n  if lst.len == 5 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4\n  }\n  if lst.len == 6 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5\n  }\n  if lst.len == 7 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5 && lst.5 <= lst.6\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:16\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:25\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:34\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:43\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 == lst.1 && lst.1 == lst.2\n  }\n  if lst.len == 4 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqdlrl5vp.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqdlrl5vp.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqdlrl5vp.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqdlrl5vp.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqdlrl5vp.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqdlrl5vp.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqdlrl5vp.rs:32:16\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqdlrl5vp.rs:32:25\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqdlrl5vp.rs:32:34\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpqdlrl5vp.rs:32:43\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let i = 0;\n  let j = lst.len - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    } else if (lst[i] < lst[j]) {\n      j -= 1;\n    } else {\n      i += 1;\n      j -= 1;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpo9ha3zcq.rs:24:9\n   |\n24 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n24 -   while (i < j) {\n24 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo9ha3zcq.rs:25:8\n   |\n25 |     if (lst[i] > lst[j]) {\n   |        ^               ^\n   |\nhelp: remove these parentheses\n   |\n25 -     if (lst[i] > lst[j]) {\n25 +     if lst[i] > lst[j] {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo9ha3zcq.rs:27:15\n   |\n27 |     } else if (lst[i] < lst[j]) {\n   |               ^               ^\n   |\nhelp: remove these parentheses\n   |\n27 -     } else if (lst[i] < lst[j]) {\n27 +     } else if lst[i] < lst[j] {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpo9ha3zcq.rs:23:15\n   |\n23 |   let j = lst.len - 1;\n   |               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n23 |   let j = lst.len() - 1;\n   |                  ++\n\nerror: aborting due to previous error; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmptreolgq4.rs:25:20\n   |\n25 |   let last = lst[0]\n   |                    ^ help: add `;` here\n26 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmptreolgq4.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmptreolgq4.rs:26:18\n   |\n26 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst)] {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpmd8f4w8_.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst)] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmd8f4w8_.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpmd8f4w8_.rs:27:18\n   |\n27 |   for i in lst[1:len(lst)] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] < lst[1] {\n    return true\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcroowebe.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcroowebe.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2zq2xpsg.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  let i = 0\n  let j = lst.len - 1\n  let pivot = lst[i]\n\n  while i < j {\n    if lst[i] < pivot {\n      i += 1\n    } else if lst[j] > pivot {\n      j -= 1\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwal7qap2.rs:26:12\n   |\n26 |   let i = 0\n   |            ^ help: add `;` here\n27 |   let j = lst.len - 1\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwal7qap2.rs:27:22\n   |\n27 |   let j = lst.len - 1\n   |                      ^ help: add `;` here\n28 |   let pivot = lst[i]\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpwal7qap2.rs:28:21\n   |\n28 |   let pivot = lst[i]\n   |                     ^ help: add `;` here\n29 | \n30 |   while i < j {\n   |   ----- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwal7qap2.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpwal7qap2.rs:27:15\n   |\n27 |   let j = lst.len - 1\n   |               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n27 |   let j = lst.len() - 1\n   |                  ++\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 == lst.1 && lst.1 == lst.2\n  }\n  if lst.len == 4 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3\n  }\n  if lst.len == 5 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3 && lst.3 == lst.4\n  }\n  if lst.len == 6 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3 && lst.3 == lst.4 && lst.4 == lst.5\n  }\n  if lst.len == 7 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3 && lst.3 == lst.4 && lst.4 == lst.5 && lst.5 == lst.6\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:16\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:25\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:34\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:43\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2zq2xpsg.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.iter() {\n    if i < last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4rxrtmio.rs:30:20\n   |\n30 |   let last = lst[0]\n   |                    ^ help: add `;` here\n31 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4rxrtmio.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4rxrtmio.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4rxrtmio.rs:32:12\n   |\n32 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4rxrtmio.rs:35:12\n   |\n30 |   let last = lst[0]\n   |              ------ expected due to this value\n...\n35 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n35 |     last = *i\n   |            +\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) < 2 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp528ypvpw.rs:22:6\n   |\n22 |   if len(lst) < 2 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp528ypvpw.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2zq2xpsg.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2zq2xpsg.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in 1..lst.len() {\n    if lst[i] < last {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `last`\n  --> /tmp/tmp2l2qnh61.rs:27:5\n   |\n22 |   let last = lst[0];\n   |       ----\n   |       |\n   |       first assignment to `last`\n   |       help: consider making this binding mutable: `mut last`\n...\n27 |     last = lst[i];\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:26:19\n   |\n26 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.data[0] <= lst.data[1]\n  }\n  for i in lst.data.iter().next() {\n    if i > lst.data[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2z9gl8j0.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2z9gl8j0.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2z9gl8j0.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp2z9gl8j0.rs:29:16\n   |\n29 |     return lst.data[0] <= lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp2z9gl8j0.rs:29:31\n   |\n29 |     return lst.data[0] <= lst.data[1]\n   |                               ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp2z9gl8j0.rs:31:16\n   |\n31 |   for i in lst.data.iter().next() {\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp2z9gl8j0.rs:32:16\n   |\n32 |     if i > lst.data[i - 1] {\n   |                ^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in 1..len(lst) {\n    if lst[i] < last {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpdl2rusph.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in 1..len(lst) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdl2rusph.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpdl2rusph.rs:27:15\n   |\n27 |   for i in 1..len(lst) {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  if len(lst) == 2 {\n    return lst[0] <= lst[1]\n  }\n  for i in 0..(len(lst) - 1) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpp_yxeko2.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpp_yxeko2.rs:25:6\n   |\n25 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpp_yxeko2.rs:28:16\n   |\n28 |   for i in 0..(len(lst) - 1) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  for i in 0..len(lst) - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp00_qt30h.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp00_qt30h.rs:26:15\n   |\n26 |   for i in 0..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  for i in 0..(len(lst) - 1) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpaj5ny5xi.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpaj5ny5xi.rs:26:16\n   |\n26 |   for i in 0..(len(lst) - 1) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  if len(lst) == 2 {\n    return lst[0] <= lst[1]\n  }\n  for i in 0..(len(lst) - 1) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpp_yxeko2.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpp_yxeko2.rs:25:6\n   |\n25 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpp_yxeko2.rs:28:16\n   |\n28 |   for i in 0..(len(lst) - 1) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8rd8vtq0.rs:22:19\n   |\n22 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp247xqb33.rs:23:17\n   |\n23 |     if i != lst.nth(i) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8rd8vtq0.rs:22:19\n   |\n22 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:34:18\n   |\n34 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  for i in lst.len - 1 {\n    if lst.0 == lst.1 {\n      return false\n    }\n    if lst.0 > lst.1 {\n      return false\n    }\n    lst = lst.1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp804ypirw.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp804ypirw.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp804ypirw.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp804ypirw.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp804ypirw.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp804ypirw.rs:31:16\n   |\n31 |   for i in lst.len - 1 {\n   |                ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   for i in lst.len() - 1 {\n   |                   ++\n\nerror[E0277]: `usize` is not an iterator\n  --> /tmp/tmp804ypirw.rs:31:12\n   |\n31 |   for i in lst.len - 1 {\n   |            ^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp804ypirw.rs:32:12\n   |\n32 |     if lst.0 == lst.1 {\n   |            ^ unknown field\n\nerror[E0609]: no field `1` ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:26:19\n   |\n26 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) < 2 {\n    return true\n  }\n\n  for i in 0..(len(lst) - 1) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvvh3h7fh.rs:22:6\n   |\n22 |   if len(lst) < 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvvh3h7fh.rs:26:16\n   |\n26 |   for i in 0..(len(lst) - 1) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 == lst.1 && lst.1 == lst.2\n  }\n  if lst.len == 4 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3\n  }\n  if lst.len == 5 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3 && lst.3 == lst.4\n  }\n  if lst.len == 6 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3 && lst.3 == lst.4 && lst.4 == lst.5\n  }\n  if lst.len == 7 {\n    return lst.0 == lst.1 && lst.1 == lst.2 && lst.2 == lst.3 && lst.3 == lst.4 && lst.4 == lst.5 && lst.5 == lst.6\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxhleocr4.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:16\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:25\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:34\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpxhleocr4.rs:32:43\n   |\n32 |     return lst.0 == lst.1 && lst.1 == lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] < lst[1] {\n    return true\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcroowebe.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcroowebe.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) < 2 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp528ypvpw.rs:22:6\n   |\n22 |   if len(lst) < 2 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmp528ypvpw.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] < lst[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8bx68qzv.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8bx68qzv.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp8bx68qzv.rs:34:15\n   |\n34 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if len(lst) == 2 {\n    return lst[0] <= lst[1]\n  }\n  for i in 0..(len(lst) - 1) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpprbrrog1.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpprbrrog1.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpprbrrog1.rs:28:6\n   |\n28 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpprbrrog1.rs:31:16\n   |\n31 |   for i in 0..(len(lst) - 1) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplnk5jlfq.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmplnk5jlfq.rs:26:13\n   |\n26 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2\n  }\n  if lst.len == 4 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3\n  }\n  if lst.len == 5 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4\n  }\n  if lst.len == 6 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5\n  }\n  if lst.len == 7 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5 && lst.5 <= lst.6\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:16\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:25\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:34\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:43\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst.data[0] <= lst.data[1]\n  }\n\n  if lst.len == 3 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n  }\n\n  if lst.len == 4 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3]\n  }\n\n  if lst.len == 5 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4]\n  }\n\n  if lst.len == 6 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4] &&\n           lst.data[4] <= lst.data[5]\n  }\n\n  if lst.len == 7 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4] &&\n           lst.data[4] <= lst.data[5] && lst.data[5] <= lst.data[6]\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:31:16\n   |\n31 |     return lst.data[0] <= lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:31:31\n   |\n31 |     return lst.data[0] <= lst.data[1]\n   |                               ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:34:10\n   |\n34 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n34 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:35:16\n   |\n35 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:35:31\n   |\n35 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                               ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:35:46\n   |\n35 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                                              ^^^^ un",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst.data[0] <= lst.data[1]\n  }\n\n  if lst.len == 3 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n  }\n\n  if lst.len == 4 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3]\n  }\n\n  if lst.len == 5 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4]\n  }\n\n  if lst.len == 6 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4] &&\n           lst.data[4] <= lst.data[5]\n  }\n\n  if lst.len == 7 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4] &&\n           lst.data[4] <= lst.data[5] && lst.data[5] <= lst.data[6]\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:31:16\n   |\n31 |     return lst.data[0] <= lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:31:31\n   |\n31 |     return lst.data[0] <= lst.data[1]\n   |                               ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpyci91n7e.rs:34:10\n   |\n34 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n34 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:35:16\n   |\n35 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:35:31\n   |\n35 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                               ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpyci91n7e.rs:35:46\n   |\n35 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                                              ^^^^ un",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.data[0] <= lst.data[1]\n  }\n  for i in 0..lst.len-1 {\n    if lst.data[i] > lst.data[i+1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpugmdu1t6.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpugmdu1t6.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpugmdu1t6.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpugmdu1t6.rs:29:16\n   |\n29 |     return lst.data[0] <= lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpugmdu1t6.rs:29:31\n   |\n29 |     return lst.data[0] <= lst.data[1]\n   |                               ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpugmdu1t6.rs:31:19\n   |\n31 |   for i in 0..lst.len-1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   for i in 0..lst.len()-1 {\n   |                      ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpugmdu1t6.rs:32:12\n   |\n32 |     if lst.data[i] > lst.data[i+1] {\n   |            ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmpugmdu1t6.rs:32:26\n   |\n32 |     if lst.data[i] > lst.data[i+1] {\n   |                          ^^^^ unknown field\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in 1..lst.len() {\n    if lst[i] < last {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `last`\n  --> /tmp/tmp2l2qnh61.rs:27:5\n   |\n22 |   let last = lst[0];\n   |       ----\n   |       |\n   |       first assignment to `last`\n   |       help: consider making this binding mutable: `mut last`\n...\n27 |     last = lst[i];\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.iter() {\n    if i != last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpxpu5tdvy.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpxpu5tdvy.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxpu5tdvy.rs:31:12\n   |\n26 |   let last = lst[0]\n   |              ------ expected due to this value\n...\n31 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n31 |     last = *i\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpxpu5tdvy.rs:28:10\n   |\n28 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.iter() {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpeevwvs9f.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpeevwvs9f.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeevwvs9f.rs:28:15\n   |\n28 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeevwvs9f.rs:31:12\n   |\n26 |   let last = lst[0]\n   |              ------ expected due to this value\n...\n31 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n31 |     last = *i\n   |            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2zq2xpsg.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2\n  }\n  if lst.len == 4 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3\n  }\n  if lst.len == 5 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4\n  }\n  if lst.len == 6 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5\n  }\n  if lst.len == 7 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5 && lst.5 <= lst.6\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:16\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:25\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:34\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:43\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmptreolgq4.rs:25:20\n   |\n25 |   let last = lst[0]\n   |                    ^ help: add `;` here\n26 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmptreolgq4.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmptreolgq4.rs:26:18\n   |\n26 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:26:19\n   |\n26 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  if len(lst) == 2 {\n    return lst[0] <= lst[1]\n  }\n  for i in 0..(len(lst) - 2) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpo4udzlup.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpo4udzlup.rs:25:6\n   |\n25 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpo4udzlup.rs:28:16\n   |\n28 |   for i in 0..(len(lst) - 2) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in 1..lst.len() {\n    if lst[i] < last {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `last`\n  --> /tmp/tmp2l2qnh61.rs:27:5\n   |\n22 |   let last = lst[0];\n   |       ----\n   |       |\n   |       first assignment to `last`\n   |       help: consider making this binding mutable: `mut last`\n...\n27 |     last = lst[i];\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.data[0] <= lst.data[1]\n  }\n  if lst.len == 3 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n  }\n  if lst.len == 4 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3]\n  }\n  if lst.len == 5 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4]\n  }\n  if lst.len == 6 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4] &&\n           lst.data[4] <= lst.data[5]\n  }\n  if lst.len == 7 {\n    return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2] &&\n           lst.data[2] <= lst.data[3] && lst.data[3] <= lst.data[4] &&\n           lst.data[4] <= lst.data[5] && lst.data[5] <= lst.data[6]\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_673unfl.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_673unfl.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_673unfl.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp_673unfl.rs:29:16\n   |\n29 |     return lst.data[0] <= lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp_673unfl.rs:29:31\n   |\n29 |     return lst.data[0] <= lst.data[1]\n   |                               ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp_673unfl.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp_673unfl.rs:32:16\n   |\n32 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp_673unfl.rs:32:31\n   |\n32 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                               ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp_673unfl.rs:32:46\n   |\n32 |     return lst.data[0] <= lst.data[1] && lst.data[1] <= lst.data[2]\n   |                                              ^^^^ un",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst[0] <= lst[1]\n  }\n\n  if lst.len == 3 {\n    return lst[0] <= lst[1] && lst[1] <= lst[2]\n  }\n\n  if lst.len == 4 {\n    return lst[0] <= lst[1] && lst[1] <= lst[2] && lst[2] <= lst[3]\n  }\n\n  if lst.len == 5 {\n    return lst[0] <= lst[1] && lst[1] <= lst[2] && lst[2] <= lst[3] && lst[3] <= lst[4]\n  }\n\n  if lst.len == 6 {\n    return lst[0] <= lst[1] && lst[1] <= lst[2] && lst[2] <= lst[3] && lst[3] <= lst[4] && lst[4] <= lst[5]\n  }\n\n  if lst.len == 7 {\n    return lst[0] <= lst[1] && lst[1] <= lst[2] && lst[2] <= lst[3] && lst[3] <= lst[4] && lst[4] <= lst[5] && lst[5] <= lst[6]\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:34:10\n   |\n34 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n34 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:38:10\n   |\n38 |   if lst.len == 4 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n38 |   if lst.len() == 4 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:42:10\n   |\n42 |   if lst.len == 5 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n42 |   if lst.len() == 5 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:46:10\n   |\n46 |   if lst.len == 6 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n46 |   if lst.len() == 6 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpl1a105he.rs:50:10\n   |\n50 |   if lst.len == 7 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] < lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpo0bcr38m.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpo0bcr38m.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpo0bcr38m.rs:34:18\n   |\n34 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in 0..len(lst) - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvnndivex.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpvnndivex.rs:26:15\n   |\n26 |   for i in 0..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in 1..lst.len() {\n    if lst[i] < last {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `last`\n  --> /tmp/tmp2l2qnh61.rs:27:5\n   |\n22 |   let last = lst[0];\n   |       ----\n   |       |\n   |       first assignment to `last`\n   |       help: consider making this binding mutable: `mut last`\n...\n27 |     last = lst[i];\n   |     ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i < last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:24:12\n   |\n24 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplnk5jlfq.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmplnk5jlfq.rs:26:13\n   |\n26 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.iter() {\n    if i < last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpa2lltrnk.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa2lltrnk.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa2lltrnk.rs:28:12\n   |\n28 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa2lltrnk.rs:31:12\n   |\n26 |   let last = lst[0]\n   |              ------ expected due to this value\n...\n31 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n31 |     last = *i\n   |            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in 0..(len(lst) - 1) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpe7y2e575.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpe7y2e575.rs:26:16\n   |\n26 |   for i in 0..(len(lst) - 1) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.iter() {\n    if i < last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpa2lltrnk.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpa2lltrnk.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa2lltrnk.rs:28:12\n   |\n28 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa2lltrnk.rs:31:12\n   |\n26 |   let last = lst[0]\n   |              ------ expected due to this value\n...\n31 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n31 |     last = *i\n   |            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) <= 1 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpbtsfo8a7.rs:22:6\n   |\n22 |   if len(lst) <= 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpbtsfo8a7.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n\n  if lst.len == 3 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2\n  }\n\n  if lst.len == 4 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3\n  }\n\n  if lst.len == 5 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4\n  }\n\n  if lst.len == 6 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5\n  }\n\n  if lst.len == 7 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5 && lst.5 <= lst.6\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:31:16\n   |\n31 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:31:25\n   |\n31 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:34:10\n   |\n34 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n34 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:16\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:25\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:34\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:43\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i < last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:24:12\n   |\n24 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzuxpsszt.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.iter() {\n    if i < last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp4rxrtmio.rs:30:20\n   |\n30 |   let last = lst[0]\n   |                    ^ help: add `;` here\n31 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4rxrtmio.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp4rxrtmio.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4rxrtmio.rs:32:12\n   |\n32 |     if i < last {\n   |            ^^^^\n   |            |\n   |            expected `&isize`, found `isize`\n   |            help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4rxrtmio.rs:35:12\n   |\n30 |   let last = lst[0]\n   |              ------ expected due to this value\n...\n35 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n35 |     last = *i\n   |            +\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  let last = lst.0\n  for i in lst.1..lst.len {\n    if lst.0 > lst.1 {\n      return false\n    }\n    if lst.0 == lst.1 {\n      if i != last {\n        return false\n      }\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp14v9u5ss.rs:31:19\n   |\n31 |   let last = lst.0\n   |                   ^ help: add `;` here\n32 |   for i in lst.1..lst.len {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp14v9u5ss.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp14v9u5ss.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp14v9u5ss.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp14v9u5ss.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp14v9u5ss.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp14v9u5ss.rs:31:18\n   |\n31 |   let last = lst.0\n   |                  ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp14v9u5ss.rs:32:16\n   |\n32 |   for i in lst.1..lst.len {\n   |                ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp14v9u5ss.rs:32:23\n   |\n32 |   for i in lst.1..lst.len {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n32 |   for i in lst.1..lst.len() {\n   |                          ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp14v9u5ss.rs:33:12\n   |\n33 |     if lst.0 > lst.1 {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpi1bucxpv.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpi1bucxpv.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpeble4nhi.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpeble4nhi.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp247xqb33.rs:23:17\n   |\n23 |     if i != lst.nth(i) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpogd5zb6d.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpogd5zb6d.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpz69e5ae9.rs:35:13\n   |\n35 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpogd5zb6d.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpogd5zb6d.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n\n  if lst.len == 3 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2\n  }\n\n  if lst.len == 4 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3\n  }\n\n  if lst.len == 5 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4\n  }\n\n  if lst.len == 6 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5\n  }\n\n  if lst.len == 7 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5 && lst.5 <= lst.6\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:31:16\n   |\n31 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:31:25\n   |\n31 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0iavogsg.rs:34:10\n   |\n34 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n34 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:16\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:25\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:34\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmp0iavogsg.rs:35:43\n   |\n35 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in 0..lst.len() - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpr9wrbgp7.rs:22:15\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let i = 0;\n  let j = lst.len - 1;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      return false;\n    }\n    if (lst[i] < lst[j]) {\n      return true;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpr9zbst68.rs:24:9\n   |\n24 |   while (i < j) {\n   |         ^     ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n24 -   while (i < j) {\n24 +   while i < j {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpr9zbst68.rs:25:8\n   |\n25 |     if (lst[i] > lst[j]) {\n   |        ^               ^\n   |\nhelp: remove these parentheses\n   |\n25 -     if (lst[i] > lst[j]) {\n25 +     if lst[i] > lst[j] {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpr9zbst68.rs:28:8\n   |\n28 |     if (lst[i] < lst[j]) {\n   |        ^               ^\n   |\nhelp: remove these parentheses\n   |\n28 -     if (lst[i] < lst[j]) {\n28 +     if lst[i] < lst[j] {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpr9zbst68.rs:23:15\n   |\n23 |   let j = lst.len - 1;\n   |               ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n23 |   let j = lst.len() - 1;\n   |                  ++\n\nerror: aborting due to previous error; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if len(lst) == 2 {\n    return lst[0] <= lst[1]\n  }\n\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9mp606zl.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9mp606zl.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp9mp606zl.rs:30:6\n   |\n30 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp9mp606zl.rs:34:18\n   |\n34 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i.next() != i.prev() {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for reference `&isize` in the current scope\n  --> /tmp/tmp4fr0nhr9.rs:23:10\n   |\n23 |     if i.next() != i.prev() {\n   |          ^^^^ method not found in `&isize`\n\nerror[E0599]: no method named `prev` found for reference `&isize` in the current scope\n  --> /tmp/tmp4fr0nhr9.rs:23:22\n   |\n23 |     if i.next() != i.prev() {\n   |                      ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] < lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp6z9_3ud3.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp6z9_3ud3.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp6z9_3ud3.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] < lst[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpekv3kxf1.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpekv3kxf1.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpekv3kxf1.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpekv3kxf1.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpekv3kxf1.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if len(lst) == 2 {\n    if lst[0] > lst[1] {\n      return false\n    }\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  if lst[1] > lst[2] {\n    return false\n  }\n\n  if lst[2] > lst[3] {\n    return false\n  }\n\n  if lst[3] > lst[4] {\n    return false\n  }\n\n  if lst[4] > lst[5] {\n    return false\n  }\n\n  if lst[5] > lst[6] {\n    return false\n  }\n\n  if lst[6] > lst[7] {\n    return false\n  }\n\n  if lst[7] > lst[8] {\n    return false\n  }\n\n  if lst[8] > lst[9] {\n    return false\n  }\n\n  if lst[9] > lst[10] {\n    return false\n  }\n\n  if lst[10] > lst[11] {\n    return false\n  }\n\n  if lst[11] > lst[12] {\n    return false\n  }\n\n  if lst[12] > lst[13] {\n    return false\n  }\n\n  if lst[13] > lst[14] {\n    return false\n  }\n\n  if lst[14] > lst[15] {\n    return false\n  }\n\n  if lst[15] > lst[16] {\n    return false\n  }\n\n  if lst[16] > lst[17] {\n    return false\n  }\n\n  if lst[17] > lst[18] {\n    return false\n  }\n\n  if lst[18] > lst[19] {\n    return false\n  }\n\n  if lst[19] > lst[20] {\n    return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n   --> /tmp/tmp17758xle.rs:132:3\n    |\n21  | fn is_sorted(lst: Vec<isize>) -> bool {\n    |                                       - unclosed delimiter\n...\n113 |   if lst[19] > lst[20] {\n    |                        - this delimiter might not be properly closed...\n114 |     return false\n115 | }\n    | - ...as it matches this but it has different indentation\n...\n132 | }\n    |   ^\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp17758xle.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp17758xle.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp17758xle.rs:30:6\n   |\n30 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp17758xle.rs:21:34\n   |\n21 | fn is_sorted(lst: Vec<isize>) -> bool {\n   |    ---------                     ^^^^ expected `bool`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpaegq_k6w.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpaegq_k6w.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpi1bucxpv.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpi1bucxpv.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:26:19\n   |\n26 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  return lst.0 <= lst.1\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2q_4a264.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2q_4a264.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp2q_4a264.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp2q_4a264.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp2q_4a264.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp2q_4a264.rs:31:14\n   |\n31 |   return lst.0 <= lst.1\n   |              ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp2q_4a264.rs:31:23\n   |\n31 |   return lst.0 <= lst.1\n   |                       ^ unknown field\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpi1bucxpv.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpi1bucxpv.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:26:19\n   |\n26 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let lst_len = lst.len();\n  if lst_len == 0 {\n    return true;\n  }\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6x2gbm_1.rs:31:12\n   |\n26 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n31 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n31 |     last = *i;\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp6x2gbm_1.rs:28:10\n   |\n28 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2\n  }\n  if lst.len == 4 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3\n  }\n  if lst.len == 5 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4\n  }\n  if lst.len == 6 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5\n  }\n  if lst.len == 7 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3 && lst.3 <= lst.4 && lst.4 <= lst.5 && lst.5 <= lst.6\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqqf9hf9y.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:16\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:25\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:34\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpqqf9hf9y.rs:32:43\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst)] {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmphwi3d40f.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst)] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmphwi3d40f.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmphwi3d40f.rs:27:18\n   |\n27 |   for i in lst[1:len(lst)] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst)] {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpmd8f4w8_.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst)] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmd8f4w8_.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpmd8f4w8_.rs:27:18\n   |\n27 |   for i in lst[1:len(lst)] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpi539u6rm.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  if lst.len == 1 {\n    return true\n  }\n\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n\n  let last = lst.0\n  for i in lst.1..lst.len {\n    if lst.0 > lst.1 {\n      return false\n    }\n    if lst.0 == lst.1 {\n      return false\n    }\n    if lst.0 < lst.1 {\n      return true\n    }\n    last = lst.1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0jxi3rig.rs:34:19\n   |\n34 |   let last = lst.0\n   |                   ^ help: add `;` here\n35 |   for i in lst.1..lst.len {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0jxi3rig.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0jxi3rig.rs:26:10\n   |\n26 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0jxi3rig.rs:30:10\n   |\n30 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n30 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp0jxi3rig.rs:31:16\n   |\n31 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0jxi3rig.rs:31:25\n   |\n31 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp0jxi3rig.rs:34:18\n   |\n34 |   let last = lst.0\n   |                  ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmp0jxi3rig.rs:35:16\n   |\n35 |   for i in lst.1..lst.len {\n   |                ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp0jxi3rig.rs:35:23\n   |\n35 |   for i in lst.1..lst.len {\n   |                       ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n35 |   for i in lst.1..lst.len() {\n   |                          ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmp0jxi3rig.rs:36:12\n   |\n36 |     if lst.0 > lst.1 {\n   |       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst.slice(1) {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp15jptewh.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst.slice(1) {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp15jptewh.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp15jptewh.rs:27:16\n   |\n27 |   for i in lst.slice(1) {\n   |                ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n27 |   for i in lst.as_slice(1) {\n   |                ~~~~~~~~\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpz69e5ae9.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmpz69e5ae9.rs:35:13\n   |\n35 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n\n  for i in 0..lst.len - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp5f92l_tg.rs:26:19\n   |\n26 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n26 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] < lst[i - 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpuwumxtla.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if len(lst) == 2 {\n    return lst[0] <= lst[1]\n  }\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa6q8ncd2.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa6q8ncd2.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpa6q8ncd2.rs:28:6\n   |\n28 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpa6q8ncd2.rs:31:18\n   |\n31 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpogd5zb6d.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpogd5zb6d.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp247xqb33.rs:23:17\n   |\n23 |     if i != lst.nth(i) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] < lst[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if len(lst) == 2 {\n    return lst[0] <= lst[1]\n  }\n\n  for i in 0..(len(lst) - 2) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmk3dyngf.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmk3dyngf.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmk3dyngf.rs:30:6\n   |\n30 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpmk3dyngf.rs:34:16\n   |\n34 |   for i in 0..(len(lst) - 2) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst.iter() {\n    if i > lst[i - 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplu8dyzwv.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmplu8dyzwv.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplu8dyzwv.rs:35:12\n   |\n35 |     if i > lst[i - 1] {\n   |            ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  for i in lst.iter() {\n    if i != lst.nth(i - 1) {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0599]: no method named `nth` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp46h17kf7.rs:23:17\n   |\n23 |     if i != lst.nth(i - 1) {\n   |                 ^^^ method not found in `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] < lst[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in lst.iter() {\n    if i != lst[i] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmppfxxdrp4.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n  --> /tmp/tmppfxxdrp4.rs:27:13\n   |\n27 |     if i != lst[i] {\n   |             ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      return false\n    }\n    last = i\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpaegq_k6w.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i\n   |            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpaegq_k6w.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if last > i {\n      return false;\n    }\n    last = i;\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:24:15\n   |\n24 |     if last > i {\n   |               ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n24 |     if last > *i {\n   |               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyxsng_a9.rs:27:12\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n27 |     last = i;\n   |            ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n27 |     last = *i;\n   |            +\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] < lst[1] {\n    return true\n  }\n\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcroowebe.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpcroowebe.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst[0] <= lst[1]\n  }\n  for i in 0..lst.len - 2 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpuzwd9wmx.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpuzwd9wmx.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpuzwd9wmx.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpuzwd9wmx.rs:31:19\n   |\n31 |   for i in 0..lst.len - 2 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   for i in 0..lst.len() - 2 {\n   |                      ++\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] > lst[1] {\n    return false\n  }\n  for i in 1..len(lst) - 1 {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmprqtsgw7i.rs:31:15\n   |\n31 |   for i in 1..len(lst) - 1 {\n   |               ^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  if lst.len == 3 {\n    return lst.0 <= lst.1 && lst.1 <= lst.2\n  }\n  return lst.0 <= lst.1 && lst.1 <= lst.2 && lst.2 <= lst.3\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe8l9g98o.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe8l9g98o.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe8l9g98o.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpe8l9g98o.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpe8l9g98o.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpe8l9g98o.rs:31:10\n   |\n31 |   if lst.len == 3 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   if lst.len() == 3 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpe8l9g98o.rs:32:16\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpe8l9g98o.rs:32:25\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                         ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpe8l9g98o.rs:32:34\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   |                                  ^ unknown field\n\nerror[E0609]: no field `2` on type `Vec<isize>`\n  --> /tmp/tmpe8l9g98o.rs:32:43\n   |\n32 |     return lst.0 <= lst.1 && lst.1 <= lst.2\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if lst[0] > lst[1] {\n    return false\n  }\n\n  for i in lst[1:len(lst) - 1] {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpj4hyao3j.rs:34:18\n   |\n34 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp2zq2xpsg.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmp2zq2xpsg.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] < lst[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 1 {\n    return true\n  }\n\n  let last = lst[0]\n  for i in lst[1:len(lst) - 1] {\n    if last > lst[i] {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpk6ooe9zt.rs:26:20\n   |\n26 |   let last = lst[0]\n   |                    ^ help: add `;` here\n27 |   for i in lst[1:len(lst) - 1] {\n   |   --- unexpected token\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpk6ooe9zt.rs:22:6\n   |\n22 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0412]: cannot find type `len` in this scope\n  --> /tmp/tmpk6ooe9zt.rs:27:18\n   |\n27 |   for i in lst[1:len(lst) - 1] {\n   |                 -^^^ not found in this scope\n   |                 |\n   |                 help: maybe you meant to write a path separator here: `::`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  if len(lst) == 1 {\n    return true\n  }\n\n  if len(lst) == 2 {\n    if lst[0] < lst[1] {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  if lst[0] < lst[1] {\n    return true\n  }\n\n  if lst[1] < lst[2] {\n    return true\n  }\n\n  if lst[2] < lst[3] {\n    return true\n  }\n\n  if lst[3] < lst[4] {\n    return true\n  }\n\n  if lst[4] < lst[5] {\n    return true\n  }\n\n  if lst[5] < lst[6] {\n    return true\n  }\n\n  if lst[6] < lst[7] {\n    return true\n  }\n\n  if lst[7] < lst[8] {\n    return true\n  }\n\n  if lst[8] < lst[9] {\n    return true\n  }\n\n  if lst[9] < lst[10] {\n    return true\n  }\n\n  if lst[10] < lst[11] {\n    return true\n  }\n\n  if lst[11] < lst[12] {\n    return true\n  }\n\n  if lst[12] < lst[13] {\n    return true\n  }\n\n  if lst[13] < lst[14] {\n    return true\n  }\n\n  if lst[14] < lst[15] {\n    return true\n  }\n\n  if lst[15] < lst[16] {\n    return true\n  }\n\n  if lst[16] < lst[17] {\n    return true\n  }\n\n  if lst[17] < lst[18] {\n    return true\n  }\n\n  if lst[18] < lst[19] {\n    return true\n  }\n\n  if lst[19] < lst[20]\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error: expected `{`, found `}`\n   --> /tmp/tmpqhgloyzf.rs:115:1\n    |\n114 |   if lst[19] < lst[20]\n    |   -- this `if` expression has a condition, but no block\n115 | }\n    | ^ expected `{`\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqhgloyzf.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqhgloyzf.rs:26:6\n   |\n26 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpqhgloyzf.rs:30:6\n   |\n30 |   if len(lst) == 2 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n  if len(lst) == 1 {\n    return true\n  }\n  if lst[0] < lst[1] {\n    return true\n  }\n  return false\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmps46thq16.rs:25:6\n   |\n25 |   if len(lst) == 1 {\n   |      ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.0 == lst.1\n  }\n  for i in 0..lst.len - 1 {\n    if lst.0 == lst.1 {\n      return false\n    }\n    if lst.0 > lst.1 {\n      return false\n    }\n    lst = lst.1\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpdhqrwbex.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpdhqrwbex.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpdhqrwbex.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpdhqrwbex.rs:29:16\n   |\n29 |     return lst.0 == lst.1\n   |                ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpdhqrwbex.rs:29:25\n   |\n29 |     return lst.0 == lst.1\n   |                         ^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpdhqrwbex.rs:31:19\n   |\n31 |   for i in 0..lst.len - 1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   for i in 0..lst.len() - 1 {\n   |                      ++\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpdhqrwbex.rs:32:12\n   |\n32 |     if lst.0 == lst.1 {\n   |            ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpdhqrwbex.rs:32:21\n   |\n32 |     if lst.0 == lst.1 {\n   |                     ^ unknown field\n\nerror[E0609]: no field `0` on type `Vec<isize>`\n  --> /tmp/tmpdhqrwbex.rs:35:12\n   |\n35 |     if lst.0 > lst.1 {\n   |            ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<isize>`\n  --> /tmp/tmpdhqrwbex.rs:35:20\n   |\n35 |     if lst.0 > lst.1 {\n   |                    ^ unknown field\n\nerror[E0609]: no field `1` on type `Vec<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if lst.len == 0 {\n    return true\n  }\n  if lst.len == 1 {\n    return true\n  }\n  if lst.len == 2 {\n    return lst.data[0] < lst.data[1]\n  }\n  for i in 0..lst.len-1 {\n    if lst.data[i] > lst.data[i+1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp68mnl4tp.rs:22:10\n   |\n22 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n22 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp68mnl4tp.rs:25:10\n   |\n25 |   if lst.len == 1 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n25 |   if lst.len() == 1 {\n   |             ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp68mnl4tp.rs:28:10\n   |\n28 |   if lst.len == 2 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n28 |   if lst.len() == 2 {\n   |             ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp68mnl4tp.rs:29:16\n   |\n29 |     return lst.data[0] < lst.data[1]\n   |                ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp68mnl4tp.rs:29:30\n   |\n29 |     return lst.data[0] < lst.data[1]\n   |                              ^^^^ unknown field\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp68mnl4tp.rs:31:19\n   |\n31 |   for i in 0..lst.len-1 {\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n31 |   for i in 0..lst.len()-1 {\n   |                      ++\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp68mnl4tp.rs:32:12\n   |\n32 |     if lst.data[i] > lst.data[i+1] {\n   |            ^^^^ unknown field\n\nerror[E0609]: no field `data` on type `Vec<isize>`\n  --> /tmp/tmp68mnl4tp.rs:32:26\n   |\n32 |     if lst.data[i] > lst.data[i+1] {\n   |                          ^^^^ unknown field\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0609, E0616.\nFor more information about an error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  if len(lst) == 0 {\n    return true\n  }\n\n  for i in 0..(len(lst) - 1) {\n    if lst[i] > lst[i + 1] {\n      return false\n    }\n  }\n  return true\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293096,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_812jq74.rs:22:6\n   |\n22 |   if len(lst) == 0 {\n   |      ^^^ not found in this scope\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmp_812jq74.rs:26:16\n   |\n26 |   for i in 0..(len(lst) - 1) {\n   |                ^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return whether or not they are sorted\n/// in ascending order. If vector has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(vec![5])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(vec![1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(vec![1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(vec![1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(vec![1, 2, 2, 2, 3, 4])\n/// false\nfn is_sorted(lst: Vec<isize>) -> bool {\n  let last = lst[0];\n  for i in lst.iter() {\n    if i != last {\n      if i < last {\n        return false;\n      }\n      last = i;\n    }\n  }\n  return true;\n}\n\nfn main() {\n    let candidate = is_sorted;\n    assert_eq!(candidate(vec![5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7]), true);\n    assert_eq!(candidate(vec![1, 3, 2, 4, 5, 6, 7]), false);\n    assert_eq!(candidate(Vec::<isize>::new()), true);\n    assert_eq!(candidate(vec![1]), true);\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 2, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 4]), false);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), true);\n}\n",
      "timestamp": 1664293095,
      "stdout": "",
      "stderr": "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpy5km8qpg.rs:24:10\n   |\n24 |     if i != last {\n   |          ^^ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n             i16\n             i32\n             i64\n             i8\n             isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:25:14\n   |\n25 |       if i < last {\n   |              ^^^^\n   |              |\n   |              expected `&isize`, found `isize`\n   |              help: consider borrowing here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy5km8qpg.rs:28:14\n   |\n22 |   let last = lst[0];\n   |              ------ expected due to this value\n...\n28 |       last = i;\n   |              ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |       last = *i;\n   |              +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}