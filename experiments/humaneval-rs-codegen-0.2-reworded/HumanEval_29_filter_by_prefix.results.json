{
  "name": "HumanEval_29_filter_by_prefix",
  "language": "rs",
  "prompt": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut out = Vec::new();\n  for i in strings {\n    if i.starts_with(prefix) {\n      out.push(i);\n    }\n  }\n  out\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp5sds0jmo.rs:9:22\n     |\n9    |     if i.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if i.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in strings {\n        if i.starts_with(prefix) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpf4t4_ks_.rs:9:26\n     |\n9    |         if i.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if i.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for i in strings {\n    if i.starts_with(prefix) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp_ig3zpk0.rs:9:22\n     |\n9    |     if i.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if i.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut out = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            out.push(s);\n        }\n    }\n    return out;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2awofsma.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in strings {\n        if i.starts_with(prefix) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpf4t4_ks_.rs:9:26\n     |\n9    |         if i.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if i.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for string in strings {\n        if string.starts_with(prefix) {\n            vec.push(string);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpgf13gzk6.rs:9:31\n     |\n9    |         if string.starts_with(prefix) {\n     |                   ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |                   |\n     |                   required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if string.starts_with(&prefix) {\n     |                               +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for i in strings {\n        if i.starts_with(prefix) {\n            vec.push(i);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp95odiix6.rs:9:26\n     |\n9    |         if i.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if i.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for i in strings {\n        if i.starts_with(prefix) {\n            vec.push(i);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp95odiix6.rs:9:26\n     |\n9    |         if i.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if i.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut out = Vec::new();\n  for i in strings {\n    if i.starts_with(prefix) {\n      out.push(i);\n    }\n  }\n  out\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp5sds0jmo.rs:9:22\n     |\n9    |     if i.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if i.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut out = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      out.push(s);\n    }\n  }\n  return out;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp8o1hafms.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut out = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            out.push(s);\n        }\n    }\n    return out;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2awofsma.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for i in strings {\n    if i.starts_with(prefix) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp_ig3zpk0.rs:9:22\n     |\n9    |     if i.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if i.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for string in strings {\n        if string.starts_with(prefix) {\n            vec.push(string);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpgf13gzk6.rs:9:31\n     |\n9    |         if string.starts_with(prefix) {\n     |                   ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |                   |\n     |                   required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if string.starts_with(&prefix) {\n     |                               +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpr6446_gb.rs:9:22\n     |\n9    |     if s.starts_with(prefix) {\n     |          ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |          |\n     |          required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if s.starts_with(&prefix) {\n     |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmp2ko3qc76.rs:9:27\n     |\n9    |     if string.starts_with(prefix) {\n     |               ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |               |\n     |               required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |     if string.starts_with(&prefix) {\n     |                           +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpu6gnqj92.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Filter an input vector of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n/// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix: String) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(), String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n",
      "timestamp": 1664292973,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n    --> /tmp/tmpytrlmwp2.rs:9:26\n     |\n9    |         if s.starts_with(prefix) {\n     |              ----------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n     |              |\n     |              required by a bound introduced by this call\n     |\n     = note: the trait bound `String: Pattern<'_>` is not satisfied\n     = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `core::str::<impl str>::starts_with`\nhelp: consider borrowing here\n     |\n9    |         if s.starts_with(&prefix) {\n     |                          +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}