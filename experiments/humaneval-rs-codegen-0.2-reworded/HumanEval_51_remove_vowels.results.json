{
  "name": "HumanEval_51_remove_vowels",
  "language": "rs",
  "prompt": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmprrqow8wh.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmprrqow8wh.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprrqow8wh.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmprrqow8wh.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmprrqow8wh.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpkc4eoviy.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpkc4eoviy.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpkc4eoviy.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if (vowels_count == 0) {\n    return result\n  } else {\n    return \"\"\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprafvcm_3.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprafvcm_3.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmprafvcm_3.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmprafvcm_3.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprafvcm_3.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) < 0) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpf1a_6l4i.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpf1a_6l4i.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpf1a_6l4i.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpf1a_6l4i.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpf1a_6l4i.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpf1a_6l4i.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpf1a_6l4i.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    } else {\n      result += \" \"\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwrvwdrqx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwrvwdrqx.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpwrvwdrqx.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:19:7\n   |\n19 |       result += \" \"\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwrvwdrqx.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) == -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpc4y7mtlp.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpc4y7mtlp.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpc4y7mtlp.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpc4y7mtlp.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpc4y7mtlp.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpc4y7mtlp.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let new_text = \"\"\n  for i in 0..text_len {\n    let char = text[i]\n    if vowels.indexOf(char) < 0 {\n      new_text += char\n    }\n  }\n  return new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpdz6_uurw.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdz6_uurw.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpdz6_uurw.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let new_text = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpdz6_uurw.rs:16:20\n   |\n16 |   let new_text = \"\"\n   |                    ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdz6_uurw.rs:18:23\n   |\n18 |     let char = text[i]\n   |                       ^ help: add `;` here\n19 |     if vowels.indexOf(char) < 0 {\n   |     -- unexpected token\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpdz6_uurw.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpdz6_uurw.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdz6_uurw.rs:18:16\n   |\n18 |     let char = text[i]\n   |                ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    } else {\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count === 0) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmptp5278qd.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmptp5278qd.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmptp5278qd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmptp5278qd.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmptp5278qd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i]\n    if (vowels.indexOf(ch) < 0) {\n      result += ch\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpvodr64wd.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpvodr64wd.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpvodr64wd.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for (let i = 0; i < text.length; i++) {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpvodr64wd.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpvodr64wd.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpvodr64wd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpvodr64wd.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpvodr64wd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpvodr64wd.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for c in text {\n    if !vowels.contains(c) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpcpdjd_y2.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpcpdjd_y2.rs:17:7\n   |\n17 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcpdjd_y2.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) < 0) {\n      result += char;\n    } else {\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count == 0) {\n    return result;\n  } else {\n    return result.pad_left(text.length, \" \");\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1gtw8xxl.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp1gtw8xxl.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp1gtw8xxl.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1gtw8xxl.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp1gtw8xxl.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmptqy6fckd.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmptqy6fckd.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmptqy6fckd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmptqy6fckd.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmptqy6fckd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) < 0) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpf1a_6l4i.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpf1a_6l4i.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpf1a_6l4i.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpf1a_6l4i.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpf1a_6l4i.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpf1a_6l4i.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpf1a_6l4i.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in 0..text_len {\n    if text[i] in vowels {\n      continue\n    }\n    result += text[i]\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkwjhj5yl.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `{`, found keyword `in`\n  --> /tmp/tmpkwjhj5yl.rs:18:16\n   |\n18 |     if text[i] in vowels {\n   |     --         ^^ expected `{`\n   |     |\n   |     this `if` expression has a condition, but no block\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpkwjhj5yl.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpkwjhj5yl.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwjhj5yl.rs:23:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n23 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) !== -1) {\n      vowels_count += 1;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count === 0) {\n    return result;\n  } else {\n    return result.slice(0, result.length - vowels_count);\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpg8k0dg5y.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpg8k0dg5y.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpg8k0dg5y.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpg8k0dg5y.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpg8k0dg5y.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) >= 0) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpfe2cnv3x.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpfe2cnv3x.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpfe2cnv3x.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpfe2cnv3x.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpfe2cnv3x.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.indexOf(c) < 0 {\n      result += c\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpm5lgo8ds.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpm5lgo8ds.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpm5lgo8ds.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpm5lgo8ds.rs:16:15\n   |\n16 |     if vowels.indexOf(c) < 0 {\n   |               ^^^^^^^ method not found in `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpm5lgo8ds.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm5lgo8ds.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = vowels.length;\n  let text_length = text.length;\n  let result = String::from(\"\");\n  for (let i = 0; i < text_length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) === -1) {\n      result = result.concat(char);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpaqj7zu40.rs:17:8\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpaqj7zu40.rs:17:12\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpaqj7zu40.rs:17:14\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpaqj7zu40.rs:17:13\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpaqj7zu40.rs:17:14\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpaqj7zu40.rs:14:29\n   |\n14 |   let vowels_count = vowels.length;\n   |                             ^^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpaqj7zu40.rs:15:26\n   |\n15 |   let text_length = text.length;\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_lower = vowels.toLowerCase();\n  let text_lower = text.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < text_lower.length; i++) {\n    let c = text_lower[i];\n    if (vowels_lower.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpp_w2ug6z.rs:17:8\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpp_w2ug6z.rs:17:12\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpp_w2ug6z.rs:17:14\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp_w2ug6z.rs:17:13\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpp_w2ug6z.rs:17:14\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |              ^ expected expression\n\nerror[E0599]: no method named `toLowerCase` found for reference `&str` in the current scope\n  --> /tmp/tmpp_w2ug6z.rs:14:29\n   |\n14 |   let vowels_lower = vowels.toLowerCase();\n   |                             ^^^^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror[E0599]: no method named `toLowerCase` found for struct `String` in the current scope\n  --> /tmp/tmpp_w2ug6z.rs:15:25\n   |\n15 |   let text_lower = text.toLowerCase();\n   |                         ^^^^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let new_text = \"\"\n  let i = 0\n  let j = 0\n  while (i < text_len) {\n    if (vowels.indexOf(text[i]) == -1) {\n      new_text += text[i]\n    } else {\n      j = i + 1\n      while (j < text_len) {\n        if (vowels.indexOf(text[j]) == -1) {\n          new_text += text[j]\n          break\n        } else {\n          j += 1\n        }\n      }\n      i = j\n    }\n    i += 1\n  }\n  return new_text\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3hjtsf8x.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3hjtsf8x.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3hjtsf8x.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let new_text = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3hjtsf8x.rs:16:20\n   |\n16 |   let new_text = \"\"\n   |                    ^ help: add `;` here\n17 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3hjtsf8x.rs:17:12\n   |\n17 |   let i = 0\n   |            ^ help: add `;` here\n18 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp3hjtsf8x.rs:18:12\n   |\n18 |   let j = 0\n   |            ^ help: add `;` here\n19 |   while (i < text_len) {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp3hjtsf8x.rs:23:16\n   |\n23 |       j = i + 1\n   |                ^ help: add `;` here\n24 |       while (j < text_len) {\n   |       ----- unexpected token\n\nerror: expected `;`, found keyword `break`\n  --> /tmp/tmp3hjtsf8x.rs:26:30\n   |\n26 |           new_text += text[j]\n   |                              ^ help: add `;` here\n27 |           break\n   |           ----- unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp3hjtsf8x.rs:19:9\n   |\n19 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   while (i < text_len) {\n19 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) < 0) {\n      result += char;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxmn540h1.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxmn540h1.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxmn540h1.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxmn540h1.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxmn540h1.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpxmn540h1.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxmn540h1.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in 0..text_len {\n    let c = text[i]\n    if vowels.indexOf(c) < 0 {\n      result += c\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy4hjadui.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy4hjadui.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpy4hjadui.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpy4hjadui.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpy4hjadui.rs:18:20\n   |\n18 |     let c = text[i]\n   |                    ^ help: add `;` here\n19 |     if vowels.indexOf(c) < 0 {\n   |     -- unexpected token\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpy4hjadui.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpy4hjadui.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpy4hjadui.rs:18:13\n   |\n18 |     let c = text[i]\n   |             ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.includes(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if (vowels_count == 0) {\n    return result\n  } else {\n    return result.padStart(text.length, \"\")\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmg99uw29.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmg99uw29.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmg99uw29.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmg99uw29.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpmg99uw29.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `includes` found for reference `&str` in the current scope\n  --> /tmp/tmpmg99uw29.rs:17:15\n   |\n17 |     if vowels.includes(c) {\n   |               ^^^^^^^^ method not found in `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpmg99uw29.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmg99uw29.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in range(0, text_len) {\n    let ch = text[i]\n    if (vowels.indexOf(ch) == -1) {\n      result += ch\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprs9s0xjx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprs9s0xjx.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprs9s0xjx.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprs9s0xjx.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in range(0, text_len) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmprs9s0xjx.rs:18:21\n   |\n18 |     let ch = text[i]\n   |                     ^ help: add `;` here\n19 |     if (vowels.indexOf(ch) == -1) {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmprs9s0xjx.rs:17:12\n   |\n17 |   for i in range(0, text_len) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprs9s0xjx.rs:19:8\n   |\n19 |     if (vowels.indexOf(ch) == -1) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (vowels.indexOf(ch) == -1) {\n19 +     if vowels.indexOf(ch) == -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmprs9s0xjx.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmprs9s0xjx.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9h70jx1k.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9h70jx1k.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9h70jx1k.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count += 1;\n    }\n    if (vowels_count == 0) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp5u7zjn0c.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp5u7zjn0c.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp5u7zjn0c.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp5u7zjn0c.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp5u7zjn0c.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) >= 0) {\n      vowels_count += 1;\n    } else {\n      result += ch;\n    }\n  }\n  if (vowels_count == 0) {\n    return result;\n  } else {\n    return result.slice(0, result.length - vowels_count);\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpmcb5t1j2.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpmcb5t1j2.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpmcb5t1j2.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpmcb5t1j2.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpmcb5t1j2.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  let i = 0;\n  let j = 0;\n  while (i < text_len) {\n    if (vowels.indexOf(text[i]) == -1) {\n      new_text += text[i];\n      i++;\n    } else {\n      j = i + 1;\n      while (j < text_len) {\n        if (vowels.indexOf(text[j]) != -1) {\n          break;\n        } else {\n          new_text += text[j];\n          j++;\n        }\n      }\n      i = j;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: Rust has no postfix increment operator\n  --> /tmp/tmpikt2whd1.rs:22:8\n   |\n22 |       i++;\n   |        ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |       { let tmp = i; i += 1; tmp };\n   |       +++++++++++  ~~~~~~~~~~~~~~~\n22 -       i++;\n22 +       i += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpikt2whd1.rs:30:12\n   |\n30 |           j++;\n   |            ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n30 |           { let tmp = j; j += 1; tmp };\n   |           +++++++++++  ~~~~~~~~~~~~~~~\n30 -           j++;\n30 +           j += 1;\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpikt2whd1.rs:19:9\n   |\n19 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   while (i < text_len) {\n19 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpikt2whd1.rs:20:8\n   |\n20 |     if (vowels.indexOf(text[i]) == -1) {\n   |        ^                             ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(text[i]) == -1) {\n20 +     if vowels.indexOf(text[i]) == -1 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpikt2whd1.rs:25:13\n   |\n25 |       while (j < text_len) {\n   |             ^            ^\n   |\nhelp: remove these parentheses\n   |\n25 -       while (j < text_len) {\n25 +       while j < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpikt2whd1.rs:26:12\n   |\n26 |         if (vowels.indexOf(text[j]) != -1) {\n   |            ^                             ^\n   |\nhelp: remove these parentheses\n   |\n26 -         if (vowels.indexOf(text[j]) != -1) {\n26 +         if vowels.indexOf(text[j]) != -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpikt2whd1.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if vowels_count == 0 {\n    return result\n  }\n  return result.pad_left(text.length, \"\")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmphtvtddon.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmphtvtddon.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmphtvtddon.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmphtvtddon.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmphtvtddon.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphtvtddon.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror[E0599]: no method named `pad_left` found for reference `&str` in the current scope\n  --> /tmp/tmphtvtddon.rs:26:17\n   |\n26 |   return result.pad_left(text.length, \"\")\n   |                 ^^^^^^^^ method not found in `&str`\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmphtvtddon.rs:26:31\n   |\n26 |   return result.pad_left(text.length, \"\")\n   |                               ^^^^^^ unknown field\n\nerror: aborting due to 8 previous errors\n\nSome errors ha",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpg_n9fhxt.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpg_n9fhxt.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpg_n9fhxt.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpg_n9fhxt.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpg_n9fhxt.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) != -1) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1naslk89.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp1naslk89.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp1naslk89.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1naslk89.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp1naslk89.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) === -1) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpm38pm8o2.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpm38pm8o2.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpm38pm8o2.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpm38pm8o2.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpm38pm8o2.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpm38pm8o2.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) === -1) {\n      result += char;\n    } else {\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count === 0) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplzl17jxm.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplzl17jxm.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplzl17jxm.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplzl17jxm.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplzl17jxm.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    } else {\n      result += \" \"\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwrvwdrqx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwrvwdrqx.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpwrvwdrqx.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:19:7\n   |\n19 |       result += \" \"\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwrvwdrqx.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) !== -1) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw50xnoaa.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpw50xnoaa.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpw50xnoaa.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw50xnoaa.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpw50xnoaa.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpkc4eoviy.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpkc4eoviy.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpkc4eoviy.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1p0xhu5y.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp1p0xhu5y.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp1p0xhu5y.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1p0xhu5y.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp1p0xhu5y.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplt6t3z82.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplt6t3z82.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplt6t3z82.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplt6t3z82.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplt6t3z82.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmplt6t3z82.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgk3m67u0.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgk3m67u0.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgk3m67u0.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgk3m67u0.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgk3m67u0.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpgk3m67u0.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpgk3m67u0.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbtrtk48b.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpbtrtk48b.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpbtrtk48b.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpbtrtk48b.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbtrtk48b.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpbtrtk48b.rs:16:27\n   |\n16 |     if (vowels.indexOf(c) === -1) {\n   |                           ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpbtrtk48b.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for c in text {\n    if (vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmpykia7rvp.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpykia7rvp.rs:16:8\n   |\n16 |     if (vowels.contains(c)) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (vowels.contains(c)) {\n16 +     if vowels.contains(c) {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpykia7rvp.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpykia7rvp.rs:17:7\n   |\n17 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpykia7rvp.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368, E0423.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_regex = new RegExp(vowels, \"g\")\n  let result = text.replace(vowels_regex, \"\")\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpanh3ws13.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_regex = new RegExp(vowels, \"g\")\n   |   --- unexpected token\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `else`, `{`, or an operator, found `RegExp`\n  --> /tmp/tmpanh3ws13.rs:14:26\n   |\n14 |   let vowels_regex = new RegExp(vowels, \"g\")\n   |                          ^^^^^^ expected one of 8 possible tokens\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    } else {\n      result += \" \"\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwrvwdrqx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwrvwdrqx.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpwrvwdrqx.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:19:7\n   |\n19 |       result += \" \"\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwrvwdrqx.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) == -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpc4y7mtlp.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpc4y7mtlp.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpc4y7mtlp.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpc4y7mtlp.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpc4y7mtlp.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpc4y7mtlp.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp3njtsyhe.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp3njtsyhe.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp3njtsyhe.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmp3njtsyhe.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp3njtsyhe.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp3njtsyhe.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp3njtsyhe.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplt6t3z82.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplt6t3z82.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplt6t3z82.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplt6t3z82.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplt6t3z82.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmplt6t3z82.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) < 0) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmps9iy55mq.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmps9iy55mq.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmps9iy55mq.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmps9iy55mq.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmps9iy55mq.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmps9iy55mq.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      new_text += c;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9wenk_an.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9wenk_an.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9wenk_an.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9wenk_an.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9wenk_an.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp9wenk_an.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp9wenk_an.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in 0..text.length {\n    let ch = text[i]\n    if (vowels.indexOf(ch) >= 0) {\n      result += ch\n    } else {\n      result += ch\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp58a58311.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp58a58311.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp58a58311.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in 0..text.length {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp58a58311.rs:17:21\n   |\n17 |     let ch = text[i]\n   |                     ^ help: add `;` here\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |     -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp58a58311.rs:18:8\n   |\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |        ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (vowels.indexOf(ch) >= 0) {\n18 +     if vowels.indexOf(ch) >= 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp58a58311.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp58a58311.rs:16:20\n   |\n16 |   for i in 0..text.length {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp58a58311.rs:17:14\n   |\n17 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbtrtk48b.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpbtrtk48b.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpbtrtk48b.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpbtrtk48b.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbtrtk48b.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpbtrtk48b.rs:16:27\n   |\n16 |     if (vowels.indexOf(c) === -1) {\n   |                           ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpbtrtk48b.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 7 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9is5p7_l.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9is5p7_l.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9is5p7_l.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9is5p7_l.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9is5p7_l.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let without_vowels = text.replace(vowels, \"\");\n  return without_vowels\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0277]: expected a `FnMut<(char,)>` closure, found `String`\n   --> /tmp/tmpmugcxdcv.rs:14:37\n    |\n14  |   let without_vowels = text.replace(vowels, \"\");\n    |                             ------- ^^^^^^ expected an implementor of trait `Pattern<'_>`\n    |                             |\n    |                             required by a bound introduced by this call\n    |\n    = note: the trait bound `String: Pattern<'_>` is not satisfied\n    = note: required because of the requirements on the impl of `Pattern<'_>` for `String`\nnote: required by a bound in `str::<impl str>::replace`\nhelp: consider borrowing here\n    |\n14  |   let without_vowels = text.replace(&vowels, \"\");\n    |                                     +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      new_text += c;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9wenk_an.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9wenk_an.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9wenk_an.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9wenk_an.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9wenk_an.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp9wenk_an.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp9wenk_an.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  let i = 0;\n  let j = 0;\n  while (i < text_len) {\n    if (vowels.indexOf(text[i]) == -1) {\n      new_text += text[i];\n      i += 1;\n    } else {\n      i += 1;\n      j += 1;\n    }\n  }\n  return new_text.slice(0, j);\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpaanvjns9.rs:19:9\n   |\n19 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   while (i < text_len) {\n19 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpaanvjns9.rs:20:8\n   |\n20 |     if (vowels.indexOf(text[i]) == -1) {\n   |        ^                             ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(text[i]) == -1) {\n20 +     if vowels.indexOf(text[i]) == -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpaanvjns9.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpaanvjns9.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpaanvjns9.rs:20:16\n   |\n20 |     if (vowels.indexOf(text[i]) == -1) {\n   |                ^^^^^^^ method not found in `&str`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpaanvjns9.rs:20:24\n   |\n20 |     if (vowels.indexOf(text[i]) == -1) {\n   |                        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpaanvjns9.rs:21:19\n   |\n21 |       new_text += text[i];\n   |                   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) >= 0) {\n      vowels_count += 1;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count == 0) {\n    return result;\n  } else {\n    return result.pad_left(text.length, \" \");\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpaqiv0eba.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpaqiv0eba.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpaqiv0eba.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpaqiv0eba.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpaqiv0eba.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    } else {\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count === 0) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpcbmrv8uh.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpcbmrv8uh.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpcbmrv8uh.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpcbmrv8uh.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpcbmrv8uh.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) < 0) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpf1a_6l4i.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpf1a_6l4i.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpf1a_6l4i.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpf1a_6l4i.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpf1a_6l4i.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpf1a_6l4i.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpf1a_6l4i.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) === -1) {\n      new_text += char;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpku_5dp27.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpku_5dp27.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpku_5dp27.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpku_5dp27.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpku_5dp27.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpku_5dp27.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpku_5dp27.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if (vowels_count == 0) {\n    return result\n  } else {\n    return \"\"\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprafvcm_3.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprafvcm_3.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmprafvcm_3.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmprafvcm_3.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprafvcm_3.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let ch of text) {\n    if (!vowels.contains(ch)) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplor8i01g.rs:15:8\n   |\n15 |   for (let ch of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `ch`\n  --> /tmp/tmplor8i01g.rs:15:12\n   |\n15 |   for (let ch of text) {\n   |           -^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmplor8i01g.rs:15:15\n   |\n15 |   for (let ch of text) {\n   |              -^^ expected one of `)`, `,`, `@`, or `|`\n   |              |\n   |              help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmplor8i01g.rs:15:18\n   |\n15 |   for (let ch of text) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplor8i01g.rs:15:23\n   |\n15 |   for (let ch of text) {\n   |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmplor8i01g.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1p7z_k1r.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp1p7z_k1r.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp1p7z_k1r.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmp1p7z_k1r.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1p7z_k1r.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp1p7z_k1r.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in 0..text.length - 1 {\n    let ch = text[i]\n    if (vowels.indexOf(ch) >= 0) {\n      result += ch\n    } else {\n      result += ch\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpuq7c0vi5.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpuq7c0vi5.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpuq7c0vi5.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in 0..text.length - 1 {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpuq7c0vi5.rs:17:21\n   |\n17 |     let ch = text[i]\n   |                     ^ help: add `;` here\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |     -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpuq7c0vi5.rs:18:8\n   |\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |        ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (vowels.indexOf(ch) >= 0) {\n18 +     if vowels.indexOf(ch) >= 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpuq7c0vi5.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpuq7c0vi5.rs:16:20\n   |\n16 |   for i in 0..text.length - 1 {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpuq7c0vi5.rs:17:14\n   |\n17 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) < 0) {\n      result += char;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxmn540h1.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxmn540h1.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxmn540h1.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxmn540h1.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxmn540h1.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpxmn540h1.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxmn540h1.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let new_text = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) < 0) {\n      new_text += char;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpjxev1zmj.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpjxev1zmj.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpjxev1zmj.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpjxev1zmj.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpjxev1zmj.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpjxev1zmj.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) >= 0) {\n      vowels_count += 1;\n    }\n    if (vowels_count == 0) {\n      result += char;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpy0bys5ii.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpy0bys5ii.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpy0bys5ii.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpy0bys5ii.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpy0bys5ii.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = vowels.length;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmps5ddoyzd.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmps5ddoyzd.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmps5ddoyzd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmps5ddoyzd.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmps5ddoyzd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmps5ddoyzd.rs:14:29\n   |\n14 |   let vowels_count = vowels.length;\n   |                             ^^^^^^ unknown field\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp3njtsyhe.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp3njtsyhe.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp3njtsyhe.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmp3njtsyhe.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp3njtsyhe.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp3njtsyhe.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp3njtsyhe.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  let i = 0;\n  while (i < text_len) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: Rust has no postfix increment operator\n  --> /tmp/tmpehr4z60p.rs:22:8\n   |\n22 |       i++;\n   |        ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n22 |       { let tmp = i; i += 1; tmp };\n   |       +++++++++++  ~~~~~~~~~~~~~~~\n22 -       i++;\n22 +       i += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpehr4z60p.rs:24:8\n   |\n24 |       i++;\n   |        ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n24 |       { let tmp = i; i += 1; tmp };\n   |       +++++++++++  ~~~~~~~~~~~~~~~\n24 -       i++;\n24 +       i += 1;\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpehr4z60p.rs:18:9\n   |\n18 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   while (i < text_len) {\n18 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpehr4z60p.rs:20:8\n   |\n20 |     if (vowels.indexOf(c) < 0) {\n   |        ^                     ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(c) < 0) {\n20 +     if vowels.indexOf(c) < 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpehr4z60p.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpehr4z60p.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpehr4z60p.rs:19:13\n   |\n19 |     let c = text[i];\n   |             ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (!vowels.contains(ch)) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpnledfyqw.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpnledfyqw.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpnledfyqw.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpnledfyqw.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpnledfyqw.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpnledfyqw.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  let i = 0;\n  let j = 0;\n  while (i < text_len) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n      i += 1;\n    } else {\n      j = i;\n      while (j < text_len && vowels.indexOf(text[j]) != -1) {\n        j += 1;\n      }\n      result += text.substring(i, j);\n      i = j;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpjfavscda.rs:19:9\n   |\n19 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   while (i < text_len) {\n19 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjfavscda.rs:20:8\n   |\n20 |     if (vowels.indexOf(text[i]) == -1) {\n   |        ^                             ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(text[i]) == -1) {\n20 +     if vowels.indexOf(text[i]) == -1 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpjfavscda.rs:25:13\n   |\n25 |       while (j < text_len && vowels.indexOf(text[j]) != -1) {\n   |             ^                                             ^\n   |\nhelp: remove these parentheses\n   |\n25 -       while (j < text_len && vowels.indexOf(text[j]) != -1) {\n25 +       while j < text_len && vowels.indexOf(text[j]) != -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpjfavscda.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpjfavscda.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpjfavscda.rs:20:16\n   |\n20 |     if (vowels.indexOf(text[i]) == -1) {\n   |                ^^^^^^^ method not found in `&str`\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpjfavscda.rs:20:24\n   |\n20 |     if (vowels.indexOf(text[i]) == -1) {\n   |                        ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeF",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_lower = vowels.toLowerCase()\n  let text_lower = text.toLowerCase()\n  let result = \"\"\n  for i in range(0, len(text_lower)) {\n    let char = text_lower[i]\n    if (vowels_lower.indexOf(char) == -1) {\n      result += char\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq_2kzf9c.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_lower = vowels.toLowerCase()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq_2kzf9c.rs:14:42\n   |\n14 |   let vowels_lower = vowels.toLowerCase()\n   |                                          ^ help: add `;` here\n15 |   let text_lower = text.toLowerCase()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq_2kzf9c.rs:15:38\n   |\n15 |   let text_lower = text.toLowerCase()\n   |                                      ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq_2kzf9c.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in range(0, len(text_lower)) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpq_2kzf9c.rs:18:29\n   |\n18 |     let char = text_lower[i]\n   |                             ^ help: add `;` here\n19 |     if (vowels_lower.indexOf(char) == -1) {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpq_2kzf9c.rs:17:12\n   |\n17 |   for i in range(0, len(text_lower)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpq_2kzf9c.rs:17:21\n   |\n17 |   for i in range(0, len(text_lower)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq_2kzf9c.rs:19:8\n   |\n19 |     if (vowels_lower.indexOf(char) == -1) {\n   |        ^                                ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (vowels_lower.indexOf(char) == -1) {\n19 +     if vowels_lower.indexOf(char) == -1 {\n   | \n\nerror[E05",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      result += c;\n    } else {\n      result += \"\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpg74q1ugb.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpg74q1ugb.rs:17:7\n   |\n17 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpg74q1ugb.rs:19:7\n   |\n19 |       result += \"\";\n   |       ------^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg74q1ugb.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbkpe08pd.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbkpe08pd.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbkpe08pd.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let new_text = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1;\n    } else {\n      new_text += c;\n    }\n  }\n  if (vowels_count == 0) {\n    return new_text;\n  } else {\n    return remove_vowels(new_text);\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp91k7fqju.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp91k7fqju.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp91k7fqju.rs:20:7\n   |\n20 |       new_text += c;\n   |       --------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91k7fqju.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return new_text;\n   |            ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91k7fqju.rs:26:26\n   |\n26 |     return remove_vowels(new_text);\n   |                          ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |                          |\n   |                          expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count == 0) {\n    return \"\";\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbblh64yr.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbblh64yr.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbblh64yr.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbblh64yr.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbblh64yr.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      continue\n    }\n    result += c\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmplvl_fs9l.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmplvl_fs9l.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmplvl_fs9l.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmplvl_fs9l.rs:19:5\n   |\n19 |     result += c\n   |     ------^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplvl_fs9l.rs:21:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n21 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9h70jx1k.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9h70jx1k.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9h70jx1k.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = vowels.count;\n  let text_length = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) === -1) {\n      result += char;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9bf8uvqx.rs:17:8\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9bf8uvqx.rs:17:12\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9bf8uvqx.rs:17:14\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9bf8uvqx.rs:17:13\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9bf8uvqx.rs:17:14\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `count` on type `String`\n  --> /tmp/tmp9bf8uvqx.rs:14:29\n   |\n14 |   let vowels_count = vowels.count;\n   |                             ^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp9bf8uvqx.rs:15:26\n   |\n15 |   let text_length = text.length;\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpglelqdwh.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpglelqdwh.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpglelqdwh.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpglelqdwh.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpglelqdwh.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpglelqdwh.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpkc4eoviy.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpkc4eoviy.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpkc4eoviy.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbkpe08pd.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbkpe08pd.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbkpe08pd.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  let i = 0\n  let j = 0\n  while (i < text_len) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i]\n      i += 1\n    } else {\n      j = i\n      while (j < text_len) {\n        if (vowels.indexOf(text[j]) == -1) {\n          result += text[j]\n          j += 1\n        } else {\n          break\n        }\n      }\n      i = j\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwcwp1d6a.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwcwp1d6a.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwcwp1d6a.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwcwp1d6a.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpwcwp1d6a.rs:17:12\n   |\n17 |   let i = 0\n   |            ^ help: add `;` here\n18 |   let j = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpwcwp1d6a.rs:18:12\n   |\n18 |   let j = 0\n   |            ^ help: add `;` here\n19 |   while (i < text_len) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmpwcwp1d6a.rs:21:24\n   |\n21 |       result += text[i]\n   |                        ^ help: add `;` here\n22 |       i += 1\n   |       - unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpwcwp1d6a.rs:24:12\n   |\n24 |       j = i\n   |            ^ help: add `;` here\n25 |       while (j < text_len) {\n   |       ----- unexpected token\n\nerror: expected `;`, found `j`\n  --> /tmp/tmpwcwp1d6a.rs:27:28\n   |\n27 |           result += text[j]\n   |                            ^ help: add `;` here\n28 |           j += 1\n   |           - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpwcwp1d6a.rs:19:9\n   |\n19 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  let i = 0\n  while i < text_len {\n    let c = text[i]\n    if vowels.indexOf(c) === -1 {\n      result += c\n    }\n    i += 1\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpae7n3jxp.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpae7n3jxp.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpae7n3jxp.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpae7n3jxp.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpae7n3jxp.rs:17:12\n   |\n17 |   let i = 0\n   |            ^ help: add `;` here\n18 |   while i < text_len {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpae7n3jxp.rs:19:20\n   |\n19 |     let c = text[i]\n   |                    ^ help: add `;` here\n20 |     if vowels.indexOf(c) === -1 {\n   |     -- unexpected token\n\nerror: invalid comparison operator `===`\n  --> /tmp/tmpae7n3jxp.rs:20:26\n   |\n20 |     if vowels.indexOf(c) === -1 {\n   |                          ^^^ help: `===` is not a valid comparison operator, use `==`\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpae7n3jxp.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpae7n3jxp.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpae7n3jxp.rs:19:13\n   |\n19 |     let c = text[i]\n   |             ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Ind",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for c in text {\n    if !vowels.contains(c) {\n      result += c;\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0277]: `String` is not an iterator\n  --> /tmp/tmplfvisxw7.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmplfvisxw7.rs:17:7\n   |\n17 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplfvisxw7.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) == -1) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbsfxy1zc.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbsfxy1zc.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbsfxy1zc.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbsfxy1zc.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbsfxy1zc.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmpbsfxy1zc.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9h70jx1k.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9h70jx1k.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9h70jx1k.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count++;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count === 0) {\n    return result;\n  } else {\n    return result.slice(0, vowels_count);\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmppuzdk3cw.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmppuzdk3cw.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmppuzdk3cw.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmppuzdk3cw.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmppuzdk3cw.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in range(0, len(text)) {\n    let ch = text[i]\n    if (vowels.indexOf(ch) == -1) {\n      result += ch\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjm1uz0d3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjm1uz0d3.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjm1uz0d3.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in range(0, len(text)) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjm1uz0d3.rs:17:21\n   |\n17 |     let ch = text[i]\n   |                     ^ help: add `;` here\n18 |     if (vowels.indexOf(ch) == -1) {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjm1uz0d3.rs:16:12\n   |\n16 |   for i in range(0, len(text)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpjm1uz0d3.rs:16:21\n   |\n16 |   for i in range(0, len(text)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjm1uz0d3.rs:18:8\n   |\n18 |     if (vowels.indexOf(ch) == -1) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (vowels.indexOf(ch) == -1) {\n18 +     if vowels.indexOf(ch) == -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpjm1uz0d3.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpjm1uz0d3.rs:18:16\n   |\n18 |     if (vowels.indexOf(ch) == -1) {\n   |                ^^^^^^^ method not ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpk0upem8x.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpk0upem8x.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpk0upem8x.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpk0upem8x.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpk0upem8x.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpk0upem8x.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in 0..text.length {\n    let ch = text[i]\n    if (vowels.indexOf(ch) >= 0) {\n      result += ch\n    } else {\n      result += ch.toLower()\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmy5920q0.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmy5920q0.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmy5920q0.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in 0..text.length {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmy5920q0.rs:17:21\n   |\n17 |     let ch = text[i]\n   |                     ^ help: add `;` here\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |     -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmy5920q0.rs:18:8\n   |\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |        ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (vowels.indexOf(ch) >= 0) {\n18 +     if vowels.indexOf(ch) >= 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpmy5920q0.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpmy5920q0.rs:16:20\n   |\n16 |   for i in 0..text.length {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmy5920q0.rs:17:14\n   |\n17 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.indexOf(c) > -1 {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if vowels_count == 0 {\n    return result\n  } else {\n    return result.pad_left(text.length, \"\")\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj1a36t82.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpj1a36t82.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpj1a36t82.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpj1a36t82.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpj1a36t82.rs:17:15\n   |\n17 |     if vowels.indexOf(c) > -1 {\n   |               ^^^^^^^ method not found in `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpj1a36t82.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj1a36t82.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror[E0599]: no method named `pad_left` found for reference `&str` in the current scope\n  --> /tmp/tmpj1a36t82.rs:26:19\n   |\n26 |     return result.pad_left(text.length, \"\")\n   |                   ^^^^^^^^ method not found in `&str`\n\nerror[E0609]: no field `l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp_39ucsgc.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp_39ucsgc.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp_39ucsgc.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmp_39ucsgc.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp_39ucsgc.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp_39ucsgc.rs:20:3\n   |\n20 |   return result\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result }\n   |   +               +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in 0..text_len {\n    if text[i] in vowels {\n      continue\n    }\n    result += text[i]\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkwjhj5yl.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `{`, found keyword `in`\n  --> /tmp/tmpkwjhj5yl.rs:18:16\n   |\n18 |     if text[i] in vowels {\n   |     --         ^^ expected `{`\n   |     |\n   |     this `if` expression has a condition, but no block\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpkwjhj5yl.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpkwjhj5yl.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwjhj5yl.rs:23:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n23 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i]\n    if (vowels.indexOf(char) === -1) {\n      result += char\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkkq9y8rx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkkq9y8rx.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkkq9y8rx.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for (let i = 0; i < text.length; i++) {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpkkq9y8rx.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpkkq9y8rx.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpkkq9y8rx.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpkkq9y8rx.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpkkq9y8rx.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpkkq9y8rx.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) >= 0) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += c;\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpwqfg8mne.rs:16:8\n   |\n16 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpwqfg8mne.rs:16:12\n   |\n16 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpwqfg8mne.rs:16:14\n   |\n16 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpwqfg8mne.rs:16:17\n   |\n16 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpwqfg8mne.rs:16:22\n   |\n16 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpwqfg8mne.rs:26:3\n   |\n26 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n26 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = vowels.count;\n  let text_length = text.length;\n  let new_text = \"\";\n  for (let i = 0; i < text_length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) === -1) {\n      new_text += ch;\n    }\n  }\n  return new_text.pad_left(text_length, \" \")\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpm5o6_vaj.rs:17:8\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpm5o6_vaj.rs:17:12\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpm5o6_vaj.rs:17:14\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpm5o6_vaj.rs:17:13\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpm5o6_vaj.rs:17:14\n   |\n17 |   for (let i = 0; i < text_length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `count` on type `String`\n  --> /tmp/tmpm5o6_vaj.rs:14:29\n   |\n14 |   let vowels_count = vowels.count;\n   |                             ^^^^^ unknown field\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpm5o6_vaj.rs:15:26\n   |\n15 |   let text_length = text.length;\n   |                          ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in 0..text.length {\n    let ch = text[i]\n    if (vowels.indexOf(ch) >= 0) {\n      result += ch\n    } else {\n      result += ch.toLower()\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmy5920q0.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmy5920q0.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmy5920q0.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in 0..text.length {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmy5920q0.rs:17:21\n   |\n17 |     let ch = text[i]\n   |                     ^ help: add `;` here\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |     -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmy5920q0.rs:18:8\n   |\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |        ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (vowels.indexOf(ch) >= 0) {\n18 +     if vowels.indexOf(ch) >= 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpmy5920q0.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpmy5920q0.rs:16:20\n   |\n16 |   for i in 0..text.length {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmy5920q0.rs:17:14\n   |\n17 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = 0;\n  let result = String::from(\"\");\n  for (let c of text) {\n    if (vowels.contains(c)) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += c;\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpsqnqkux3.rs:16:8\n   |\n16 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpsqnqkux3.rs:16:12\n   |\n16 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpsqnqkux3.rs:16:14\n   |\n16 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpsqnqkux3.rs:16:17\n   |\n16 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpsqnqkux3.rs:16:22\n   |\n16 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpsqnqkux3.rs:26:3\n   |\n26 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n26 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in 0..text_len {\n    if text[i] in vowels {\n      continue\n    }\n    result += text[i]\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkwjhj5yl.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkwjhj5yl.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `{`, found keyword `in`\n  --> /tmp/tmpkwjhj5yl.rs:18:16\n   |\n18 |     if text[i] in vowels {\n   |     --         ^^ expected `{`\n   |     |\n   |     this `if` expression has a condition, but no block\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpkwjhj5yl.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpkwjhj5yl.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwjhj5yl.rs:23:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n23 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmprrqow8wh.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmprrqow8wh.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprrqow8wh.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmprrqow8wh.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmprrqow8wh.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  let i = 0\n  while (i < text_len) {\n    let c = text[i]\n    if (vowels.indexOf(c) < 0) {\n      result += c\n      i += 1\n    } else {\n      i += vowels_len\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4rlkb1lh.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4rlkb1lh.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4rlkb1lh.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4rlkb1lh.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp4rlkb1lh.rs:17:12\n   |\n17 |   let i = 0\n   |            ^ help: add `;` here\n18 |   while (i < text_len) {\n   |   ----- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp4rlkb1lh.rs:19:20\n   |\n19 |     let c = text[i]\n   |                    ^ help: add `;` here\n20 |     if (vowels.indexOf(c) < 0) {\n   |     -- unexpected token\n\nerror: expected `;`, found `i`\n  --> /tmp/tmp4rlkb1lh.rs:21:18\n   |\n21 |       result += c\n   |                  ^ help: add `;` here\n22 |       i += 1\n   |       - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp4rlkb1lh.rs:18:9\n   |\n18 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   while (i < text_len) {\n18 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4rlkb1lh.rs:20:8\n   |\n20 |     if (vowels.indexOf(c) < 0) {\n   |        ^                     ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(c) < 0) {\n20 +     if vowels.indexOf(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) == -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpc4y7mtlp.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpc4y7mtlp.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpc4y7mtlp.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpc4y7mtlp.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpc4y7mtlp.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpc4y7mtlp.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count += 1;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count == 0) {\n    return result;\n  } else {\n    return result.padEnd(text.length, \" \");\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpde7fq65q.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpde7fq65q.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpde7fq65q.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpde7fq65q.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpde7fq65q.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in range(0, text_len) {\n    let char = text[i]\n    if (vowels.indexOf(char) < 0) {\n      result += char\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpzotduz9g.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzotduz9g.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpzotduz9g.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpzotduz9g.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in range(0, text_len) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpzotduz9g.rs:18:23\n   |\n18 |     let char = text[i]\n   |                       ^ help: add `;` here\n19 |     if (vowels.indexOf(char) < 0) {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpzotduz9g.rs:17:12\n   |\n17 |   for i in range(0, text_len) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzotduz9g.rs:19:8\n   |\n19 |     if (vowels.indexOf(char) < 0) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (vowels.indexOf(char) < 0) {\n19 +     if vowels.indexOf(char) < 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpzotduz9g.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpzotduz9g.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unkn",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp1p7z_k1r.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp1p7z_k1r.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp1p7z_k1r.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmp1p7z_k1r.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp1p7z_k1r.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp1p7z_k1r.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let new_text = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1;\n    } else {\n      new_text += c;\n    }\n  }\n  if (vowels_count == 0) {\n    return text;\n  } else {\n    return new_text;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjzbb88vi.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpjzbb88vi.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpjzbb88vi.rs:20:7\n   |\n20 |       new_text += c;\n   |       --------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjzbb88vi.rs:26:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n26 |     return new_text;\n   |            ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpn8hhl4fe.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpn8hhl4fe.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpn8hhl4fe.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpn8hhl4fe.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn8hhl4fe.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  let i = 0;\n  while (i < text_len) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n      i += 1;\n    } else {\n      i += vowels_len;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpgjkzq5xy.rs:18:9\n   |\n18 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   while (i < text_len) {\n18 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgjkzq5xy.rs:20:8\n   |\n20 |     if (vowels.indexOf(c) < 0) {\n   |        ^                     ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(c) < 0) {\n20 +     if vowels.indexOf(c) < 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpgjkzq5xy.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpgjkzq5xy.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpgjkzq5xy.rs:19:13\n   |\n19 |     let c = text[i];\n   |             ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpgjkzq5xy.rs:20:16\n   |\n20 |     if (vowels.indexOf(c) < 0) {\n   |                ^^^^^^^ method not found in `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpgjkzq5xy.rs:21:7\n   |\n21 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E03",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) === -1) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp16d34ppl.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp16d34ppl.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp16d34ppl.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp16d34ppl.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp16d34ppl.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in 0..text.length {\n    let ch = text[i]\n    if (vowels.indexOf(ch) >= 0) {\n      result += ch\n    } else {\n      result += ch.toLower()\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpmy5920q0.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpmy5920q0.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpmy5920q0.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in 0..text.length {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmy5920q0.rs:17:21\n   |\n17 |     let ch = text[i]\n   |                     ^ help: add `;` here\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |     -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmy5920q0.rs:18:8\n   |\n18 |     if (vowels.indexOf(ch) >= 0) {\n   |        ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (vowels.indexOf(ch) >= 0) {\n18 +     if vowels.indexOf(ch) >= 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpmy5920q0.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpmy5920q0.rs:16:20\n   |\n16 |   for i in 0..text.length {\n   |                    ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpmy5920q0.rs:17:14\n   |\n17 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n          ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpdw09ync3.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpdw09ync3.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpdw09ync3.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpdw09ync3.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpdw09ync3.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      result += c;\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpi7gp8u0p.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpi7gp8u0p.rs:17:7\n   |\n17 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi7gp8u0p.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  let i = 0;\n  while (i < text_len) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) < 0) {\n      new_text += ch;\n    }\n    i += 1;\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpzcap5zas.rs:18:9\n   |\n18 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   while (i < text_len) {\n18 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzcap5zas.rs:20:8\n   |\n20 |     if (vowels.indexOf(ch) < 0) {\n   |        ^                      ^\n   |\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(ch) < 0) {\n20 +     if vowels.indexOf(ch) < 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpzcap5zas.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpzcap5zas.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpzcap5zas.rs:19:14\n   |\n19 |     let ch = text[i];\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpzcap5zas.rs:20:16\n   |\n20 |     if (vowels.indexOf(ch) < 0) {\n   |                ^^^^^^^ method not found in `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpzcap5zas.rs:21:7\n   |\n21 |       new_text += ch;\n   |       --------^^^^^^\n   |       |\n   |       cannot use `+=` on type `&st",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxxgeytex.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxxgeytex.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxxgeytex.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxxgeytex.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxxgeytex.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpxxgeytex.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      continue\n    }\n    result += c\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmplvl_fs9l.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmplvl_fs9l.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmplvl_fs9l.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmplvl_fs9l.rs:19:5\n   |\n19 |     result += c\n   |     ------^^^^^\n   |     |\n   |     cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplvl_fs9l.rs:21:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n21 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let new_text = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1;\n    } else {\n      new_text += c;\n    }\n  }\n  if (vowels_count == 0) {\n    return new_text;\n  } else {\n    return remove_vowels(new_text);\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp91k7fqju.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp91k7fqju.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp91k7fqju.rs:20:7\n   |\n20 |       new_text += c;\n   |       --------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91k7fqju.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return new_text;\n   |            ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp91k7fqju.rs:26:26\n   |\n26 |     return remove_vowels(new_text);\n   |                          ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |                          |\n   |                          expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) === -1) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpuq47g98o.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpuq47g98o.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpuq47g98o.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpuq47g98o.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpuq47g98o.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpuq47g98o.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpuq47g98o.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let new_text = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1;\n    } else {\n      new_text += c;\n    }\n  }\n  if (vowels_count == 0) {\n    return text;\n  } else {\n    return new_text;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjzbb88vi.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpjzbb88vi.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpjzbb88vi.rs:20:7\n   |\n20 |       new_text += c;\n   |       --------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjzbb88vi.rs:26:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n26 |     return new_text;\n   |            ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpycfkgzr2.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpycfkgzr2.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpycfkgzr2.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpycfkgzr2.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpycfkgzr2.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      new_text += c;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9wenk_an.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9wenk_an.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9wenk_an.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9wenk_an.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9wenk_an.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp9wenk_an.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp9wenk_an.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) >= 0) {\n      new_text += ch;\n    } else {\n      new_text += ch.toLowerCase();\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgu401gkb.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgu401gkb.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgu401gkb.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgu401gkb.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgu401gkb.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpgu401gkb.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpgu401gkb.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmprrqow8wh.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmprrqow8wh.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprrqow8wh.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmprrqow8wh.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmprrqow8wh.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in 0..text_len {\n    let ch = text[i]\n    if vowels.indexOf(ch) >= 0 {\n      result += ch\n    } else if i < text_len - 1 {\n      let next_ch = text[i + 1]\n      if vowels.indexOf(next_ch) >= 0 {\n        result += ch\n      }\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpf4w_ll5m.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpf4w_ll5m.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpf4w_ll5m.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpf4w_ll5m.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpf4w_ll5m.rs:18:21\n   |\n18 |     let ch = text[i]\n   |                     ^ help: add `;` here\n19 |     if vowels.indexOf(ch) >= 0 {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpf4w_ll5m.rs:22:32\n   |\n22 |       let next_ch = text[i + 1]\n   |                                ^ help: add `;` here\n23 |       if vowels.indexOf(next_ch) >= 0 {\n   |       -- unexpected token\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpf4w_ll5m.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpf4w_ll5m.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpf4w_ll5m.rs:18:14\n   |\n18 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp8vj_wmrv.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp8vj_wmrv.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp8vj_wmrv.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp8vj_wmrv.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp8vj_wmrv.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let new_text = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      new_text += text[i];\n    }\n  }\n  if (vowels_count == 0) {\n    return new_text;\n  } else {\n    return remove_vowels(new_text);\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpdgjfv14f.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpdgjfv14f.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpdgjfv14f.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpdgjfv14f.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpdgjfv14f.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    } else {\n      result += \" \"\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwrvwdrqx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwrvwdrqx.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpwrvwdrqx.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:19:7\n   |\n19 |       result += \" \"\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwrvwdrqx.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpdw09ync3.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpdw09ync3.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpdw09ync3.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpdw09ync3.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpdw09ync3.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbkpe08pd.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbkpe08pd.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbkpe08pd.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbkpe08pd.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbkpe08pd.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbkpe08pd.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if (vowels_count == 0) {\n    return result\n  } else {\n    return \"\"\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprafvcm_3.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprafvcm_3.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmprafvcm_3.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmprafvcm_3.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprafvcm_3.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) >= 0) {\n      vowels_count++;\n    } else {\n      result += ch;\n    }\n  }\n  if (vowels_count == 0) {\n    return text;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp5bnwxdv3.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp5bnwxdv3.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp5bnwxdv3.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp5bnwxdv3.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp5bnwxdv3.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  let i = 0;\n  let j = 0;\n  while (i < text_len) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      new_text += c;\n      i++;\n    } else {\n      j = i;\n      while (j < text_len) {\n        let c = text[j];\n        if (vowels.indexOf(c) < 0) {\n          new_text += c;\n          j++;\n        } else {\n          break;\n        }\n      }\n      i = j;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: Rust has no postfix increment operator\n  --> /tmp/tmpxfq574vn.rs:23:8\n   |\n23 |       i++;\n   |        ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n23 |       { let tmp = i; i += 1; tmp };\n   |       +++++++++++  ~~~~~~~~~~~~~~~\n23 -       i++;\n23 +       i += 1;\n   | \n\nerror: Rust has no postfix increment operator\n  --> /tmp/tmpxfq574vn.rs:30:12\n   |\n30 |           j++;\n   |            ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n30 |           { let tmp = j; j += 1; tmp };\n   |           +++++++++++  ~~~~~~~~~~~~~~~\n30 -           j++;\n30 +           j += 1;\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpxfq574vn.rs:19:9\n   |\n19 |   while (i < text_len) {\n   |         ^            ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   while (i < text_len) {\n19 +   while i < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxfq574vn.rs:21:8\n   |\n21 |     if (vowels.indexOf(c) < 0) {\n   |        ^                     ^\n   |\nhelp: remove these parentheses\n   |\n21 -     if (vowels.indexOf(c) < 0) {\n21 +     if vowels.indexOf(c) < 0 {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpxfq574vn.rs:26:13\n   |\n26 |       while (j < text_len) {\n   |             ^            ^\n   |\nhelp: remove these parentheses\n   |\n26 -       while (j < text_len) {\n26 +       while j < text_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxfq574vn.rs:28:12\n   |\n28 |         if (vowels.indexOf(c) < 0) {\n   |            ^                     ^\n   |\nhelp: remove these parentheses\n   |\n28 -         if (vowels.indexOf(c) < 0) {\n28 +         if vowels.indexOf(c) < 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpxfq574vn.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpxfq574vn.rs:15:23\n   |\n1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in range(0, len(text)) {\n    let ch = text[i]\n    if (vowels.indexOf(ch) == -1) {\n      result += ch\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjm1uz0d3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjm1uz0d3.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpjm1uz0d3.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in range(0, len(text)) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjm1uz0d3.rs:17:21\n   |\n17 |     let ch = text[i]\n   |                     ^ help: add `;` here\n18 |     if (vowels.indexOf(ch) == -1) {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpjm1uz0d3.rs:16:12\n   |\n16 |   for i in range(0, len(text)) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nerror[E0425]: cannot find function `len` in this scope\n  --> /tmp/tmpjm1uz0d3.rs:16:21\n   |\n16 |   for i in range(0, len(text)) {\n   |                     ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjm1uz0d3.rs:18:8\n   |\n18 |     if (vowels.indexOf(ch) == -1) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (vowels.indexOf(ch) == -1) {\n18 +     if vowels.indexOf(ch) == -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpjm1uz0d3.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0599]: no method named `indexOf` found for reference `&str` in the current scope\n  --> /tmp/tmpjm1uz0d3.rs:18:16\n   |\n18 |     if (vowels.indexOf(ch) == -1) {\n   |                ^^^^^^^ method not ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    } else {\n      result += \" \"\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwrvwdrqx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwrvwdrqx.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpwrvwdrqx.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:19:7\n   |\n19 |       result += \" \"\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwrvwdrqx.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9h70jx1k.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9h70jx1k.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9h70jx1k.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if (vowels_count == 0) {\n    return text\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp46aeaqq8.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp46aeaqq8.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmp46aeaqq8.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp46aeaqq8.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmp46aeaqq8.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmp46aeaqq8.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp46aeaqq8.rs:26:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n26 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) == -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpc4y7mtlp.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpc4y7mtlp.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpc4y7mtlp.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpc4y7mtlp.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpc4y7mtlp.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpc4y7mtlp.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for i in 0..text.length {\n    if text[i] in vowels {\n      continue\n    }\n    result += text[i]\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpq01_g88o.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpq01_g88o.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpq01_g88o.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for i in 0..text.length {\n   |   --- unexpected token\n\nerror: expected `{`, found keyword `in`\n  --> /tmp/tmpq01_g88o.rs:17:16\n   |\n17 |     if text[i] in vowels {\n   |     --         ^^ expected `{`\n   |     |\n   |     this `if` expression has a condition, but no block\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpq01_g88o.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpq01_g88o.rs:16:20\n   |\n16 |   for i in 0..text.length {\n   |                    ^^^^^^ unknown field\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpq01_g88o.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0609.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in 0..text_len {\n    let ch = text[i]\n    if (vowels.indexOf(ch) < 0) {\n      result += ch\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpj5e6owv3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpj5e6owv3.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpj5e6owv3.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpj5e6owv3.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpj5e6owv3.rs:18:21\n   |\n18 |     let ch = text[i]\n   |                     ^ help: add `;` here\n19 |     if (vowels.indexOf(ch) < 0) {\n   |     -- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpj5e6owv3.rs:19:8\n   |\n19 |     if (vowels.indexOf(ch) < 0) {\n   |        ^                      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (vowels.indexOf(ch) < 0) {\n19 +     if vowels.indexOf(ch) < 0 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpj5e6owv3.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpj5e6owv3.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpj5e6owv3.rs:18:14\n   |\n18 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `Strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp2r7_zod_.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp2r7_zod_.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp2r7_zod_.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp2r7_zod_.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp2r7_zod_.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxxgeytex.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxxgeytex.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxxgeytex.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxxgeytex.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxxgeytex.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpxxgeytex.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpn8hhl4fe.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpn8hhl4fe.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpn8hhl4fe.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpn8hhl4fe.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn8hhl4fe.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpe3lzred4.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpe3lzred4.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpe3lzred4.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpe3lzred4.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpe3lzred4.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      result += c\n    } else {\n      result += \" \"\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpwrvwdrqx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpwrvwdrqx.rs:14:18\n   |\n14 |   let result = \"\"\n   |                  ^ help: add `;` here\n15 |   for c in text {\n   |   --- unexpected token\n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpwrvwdrqx.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:17:7\n   |\n17 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpwrvwdrqx.rs:19:7\n   |\n19 |       result += \" \"\n   |       ------^^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwrvwdrqx.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9h70jx1k.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9h70jx1k.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9h70jx1k.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count == 0) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp6ewxmgms.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp6ewxmgms.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp6ewxmgms.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp6ewxmgms.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp6ewxmgms.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgi66nqfu.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpgi66nqfu.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpgi66nqfu.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpgi66nqfu.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgi66nqfu.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpgi66nqfu.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp3njtsyhe.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp3njtsyhe.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp3njtsyhe.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmp3njtsyhe.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp3njtsyhe.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp3njtsyhe.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror[E0423]: expected value, found struct `String`\n  --> /tmp/tmp3njtsyhe.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = String::from(\"\");\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result = result.concat(c);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp6gsz7ysg.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmp6gsz7ysg.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmp6gsz7ysg.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmp6gsz7ysg.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp6gsz7ysg.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp6gsz7ysg.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let ch of text) {\n    if (!vowels.contains(ch)) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplor8i01g.rs:15:8\n   |\n15 |   for (let ch of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `ch`\n  --> /tmp/tmplor8i01g.rs:15:12\n   |\n15 |   for (let ch of text) {\n   |           -^^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmplor8i01g.rs:15:15\n   |\n15 |   for (let ch of text) {\n   |              -^^ expected one of `)`, `,`, `@`, or `|`\n   |              |\n   |              help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmplor8i01g.rs:15:18\n   |\n15 |   for (let ch of text) {\n   |                 -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplor8i01g.rs:15:23\n   |\n15 |   for (let ch of text) {\n   |                       ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmplor8i01g.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgk3m67u0.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgk3m67u0.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgk3m67u0.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgk3m67u0.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgk3m67u0.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpgk3m67u0.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpgk3m67u0.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if (vowels_count == 0) {\n    return result\n  } else {\n    return \"\"\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprafvcm_3.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprafvcm_3.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmprafvcm_3.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmprafvcm_3.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprafvcm_3.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpycfkgzr2.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpycfkgzr2.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpycfkgzr2.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpycfkgzr2.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpycfkgzr2.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxxgeytex.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxxgeytex.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxxgeytex.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxxgeytex.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxxgeytex.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpxxgeytex.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.indexOf(c) == -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpc4y7mtlp.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpc4y7mtlp.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpc4y7mtlp.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpc4y7mtlp.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpc4y7mtlp.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpc4y7mtlp.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpkc4eoviy.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpkc4eoviy.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpkc4eoviy.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in range(0, text_len) {\n    let char = text[i]\n    if (vowels.indexOf(char) == -1) {\n      result += char\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpcvr24okf.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcvr24okf.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpcvr24okf.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpcvr24okf.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in range(0, text_len) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpcvr24okf.rs:18:23\n   |\n18 |     let char = text[i]\n   |                       ^ help: add `;` here\n19 |     if (vowels.indexOf(char) == -1) {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmpcvr24okf.rs:17:12\n   |\n17 |   for i in range(0, text_len) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcvr24okf.rs:19:8\n   |\n19 |     if (vowels.indexOf(char) == -1) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -     if (vowels.indexOf(char) == -1) {\n19 +     if vowels.indexOf(char) == -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpcvr24okf.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpcvr24okf.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count += 1;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count == 0) {\n    return result;\n  } else {\n    return result.padEnd(text.length, \" \");\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpde7fq65q.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpde7fq65q.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpde7fq65q.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpde7fq65q.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpde7fq65q.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmprityt0cx.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmprityt0cx.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprityt0cx.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprityt0cx.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprityt0cx.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmprityt0cx.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) >= 0) {\n      vowels_count += 1;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count == 0) {\n    return result;\n  } else {\n    return result.pad_left(text.length, \" \");\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpaqiv0eba.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpaqiv0eba.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpaqiv0eba.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpaqiv0eba.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpaqiv0eba.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowels_count += 1;\n    }\n    if (vowels_count == 0) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp5u7zjn0c.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp5u7zjn0c.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp5u7zjn0c.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp5u7zjn0c.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp5u7zjn0c.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = String::from(\"\");\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) >= 0) {\n      vowels_count += 1;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count == 0) {\n    return result;\n  } else {\n    return result.pad_left(text.length, \" \");\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpp3ph1h3c.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpp3ph1h3c.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpp3ph1h3c.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpp3ph1h3c.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpp3ph1h3c.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let new_text = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) === -1) {\n      new_text += c;\n    }\n  }\n  return new_text;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp436rbl3d.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp436rbl3d.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp436rbl3d.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp436rbl3d.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp436rbl3d.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmp436rbl3d.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmp436rbl3d.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp8vj_wmrv.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp8vj_wmrv.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp8vj_wmrv.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp8vj_wmrv.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp8vj_wmrv.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgi66nqfu.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpgi66nqfu.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpgi66nqfu.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpgi66nqfu.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgi66nqfu.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpgi66nqfu.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) != -1) {\n      vowels_count++;\n    } else {\n      result += text[i];\n    }\n  }\n  if (vowels_count == 0) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpnqxmo7fg.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpnqxmo7fg.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpnqxmo7fg.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpnqxmo7fg.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpnqxmo7fg.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n\n  let result = \"\"\n  for i in range(0, text_len) {\n    let char = text[i]\n    if (vowels.indexOf(char) == -1) {\n      result += char\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmparbx7zk5.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmparbx7zk5.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmparbx7zk5.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 | \n17 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmparbx7zk5.rs:17:18\n   |\n17 |   let result = \"\"\n   |                  ^ help: add `;` here\n18 |   for i in range(0, text_len) {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmparbx7zk5.rs:19:23\n   |\n19 |     let char = text[i]\n   |                       ^ help: add `;` here\n20 |     if (vowels.indexOf(char) == -1) {\n   |     -- unexpected token\n\nerror[E0425]: cannot find function `range` in this scope\n  --> /tmp/tmparbx7zk5.rs:18:12\n   |\n18 |   for i in range(0, text_len) {\n   |            ^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::slice::range;\n   |\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmparbx7zk5.rs:20:8\n   |\n20 |     if (vowels.indexOf(char) == -1) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n20 -     if (vowels.indexOf(char) == -1) {\n20 +     if vowels.indexOf(char) == -1 {\n   | \n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmparbx7zk5.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmparbx7zk5.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (c of text) {\n    if (vowels.contains(c)) {\n      result += c;\n    } else {\n      result += \"\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpj_b0sqj8.rs:15:10\n   |\n15 |   for (c of text) {\n   |         -^^ expected one of `)`, `,`, `@`, or `|`\n   |         |\n   |         help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpj_b0sqj8.rs:15:13\n   |\n15 |   for (c of text) {\n   |            -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |            |\n   |            help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpj_b0sqj8.rs:15:18\n   |\n15 |   for (c of text) {\n   |                  ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpj_b0sqj8.rs:22:3\n   |\n22 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n22 |   { return result; }\n   |   +                +\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String.from(\"aeiou\");\n  let result = \"\";\n  for c in text {\n    if (vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n  --> /tmp/tmpykia7rvp.rs:13:16\n   |\n13 |   let vowels = String.from(\"aeiou\");\n   |                ^^^^^^-----\n   |                |\n   |                help: use the path separator to refer to an item: `String::from`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpykia7rvp.rs:16:8\n   |\n16 |     if (vowels.contains(c)) {\n   |        ^                  ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -     if (vowels.contains(c)) {\n16 +     if vowels.contains(c) {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpykia7rvp.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpykia7rvp.rs:17:7\n   |\n17 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpykia7rvp.rs:20:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n20 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368, E0423.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbkpe08pd.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbkpe08pd.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbkpe08pd.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpvhnqvweb.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpvhnqvweb.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpvhnqvweb.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpvhnqvweb.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpvhnqvweb.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) == -1) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpbkpe08pd.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpbkpe08pd.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpbkpe08pd.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpbkpe08pd.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp25nckjfr.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp25nckjfr.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp25nckjfr.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp25nckjfr.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp25nckjfr.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.contains(text[i])) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += text[i];\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9h70jx1k.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9h70jx1k.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9h70jx1k.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9h70jx1k.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (!vowels.contains(text[i])) {\n      result += text[i];\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpkc4eoviy.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpkc4eoviy.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpkc4eoviy.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpkc4eoviy.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let result = \"\"\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i]\n    if (vowels.indexOf(char) === -1) {\n      result += char\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpkkq9y8rx.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpkkq9y8rx.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpkkq9y8rx.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for (let i = 0; i < text.length; i++) {\n   |   --- unexpected token\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpkkq9y8rx.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpkkq9y8rx.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpkkq9y8rx.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpkkq9y8rx.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpkkq9y8rx.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpkkq9y8rx.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror: aborting due to 9 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let ch = text[i];\n    if (vowels.indexOf(ch) === -1) {\n      result += ch;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp16d34ppl.rs:15:8\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp16d34ppl.rs:15:12\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp16d34ppl.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp16d34ppl.rs:15:13\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp16d34ppl.rs:15:14\n   |\n15 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    } else {\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count === 0) {\n    return \"\";\n  } else {\n    return result;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmptp5278qd.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmptp5278qd.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmptp5278qd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmptp5278qd.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmptp5278qd.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let vowels_count = 0;\n  let new_text = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1;\n    } else {\n      new_text += c;\n    }\n  }\n  if (vowels_count == 0) {\n    return new_text;\n  } else {\n    return remove_vowels(new_text);\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyg8b33le.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmpyg8b33le.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpyg8b33le.rs:20:7\n   |\n20 |       new_text += c;\n   |       --------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyg8b33le.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return new_text;\n   |            ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyg8b33le.rs:26:26\n   |\n26 |     return remove_vowels(new_text);\n   |                          ^^^^^^^^- help: try using a conversion method: `.to_string()`\n   |                          |\n   |                          expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiou\");\n  let result = \"\";\n  for (let c of text) {\n    if (!vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw85qviic.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpw85qviic.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpw85qviic.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpw85qviic.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw85qviic.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpw85qviic.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (vowels.indexOf(char) >= 0) {\n      vowels_count += 1;\n    } else {\n      if (vowels_count > 0) {\n        result += char;\n        vowels_count -= 1;\n      }\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4_pt0p1a.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp4_pt0p1a.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp4_pt0p1a.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4_pt0p1a.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp4_pt0p1a.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_len = vowels.length\n  let text_len = text.length\n  let result = \"\"\n  for i in 0..text_len {\n    let ch = text[i]\n    if vowels.indexOf(ch) >= 0 {\n      result += ch\n    } else {\n      if i + 1 < text_len {\n        result += text[i + 1]\n      }\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpnok7z_1j.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_len = vowels.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnok7z_1j.rs:14:33\n   |\n14 |   let vowels_len = vowels.length\n   |                                 ^ help: add `;` here\n15 |   let text_len = text.length\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpnok7z_1j.rs:15:29\n   |\n15 |   let text_len = text.length\n   |                             ^ help: add `;` here\n16 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpnok7z_1j.rs:16:18\n   |\n16 |   let result = \"\"\n   |                  ^ help: add `;` here\n17 |   for i in 0..text_len {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpnok7z_1j.rs:18:21\n   |\n18 |     let ch = text[i]\n   |                     ^ help: add `;` here\n19 |     if vowels.indexOf(ch) >= 0 {\n   |     -- unexpected token\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmpnok7z_1j.rs:14:27\n   |\n14 |   let vowels_len = vowels.length\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmpnok7z_1j.rs:15:23\n   |\n15 |   let text_len = text.length\n   |                       ^^^^^^ unknown field\n\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpnok7z_1j.rs:18:14\n   |\n18 |     let ch = text[i]\n   |              ^^^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the trait `Index<{integer}>` is not implemented for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n             <String as ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_count = 0;\n  let new_text = \"\";\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      new_text += text[i];\n    } else {\n      vowels_count += 1;\n    }\n  }\n  if (vowels_count === 0) {\n    return \"\";\n  } else {\n    return new_text;\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp2dii2bkf.rs:16:8\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp2dii2bkf.rs:16:12\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp2dii2bkf.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp2dii2bkf.rs:16:13\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp2dii2bkf.rs:16:14\n   |\n16 |   for (let i = 0; i < text.length; i++) {\n   |              ^ expected expression\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_len = vowels.length;\n  let text_len = text.length;\n  let result = \"\";\n  for (let i = 0; i < text_len; i++) {\n    let c = text[i];\n    if (vowels.indexOf(c) < 0) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmprrqow8wh.rs:17:8\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmprrqow8wh.rs:17:12\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprrqow8wh.rs:17:13\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprrqow8wh.rs:17:14\n   |\n17 |   for (let i = 0; i < text_len; i++) {\n   |              ^ expected expression\n\nerror[E0609]: no field `length` on type `&str`\n  --> /tmp/tmprrqow8wh.rs:14:27\n   |\n14 |   let vowels_len = vowels.length;\n   |                           ^^^^^^\n\nerror[E0609]: no field `length` on type `String`\n  --> /tmp/tmprrqow8wh.rs:15:23\n   |\n15 |   let text_len = text.length;\n   |                       ^^^^^^ unknown field\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0609`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_lower = vowels.toLowerCase();\n  let text_lower = text.toLowerCase();\n  let result = \"\";\n  for (let i = 0; i < text_lower.length; i++) {\n    let c = text_lower[i];\n    if (vowels_lower.indexOf(c) == -1) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpqj2sopfi.rs:17:8\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpqj2sopfi.rs:17:12\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpqj2sopfi.rs:17:14\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpqj2sopfi.rs:17:13\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpqj2sopfi.rs:17:14\n   |\n17 |   for (let i = 0; i < text_lower.length; i++) {\n   |              ^ expected expression\n\nerror[E0599]: no method named `toLowerCase` found for reference `&str` in the current scope\n  --> /tmp/tmpqj2sopfi.rs:14:29\n   |\n14 |   let vowels_lower = vowels.toLowerCase();\n   |                             ^^^^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror[E0599]: no method named `toLowerCase` found for struct `String` in the current scope\n  --> /tmp/tmpqj2sopfi.rs:15:25\n   |\n15 |   let text_lower = text.toLowerCase();\n   |                         ^^^^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 7 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = String::from(\"aeiouAEIOU\");\n  let result = \"\";\n  for (let c of text) {\n    if (vowels.contains(c)) {\n      result += c;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgi66nqfu.rs:15:8\n   |\n15 |   for (let c of text) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `c`\n  --> /tmp/tmpgi66nqfu.rs:15:12\n   |\n15 |   for (let c of text) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `of`\n  --> /tmp/tmpgi66nqfu.rs:15:14\n   |\n15 |   for (let c of text) {\n   |             -^^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `text`\n  --> /tmp/tmpgi66nqfu.rs:15:17\n   |\n15 |   for (let c of text) {\n   |                -^^^^ expected one of `)`, `,`, `@`, or `|`\n   |                |\n   |                help: missing `,`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgi66nqfu.rs:15:22\n   |\n15 |   for (let c of text) {\n   |                      ^ help: try adding `in` here\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpgi66nqfu.rs:20:3\n   |\n20 |   return result;\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n20 |   { return result; }\n   |   +                +\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let result = \"\";\n  for c in text {\n    if vowels.contains(c) {\n      result += c;\n    } else {\n      result += \"\";\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0277]: `String` is not an iterator\n  --> /tmp/tmpg74q1ugb.rs:15:12\n   |\n15 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpg74q1ugb.rs:17:7\n   |\n17 |       result += c;\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpg74q1ugb.rs:19:7\n   |\n19 |       result += \"\";\n   |       ------^^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg74q1ugb.rs:22:10\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n22 |   return result;\n   |          ^^^^^^- help: try using a conversion method: `.to_string()`\n   |          |\n   |          expected struct `String`, found `&str`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\";\n  let vowels_lower = vowels.toLowerCase();\n  let text_lower = text.toLowerCase();\n  let text_without_vowels = text_lower.replace(vowels_lower, \"\");\n  return text_without_vowels\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error[E0599]: no method named `toLowerCase` found for reference `&str` in the current scope\n  --> /tmp/tmp7i86218d.rs:14:29\n   |\n14 |   let vowels_lower = vowels.toLowerCase();\n   |                             ^^^^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror[E0599]: no method named `toLowerCase` found for struct `String` in the current scope\n  --> /tmp/tmp7i86218d.rs:15:25\n   |\n15 |   let text_lower = text.toLowerCase();\n   |                         ^^^^^^^^^^^ help: there is an associated function with a similar name: `to_lowercase`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>> remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n  let vowels = \"aeiouAEIOU\"\n  let vowels_count = 0\n  let result = \"\"\n  for c in text {\n    if vowels.contains(c) {\n      vowels_count += 1\n    } else {\n      result += c\n    }\n  }\n  if (vowels_count == 0) {\n    return result\n  } else {\n    return \"\"\n  }\n}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\")), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\")), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n}\n",
      "timestamp": 1664293366,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:13:28\n   |\n13 |   let vowels = \"aeiouAEIOU\"\n   |                            ^ help: add `;` here\n14 |   let vowels_count = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmprafvcm_3.rs:14:23\n   |\n14 |   let vowels_count = 0\n   |                       ^ help: add `;` here\n15 |   let result = \"\"\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmprafvcm_3.rs:15:18\n   |\n15 |   let result = \"\"\n   |                  ^ help: add `;` here\n16 |   for c in text {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprafvcm_3.rs:23:6\n   |\n23 |   if (vowels_count == 0) {\n   |      ^                 ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n23 -   if (vowels_count == 0) {\n23 +   if vowels_count == 0 {\n   | \n\nerror[E0277]: `String` is not an iterator\n  --> /tmp/tmprafvcm_3.rs:16:12\n   |\n16 |   for c in text {\n   |            ^^^^ `String` is not an iterator; try calling `.chars()` or `.bytes()`\n   |\n   = help: the trait `Iterator` is not implemented for `String`\n   = note: required because of the requirements on the impl of `IntoIterator` for `String`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmprafvcm_3.rs:20:7\n   |\n20 |       result += c\n   |       ------^^^^^\n   |       |\n   |       cannot use `+=` on type `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprafvcm_3.rs:24:12\n   |\n12 | fn remove_vowels(text: String) -> String {\n   |                                   ------ expected `String` because of return type\n...\n24 |     return result\n   |            ^^^^^^- help: try using a conversion method: `.to_string()`\n   |            |\n   |            expected struct `String`, found `&str`\n\nerror: aborting due to 6 previous errors; 1 warning emitted\n\nSome errors have detailed explanations: E0277, E0308, E0368.\nFor more information about an error, try `",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}