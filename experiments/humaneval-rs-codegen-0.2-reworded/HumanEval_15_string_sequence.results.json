{
  "name": "HumanEval_15_string_sequence",
  "language": "rs",
  "prompt": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n",
  "tests": "}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_s());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmpw3pl50ke.rs:9:25\n  |\n9 |     s += String::from(i.to_s());\n  |                         ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw3pl50ke.rs:9:10\n  |\n9 |     s += String::from(i.to_s());\n  |          ^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_s())`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let result = String::from(\"\");\n  for i in 0..n {\n    result = result.concat(String::from(i.to_string()));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpjrtu206e.rs:9:21\n  |\n9 |     result = result.concat(String::from(i.to_string()));\n  |                     ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n    if (i < n - 1) {\n      s += \" \";\n    }\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqdssvvbc.rs:10:8\n   |\n10 |     if (i < n - 1) {\n   |        ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (i < n - 1) {\n10 +     if i < n - 1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpqdssvvbc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let result = String.from(\"0\");\n  for i in 0..n {\n    result = result.concat(String.from(i.to_string()));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n --> /tmp/tmp0e5jlr0v.rs:7:16\n  |\n7 |   let result = String.from(\"0\");\n  |                ^^^^^^-----\n  |                |\n  |                help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n --> /tmp/tmp0e5jlr0v.rs:9:28\n  |\n9 |     result = result.concat(String.from(i.to_string()));\n  |                            ^^^^^^-----\n  |                            |\n  |                            help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let result = String::from(\"\");\n  for i in 0..n {\n    result = result.concat(String::from(i.to_s()));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpm1wlhcoi.rs:9:21\n  |\n9 |     result = result.concat(String::from(i.to_s()));\n  |                     ^^^^^^ method not found in `String`\n\nerror[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmpm1wlhcoi.rs:9:43\n  |\n9 |     result = result.concat(String::from(i.to_s()));\n  |                                           ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let result = String.from(\"0\");\n  for i in 0..n {\n    result = result.concat(String.from(i.to_string()));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0423]: expected value, found struct `String`\n --> /tmp/tmp0e5jlr0v.rs:7:16\n  |\n7 |   let result = String.from(\"0\");\n  |                ^^^^^^-----\n  |                |\n  |                help: use the path separator to refer to an item: `String::from`\n\nerror[E0423]: expected value, found struct `String`\n --> /tmp/tmp0e5jlr0v.rs:9:28\n  |\n9 |     result = result.concat(String.from(i.to_string()));\n  |                            ^^^^^^-----\n  |                            |\n  |                            help: use the path separator to refer to an item: `String::from`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s + String::from(i)\n  }\n  return s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0277]: the trait bound `String: From<isize>` is not satisfied\n --> /tmp/tmp4h3i0jlz.rs:9:13\n  |\n9 |     s = s + String::from(i)\n  |             ^^^^^^^^^^^^ the trait `From<isize>` is not implemented for `String`\n  |\n  = help: the following other types implement trait `From<T>`:\n            <String as From<&String>>\n            <String as From<&mut str>>\n            <String as From<&str>>\n            <String as From<Box<str>>>\n            <String as From<Cow<'a, str>>>\n            <String as From<char>>\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4h3i0jlz.rs:9:13\n  |\n9 |     s = s + String::from(i)\n  |             ^^^^^^^^^^^^^^^\n  |             |\n  |             expected `&str`, found struct `String`\n  |             help: consider borrowing here: `&String::from(i)`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n    if (i < n - 1) {\n      s += \" \";\n    }\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqdssvvbc.rs:10:8\n   |\n10 |     if (i < n - 1) {\n   |        ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (i < n - 1) {\n10 +     if i < n - 1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpqdssvvbc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s + String::from(i.to_string())\n  }\n  return s\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpxs7c5vux.rs:9:13\n  |\n9 |     s = s + String::from(i.to_string())\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |             |\n  |             expected `&str`, found struct `String`\n  |             help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let result = String::from(\"\");\n  for i in 0..n {\n    result = result.concat(String::from(i.to_string()));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpjrtu206e.rs:9:21\n  |\n9 |     result = result.concat(String::from(i.to_string()));\n  |                     ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_s()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmp_ghb38ob.rs:9:25\n  |\n9 |     s += String::from(i.to_s()) + \" \";\n  |                         ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_ghb38ob.rs:9:10\n  |\n9 |     s += String::from(i.to_s()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_s()) + \" \")`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_s());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmpw3pl50ke.rs:9:25\n  |\n9 |     s += String::from(i.to_s());\n  |                         ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw3pl50ke.rs:9:10\n  |\n9 |     s += String::from(i.to_s());\n  |          ^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_s())`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_s());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmpw3pl50ke.rs:9:25\n  |\n9 |     s += String::from(i.to_s());\n  |                         ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw3pl50ke.rs:9:10\n  |\n9 |     s += String::from(i.to_s());\n  |          ^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_s())`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_s()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmp_ghb38ob.rs:9:25\n  |\n9 |     s += String::from(i.to_s()) + \" \";\n  |                         ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_ghb38ob.rs:9:10\n  |\n9 |     s += String::from(i.to_s()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_s()) + \" \")`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s + String::from(fmt!(\"%d \", i));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error: cannot find macro `fmt` in this scope\n --> /tmp/tmpu2ce_jx6.rs:9:26\n  |\n9 |     s = s + String::from(fmt!(\"%d \", i));\n  |                          ^^^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpu2ce_jx6.rs:9:13\n  |\n9 |     s = s + String::from(fmt!(\"%d \", i));\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |             |\n  |             expected `&str`, found struct `String`\n  |             help: consider borrowing here: `&String::from(fmt!(\"%d \", i))`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let result = String.new(n * 2);\n  for i in 0..n {\n    result.cat_str(\" \");\n    result.cat_str(Int::to_string(i));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Int`\n  --> /tmp/tmp1weet3qy.rs:10:20\n   |\n10 |     result.cat_str(Int::to_string(i));\n   |                    ^^^ use of undeclared type `Int`\n\nerror[E0423]: expected value, found struct `String`\n --> /tmp/tmp1weet3qy.rs:7:16\n  |\n7 |   let result = String.new(n * 2);\n  |                ^^^^^^----\n  |                |\n  |                help: use the path separator to refer to an item: `String::new`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0423, E0433.\nFor more information about an error, try `rustc --explain E0423`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n    if (i < n - 1) {\n      s += \" \";\n    }\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqdssvvbc.rs:10:8\n   |\n10 |     if (i < n - 1) {\n   |        ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (i < n - 1) {\n10 +     if i < n - 1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpqdssvvbc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_s());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmpw3pl50ke.rs:9:25\n  |\n9 |     s += String::from(i.to_s());\n  |                         ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpw3pl50ke.rs:9:10\n  |\n9 |     s += String::from(i.to_s());\n  |          ^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_s())`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_s()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmp_ghb38ob.rs:9:25\n  |\n9 |     s += String::from(i.to_s()) + \" \";\n  |                         ^^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_ghb38ob.rs:9:10\n  |\n9 |     s += String::from(i.to_s()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_s()) + \" \")`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let result = String::from(\"\");\n  for i in 0..n {\n    result = result.concat(String::from(i.to_string()));\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpjrtu206e.rs:9:21\n  |\n9 |     result = result.concat(String::from(i.to_string()));\n  |                     ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_s()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmppfsvvc4y.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_s()));\n  |           ^^^^^^ method not found in `String`\n\nerror[E0599]: no method named `to_s` found for type `isize` in the current scope\n --> /tmp/tmppfsvvc4y.rs:9:33\n  |\n9 |     s = s.concat(String::from(i.to_s()));\n  |                                 ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n    if (i < n - 1) {\n      s += \" \";\n    }\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpqdssvvbc.rs:10:8\n   |\n10 |     if (i < n - 1) {\n   |        ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n10 -     if (i < n - 1) {\n10 +     if i < n - 1 {\n   | \n\nerror[E0308]: mismatched types\n --> /tmp/tmpqdssvvbc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpqavuvtsf.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string()) + \" \";\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsj13a2nb.rs:9:10\n  |\n9 |     s += String::from(i.to_string()) + \" \";\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&(String::from(i.to_string()) + \" \")`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"\");\n  for i in 0..n {\n    s += String::from(i.to_string());\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9745ibpc.rs:9:10\n  |\n9 |     s += String::from(i.to_string());\n  |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |          |\n  |          expected `&str`, found struct `String`\n  |          help: consider borrowing here: `&String::from(i.to_string())`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n/// >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n: isize) -> String {\n  let s = String::from(\"0\");\n  for i in 0..n {\n    s = s.concat(String::from(i.to_string()));\n  }\n  return s;\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n",
      "timestamp": 1664292637,
      "stdout": "",
      "stderr": "error[E0599]: no method named `concat` found for struct `String` in the current scope\n --> /tmp/tmpa_6aswm7.rs:9:11\n  |\n9 |     s = s.concat(String::from(i.to_string()));\n  |           ^^^^^^ method not found in `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}