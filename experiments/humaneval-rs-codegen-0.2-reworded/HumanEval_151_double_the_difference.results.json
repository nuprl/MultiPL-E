{
  "name": "HumanEval_151_double_the_difference",
  "language": "rs",
  "prompt": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && isize(v) % 2 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0423]: expected function, found builtin type `isize`\n  --> /tmp/tmptw4usihs.rs:15:20\n   |\n15 |     if v >= 0.0 && isize(v) % 2 == 1 {\n   |                    ^^^^^ not a function\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptw4usihs.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0423.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8jba9e5j.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8jba9e5j.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8jba9e5j.rs:27:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n27 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 {\n      if v % 2 == 1 {\n        sum += v * v;\n      }\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpwa_fvmyt.rs:15:13\n   |\n15 |     if v >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpwa_fvmyt.rs:16:12\n   |\n16 |       if v % 2 == 1 {\n   |            ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n16 |       if v % 2.0 == 1 {\n   |               ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwa_fvmyt.rs:21:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n21 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcnp8tlem.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8jba9e5j.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8jba9e5j.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8jba9e5j.rs:27:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n27 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.is_empty() {\n    return 0\n  }\n  let sum = 0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpva9bf006.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpva9bf006.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpva9bf006.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpva9bf006.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpva9bf006.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpva9bf006.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror: aborting due to 6 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp5hkz2p4f.rs:15:22\n   |\n15 |     if v >= 0.0 && v % 1 == 1 {\n   |                      ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0.0 && v % 1.0 == 1 {\n   |                         ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hkz2p4f.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp9av4xzl_.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9av4xzl_.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcnp8tlem.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcnp8tlem.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6jvq_k6q.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 {\n      if v % 2 == 1 {\n        sum += v * v;\n      }\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpwa_fvmyt.rs:15:13\n   |\n15 |     if v >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpwa_fvmyt.rs:16:12\n   |\n16 |       if v % 2 == 1 {\n   |            ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n16 |       if v % 2.0 == 1 {\n   |               ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwa_fvmyt.rs:21:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n21 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i < 0 {\n      continue;\n    }\n    if i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsqls6_zk.rs:15:12\n   |\n15 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpsqls6_zk.rs:18:10\n   |\n18 |     if i % 2 == 1 {\n   |          ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n18 |     if i % 2.0 == 1 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsqls6_zk.rs:22:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n22 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpybcc70ys.rs:17:16\n   |\n17 |   let sum = 0.0\n   |                ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpybcc70ys.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpybcc70ys.rs:19:10\n   |\n19 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpybcc70ys.rs:20:12\n   |\n20 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpybcc70ys.rs:23:12\n   |\n23 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpybcc70ys.rs:24:18\n   |\n24 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpybcc70ys.rs:24:31\n   |\n24 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpybcc70ys.rs:28:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n28 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8jba9e5j.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8jba9e5j.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8jba9e5j.rs:27:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n27 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      sum += i.to_f64() * i.to_f64()\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpqbmzjj_n.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpqbmzjj_n.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpqbmzjj_n.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpqbmzjj_n.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpqbmzjj_n.rs:22:16\n   |\n22 |       sum += i.to_f64() * i.to_f64()\n   |                ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpqbmzjj_n.rs:22:29\n   |\n22 |       sum += i.to_f64() * i.to_f64()\n   |                             ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqbmzjj_n.rs:25:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n25 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.is_empty() {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_odd() {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpm2u2tzd6.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0599]: no method named `is_odd` found for reference `&f64` in the current scope\n  --> /tmp/tmpm2u2tzd6.rs:18:10\n   |\n18 |     if i.is_odd() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm2u2tzd6.rs:22:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n22 |   return sum\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6jvq_k6q.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i < 0 {\n      continue;\n    }\n    if i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpsqls6_zk.rs:15:12\n   |\n15 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpsqls6_zk.rs:18:10\n   |\n18 |     if i % 2 == 1 {\n   |          ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n18 |     if i % 2.0 == 1 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsqls6_zk.rs:22:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n22 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp5hkz2p4f.rs:15:22\n   |\n15 |     if v >= 0.0 && v % 1 == 1 {\n   |                      ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0.0 && v % 1.0 == 1 {\n   |                         ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hkz2p4f.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6jvq_k6q.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0\n  for i in lst.iter() {\n    if i % 2 == 1 {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp82fx6yo4.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp82fx6yo4.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp82fx6yo4.rs:18:10\n   |\n18 |     if i % 2 == 1 {\n   |          ^ no implementation for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp82fx6yo4.rs:19:11\n   |\n19 |       sum += i * i\n   |           ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp5hkz2p4f.rs:15:22\n   |\n15 |     if v >= 0.0 && v % 1 == 1 {\n   |                      ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0.0 && v % 1.0 == 1 {\n   |                         ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hkz2p4f.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcnp8tlem.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcnp8tlem.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 {\n      if v % 2 == 1 {\n        sum += v * v;\n      }\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpqyu9s1x3.rs:16:12\n   |\n16 |       if v % 2 == 1 {\n   |            ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n16 |       if v % 2.0 == 1 {\n   |               ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqyu9s1x3.rs:21:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n21 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6jvq_k6q.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.is_empty() {\n    return 0\n  }\n  let sum = 0\n  for i in lst {\n    if i < 0 {\n      continue\n    }\n    if i % 2 == 1 {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp7ierxd80.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7ierxd80.rs:18:12\n   |\n18 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp7ierxd80.rs:21:10\n   |\n21 |     if i % 2 == 1 {\n   |          ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n21 |     if i % 2.0 == 1 {\n   |             ++\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp7ierxd80.rs:22:11\n   |\n22 |       sum += i * i\n   |           ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpg82pc41i.rs:15:13\n   |\n15 |     if v >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg82pc41i.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.is_empty() {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst {\n    if i < 0 {\n      continue\n    }\n    if i % 2 == 1 {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp9kaikpg1.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9kaikpg1.rs:18:12\n   |\n18 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp9kaikpg1.rs:21:10\n   |\n21 |     if i % 2 == 1 {\n   |          ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n21 |     if i % 2.0 == 1 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9kaikpg1.rs:25:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n25 |   return sum\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6jvq_k6q.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp9av4xzl_.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9av4xzl_.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.is_empty() {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst {\n    if i < 0 {\n      continue\n    }\n    if i % 2 == 1 {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp9kaikpg1.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst {\n   |   --- unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9kaikpg1.rs:18:12\n   |\n18 |     if i < 0 {\n   |            ^\n   |            |\n   |            expected `f64`, found integer\n   |            help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp9kaikpg1.rs:21:10\n   |\n21 |     if i % 2 == 1 {\n   |          ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n21 |     if i % 2.0 == 1 {\n   |             ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9kaikpg1.rs:25:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n25 |   return sum\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_finite() && i.is_odd() {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp7zhv65c0.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp7zhv65c0.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_odd` found for reference `&f64` in the current scope\n  --> /tmp/tmp7zhv65c0.rs:18:27\n   |\n18 |     if i.is_finite() && i.is_odd() {\n   |                           ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7zhv65c0.rs:22:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n22 |   return sum\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 1.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp45w26jpd.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcnp8tlem.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp8jba9e5j.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp8jba9e5j.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp8jba9e5j.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8jba9e5j.rs:27:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n27 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp42crm8cd.rs:17:16\n   |\n17 |   let sum = 0.0\n   |                ^ help: add `;` here\n18 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp42crm8cd.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp42crm8cd.rs:19:10\n   |\n19 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp42crm8cd.rs:20:12\n   |\n20 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp42crm8cd.rs:24:12\n   |\n24 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp42crm8cd.rs:25:18\n   |\n25 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp42crm8cd.rs:25:31\n   |\n25 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp42crm8cd.rs:30:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n30 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.is_empty() {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpszk_79ev.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpszk_79ev.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpszk_79ev.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpszk_79ev.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpszk_79ev.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpszk_79ev.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpszk_79ev.rs:27:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n27 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0.0\n  for i in lst.iter() {\n    if i.is_finite() && i.is_integer() {\n      sum += i.as_f64() * i.as_f64()\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpfxldoxbf.rs:16:16\n   |\n16 |   let sum = 0.0\n   |                ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpfxldoxbf.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_integer` found for reference `&f64` in the current scope\n  --> /tmp/tmpfxldoxbf.rs:18:27\n   |\n18 |     if i.is_finite() && i.is_integer() {\n   |                           ^^^^^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `as_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpfxldoxbf.rs:19:16\n   |\n19 |       sum += i.as_f64() * i.as_f64()\n   |                ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `as_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpfxldoxbf.rs:19:29\n   |\n19 |       sum += i.as_f64() * i.as_f64()\n   |                             ^^^^^^ method not found in `&f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfxldoxbf.rs:22:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n22 |   return sum\n   |          ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.is_odd() {\n        sum += i * i\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpg7gon02p.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpg7gon02p.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmpg7gon02p.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `is_odd` found for reference `&f64` in the current scope\n  --> /tmp/tmpg7gon02p.rs:19:12\n   |\n19 |       if i.is_odd() {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpg7gon02p.rs:20:13\n   |\n20 |         sum += i * i\n   |             ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0599, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp5hkz2p4f.rs:15:22\n   |\n15 |     if v >= 0.0 && v % 1 == 1 {\n   |                      ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0.0 && v % 1.0 == 1 {\n   |                         ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5hkz2p4f.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0\n  for i in lst.iter() {\n    if i % 2 == 1 {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp82fx6yo4.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp82fx6yo4.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0277]: cannot mod `&f64` by `{integer}`\n  --> /tmp/tmp82fx6yo4.rs:18:10\n   |\n18 |     if i % 2 == 1 {\n   |          ^ no implementation for `&f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `&f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp82fx6yo4.rs:19:11\n   |\n19 |       sum += i * i\n   |           ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0616.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 && i % 2 == 1 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:15:13\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp009imx47.rs:15:20\n   |\n15 |     if i >= 0 && i % 2 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if i >= 0 && i % 2.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp009imx47.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0.0 && v % 1.0 == 0.0 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpcnp8tlem.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for i in lst {\n    if i >= 0 {\n      sum += i * i;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:15:13\n   |\n15 |     if i >= 0 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp41_fesyy.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  if lst.len == 0 {\n    return 0\n  }\n  let sum = 0\n  for i in lst.iter() {\n    if i.is_f64() {\n      if i.to_f64() < 0 {\n        continue\n      }\n      if i.to_f64() % 2 == 1 {\n        sum += i.to_f64() * i.to_f64()\n      }\n    }\n  }\n  return sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp9av4xzl_.rs:16:14\n   |\n16 |   let sum = 0\n   |              ^ help: add `;` here\n17 |   for i in lst.iter() {\n   |   --- unexpected token\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp9av4xzl_.rs:13:10\n   |\n13 |   if lst.len == 0 {\n   |          ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   if lst.len() == 0 {\n   |             ++\n\nerror[E0599]: no method named `is_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:18:10\n   |\n18 |     if i.is_f64() {\n   |          ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:19:12\n   |\n19 |       if i.to_f64() < 0 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:22:12\n   |\n22 |       if i.to_f64() % 2 == 1 {\n   |            ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:23:18\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                  ^^^^^^ method not found in `&f64`\n\nerror[E0599]: no method named `to_f64` found for reference `&f64` in the current scope\n  --> /tmp/tmp9av4xzl_.rs:23:31\n   |\n23 |         sum += i.to_f64() * i.to_f64()\n   |                               ^^^^^^ method not found in `&f64`\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of numbers, return the sum of squares of the numbers\n/// in the vector that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1, -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>> double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n  let sum = 0.0;\n  for v in lst {\n    if v >= 0 && v % 1 == 1 {\n      sum += v * v;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n",
      "timestamp": 1664292458,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:15:13\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |             ^\n   |             |\n   |             expected `f64`, found integer\n   |             help: use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp6mw5sg_b.rs:15:20\n   |\n15 |     if v >= 0 && v % 1 == 1 {\n   |                    ^ no implementation for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented for `f64`\n   = help: the following other types implement trait `Rem<Rhs>`:\n             <&'a f32 as Rem<f32>>\n             <&'a f64 as Rem<f64>>\n             <&'a i128 as Rem<i128>>\n             <&'a i16 as Rem<i16>>\n             <&'a i32 as Rem<i32>>\n             <&'a i64 as Rem<i64>>\n             <&'a i8 as Rem<i8>>\n             <&'a isize as Rem<isize>>\n           and 54 others\nhelp: consider using a floating-point literal by writing it with `.0`\n   |\n15 |     if v >= 0 && v % 1.0 == 1 {\n   |                       ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6mw5sg_b.rs:19:10\n   |\n12 | fn double_the_difference(lst: Vec<f64>) -> isize {\n   |                                            ----- expected `isize` because of return type\n...\n19 |   return sum;\n   |          ^^^ expected `isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}