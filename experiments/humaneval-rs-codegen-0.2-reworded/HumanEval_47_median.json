{
  "name": "HumanEval_47_median",
  "language": "rs",
  "prompt": "/// Return median of elements in the vector l.\n/// >>> median(vec![3, 1, 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfn median(l: Vec<isize>) -> f64 {\n",
  "tests": "}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n",
  "completions": [
    "  l = l.map(|x| -x);\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 0) {\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  } else {\n    return l[n / 2];\n  }",
    "  l = l.map(|v| v.to_f64());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[(l.len() / 2) - 1] + l[l.len() / 2]) / 2.0;\n  } else {\n    return l[(l.len() - 1) / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2) {\n    return l[l.len() / 2];\n  } else {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  }",
    "  if len(l) == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  if len(l) == 0 {\n    panic(\"median: empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  }\n  if (n % 2 == 1) {\n    return l[n / 2];\n  }\n  return (l[n / 2] + l[n / 2 - 1]) / 2.0;",
    "  l = l.sort();\n  if (l.len == 0) {\n    return 0.0;\n  }\n  if (l.len == 1) {\n    return l[0];\n  }\n  return (l[l.len / 2] + l[l.len / 2 - 1]) / 2.0;",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  l = l.take(l.length / 2);\n  return l.head();",
    "  l.sort();\n  if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if l.len == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if l.len == 1 {\n    return l.data[0]\n  }\n  if l.len == 2 {\n    return (l.data[0] + l.data[1]) / 2.0\n  }\n  if l.len == 3 {\n    return (l.data[0] + l.data[1] + l.data[2]) / 3.0\n  }\n  if l.len == 4 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3]) / 4.0\n  }\n  if l.len == 5 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3] + l.data[4]) / 5.0\n  }\n  if l.len == 6 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3] + l.data[4] + l.data[5]) / 6.0\n  }\n  if l.len == 7 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3] + l.data[4] + l.data[5] + l.data[6]) / 7.0\n  }\n  if l.len == 8 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3] + l.data[4] + l.data[5] + l.data[6] + l.data[7]) / 8.0\n  }\n  if l.len == 9 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3] + l.data[4] + l.data[5] + l.data[6] + l.data[7] + l.data[8]) / 9.0\n  }\n  if l.len == 10",
    "  if len(l) == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l = l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "    l = l.map(|x| x.abs());\n    l = l.sort();\n    if (l.len() % 2) {\n        return l.get(l.len() / 2);\n    } else {\n        return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n    }",
    "    if len(l) == 0 {\n        return 0.0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    l.sort()\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  return l[len(l) / 2]",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l = l.map(|x| x.abs());\n  l.sort();\n  return l[l.len()/2];",
    "  if len(l) == 0 {\n    return 0.0\n  }\n\n  l = l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  return l[l.len()/2];",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort_by(|x: f64, y: f64| -> x < y);\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  } else {\n    return l.get(l.len() / 2);\n  }",
    "  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l = l.sort()\n  return l[len(l)/2]",
    "  if l.len == 0 {\n    panic(\"median() called on empty vector\")\n  }\n\n  l.sort()\n  if l.len % 2 == 0 {\n    return (l[l.len / 2] + l[l.len / 2 - 1]) / 2.0\n  } else {\n    return l[l.len / 2]\n  }",
    "    l = l.map(|x| x.abs());\n    l = l.sort();\n    if (l.len() % 2 == 0) {\n        return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n    } else {\n        return l[l.len() / 2];\n    }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 1) {\n    return l[n / 2];\n  } else {\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[(l.len() / 2) - 1] + l[l.len() / 2]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  if len(l) == 0 {\n    panic(\"median: vector is empty\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  if len(l) == 2 {\n    return (l[0] + l[1]) / 2.0\n  }\n  if len(l) == 3 {\n    return (l[0] + l[1] + l[2]) / 3.0\n  }\n  if len(l) == 4 {\n    return (l[0] + l[1] + l[2] + l[3]) / 4.0\n  }\n  if len(l) == 5 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n  }\n  if len(l) == 6 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n  }\n  if len(l) == 7 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n  }\n  if len(l) == 8 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n  }\n  if len(l) == 9 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n  }\n  if len(l) == 10 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n  }\n  if len(l) == 11 {\n    return (l[0] +",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if l.len == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if l.len == 1 {\n    return l.data[0]\n  }\n  if l.len == 2 {\n    return (l.data[0] + l.data[1]) / 2.0\n  }\n  med := l.data[0]\n  for i := 1; i < l.len; i++ {\n    if l.data[i] < med {\n      med = l.data[i]\n    }\n  }\n  for i := 0; i < l.len; i++ {\n    if l.data[i] == med {\n      return med\n    }\n  }\n  panic(\"median called on non-sorted vector\")",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  return l[l.len()/2];",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x as f64);\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 1) {\n    return l[n/2];\n  } else {\n    let a = l[n/2 - 1];\n    let b = l[n/2];\n    return (a + b) / 2.0;\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l = l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "    let n = l.len();\n    if n == 0 {\n        panic(\"median called on empty vector\");\n    }\n    let m = n / 2;\n    let l1 = l.slice(0, m);\n    let l2 = l.slice(m, n);\n    let m1 = median(l1);\n    let m2 = median(l2);\n    return (m1 + m2) / 2.0;",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "    let l2 = l.map(|x| x as f64);\n    let l3 = l2.sort();\n    let l4 = l3.take(l3.length / 2);\n    return l4.get(l4.length - 1);",
    "  if l.len == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if l.len == 1 {\n    return l.data[0]\n  }\n  if l.len == 2 {\n    return (l.data[0] + l.data[1]) / 2.0\n  }\n  if l.len == 3 {\n    return (l.data[0] + l.data[1] + l.data[2]) / 3.0\n  }\n  if l.len == 4 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3]) / 4.0\n  }\n  if l.len == 5 {\n    return (l.data[0] + l.data[1] + l.data[2] + l.data[3] + l.data[4]) / 5.0\n  }\n  panic(\"median called on vector with more than 5 elements\")",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 1) {\n    return l[n / 2];\n  } else {\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  }",
    "    let l_len = l.len();\n    if l_len == 0 {\n        panic!(\"median called on empty vector\");\n    }\n    if l_len == 1 {\n        return l[0];\n    }\n    let l_sorted = sort(l);\n    let l_half = l_sorted.len() / 2;\n    if l_half == 0 {\n        return l_sorted[0];\n    }\n    let l_middle = l_sorted[l_half];\n    if l_half == l_len - 1 {\n        return l_sorted[l_half];\n    }\n    return (l_sorted[l_half] + l_sorted[l_half + 1]) / 2.0;",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "    l = l.map(|x| x.abs());\n    l = l.sort();\n    let n = l.len();\n    if (n == 0) {\n        return 0.0;\n    } else if (n % 2 == 1) {\n        return l[n/2];\n    } else {\n        let a = l[n/2 - 1];\n        let b = l[n/2];\n        return (a + b) / 2.0;\n    }",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l = l.map(|v| v.to_f64());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "    let l2 = l.map(|x| x.as_f64());\n    let l3 = l2.sort();\n    let l4 = l3.take(l3.length / 2);\n    return l4.head();",
    "  l.sort()\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2 - 1) + l.get(l.len() / 2)) / 2.0\n  } else {\n    return l.get(l.len() / 2)\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  return l[len(l) / 2]",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  if len(l) == 2 {\n    return (l[0] + l[1]) / 2.0\n  }\n  if len(l) == 3 {\n    return (l[0] + l[1] + l[2]) / 3.0\n  }\n  if len(l) == 4 {\n    return (l[0] + l[1] + l[2] + l[3]) / 4.0\n  }\n  if len(l) == 5 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n  }\n  if len(l) == 6 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n  }\n  if len(l) == 7 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n  }\n  if len(l) == 8 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n  }\n  if len(l) == 9 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n  }\n  if len(l) == 10 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n  }\n  if len(l) == 11 {\n    return (l[0] +",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  if len(l) == 2 {\n    return (l[0] + l[1]) / 2.0\n  }\n  sorted := sort(l)\n  mid := len(sorted) / 2\n  if len(sorted) % 2 == 0 {\n    return (sorted[mid] + sorted[mid-1]) / 2.0\n  }\n  return sorted[mid]",
    "  l = l.map(|x| -x);\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[(l.len() / 2) - 1] + l[l.len() / 2]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l = l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "    l = l.map(|x| x.abs());\n    l.sort();\n    if (l.len() % 2 == 1) {\n        return l.get(l.len() / 2);\n    } else {\n        return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n    }",
    "    let n = l.len();\n    if n == 0 {\n        return 0.0;\n    }\n    let m = n / 2;\n    let lo = 0;\n    let hi = n - 1;\n    while (lo < hi) {\n        let mid = (lo + hi) / 2;\n        if (l[mid] < l[hi]) {\n            lo = mid + 1;\n        } else {\n            hi = mid;\n        }\n    }\n    return (l[lo] + l[hi]) / 2.0;",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l = l.map(|v| v.to_f64());\n  l = l.sort();\n  return l[l.len()/2];",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  if len(l) == 0 {\n    return 0.0\n  }\n\n  l = l.map(|x| -x)\n  l = l.sort()\n  l = l.map(|x| x + x)\n  l = l.take(len(l) / 2)\n  return l[0]",
    "  if len(l) == 0 {\n    return 0.0\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  if len(l) == 2 {\n    return (l[0] + l[1]) / 2.0\n  }\n  return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  return l[len(l)/2]",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  if len(l) % 2 == 1 {\n    return l[len(l) / 2]\n  } else {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n  }",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  });\n\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2 - 1) + l.get(l.len() / 2)) / 2.0\n  } else {\n    return l.get(l.len() / 2)\n  }",
    "    let l2 = l.map(|x| x.as_f64());\n    let l3 = l2.sort();\n    let l4 = l3.take(l3.length() / 2);\n    return l4.head();",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  l = l.take(l.length() / 2);\n  return l.head();",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2).to_f64();\n  } else {\n    return (l.get(l.len() / 2 - 1) + l.get(l.len() / 2)) / 2.0;\n  }",
    "  l = l.map(|v| v.to_f64());\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l[l.len() / 2];\n  } else {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  }",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  return l[l.len()/2];",
    "  l.sort_by(|x: f64, y: f64| -> x < y);\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  } else {\n    return l.get(l.len() / 2);\n  }",
    "  if l.len == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  l.sort_by(|x, y| x - y)\n  if l.len % 2 == 0 {\n    return (l.at(l.len / 2) + l.at(l.len / 2 - 1)) / 2.0\n  } else {\n    return l.at(l.len / 2)\n  }",
    "    l.sort();\n    if l.len() == 0 {\n        return 0.0;\n    }\n    if l.len() == 1 {\n        return l[0];\n    }\n    if l.len() == 2 {\n        return (l[0] + l[1]) / 2.0;\n    }\n    return l[l.len() / 2];",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y { return -1 }\n    if x > y { return 1 }\n    return 0\n  })\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0\n  } else {\n    return l.get(l.len() / 2)\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0",
    "  if len(l) == 0 {\n    panic(\"median: empty vector\")\n  }\n\n  l = l.map(|x| -x)\n  l = l.sort()\n\n  if len(l) % 2 == 1 {\n    return l[len(l) / 2]\n  } else {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "    let mut m = 0.0;\n    let mut cnt = 0;\n    for v in l {\n        if v > m {\n            m = v;\n        } else if v < m {\n            m = v;\n        }\n        cnt += 1;\n    }\n    if cnt % 2 == 0 {\n        return (m + l[(cnt / 2) - 1]) / 2.0;\n    } else {\n        return m;\n    }",
    "  l.sort();\n  if (l.len() % 2) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  }\n  if (n % 2 == 1) {\n    return l[n/2];\n  }\n  return (l[n/2] + l[n/2 - 1]) / 2.0;",
    "  if len(l) == 0 {\n    panic(\"median: vector is empty\")\n  }\n\n  // Find the middle element.\n  let middle = len(l) / 2\n\n  // If the length is odd, return the middle element.\n  if len(l) % 2 == 1 {\n    return l[middle]\n  }\n\n  // If the length is even, return the average of the two middle elements.\n  return (l[middle] + l[middle - 1]) / 2.0",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort()\n  if l.len() == 0 {\n    return 0.0\n  } else if l.len() == 1 {\n    return l[0]\n  } else if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0\n  } else {\n    return l[l.len() / 2]\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  return l[len(l) / 2]",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  } else if l.len() == 1 {\n    return l[0];\n  } else if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if l.len() % 2 == 0 {\n    return (l[(l.len() / 2) - 1] + l[(l.len() / 2)]) / 2.0;\n  } else {\n    return l[(l.len() / 2)];\n  }",
    "  if len(l) == 0 {\n    panic(\"median: empty vector\")\n  }\n\n  if len(l) == 1 {\n    return l[0]\n  }\n\n  l.sort()\n  return l[len(l) / 2]",
    "    l.sort();\n    if (l.len() % 2 == 0) {\n        return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n    } else {\n        return l[l.len() / 2];\n    }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "    let l2 = l.map(|x| x.abs());\n    let l3 = l2.sort();\n    let l4 = l3.take(l3.length / 2);\n    return l4.head();",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  if l.len == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if l.len == 1 {\n    return l.data[0]\n  }\n  l.sort()\n  if l.len % 2 == 0 {\n    return (l.data[l.len / 2] + l.data[l.len / 2 - 1]) / 2.0\n  }\n  return l.data[l.len / 2]",
    "    l = l.map(|x| x as f64);\n    l.sort();\n    return l[(l.len() - 1) / 2];",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  } else if l.len() == 1 {\n    return l[0];\n  } else if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  l = l.take(l.length() / 2);\n  return l.head();",
    "  l.sort();\n  if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort()\n  if l.len() == 0 {\n    return 0.0\n  }\n  if l.len() == 1 {\n    return l[0]\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0\n  }\n  return l[l.len() / 2]",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  return l[len(l) / 2]",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  return l[l.length/2];",
    "  l.sort_by(|x: f64, y: f64| -> x < y);\n  if l.len() % 2 == 1 {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  let n = l.length();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 1) {\n    return l[n / 2];\n  } else {\n    let a = l[n / 2 - 1];\n    let b = l[n / 2];\n    return (a + b) / 2.0;\n  }",
    "  l = l.map(|x| x.abs());\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  l = l.map(|x| x.abs());\n  l.sort();\n  return l[l.len()/2];",
    "  l.sort();\n  if (l.len() % 2) {\n    return l[l.len() / 2];\n  } else {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  }",
    "  l = l.sort();\n  if (l.len() == 0) {\n    return 0.0;\n  } else if (l.len() == 1) {\n    return l[0];\n  } else if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort_by(|x: f64, y: f64| -> x < y);\n  if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|v| v.to_f64());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  if len(l) == 0 {\n    panic(\"median: vector is empty\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l = l.map(|v| v.to_f64())\n  l.sort()\n  return l[len(l) / 2]",
    "  if len(l) == 0 {\n    panic(\"median(): vector is empty\")\n  }\n\n  l.sort()\n  return l[len(l) / 2]",
    "  if l.len == 0 {\n    panic(\"median() called on empty vector\")\n  }\n\n  if l.len == 1 {\n    return l.data[0]\n  }\n\n  l.sort()\n\n  // Find middle element.\n  let middle = l.len / 2\n  if l.len % 2 == 0 {\n    return (l.data[middle - 1] + l.data[middle]) / 2.0\n  } else {\n    return l.data[middle]\n  }",
    "  if len(l) == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l = l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  let l2 = l.map(|x| x.as_f64());\n  let l3 = l2.sort();\n  let l4 = l3.take(l3.length / 2);\n  return l4.head();",
    "  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort_by(|x: f64, y: f64| -> x < y);\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  } else {\n    return l.get(l.len() / 2);\n  }",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort_by(|x: f64, y: f64| -> x < y);\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2 - 1) + l.get(l.len() / 2)) / 2.0;\n  } else {\n    return l.get(l.len() / 2);\n  }",
    "  l = l.sort();\n  if (l.len() == 0) {\n    return 0.0;\n  }\n  if (l.len() == 1) {\n    return l[0];\n  }\n  if (l.len() == 2) {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  if len(l) == 0 {\n    panic(\"median: vector is empty\")\n  }\n\n  if len(l) == 1 {\n    return l[0]\n  }\n\n  l.sort()\n\n  // Find middle element.\n  let middle = len(l) / 2\n  if len(l) % 2 == 0 {\n    return (l[middle] + l[middle - 1]) / 2.0\n  } else {\n    return l[middle]\n  }",
    "  if l.len == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if l.len == 1 {\n    return l.data[0]\n  }\n  l.sort()\n  if l.len % 2 == 1 {\n    return l.data[l.len / 2]\n  }\n  return (l.data[l.len / 2] + l.data[l.len / 2 - 1]) / 2.0",
    "  if l.len == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  l.sort()\n  if l.len % 2 == 1 {\n    return l.get(l.len / 2)\n  } else {\n    return (l.get(l.len / 2) + l.get(l.len / 2 - 1)) / 2.0\n  }",
    "  l = l.map(|x| x.abs());\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if l.len == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  l.sort()\n  if l.len % 2 == 0 {\n    return (l[(l.len / 2) - 1] + l[l.len / 2]) / 2.0\n  } else {\n    return l[l.len / 2]\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 0) {\n    return (l[n / 2 - 1] + l[n / 2]) / 2.0;\n  } else {\n    return l[n / 2];\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  } else if l.len() == 1 {\n    return l[0];\n  } else if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "    let l2 = l.map(|x| x.abs());\n    let l3 = l2.sort();\n    let l4 = l3.take(l3.length / 2);\n    return l4.head();",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  if len(l) == 1 {\n    return l[0]\n  }\n\n  // Find the middle element.\n  let middle = len(l) / 2\n\n  // If the length is odd, return the middle element.\n  if len(l) % 2 == 1 {\n    return l[middle]\n  }\n\n  // If the length is even, return the average of the middle two elements.\n  return (l[middle] + l[middle - 1]) / 2.0",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 0) {\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  } else {\n    return l[n / 2];\n  }",
    "  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[(l.len() / 2) - 1] + l[l.len() / 2]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if l.len == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if l.len == 1 {\n    return l.data[0]\n  }\n  if l.len == 2 {\n    return (l.data[0] + l.data[1]) / 2.0\n  }\n  return (l.data[l.len/2] + l.data[l.len/2 - 1]) / 2.0",
    "    l.sort_by(|x: f64, y: f64| -> x < y);\n    if (l.len() % 2 == 0) {\n        return (l.get(l.len() / 2 - 1) + l.get(l.len() / 2)) / 2.0;\n    } else {\n        return l.get(l.len() / 2);\n    }",
    "    let mut m = 0.0;\n    let mut n = 0;\n    for v in l {\n        if v > m {\n            m = v;\n            n = 1;\n        } else if v == m {\n            n += 1;\n        }\n    }\n    if n == 0 {\n        return m;\n    }\n    return (m + n / 2.0) / n;",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  if l.len() % 2 == 0 {\n    return (l.get(l.len() / 2 - 1) + l.get(l.len() / 2)) / 2.0\n  } else {\n    return l.get(l.len() / 2)\n  }",
    "  let l2 = l.map(|x| x.abs());\n  let l3 = l2.sort();\n  let l4 = l3.take(l3.length / 2);\n  return l4.head();",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l.sort_by(|x: f64, y: f64| -> x < y);\n  if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort()\n  if l.len() == 0 {\n    return 0.0\n  } else if l.len() == 1 {\n    return l[0]\n  } else if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0\n  } else {\n    return l[l.len() / 2]\n  }",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  return l[l.len()/2];",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  if len(l) == 1 {\n    return l[0]\n  }\n\n  l.sort()\n\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort();\n  if (l.len() % 2) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l.sort()\n  if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0\n  } else {\n    return l[l.len() / 2]\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  if len(l) == 2 {\n    return (l[0] + l[1]) / 2.0\n  }\n  if len(l) == 3 {\n    return (l[0] + l[1] + l[2]) / 3.0\n  }\n  if len(l) == 4 {\n    return (l[0] + l[1] + l[2] + l[3]) / 4.0\n  }\n  if len(l) == 5 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n  }\n  if len(l) == 6 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n  }\n  if len(l) == 7 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n  }\n  if len(l) == 8 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n  }\n  if len(l) == 9 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n  }\n  if len(l) == 10 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n  }\n  if len(l) == 11 {\n    return (l[0] +",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l = l.map(|x| x.abs());\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 1) {\n    return l[n/2];\n  } else {\n    return (l[n/2] + l[n/2 - 1]) / 2.0;\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  l.sort();\n  if (l.len() % 2 == 1) {\n    return l.get(l.len() / 2);\n  } else {\n    return (l.get(l.len() / 2) + l.get(l.len() / 2 - 1)) / 2.0;\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  l.sort()\n\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l.sort()\n  if l.len() == 0 {\n    return 0.0\n  } else if l.len() == 1 {\n    return l[0]\n  } else if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0\n  } else {\n    return l[l.len() / 2]\n  }",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  if (l.len() % 2) {\n    return l[l.len() / 2];\n  } else {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  }",
    "  if len(l) == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  if len(l) == 2 {\n    return (l[0] + l[1]) / 2.0\n  }\n  if len(l) == 3 {\n    return (l[0] + l[1] + l[2]) / 3.0\n  }\n  if len(l) == 4 {\n    return (l[0] + l[1] + l[2] + l[3]) / 4.0\n  }\n  if len(l) == 5 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4]) / 5.0\n  }\n  if len(l) == 6 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6.0\n  }\n  if len(l) == 7 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7.0\n  }\n  if len(l) == 8 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8.0\n  }\n  if len(l) == 9 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9.0\n  }\n  if len(l) == 10 {\n    return (l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10.0\n  }\n  if len(l) == 11 {\n    return (l[0]",
    "  l.sort_by(|x, y| x - y);\n  if l.len() % 2 == 0 {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l.sort_by(|x: f64, y: f64| {\n    if x < y {\n      return -1\n    } else if x > y {\n      return 1\n    } else {\n      return 0\n    }\n  });\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  l = l.map(|v| v.to_f64());\n  l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[(l.len() / 2) - 1] + l[l.len() / 2]) / 2.0;\n  } else {\n    return l[(l.len() / 2)];\n  }",
    "  l.sort_by(|x, y| x - y);\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 1) {\n    return l.get(n / 2);\n  } else {\n    return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  l = l.sort();\n  if (l.len() == 0) {\n    return 0.0;\n  }\n  if (l.len() == 1) {\n    return l[0];\n  }\n  if (l.len() == 2) {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "  l = l.map(|v| v.to_f64());\n  l = l.sort();\n  let n = l.len();\n  if (n == 0) {\n    return 0.0;\n  } else if (n % 2 == 1) {\n    return l[n / 2];\n  } else {\n    return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n  }",
    "  l.sort();\n  if l.len() == 0 {\n    return 0.0;\n  }\n  if l.len() == 1 {\n    return l[0];\n  }\n  if l.len() == 2 {\n    return (l[0] + l[1]) / 2.0;\n  }\n  return l[l.len() / 2];",
    "    let n = l.len();\n    if n == 0 {\n        return 0.0;\n    }\n    let m = n / 2;\n    let l1 = l.slice(0, m);\n    let l2 = l.slice(m, n);\n    let m1 = median(l1);\n    let m2 = median(l2);\n    if (m1 < m2) {\n        return m1;\n    } else {\n        return m2;\n    }",
    "  l = l.map(|v| v.to_f64());\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[(l.len() / 2) - 1] + l[l.len() / 2]) / 2.0;\n  } else {\n    return l[(l.len() / 2)];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  if len(l) == 0 {\n    return 0.0\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l = l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  if (l.len() % 2 == 0) {\n    return (l[l.len() / 2] + l[l.len() / 2 - 1]) / 2.0;\n  } else {\n    return l[l.len() / 2];\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  } else {\n    return l[len(l) / 2]\n  }",
    "  if len(l) == 0 {\n    panic(\"median called on empty vector\")\n  }\n\n  l.sort()\n  if len(l) % 2 == 1 {\n    return l[(len(l) - 1) / 2]\n  } else {\n    return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n  }",
    "  if len(l) == 0 {\n    panic(\"median() called on empty vector\")\n  }\n  if len(l) == 1 {\n    return l[0]\n  }\n  l.sort()\n  if len(l) % 2 == 0 {\n    return (l[len(l) / 2 - 1] + l[len(l) / 2]) / 2.0\n  }\n  return l[len(l) / 2]",
    "  l = l.map(|x| -x);\n  l = l.sort();\n  l = l.take(l.length / 2);\n  return l.reduce((a, b) => a + b) / l.length;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}