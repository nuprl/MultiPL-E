{
  "name": "HumanEval_74_total_match",
  "language": "rs",
  "prompt": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len < lst2_len) {\n    return lst1;\n  }\n  if (lst1_len > lst2_len) {\n    return lst2;\n  }\n  let lst1_count = 0;\n  let lst2_count = 0;\n  for (let i = 0; i < lst1_len; i++) {\n    if (lst1[i] < lst2[i]) {\n      lst1_count += 1;\n    } else if (lst1[i] > lst2[i]) {\n      lst2_count += 1;\n    }\n  }\n  if (lst1_count < lst2_count) {\n    return lst1;\n  }\n  if (lst1_count > lst2_count) {\n    return lst2;\n  }\n  return lst1;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgsvhhas1.rs:26:8\n   |\n26 |   for (let i = 0; i < lst1_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgsvhhas1.rs:26:12\n   |\n26 |   for (let i = 0; i < lst1_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgsvhhas1.rs:26:14\n   |\n26 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgsvhhas1.rs:26:13\n   |\n26 |   for (let i = 0; i < lst1_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgsvhhas1.rs:26:14\n   |\n26 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgsvhhas1.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgsvhhas1.rs:21:6\n   |\n21 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\nhelp: remove these parentheses\n   |\n21 -   if (lst1_len > lst2_len) {\n21 +   if lst1_len > lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4yx9aifh.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp4yx9aifh.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4yx9aifh.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmptqbwu738.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count++;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count++;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplumc76we.rs:27:10\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplumc76we.rs:27:14\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplumc76we.rs:27:16\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplumc76we.rs:27:15\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplumc76we.rs:27:16\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplumc76we.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplumc76we.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total = 0;\n  let total_lst1 = 0;\n  let total_lst2 = 0;\n  for i in lst1 {\n    total += i.len();\n    total_lst1 += i.len();\n  }\n  for i in lst2 {\n    total += i.len();\n    total_lst2 += i.len();\n  }\n  if total_lst1 == total_lst2 {\n    return lst1\n  } else if total_lst1 < total_lst2 {\n    return lst2\n  } else {\n    return lst1\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: variable `total` is assigned to, but never used\n  --> /tmp/tmp45ao3kve.rs:16:7\n   |\n16 |   let total = 0;\n   |       ^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_total` instead\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmp45ao3kve.rs:20:5\n   |\n16 |   let total = 0;\n   |       -----\n   |       |\n   |       first assignment to `total`\n   |       help: consider making this binding mutable: `mut total`\n...\n20 |     total += i.len();\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_lst1`\n  --> /tmp/tmp45ao3kve.rs:21:5\n   |\n17 |   let total_lst1 = 0;\n   |       ----------\n   |       |\n   |       first assignment to `total_lst1`\n   |       help: consider making this binding mutable: `mut total_lst1`\n...\n21 |     total_lst1 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmp45ao3kve.rs:24:5\n   |\n16 |   let total = 0;\n   |       -----\n   |       |\n   |       first assignment to `total`\n   |       help: consider making this binding mutable: `mut total`\n...\n24 |     total += i.len();\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_lst2`\n  --> /tmp/tmp45ao3kve.rs:25:5\n   |\n18 |   let total_lst2 = 0;\n   |       ----------\n   |       |\n   |       first assignment to `total_lst2`\n   |       help: consider making this binding mutable: `mut total_lst2`\n...\n25 |     total_lst2 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp45ao3kve.rs:28:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n19  |   for i in lst1 {\n    |    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_count = 0;\n  let total_count_lst2 = 0;\n  for i in lst1 {\n    total_count += i.len();\n  }\n  for i in lst2 {\n    total_count_lst2 += i.len();\n  }\n  if total_count == total_count_lst2 {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpxb_1239o.rs:19:5\n   |\n16 |   let total_count = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_count`\n   |       help: consider making this binding mutable: `mut total_count`\n...\n19 |     total_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst2`\n  --> /tmp/tmpxb_1239o.rs:22:5\n   |\n17 |   let total_count_lst2 = 0;\n   |       ----------------\n   |       |\n   |       first assignment to `total_count_lst2`\n   |       help: consider making this binding mutable: `mut total_count_lst2`\n...\n22 |     total_count_lst2 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpxb_1239o.rs:25:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n25  |     return lst1\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |   for i in &lst1 {\n    |            +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpxb_1239o.rs:27:12\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   for i in lst2 {\n   |            ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n27 |     return lst2\n   |            ^^^^ value used here after move\n   |\nhelp: consider iterating over a slice of t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let result = Vec::new();\n    for i in lst1 {\n        count = count + i.len();\n    }\n    for i in lst2 {\n        count = count - i.len();\n        if count < 0 {\n            result = result.concat(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpicsp6lf9.rs:24:29\n    |\n24  |             result = result.concat(i);\n    |                             ^^^^^^ - supplied 1 argument\n    |                             |\n    |                             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpicsp6lf9.rs:24:29\n   |\n24 |             result = result.concat(i);\n   |                             ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0271.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if lst1_len == lst2_len {\n        return lst1;\n    } else if lst1_len < lst2_len {\n        let lst1_total = 0;\n        for i in lst1 {\n            lst1_total += i.len();\n        }\n        for i in lst2 {\n            lst1_total -= i.len();\n        }\n        if lst1_total < 0 {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    } else {\n        let lst2_total = 0;\n        for i in lst2 {\n            lst2_total += i.len();\n        }\n        for i in lst1 {\n            lst2_total -= i.len();\n        }\n        if lst2_total < 0 {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `lst1_total`\n  --> /tmp/tmppg7jo0pk.rs:23:13\n   |\n21 |         let lst1_total = 0;\n   |             ----------\n   |             |\n   |             first assignment to `lst1_total`\n   |             help: consider making this binding mutable: `mut lst1_total`\n22 |         for i in lst1 {\n23 |             lst1_total += i.len();\n   |             ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `lst1_total`\n  --> /tmp/tmppg7jo0pk.rs:26:13\n   |\n21 |         let lst1_total = 0;\n   |             ----------\n   |             |\n   |             first assignment to `lst1_total`\n   |             help: consider making this binding mutable: `mut lst1_total`\n...\n26 |             lst1_total -= i.len();\n   |             ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmppg7jo0pk.rs:29:20\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n22  |         for i in lst1 {\n    |                  ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n29  |             return lst1;\n    |                    ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n22  |         for i in &lst1 {\n    |                  +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmppg7jo0pk.rs:31:20\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n25 |         for i in lst2 {\n   |                  ---- `lst2` moved due to this implicit call to `.into_iter(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for i in lst1 {\n        lst1_count += i.len();\n    }\n    for i in lst2 {\n        lst2_count += i.len();\n    }\n    if lst1_count < lst2_count {\n        return lst1;\n    }\n    if lst2_count < lst1_count {\n        return lst2;\n    }\n    for i in lst1 {\n        if i.len() < lst2_count {\n            total_count += i.len();\n        }\n    }\n    for i in lst2 {\n        if i.len() < lst1_count {\n            total_count += i.len();\n        }\n    }\n    if total_count < lst1_count {\n        return lst1;\n    }\n    if total_count < lst2_count {\n        return lst2;\n    }\n    return lst1;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `lst1_count`\n  --> /tmp/tmp8_d5vps6.rs:20:9\n   |\n17 |     let lst1_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `lst1_count`\n   |         help: consider making this binding mutable: `mut lst1_count`\n...\n20 |         lst1_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `lst2_count`\n  --> /tmp/tmp8_d5vps6.rs:23:9\n   |\n18 |     let lst2_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `lst2_count`\n   |         help: consider making this binding mutable: `mut lst2_count`\n...\n23 |         lst2_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp8_d5vps6.rs:26:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n19  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n26  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n19  |     for i in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp8_d5vps6.rs:29:16\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n22 |     for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n29 |         return lst2;\n   |                ^^^^ value used here after move\n   |\nhelp: consider iterating ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_set = Set::from(lst1);\n    let lst2_set = Set::from(lst2);\n    let lst1_set_len = lst1_set.length();\n    let lst2_set_len = lst2_set.length();\n    if (lst1_set_len > lst2_set_len) {\n      return lst1;\n    } else if (lst1_set_len < lst2_set_len) {\n      return lst2;\n    } else {\n      let lst1_set_set = Set::from(lst1_set);\n      let lst2_set_set = Set::from(lst2_set);\n      let lst1_set_set_len = lst1_set_set.length();\n      let lst2_set_set_len = lst2_set_set.length();\n      if (lst1_set_set_len > lst2_set_set_len) {\n        return lst1;\n      } else if (lst1_set_set_len < lst2_set_set_len) {\n        return lst2;\n      } else {\n        return lst1;\n      }\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp7ynmrh27.rs:23:20\n   |\n23 |     let lst1_set = Set::from(lst1);\n   |                    ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp7ynmrh27.rs:24:20\n   |\n24 |     let lst2_set = Set::from(lst2);\n   |                    ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp7ynmrh27.rs:32:26\n   |\n32 |       let lst1_set_set = Set::from(lst1_set);\n   |                          ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmp7ynmrh27.rs:33:26\n   |\n33 |       let lst2_set_set = Set::from(lst2_set);\n   |                          ^^^ use of undeclared type `Set`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7ynmrh27.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7ynmrh27.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7ynmrh27.rs:27:8\n   |\n27 |     if (lst1_set_len > lst2_set_len) {\n   |        ^                           ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (lst1_set_len > lst2_set_len) {\n27 +     if lst1_set_len > lst2_set_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp7ynmrh27.rs:29:15\n   |\n29 |     } else if (lst1_set_len < lst2_set_len) {\n   |               ^                           ^\n   |\nhelp: remove these parentheses\n   |\n29 -     } else if (lst1_set_len < lst2_set_len) {\n29 +    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_chars = lst1.map(String::chars).reduce(0, (a, b) => a + b);\n    let lst2_chars = lst2.map(String::chars).reduce(0, (a, b) => a + b);\n    if (lst1_chars > lst2_chars) {\n      return lst1;\n    } else if (lst1_chars < lst2_chars) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpovnx7xd4.rs:23:63\n   |\n23 |     let lst1_chars = lst1.map(String::chars).reduce(0, (a, b) => a + b);\n   |                                                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_count = 0;\n  for i in lst1 {\n    total_count += i.len();\n  }\n  for i in lst2 {\n    total_count -= i.len();\n  }\n  if total_count < 0 {\n    return lst1\n  }\n  return lst2\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp9zpy8j9t.rs:18:5\n   |\n16 |   let total_count = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_count`\n   |       help: consider making this binding mutable: `mut total_count`\n17 |   for i in lst1 {\n18 |     total_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp9zpy8j9t.rs:21:5\n   |\n16 |   let total_count = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_count`\n   |       help: consider making this binding mutable: `mut total_count`\n...\n21 |     total_count -= i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp9zpy8j9t.rs:24:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n16  |   let total_count = 0;\n17  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |     return lst1\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n17  |   for i in &lst1 {\n    |            +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp9zpy8j9t.rs:26:10\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n20 |   for i in lst2 {\n   |            ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n26 |   return lst2\n   |          ^^^^ value used here after move\n   |\nhelp: consider iterating over a slice",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  }\n  let lst1_total = 0;\n  let lst2_total = 0;\n  for (let i = 0; i < lst1_len; i++) {\n    lst1_total += lst1[i].length();\n  }\n  for (let i = 0; i < lst2_len; i++) {\n    lst2_total += lst2[i].length();\n  }\n  let lst1_less = lst1_total < lst2_total;\n  let lst2_less = lst2_total < lst1_total;\n  if (lst1_less && lst2_less) {\n    return lst1;\n  } else if (lst1_less) {\n    return lst2;\n  } else if (lst2_less) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpcvv0epwk.rs:23:8\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpcvv0epwk.rs:23:12\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpcvv0epwk.rs:23:14\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpcvv0epwk.rs:23:13\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpcvv0epwk.rs:23:14\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpcvv0epwk.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpcvv0epwk.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpcvv0epwk.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = false;\n    for i in lst1 {\n        total_chars += i.len();\n    }\n    for i in lst2 {\n        total_chars -= i.len();\n        if total_chars < 0 {\n            total_match = true;\n            break;\n        }\n    }\n    if total_match {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpzzv7c0qd.rs:19:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n19 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpzzv7c0qd.rs:22:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n22 |         total_chars -= i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_match`\n  --> /tmp/tmpzzv7c0qd.rs:24:13\n   |\n17 |     let total_match = false;\n   |         -----------\n   |         |\n   |         first assignment to `total_match`\n   |         help: consider making this binding mutable: `mut total_match`\n...\n24 |             total_match = true;\n   |             ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpzzv7c0qd.rs:29:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n29  |         return lst1\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpzzv7c0qd.rs:31:16\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = vec![];\n    for i in lst1 {\n        total_chars += i.len();\n    }\n    for i in lst2 {\n        if total_chars < i.len() {\n            total_match = vec![i];\n        }\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp14hscapn.rs:19:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n19 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_match`\n  --> /tmp/tmp14hscapn.rs:23:13\n   |\n17 |     let total_match = vec![];\n   |         -----------\n   |         |\n   |         first assignment to `total_match`\n   |         help: consider making this binding mutable: `mut total_match`\n...\n23 |             total_match = vec![i];\n   |             ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let result = Vec::new();\n    for i in lst1 {\n        if i.len() < lst2[0].len() {\n            count += 1;\n        }\n    }\n    for i in lst2 {\n        if i.len() < lst1[0].len() {\n            count += 1;\n        }\n    }\n    if count == 0 {\n        result = lst1;\n    } else {\n        result = lst2;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: value assigned to `result` is never read\n  --> /tmp/tmpj1z5p9x3.rs:17:9\n   |\n17 |     let result = Vec::new();\n   |         ^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpj1z5p9x3.rs:20:13\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n20 |             count += 1;\n   |             ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: borrow of moved value: `lst1`\n   --> /tmp/tmpj1z5p9x3.rs:24:22\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |         if i.len() < lst1[0].len() {\n    |                      ^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n    |              +\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpj1z5p9x3.rs:25:13\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n25 |             count += 1;\n   |             ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `result`\n  --> /tmp/tmpj1z5p9x3.rs:29:9\n   |\n17 |     let result = Vec::new();\n   |         ------\n   |         |\n   |         first assignment to `result`\n   |         help: consider making this binding mutable: `mut result`\n...\n29 |         resu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return total_match(lst1, lst2);\n    } else {\n        let lst2_copy = lst2.copy();\n        let lst2_copy_len = lst2_copy.length();\n        let lst2_copy_index = 0;\n        let lst1_index = 0;\n        let result = Vec::new();\n        while (lst1_index < lst1_len && lst2_copy_index < lst2_copy_len) {\n            if (lst1[lst1_index] == lst2_copy[lst2_copy_index]) {\n                lst1_index += 1;\n                lst2_copy_index += 1;\n            } else if (lst1[lst1_index] < lst2_copy[lst2_copy_index]) {\n                lst1_index += 1;\n            } else {\n                lst2_copy_index += 1;\n            }\n        }\n        for (let i = lst1_index; i < lst1_len; i += 1) {\n            result.push(lst1[i]);\n        }\n        for (let i = lst2_copy_index; i < lst2_copy_len; i += 1) {\n            result.push(lst2_copy[i]);\n        }\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplr1f99y3.rs:38:14\n   |\n38 |         for (let i = lst1_index; i < lst1_len; i += 1) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplr1f99y3.rs:38:18\n   |\n38 |         for (let i = lst1_index; i < lst1_len; i += 1) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplr1f99y3.rs:38:20\n   |\n38 |         for (let i = lst1_index; i < lst1_len; i += 1) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplr1f99y3.rs:38:19\n   |\n38 |         for (let i = lst1_index; i < lst1_len; i += 1) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplr1f99y3.rs:38:20\n   |\n38 |         for (let i = lst1_index; i < lst1_len; i += 1) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplr1f99y3.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplr1f99y3.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmplr1f99y3.rs:28:15\n   |\n28 |         while (lst1_index < lst1_len && lst2_copy_index < lst2_copy_len) {\n   |               ^                                                        ^\n   |\nhelp: remove these parentheses\n   |\n28 -         while (lst1_index < lst1_",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.length();\n        let lst2_len = lst2.length();\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count > lst2_count) {\n            return lst1;\n        } else if (lst1_count < lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpnt3whc8n.rs:27:14\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpnt3whc8n.rs:27:18\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpnt3whc8n.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpnt3whc8n.rs:27:19\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpnt3whc8n.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnt3whc8n.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpnt3whc8n.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpnt3whc8n.rs:16:25\n   |\n16 |     let lst1_len = lst1.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpnt3whc8n.rs:17:25\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::chars);\n        let lst2_chars = lst2.map(String::chars);\n        let chars_count = lst1_chars.reduce((a, b) => a + b);\n        let chars_count_lst2 = lst2_chars.reduce((a, b) => a + b);\n        if (chars_count == chars_count_lst2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpzpi1xo2d.rs:25:52\n   |\n25 |         let chars_count = lst1_chars.reduce((a, b) => a + b);\n   |                                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  if (lst1.len() == 0) {\n    return lst2\n  }\n  if (lst2.len() == 0) {\n    return lst1\n  }\n  let total_chars = 0\n  for i in 0..lst1.len() {\n    total_chars += lst1[i].len()\n  }\n  for i in 0..lst2.len() {\n    if (total_chars < lst2[i].len()) {\n      return lst1\n    }\n  }\n  return lst2\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvzimrw2v.rs:22:22\n   |\n22 |   let total_chars = 0\n   |                      ^ help: add `;` here\n23 |   for i in 0..lst1.len() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvzimrw2v.rs:16:6\n   |\n16 |   if (lst1.len() == 0) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   if (lst1.len() == 0) {\n16 +   if lst1.len() == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvzimrw2v.rs:19:6\n   |\n19 |   if (lst2.len() == 0) {\n   |      ^               ^\n   |\nhelp: remove these parentheses\n   |\n19 -   if (lst2.len() == 0) {\n19 +   if lst2.len() == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvzimrw2v.rs:27:8\n   |\n27 |     if (total_chars < lst2[i].len()) {\n   |        ^                           ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (total_chars < lst2[i].len()) {\n27 +     if total_chars < lst2[i].len() {\n   | \n\nerror: aborting due to previous error; 3 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    let total_count_lst2 = 0;\n    for i in lst1 {\n        total_count += i.len();\n    }\n    for i in lst2 {\n        total_count_lst2 += i.len();\n    }\n    if total_count == total_count_lst2 {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp457cef_h.rs:19:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n19 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst2`\n  --> /tmp/tmp457cef_h.rs:22:9\n   |\n17 |     let total_count_lst2 = 0;\n   |         ----------------\n   |         |\n   |         first assignment to `total_count_lst2`\n   |         help: consider making this binding mutable: `mut total_count_lst2`\n...\n22 |         total_count_lst2 += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp457cef_h.rs:25:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n25  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp457cef_h.rs:27:16\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |     for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^ value us",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_chars_lst1 = 0;\n    let total_chars_lst2 = 0;\n    for i in lst1 {\n        total_chars += i.len();\n        total_chars_lst1 += i.len();\n    }\n    for i in lst2 {\n        total_chars += i.len();\n        total_chars_lst2 += i.len();\n    }\n    if total_chars_lst1 == total_chars_lst2 {\n        return lst1;\n    }\n    if total_chars_lst1 < total_chars_lst2 {\n        return lst2;\n    }\n    return lst1;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: variable `total_chars` is assigned to, but never used\n  --> /tmp/tmpldq1wxkm.rs:16:9\n   |\n16 |     let total_chars = 0;\n   |         ^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_total_chars` instead\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpldq1wxkm.rs:20:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n20 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars_lst1`\n  --> /tmp/tmpldq1wxkm.rs:21:9\n   |\n17 |     let total_chars_lst1 = 0;\n   |         ----------------\n   |         |\n   |         first assignment to `total_chars_lst1`\n   |         help: consider making this binding mutable: `mut total_chars_lst1`\n...\n21 |         total_chars_lst1 += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpldq1wxkm.rs:24:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n24 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars_lst2`\n  --> /tmp/tmpldq1wxkm.rs:25:9\n   |\n18 |     let total_chars_lst2 = 0;\n   |         ----------------\n   |         |\n   |         first assignment to `total_chars_lst2`\n   |         help: consider making this binding mutable: `mut total_chars_lst2`\n...\n25 |         total_chars_lst2 += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    for i in lst1 {\n        total_chars += i.len();\n    }\n    for i in lst2 {\n        total_chars -= i.len();\n    }\n    if total_chars < 0 {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpw_q_kcdi.rs:18:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n17 |     for i in lst1 {\n18 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpw_q_kcdi.rs:21:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n21 |         total_chars -= i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpw_q_kcdi.rs:24:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n16  |     let total_chars = 0;\n17  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n17  |     for i in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpw_q_kcdi.rs:26:16\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n20 |     for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n26 |         return lst2;\n   |                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = Vec::new();\n    for i in lst1 {\n        total_chars += i.len();\n    }\n    for i in lst2 {\n        if total_chars < i.len() {\n            total_match.push(i);\n        }\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmptp_vsv1o.rs:19:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n19 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `total_match` as mutable, as it is not declared as mutable\n  --> /tmp/tmptp_vsv1o.rs:23:13\n   |\n17 |     let total_match = Vec::new();\n   |         ----------- help: consider changing this to be mutable: `mut total_match`\n...\n23 |             total_match.push(i);\n   |             ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = Vec::new();\n    for i in lst1 {\n        total_chars += i.length();\n    }\n    for i in lst2 {\n        if total_chars < i.length() {\n            total_match.push(i);\n        }\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvwv15w76.rs:19:26\n   |\n19 |         total_chars += i.length();\n   |                          ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvwv15w76.rs:22:28\n   |\n22 |         if total_chars < i.length() {\n   |                            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count++;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count++;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpzjd1bh95.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpzjd1bh95.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpzjd1bh95.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzjd1bh95.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpzjd1bh95.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzjd1bh95.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzjd1bh95.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpzjd1bh95.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpzjd1bh95.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_len_minus_lst2_len = lst1_len - lst2_len;\n        let lst2_len_minus_lst1_len = lst2_len - lst1_len;\n        let lst1_minus_lst2 = lst1.filter(x => x.len() < lst2_len_minus_lst1_len);\n        let lst2_minus_lst1 = lst2.filter(x => x.len() > lst1_len_minus_lst2_len);\n        return lst1_minus_lst2.concat(lst2_minus_lst1);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpqaftwt0z.rs:27:45\n   |\n27 |         let lst1_minus_lst2 = lst1.filter(x => x.len() < lst2_len_minus_lst1_len);\n   |                                             ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmptqbwu738.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_match = Vec::new();\n  for i in lst1 {\n    total_chars += i.len();\n  }\n  for i in lst2 {\n    if total_chars < i.len() {\n      total_match.push(i);\n    }\n  }\n  return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpnakb4qik.rs:19:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n19 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `total_match` as mutable, as it is not declared as mutable\n  --> /tmp/tmpnakb4qik.rs:23:7\n   |\n17 |   let total_match = Vec::new();\n   |       ----------- help: consider changing this to be mutable: `mut total_match`\n...\n23 |       total_match.push(i);\n   |       ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_count = 0;\n        let lst2_count = 0;\n        let lst1_index = 0;\n        let lst2_index = 0;\n        let result = Vec::new();\n        while (lst1_index < lst1_len && lst2_index < lst2_len) {\n            if (lst1[lst1_index] < lst2[lst2_index]) {\n                lst1_count += 1;\n                lst1_index += 1;\n            } else if (lst1[lst1_index] > lst2[lst2_index]) {\n                lst2_count += 1;\n                lst2_index += 1;\n            } else {\n                lst1_index += 1;\n                lst2_index += 1;\n            }\n        }\n        while (lst1_index < lst1_len) {\n            lst1_count += 1;\n            lst1_index += 1;\n        }\n        while (lst2_index < lst2_len) {\n            lst2_count += 1;\n            lst2_index += 1;\n        }\n        if (lst1_count < lst2_count) {\n            result = lst1;\n        } else if (lst1_count > lst2_count) {\n            result = lst2;\n        } else {\n            result = lst1;\n        }\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxt3p7qf4.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxt3p7qf4.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpxt3p7qf4.rs:30:15\n   |\n30 |         while (lst1_index < lst1_len && lst2_index < lst2_len) {\n   |               ^                                              ^\n   |\nhelp: remove these parentheses\n   |\n30 -         while (lst1_index < lst1_len && lst2_index < lst2_len) {\n30 +         while lst1_index < lst1_len && lst2_index < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxt3p7qf4.rs:31:16\n   |\n31 |             if (lst1[lst1_index] < lst2[lst2_index]) {\n   |                ^                                   ^\n   |\nhelp: remove these parentheses\n   |\n31 -             if (lst1[lst1_index] < lst2[lst2_index]) {\n31 +             if lst1[lst1_index] < lst2[lst2_index] {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxt3p7qf4.rs:34:23\n   |\n34 |             } else if (lst1[lst1_index] > lst2[lst2_index]) {\n   |                       ^                                   ^\n   |\nhelp: remove these parentheses\n   |\n34 -             } else if (lst1[lst1_index] > lst2[lst2_index]) {\n34 +             } else if lst1[lst1_index] > lst2[lst2_index] {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpxt3p7qf4.rs:42:15\n   |\n42 |         while (lst1_index < lst1_len) {\n   |               ^                     ^\n   |\nhelp: remove these paren",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst2;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    let lst1_chars = lst1.map(String::chars);\n    let lst2_chars = lst2.map(String::chars);\n    let lst1_chars_len = lst1_chars.len();\n    let lst2_chars_len = lst2_chars.len();\n    if (lst1_chars_len > lst2_chars_len) {\n      return lst2;\n    } else if (lst1_chars_len < lst2_chars_len) {\n      return lst1;\n    } else {\n      let lst1_chars_chars = lst1_chars.map(String::chars);\n      let lst2_chars_chars = lst2_chars.map(String::chars);\n      let lst1_chars_chars_len = lst1_chars_chars.len();\n      let lst2_chars_chars_len = lst2_chars_chars.len();\n      if (lst1_chars_chars_len > lst2_chars_chars_len) {\n        return lst2;\n      } else if (lst1_chars_chars_len < lst2_chars_chars_len) {\n        return lst1;\n      } else {\n        return lst1;\n      }\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdwj3vd_1.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdwj3vd_1.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdwj3vd_1.rs:27:8\n   |\n27 |     if (lst1_chars_len > lst2_chars_len) {\n   |        ^                               ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (lst1_chars_len > lst2_chars_len) {\n27 +     if lst1_chars_len > lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdwj3vd_1.rs:29:15\n   |\n29 |     } else if (lst1_chars_len < lst2_chars_len) {\n   |               ^                               ^\n   |\nhelp: remove these parentheses\n   |\n29 -     } else if (lst1_chars_len < lst2_chars_len) {\n29 +     } else if lst1_chars_len < lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdwj3vd_1.rs:36:10\n   |\n36 |       if (lst1_chars_chars_len > lst2_chars_chars_len) {\n   |          ^                                           ^\n   |\nhelp: remove these parentheses\n   |\n36 -       if (lst1_chars_chars_len > lst2_chars_chars_len) {\n36 +       if lst1_chars_chars_len > lst2_chars_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpdwj3vd_1.rs:38:17\n   |\n38 |       } else if (lst1_chars_chars_len < lst2_chars_chars_len) {\n   |                 ^                                           ^\n   |\nhelp: remove these parentheses\n   |\n38 -       } else if (lst1_chars_chars_len < lst2_chars_chars_len) {\n38 +       } else if l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for i in lst1 {\n        lst1_count += i.len();\n    }\n    for i in lst2 {\n        lst2_count += i.len();\n    }\n    if (lst1_count > lst2_count) {\n        return lst1;\n    } else if (lst2_count > lst1_count) {\n        return lst2;\n    } else {\n        for i in lst1 {\n            if (i.len() < lst2_count) {\n                total_count += i.len();\n            }\n        }\n        return lst1.filter(i => i.len() < total_count);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp0j35l0v0.rs:35:30\n   |\n35 |         return lst1.filter(i => i.len() < total_count);\n   |                              ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return total_match(lst1, lst2);\n  } else {\n    return total_match(lst2, lst1);\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo228gw3h.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo228gw3h.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpo228gw3h.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpo228gw3h.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len > lst2_len) {\n    return lst1\n  } else if (lst1_len < lst2_len) {\n    return lst2\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1\n    } else if (lst1_count > lst2_count) {\n      return lst2\n    } else {\n      return lst1\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp99tbmohr.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp99tbmohr.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp99tbmohr.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp99tbmohr.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp99tbmohr.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp99tbmohr.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp99tbmohr.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp99tbmohr.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp99tbmohr.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i].len() < lst2[i].len()) {\n                lst1_count += 1;\n            } else if (lst1[i].len() > lst2[i].len()) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp9s36n7z9.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp9s36n7z9.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp9s36n7z9.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp9s36n7z9.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp9s36n7z9.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9s36n7z9.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp9s36n7z9.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len < lst2_len) {\n    return lst1;\n  } else if (lst1_len > lst2_len) {\n    return lst2;\n  } else {\n    let lst1_set = Set(lst1);\n    let lst2_set = Set(lst2);\n    let lst1_set_len = lst1_set.len();\n    let lst2_set_len = lst2_set.len();\n    if (lst1_set_len < lst2_set_len) {\n      return lst1;\n    } else if (lst1_set_len > lst2_set_len) {\n      return lst2;\n    } else {\n      let lst1_set_set = Set(lst1_set);\n      let lst2_set_set = Set(lst2_set);\n      let lst1_set_set_len = lst1_set_set.len();\n      let lst2_set_set_len = lst2_set_set.len();\n      if (lst1_set_set_len < lst2_set_set_len) {\n        return lst1;\n      } else if (lst1_set_set_len > lst2_set_set_len) {\n        return lst2;\n      } else {\n        return lst1;\n      }\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function, tuple struct or tuple variant `Set` in this scope\n  --> /tmp/tmp733jn57z.rs:23:20\n   |\n23 |     let lst1_set = Set(lst1);\n   |                    ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Set` in this scope\n  --> /tmp/tmp733jn57z.rs:24:20\n   |\n24 |     let lst2_set = Set(lst2);\n   |                    ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Set` in this scope\n  --> /tmp/tmp733jn57z.rs:32:26\n   |\n32 |       let lst1_set_set = Set(lst1_set);\n   |                          ^^^ not found in this scope\n\nerror[E0425]: cannot find function, tuple struct or tuple variant `Set` in this scope\n  --> /tmp/tmp733jn57z.rs:33:26\n   |\n33 |       let lst2_set_set = Set(lst2_set);\n   |                          ^^^ not found in this scope\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp733jn57z.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp733jn57z.rs:20:13\n   |\n20 |   } else if (lst1_len > lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len > lst2_len) {\n20 +   } else if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp733jn57z.rs:27:8\n   |\n27 |     if (lst1_set_len < lst2_set_len) {\n   |        ^                           ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (lst1_set_len < lst2_set_len) {\n27 +     if lst1_set_len < lst2_set_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp733jn57z.rs:29:15\n   |\n29 |     } else if (lst1_set_len > lst2_set_len) {\n   |               ^                           ^\n   |\nhelp: remove these parentheses\n   |\n29 -   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::chars);\n        let lst2_chars = lst2.map(String::chars);\n        let chars_count = lst1_chars.count(lst2_chars);\n        let chars_count_vec = Vec::new();\n        for (let i = 0; i < chars_count; i++) {\n            chars_count_vec.push(lst1_chars[i]);\n        }\n        return chars_count_vec;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmph6wuuz3q.rs:27:14\n   |\n27 |         for (let i = 0; i < chars_count; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmph6wuuz3q.rs:27:18\n   |\n27 |         for (let i = 0; i < chars_count; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmph6wuuz3q.rs:27:20\n   |\n27 |         for (let i = 0; i < chars_count; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmph6wuuz3q.rs:27:19\n   |\n27 |         for (let i = 0; i < chars_count; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmph6wuuz3q.rs:27:20\n   |\n27 |         for (let i = 0; i < chars_count; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph6wuuz3q.rs:18:8\n   |\n18 |     if (lst1_len < lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len < lst2_len) {\n18 +     if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph6wuuz3q.rs:20:15\n   |\n20 |     } else if (lst1_len > lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len > lst2_len) {\n20 +     } else if lst1_len > lst2_len {\n   | \n\nerror[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmph6wuuz3q.rs:23:31\n    |\n23  |           let lst1_chars = lst1.map(String::chars);\n    |                                 ^^^ `Vec<String>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<String>: Iterator`\n            which is required by `&mut Vec<String>: Iterator`",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let total = 0;\n    for i in lst1 {\n        count = 0;\n        for j in lst2 {\n            if i == j {\n                count += 1;\n            }\n        }\n        if count < total {\n            total = count;\n        }\n    }\n    if total == 0 {\n        return lst1;\n    }\n    let result = Vec::new();\n    for i in lst1 {\n        if i == lst2[total - 1] {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: value assigned to `count` is never read\n  --> /tmp/tmp5qlvkxwu.rs:16:9\n   |\n16 |     let count = 0;\n   |         ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5qlvkxwu.rs:19:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n19 |         count = 0;\n   |         ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst2`\n   --> /tmp/tmp5qlvkxwu.rs:20:18\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n20  |         for j in lst2 {\n    |                  ^^^^ `lst2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst2`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n20  |         for j in &lst2 {\n    |                  +\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5qlvkxwu.rs:22:17\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n22 |                 count += 1;\n   |                 ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmp5qlvkxwu.rs:26:13\n   |\n17 |     let total = 0;\n   |         -----\n   |         |\n   |         first assignment to `total`\n   |         help: consider making this binding mutable: `mut total`\n...\n26 |             total = count;\n   |             ^^^^^^^^^^^^^ cannot assign twice to immuta",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4yx9aifh.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp4yx9aifh.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4yx9aifh.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1\n    } else if (lst1_len < lst2_len) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpiq5sci0h.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::chars);\n        let lst2_chars = lst2.map(String::chars);\n        let chars_count = lst1_chars.count(lst2_chars);\n        let result = lst1.filter(x => x.chars().count(lst2_chars) == chars_count);\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpk4phwmov.rs:26:36\n   |\n26 |         let result = lst1.filter(x => x.chars().count(lst2_chars) == chars_count);\n   |                                    ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if lst1_len == lst2_len {\n        return lst1;\n    } else if lst1_len < lst2_len {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpd8y4ec1w.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let result = Vec::new();\n    for i in 0..lst1_len {\n        let lst1_char = lst1[i];\n        let lst2_char = lst2[i];\n        if (lst1_char < lst2_char) {\n            result.push(lst1_char);\n        } else {\n            break;\n        }\n    }\n    for i in 0..lst2_len {\n        let lst2_char = lst2[i];\n        if (lst2_char < lst1_char) {\n            result.push(lst2_char);\n        } else {\n            break;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0425]: cannot find value `lst1_char` in this scope\n  --> /tmp/tmprgw3jdkt.rs:33:25\n   |\n33 |         if (lst2_char < lst1_char) {\n   |                         ^^^^^^^^^ help: a local variable with a similar name exists: `lst2_char`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprgw3jdkt.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprgw3jdkt.rs:25:12\n   |\n25 |         if (lst1_char < lst2_char) {\n   |            ^                     ^\n   |\nhelp: remove these parentheses\n   |\n25 -         if (lst1_char < lst2_char) {\n25 +         if lst1_char < lst2_char {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprgw3jdkt.rs:33:12\n   |\n33 |         if (lst2_char < lst1_char) {\n   |            ^                     ^\n   |\nhelp: remove these parentheses\n   |\n33 -         if (lst2_char < lst1_char) {\n33 +         if lst2_char < lst1_char {\n   | \n\nerror: aborting due to previous error; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == 0) {\n    return lst2;\n  }\n  if (lst2_len == 0) {\n    return lst1;\n  }\n  for (let i = 0; i < lst1_len; i++) {\n    total_chars += lst1[i].len();\n  }\n  for (let i = 0; i < lst2_len; i++) {\n    total_chars -= lst2[i].len();\n  }\n  if (total_chars < 0) {\n    return lst1;\n  }\n  return lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpmbh8iyhl.rs:25:8\n   |\n25 |   for (let i = 0; i < lst1_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpmbh8iyhl.rs:25:12\n   |\n25 |   for (let i = 0; i < lst1_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpmbh8iyhl.rs:25:14\n   |\n25 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpmbh8iyhl.rs:25:13\n   |\n25 |   for (let i = 0; i < lst1_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpmbh8iyhl.rs:25:14\n   |\n25 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmbh8iyhl.rs:19:6\n   |\n19 |   if (lst1_len == 0) {\n   |      ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (lst1_len == 0) {\n19 +   if lst1_len == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmbh8iyhl.rs:22:6\n   |\n22 |   if (lst2_len == 0) {\n   |      ^             ^\n   |\nhelp: remove these parentheses\n   |\n22 -   if (lst2_len == 0) {\n22 +   if lst2_len == 0 {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count > lst2_count) {\n      return lst1;\n    } else {\n      return lst2;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp0iczry2u.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp0iczry2u.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp0iczry2u.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp0iczry2u.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp0iczry2u.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0iczry2u.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0iczry2u.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1\n    } else if (lst1_len > lst2_len) {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpok0oijt7.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len < lst2_len) {\n    return lst1;\n  } else if (lst1_len > lst2_len) {\n    return lst2;\n  } else {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    let lst1_idx = 0;\n    let lst2_idx = 0;\n    let lst1_match = 0;\n    let lst2_match = 0;\n    let result = Vec::new();\n    while (lst1_idx < lst1_len && lst2_idx < lst2_len) {\n      if (lst1[lst1_idx] < lst2[lst2_idx]) {\n        lst1_match += 1;\n        lst1_idx += 1;\n      } else if (lst1[lst1_idx] > lst2[lst2_idx]) {\n        lst2_match += 1;\n        lst2_idx += 1;\n      } else {\n        lst1_match += 1;\n        lst2_match += 1;\n        lst1_idx += 1;\n        lst2_idx += 1;\n      }\n    }\n    while (lst1_idx < lst1_len) {\n      lst1_match += 1;\n      lst1_idx += 1;\n    }\n    while (lst2_idx < lst2_len) {\n      lst2_match += 1;\n      lst2_idx += 1;\n    }\n    if (lst1_match < lst2_match) {\n      result = lst1;\n    } else if (lst1_match > lst2_match) {\n      result = lst2;\n    } else {\n      result = lst1;\n    }\n    return result;\n  \n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5iq8iby5.rs:74:3\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                                                     - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n61 | }\n   | - ...as it matches this but it has different indentation\n...\n74 | }\n   |   ^\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5iq8iby5.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5iq8iby5.rs:20:13\n   |\n20 |   } else if (lst1_len > lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len > lst2_len) {\n20 +   } else if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp5iq8iby5.rs:30:11\n   |\n30 |     while (lst1_idx < lst1_len && lst2_idx < lst2_len) {\n   |           ^                                          ^\n   |\nhelp: remove these parentheses\n   |\n30 -     while (lst1_idx < lst1_len && lst2_idx < lst2_len) {\n30 +     while lst1_idx < lst1_len && lst2_idx < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5iq8iby5.rs:31:10\n   |\n31 |       if (lst1[lst1_idx] < lst2[lst2_idx]) {\n   |          ^                               ^\n   |\nhelp: remove these parentheses\n   |\n31 -       if (lst1[lst1_idx] < lst2[lst2_idx]) {\n31 +       if lst1[lst1_idx] < lst2[lst2_idx] {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5iq8iby5.rs:34:17\n   |\n34 |       } else if (lst1[lst1_idx] > lst2[lst2_idx]) {\n   |                 ^                               ^\n   |\nhelp: remove these parentheses\n   |\n34 -       } else if (lst1[ls",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let count = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    count = count + i.length();\n  }\n  for i in lst2 {\n    count = count - i.length();\n    if count < 0 {\n      result = result.concat(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpc8_8b0t1.rs:19:23\n   |\n19 |     count = count + i.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpc8_8b0t1.rs:22:23\n   |\n22 |     count = count - i.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpc8_8b0t1.rs:24:23\n    |\n24  |       result = result.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpc8_8b0t1.rs:24:23\n   |\n24 |       result = result.concat(i);\n   |                       ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0271, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let total_len = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        let lst1_chars = lst1[i].chars();\n        let lst2_chars = lst2[i].chars();\n        let lst1_chars_len = lst1_chars.length();\n        let lst2_chars_len = lst2_chars.length();\n        let total_chars_len = 0;\n        for (let j = 0; j < lst1_chars_len; j++) {\n            let lst1_char = lst1_chars[j];\n            let lst2_char = lst2_chars[j];\n            if (lst1_char == lst2_char) {\n                total_chars_len += 1;\n            }\n        }\n        total_len += total_chars_len;\n    }\n    let total_match_lst = Vec::new();\n    for (let i = 0; i < lst2_len; i++) {\n        let lst2_chars = lst2[i].chars();\n        let lst2_chars_len = lst2_chars.length();\n        let total_chars_len = 0;\n        for (let j = 0; j < lst2_chars_len; j++) {\n            let lst2_char = lst2_chars[j];\n            if (total_chars_len < total_len) {\n                total_chars_len += 1;\n            }\n        }\n        if (total_chars_len == total_len) {\n            total_match_lst.push(lst2[i]);\n        }\n    }\n    return total_match_lst;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpx3qd2p6r.rs:22:10\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpx3qd2p6r.rs:22:14\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpx3qd2p6r.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpx3qd2p6r.rs:22:15\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpx3qd2p6r.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx3qd2p6r.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpx3qd2p6r.rs:16:25\n   |\n16 |     let lst1_len = lst1.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpx3qd2p6r.rs:17:25\n   |\n17 |     let lst2_len = lst2.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let count = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    count = count + i.len();\n  }\n  for i in lst2 {\n    count = count - i.len();\n    if count < 0 {\n      result = result.concat(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpb8_36fe_.rs:24:23\n    |\n24  |       result = result.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpb8_36fe_.rs:24:23\n   |\n24 |       result = result.concat(i);\n   |                       ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0271.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_match = Vec::new();\n  for i in lst1 {\n    total_chars += i.len();\n  }\n  for i in lst2 {\n    if total_chars < i.len() {\n      total_chars = i.len();\n      total_match = lst1;\n    }\n  }\n  return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp1gyqnznd.rs:19:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n19 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp1gyqnznd.rs:23:7\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n23 |       total_chars = i.len();\n   |       ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_match`\n  --> /tmp/tmp1gyqnznd.rs:24:7\n   |\n17 |   let total_match = Vec::new();\n   |       -----------\n   |       |\n   |       first assignment to `total_match`\n   |       help: consider making this binding mutable: `mut total_match`\n...\n24 |       total_match = lst1;\n   |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp1gyqnznd.rs:24:21\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |       total_match = lst1;\n    |                     ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |   for i in &lst1 {\n    |            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0382, E0384.\nFor more information about an error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4yx9aifh.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp4yx9aifh.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4yx9aifh.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4yx9aifh.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp4yx9aifh.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4yx9aifh.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmptqbwu738.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count > lst2_count) {\n            return lst1;\n        } else if (lst1_count < lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplwq__3h8.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplwq__3h8.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplwq__3h8.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplwq__3h8.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplwq__3h8.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplwq__3h8.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplwq__3h8.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    let lst1_chars = lst1.map(String::chars);\n    let lst2_chars = lst2.map(String::chars);\n    let lst1_chars_len = lst1_chars.len();\n    let lst2_chars_len = lst2_chars.len();\n    let lst1_chars_count = 0;\n    let lst2_chars_count = 0;\n    let lst1_chars_count_prev = 0;\n    let lst2_chars_count_prev = 0;\n    let lst1_chars_count_prev_prev = 0;\n    let lst2_chars_count_prev_prev = 0;\n    let lst1_chars_count_prev_prev_prev = 0;\n    let lst2_chars_count_prev_prev_prev = 0;\n    let lst1_chars_count_prev_prev_prev_prev = 0;\n    let lst2_chars_count_prev_prev_prev_prev = 0;\n    let lst1_chars_count_prev_prev_prev_prev_prev = 0;\n    let lst2_chars_count_prev_prev_prev_prev_prev = 0;\n    let lst1_chars_count_prev_prev_prev_prev_prev_prev = 0;\n    let lst2_chars_count_prev_prev_prev_prev_prev_prev = 0;\n    let lst1_chars_count_prev_prev_prev_prev_prev_prev_prev = 0;\n    let lst2\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmptqx5s014.rs:58:3\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                                                     - unclosed delimiter\n...\n22 |   } else {\n   |          - this delimiter might not be properly closed...\n...\n45 | }\n   | - ...as it matches this but it has different indentation\n...\n58 | }\n   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmptqx5s014.rs:44:13\n   |\n44 |     let lst2\n   |             ^ help: add `;` here\n45 | }\n   | - unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptqx5s014.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptqx5s014.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmptqx5s014.rs:25:27\n    |\n25  |       let lst1_chars = lst1.map(String::chars);\n    |                             ^^^ `Vec<String>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<String>: Iterator`\n            which is required by `&mut Vec<String>: Iterator`\n            `[String]: Iterator`\n            which is required by `&mut [String]: Iterator`\n\nerror[E0599]: no function or associated item named `chars` found for struct `String` in the current scope\n  --> /tmp/tmptqx5s014.rs:25:39\n   |\n25 |     let lst1_chars = lst1.map(String::chars);\n   |                                       ^^^^^ function or associated item not found in `String`\n\nerror[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmptqx5s014.rs:26:27\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len < lst2_len) {\n    return lst1;\n  } else if (lst1_len > lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp5ij9lw2a.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp5ij9lw2a.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp5ij9lw2a.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp5ij9lw2a.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp5ij9lw2a.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5ij9lw2a.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5ij9lw2a.rs:20:13\n   |\n20 |   } else if (lst1_len > lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len > lst2_len) {\n20 +   } else if lst1_len > lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    for i in lst1 {\n        total_count += i.len();\n    }\n    for i in lst2 {\n        total_count -= i.len();\n    }\n    if total_count == 0 {\n        return lst1;\n    }\n    return lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpvzylfl0l.rs:18:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n17 |     for i in lst1 {\n18 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpvzylfl0l.rs:21:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n21 |         total_count -= i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpvzylfl0l.rs:24:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n16  |     let total_count = 0;\n17  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n17  |     for i in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpvzylfl0l.rs:26:12\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n20 |     for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n26 |     return lst2;\n   |            ^^^^ val",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpo_qhrncl.rs:27:14\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpo_qhrncl.rs:27:18\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpo_qhrncl.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpo_qhrncl.rs:27:19\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpo_qhrncl.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo_qhrncl.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo_qhrncl.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        lst1_total += lst1[i].len();\n    }\n    for (let i = 0; i < lst2_len; i++) {\n        lst2_total += lst2[i].len();\n    }\n    let lst1_less = lst1_total < lst2_total;\n    let lst2_less = lst2_total < lst1_total;\n    let result = lst1_less ? lst1 : lst2;\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmporp_j72e.rs:23:10\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmporp_j72e.rs:23:14\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmporp_j72e.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmporp_j72e.rs:23:15\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmporp_j72e.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmporp_j72e.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len < lst2_len) {\n    return lst1;\n  } else if (lst1_len > lst2_len) {\n    return lst2;\n  } else {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmph860zz4p.rs:27:10\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmph860zz4p.rs:27:14\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmph860zz4p.rs:27:16\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmph860zz4p.rs:27:15\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmph860zz4p.rs:27:16\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph860zz4p.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph860zz4p.rs:20:13\n   |\n20 |   } else if (lst1_len > lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len > lst2_len) {\n20 +   } else if lst1_len > lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmptqbwu738.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2.filter(x => x.len() < lst1_len);\n    } else {\n        return lst1.filter(x => x.len() > lst2_len);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpc_muj0yt.rs:21:30\n   |\n21 |         return lst2.filter(x => x.len() < lst1_len);\n   |                              ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count > lst2_count) {\n            return lst1;\n        } else if (lst1_count < lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplwq__3h8.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplwq__3h8.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplwq__3h8.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplwq__3h8.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplwq__3h8.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplwq__3h8.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplwq__3h8.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::chars);\n        let lst2_chars = lst2.map(String::chars);\n        let chars_count = lst1_chars.count(lst2_chars);\n        let lst = lst1.filter(x => x.chars.count(lst2_chars) == chars_count);\n        return lst;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmp6ln8ewya.rs:26:33\n   |\n26 |         let lst = lst1.filter(x => x.chars.count(lst2_chars) == chars_count);\n   |                                 ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if lst1_len < lst2_len {\n        return lst1\n    } else if lst1_len > lst2_len {\n        return lst2\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for i in 0..lst1_len {\n            if lst1[i] < lst2[i] {\n                lst1_count += 1;\n            } else if lst1[i] > lst2[i] {\n                lst2_count += 1;\n            }\n        }\n        if lst1_count < lst2_count {\n            return lst1\n        } else if lst1_count > lst2_count {\n            return lst2\n        } else {\n            return lst1\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `lst1_count`\n  --> /tmp/tmp1a_k7hjk.rs:27:17\n   |\n23 |         let lst1_count = 0;\n   |             ----------\n   |             |\n   |             first assignment to `lst1_count`\n   |             help: consider making this binding mutable: `mut lst1_count`\n...\n27 |                 lst1_count += 1;\n   |                 ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `lst2_count`\n  --> /tmp/tmp1a_k7hjk.rs:29:17\n   |\n24 |         let lst2_count = 0;\n   |             ----------\n   |             |\n   |             first assignment to `lst2_count`\n   |             help: consider making this binding mutable: `mut lst2_count`\n...\n29 |                 lst2_count += 1;\n   |                 ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_total = 0;\n        let lst2_total = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            lst1_total += lst1[i].len();\n            lst2_total += lst2[i].len();\n            if (lst1_total < lst2_total) {\n                return lst1;\n            } else if (lst1_total > lst2_total) {\n                return lst2;\n            }\n        }\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp86a_tr0c.rs:27:14\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp86a_tr0c.rs:27:18\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp86a_tr0c.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp86a_tr0c.rs:27:19\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp86a_tr0c.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp86a_tr0c.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp86a_tr0c.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    let lst1_len_minus_lst2_len = lst1_len - lst2_len;\n    let lst2_len_minus_lst1_len = lst2_len - lst1_len;\n    let lst1_minus_lst2 = lst1.filter(x => x.len() < lst2_len_minus_lst1_len);\n    let lst2_minus_lst1 = lst2.filter(x => x.len() < lst1_len_minus_lst2_len);\n    return lst1_minus_lst2.concat(lst2_minus_lst1);\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpfw6aabkw.rs:27:41\n   |\n27 |     let lst1_minus_lst2 = lst1.filter(x => x.len() < lst2_len_minus_lst1_len);\n   |                                         ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_chars_lst1 = 0;\n  let total_chars_lst2 = 0;\n  for i in lst1 {\n    total_chars += i.len();\n    total_chars_lst1 += i.len();\n  }\n  for i in lst2 {\n    total_chars += i.len();\n    total_chars_lst2 += i.len();\n  }\n  if total_chars_lst1 == total_chars_lst2 {\n    return lst1\n  } else if total_chars_lst1 < total_chars_lst2 {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: variable `total_chars` is assigned to, but never used\n  --> /tmp/tmpsxagwjs7.rs:16:7\n   |\n16 |   let total_chars = 0;\n   |       ^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_total_chars` instead\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpsxagwjs7.rs:20:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n20 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars_lst1`\n  --> /tmp/tmpsxagwjs7.rs:21:5\n   |\n17 |   let total_chars_lst1 = 0;\n   |       ----------------\n   |       |\n   |       first assignment to `total_chars_lst1`\n   |       help: consider making this binding mutable: `mut total_chars_lst1`\n...\n21 |     total_chars_lst1 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpsxagwjs7.rs:24:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n24 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars_lst2`\n  --> /tmp/tmpsxagwjs7.rs:25:5\n   |\n18 |   let total_chars_lst2 = 0;\n   |       ----------------\n   |       |\n   |       first assignment to `total_chars_lst2`\n   |       help: consider making this binding mutable: `mut total_chars_lst2`\n...\n25 |     total_chars_lst2 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpsxagwjs7.rs:28:12\n    |\n15  | fn total_match(lst1: Vec<String>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        let total_match = lst1.filter(x => x.len() < lst2_len);\n        return total_match.concat(lst2.filter(x => x.len() < lst1_len));\n    } else {\n        let total_match = lst2.filter(x => x.len() < lst1_len);\n        return total_match.concat(lst1.filter(x => x.len() < lst2_len));\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpgktrwc6i.rs:21:41\n   |\n21 |         let total_match = lst1.filter(x => x.len() < lst2_len);\n   |                                         ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  if (lst1.len() == 0) {\n    return lst2\n  }\n  if (lst2.len() == 0) {\n    return lst1\n  }\n  let lst1_len = lst1.len()\n  let lst2_len = lst2.len()\n  let lst1_index = 0\n  let lst2_index = 0\n  let result = Vec::new()\n  while (lst1_index < lst1_len && lst2_index < lst2_len) {\n    if (lst1[lst1_index] < lst2[lst2_index]) {\n      lst1_index += 1\n    } else if (lst1[lst1_index] > lst2[lst2_index]) {\n      lst2_index += 1\n    } else {\n      result.push(lst1[lst1_index])\n      lst1_index += 1\n      lst2_index += 1\n    }\n  }\n  return result\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpv3bkcqr9.rs:22:28\n   |\n22 |   let lst1_len = lst1.len()\n   |                            ^ help: add `;` here\n23 |   let lst2_len = lst2.len()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv3bkcqr9.rs:23:28\n   |\n23 |   let lst2_len = lst2.len()\n   |                            ^ help: add `;` here\n24 |   let lst1_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv3bkcqr9.rs:24:21\n   |\n24 |   let lst1_index = 0\n   |                     ^ help: add `;` here\n25 |   let lst2_index = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpv3bkcqr9.rs:25:21\n   |\n25 |   let lst2_index = 0\n   |                     ^ help: add `;` here\n26 |   let result = Vec::new()\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpv3bkcqr9.rs:26:26\n   |\n26 |   let result = Vec::new()\n   |                          ^ help: add `;` here\n27 |   while (lst1_index < lst1_len && lst2_index < lst2_len) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `lst1_index`\n  --> /tmp/tmpv3bkcqr9.rs:33:36\n   |\n33 |       result.push(lst1[lst1_index])\n   |                                    ^ help: add `;` here\n34 |       lst1_index += 1\n   |       ---------- unexpected token\n\nerror: expected `;`, found `lst2_index`\n  --> /tmp/tmpv3bkcqr9.rs:34:22\n   |\n34 |       lst1_index += 1\n   |                      ^ help: add `;` here\n35 |       lst2_index += 1\n   |       ---------- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv3bkcqr9.rs:16:6\n   |\n16 |   if (lst1.len() == 0) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   if (lst1.len() == 0) {\n16 +   if lst1.len() == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv3bkcqr9.rs:19:6\n   |\n19 |   if (lst2.len() == 0) {\n   |      ^               ^\n   |\nhelp: re",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_cnt = 0;\n        let lst2_cnt = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_cnt += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_cnt += 1;\n            }\n        }\n        if (lst1_cnt < lst2_cnt) {\n            return lst1;\n        } else if (lst1_cnt > lst2_cnt) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpg6dmagn5.rs:27:14\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpg6dmagn5.rs:27:18\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpg6dmagn5.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpg6dmagn5.rs:27:19\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpg6dmagn5.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpg6dmagn5.rs:18:8\n   |\n18 |     if (lst1_len < lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len < lst2_len) {\n18 +     if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpg6dmagn5.rs:20:15\n   |\n20 |     } else if (lst1_len > lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len > lst2_len) {\n20 +     } else if lst1_len > lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let count = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    if i.len() < lst2[0].len() {\n      count += 1;\n    }\n  }\n  for i in lst2 {\n    if i.len() < lst1[0].len() {\n      count += 1;\n    }\n  }\n  if count == 0 {\n    for i in lst1 {\n      result.push(i);\n    }\n  } else {\n    for i in lst2 {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp2xmz60ix.rs:20:7\n   |\n16 |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n20 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: borrow of moved value: `lst1`\n   --> /tmp/tmp2xmz60ix.rs:24:18\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |     if i.len() < lst1[0].len() {\n    |                  ^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |   for i in &lst1 {\n    |            +\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp2xmz60ix.rs:25:7\n   |\n16 |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n25 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmp2xmz60ix.rs:30:7\n   |\n17 |   let result = Vec::new();\n   |       ------ help: consider changing this to be mutable: `mut result`\n...\n30 |       result.push(i);\n   |       ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp2xmz60ix.rs:33:14\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n23 |   for i in ls",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let total = 0;\n    for i in lst1 {\n        count = count + 1;\n        total = total + i.len();\n    }\n    for i in lst2 {\n        count = count + 1;\n        total = total + i.len();\n    }\n    if total < count {\n        return lst1;\n    } else if total > count {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpu8qiw78d.rs:19:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n19 |         count = count + 1;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmpu8qiw78d.rs:20:9\n   |\n17 |     let total = 0;\n   |         -----\n   |         |\n   |         first assignment to `total`\n   |         help: consider making this binding mutable: `mut total`\n...\n20 |         total = total + i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpu8qiw78d.rs:23:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n23 |         count = count + 1;\n   |         ^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmpu8qiw78d.rs:24:9\n   |\n17 |     let total = 0;\n   |         -----\n   |         |\n   |         first assignment to `total`\n   |         help: consider making this binding mutable: `mut total`\n...\n24 |         total = total + i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpu8qiw78d.rs:27:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n27  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1\n  } else if (lst1_len < lst2_len) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpycylxaqd.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpycylxaqd.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpycylxaqd.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpycylxaqd.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for i in lst1 {\n        total_count += i.len();\n        lst1_count += i.len();\n    }\n    for i in lst2 {\n        total_count += i.len();\n        lst2_count += i.len();\n    }\n    if lst1_count == lst2_count {\n        return lst1;\n    } else if lst1_count < lst2_count {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: variable `total_count` is assigned to, but never used\n  --> /tmp/tmp8w2fg32g.rs:16:9\n   |\n16 |     let total_count = 0;\n   |         ^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_total_count` instead\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp8w2fg32g.rs:20:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n20 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `lst1_count`\n  --> /tmp/tmp8w2fg32g.rs:21:9\n   |\n17 |     let lst1_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `lst1_count`\n   |         help: consider making this binding mutable: `mut lst1_count`\n...\n21 |         lst1_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp8w2fg32g.rs:24:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n24 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `lst2_count`\n  --> /tmp/tmp8w2fg32g.rs:25:9\n   |\n18 |     let lst2_count = 0;\n   |         ----------\n   |         |\n   |         first assignment to `lst2_count`\n   |         help: consider making this binding mutable: `mut lst2_count`\n...\n25 |         lst2_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp8w2fg32g.rs:28:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Ve",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let result = Vec::new();\n    for i in lst1 {\n        if i.len() < lst2[count].len() {\n            count += 1;\n        }\n        if count == lst2.len() {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpvlwjzplw.rs:20:13\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n20 |             count += 1;\n   |             ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpvlwjzplw.rs:23:13\n   |\n17 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n...\n23 |             result.push(i);\n   |             ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    let total_count_lst1 = 0;\n    let total_count_lst2 = 0;\n    for i in lst1 {\n        total_count += i.len();\n        total_count_lst1 += i.len();\n    }\n    for i in lst2 {\n        total_count += i.len();\n        total_count_lst2 += i.len();\n    }\n    if total_count_lst1 == total_count_lst2 {\n        return lst1;\n    } else if total_count_lst1 > total_count_lst2 {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: variable `total_count` is assigned to, but never used\n  --> /tmp/tmp0zuc_r3o.rs:16:9\n   |\n16 |     let total_count = 0;\n   |         ^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_total_count` instead\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp0zuc_r3o.rs:20:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n20 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst1`\n  --> /tmp/tmp0zuc_r3o.rs:21:9\n   |\n17 |     let total_count_lst1 = 0;\n   |         ----------------\n   |         |\n   |         first assignment to `total_count_lst1`\n   |         help: consider making this binding mutable: `mut total_count_lst1`\n...\n21 |         total_count_lst1 += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp0zuc_r3o.rs:24:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n24 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst2`\n  --> /tmp/tmp0zuc_r3o.rs:25:9\n   |\n18 |     let total_count_lst2 = 0;\n   |         ----------------\n   |         |\n   |         first assignment to `total_count_lst2`\n   |         help: consider making this binding mutable: `mut total_count_lst2`\n...\n25 |         total_count_lst2 += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    let total_count_lst2 = 0;\n    for i in lst1 {\n        total_count += i.len();\n    }\n    for i in lst2 {\n        total_count_lst2 += i.len();\n    }\n    if total_count_lst2 < total_count {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmp6m19i0y6.rs:19:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n19 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst2`\n  --> /tmp/tmp6m19i0y6.rs:22:9\n   |\n17 |     let total_count_lst2 = 0;\n   |         ----------------\n   |         |\n   |         first assignment to `total_count_lst2`\n   |         help: consider making this binding mutable: `mut total_count_lst2`\n...\n22 |         total_count_lst2 += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst2`\n   --> /tmp/tmp6m19i0y6.rs:25:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n21  |     for i in lst2 {\n    |              ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n25  |         return lst2;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst2`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n21  |     for i in &lst2 {\n    |              +\n\nerror[E0382]: use of moved value: `lst1`\n  --> /tmp/tmp6m19i0y6.rs:27:16\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18 |     for i in lst1 {\n   |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n27 |         return lst1;\n   |                ^^^^ value us",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmptqbwu738.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let total_chars = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        total_chars += lst1[i].len();\n    }\n    for (let i = 0; i < lst2_len; i++) {\n        total_chars -= lst2[i].len();\n    }\n    let result = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n        if (lst1[i].len() < total_chars) {\n            result.append(lst1[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpgishd8l8.rs:22:10\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpgishd8l8.rs:22:14\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpgishd8l8.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpgishd8l8.rs:22:15\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpgishd8l8.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpgishd8l8.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpo_qhrncl.rs:27:14\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpo_qhrncl.rs:27:18\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpo_qhrncl.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpo_qhrncl.rs:27:19\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpo_qhrncl.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo_qhrncl.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpo_qhrncl.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_total = 0;\n        let lst2_total = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            lst1_total += lst1[i].len();\n            lst2_total += lst2[i].len();\n        }\n        if (lst1_total < lst2_total) {\n            return lst1;\n        } else if (lst1_total > lst2_total) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpv8g52td5.rs:27:14\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpv8g52td5.rs:27:18\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpv8g52td5.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpv8g52td5.rs:27:19\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpv8g52td5.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv8g52td5.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpv8g52td5.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  if (lst1.len() < lst2.len()) {\n    return lst1\n  } else if (lst1.len() > lst2.len()) {\n    return lst2\n  } else {\n    return lst1\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmp3cxkfeo7.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total = 0;\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        for (i in lst1) {\n            total += i.len();\n        }\n    } else {\n        for (i in lst2) {\n            total += i.len();\n        }\n    }\n    if (total == lst1_len) {\n        return lst1;\n    } else if (total == lst2_len) {\n        return lst2;\n    } else {\n        return lst1.filter((i) => i.len() < total);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmpxkg_0_k1.rs:20:16\n   |\n20 |         for (i in lst1) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpxkg_0_k1.rs:20:13\n   |\n20 |         for (i in lst1) {\n   |             ^         ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n20 -         for (i in lst1) {\n20 +         for i in lst1 {\n   | \n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmpxkg_0_k1.rs:24:16\n   |\n24 |         for (i in lst2) {\n   |                ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmpxkg_0_k1.rs:24:13\n   |\n24 |         for (i in lst2) {\n   |             ^         ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n24 -         for (i in lst2) {\n24 +         for i in lst2 {\n   | \n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpxkg_0_k1.rs:33:32\n   |\n33 |         return lst1.filter((i) => i.len() < total);\n   |                                ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp4yx9aifh.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp4yx9aifh.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp4yx9aifh.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp4yx9aifh.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp4yx9aifh.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::chars);\n        let lst2_chars = lst2.map(String::chars);\n        let lst1_chars_len = lst1_chars.len();\n        let lst2_chars_len = lst2_chars.len();\n        if (lst1_chars_len > lst2_chars_len) {\n            return lst1;\n        } else if (lst1_chars_len < lst2_chars_len) {\n            return lst2;\n        } else {\n            let lst1_chars_chars = lst1_chars.map(String::chars);\n            let lst2_chars_chars = lst2_chars.map(String::chars);\n            let lst1_chars_chars_len = lst1_chars_chars.len();\n            let lst2_chars_chars_len = lst2_chars_chars.len();\n            if (lst1_chars_chars_len > lst2_chars_chars_len) {\n                return lst1;\n            } else if (lst1_chars_chars_len < lst2_chars_chars_len) {\n                return lst2;\n            } else {\n                return lst1;\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpimmvv5io.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpimmvv5io.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpimmvv5io.rs:27:12\n   |\n27 |         if (lst1_chars_len > lst2_chars_len) {\n   |            ^                               ^\n   |\nhelp: remove these parentheses\n   |\n27 -         if (lst1_chars_len > lst2_chars_len) {\n27 +         if lst1_chars_len > lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpimmvv5io.rs:29:19\n   |\n29 |         } else if (lst1_chars_len < lst2_chars_len) {\n   |                   ^                               ^\n   |\nhelp: remove these parentheses\n   |\n29 -         } else if (lst1_chars_len < lst2_chars_len) {\n29 +         } else if lst1_chars_len < lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpimmvv5io.rs:36:16\n   |\n36 |             if (lst1_chars_chars_len > lst2_chars_chars_len) {\n   |                ^                                           ^\n   |\nhelp: remove these parentheses\n   |\n36 -             if (lst1_chars_chars_len > lst2_chars_chars_len) {\n36 +             if lst1_chars_chars_len > lst2_chars_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpimmvv5io.rs:38:23\n   |\n38 |             } else if (lst1_chars_chars_len < lst2_chars_chars_len) {\n   |                       ^                                           ^\n   |\nhelp: remove these parentheses\n   |\n38 -  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let result = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n        let lst1_chars = lst1[i].chars();\n        let lst2_chars = lst2[i].chars();\n        let lst1_match = lst1_chars.filter(c => lst2_chars.contains(c)).to_string();\n        let lst2_match = lst2_chars.filter(c => lst1_chars.contains(c)).to_string();\n        if (lst1_match.length() < lst2_match.length()) {\n            result.push(lst1[i]);\n        } else {\n            result.push(lst2[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmprwaat28y.rs:22:10\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmprwaat28y.rs:22:14\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprwaat28y.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprwaat28y.rs:22:15\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprwaat28y.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprwaat28y.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_set = Set::from(lst1);\n    let lst2_set = Set::from(lst2);\n    let lst1_set_len = lst1_set.len();\n    let lst2_set_len = lst2_set.len();\n    if (lst1_set_len > lst2_set_len) {\n      return lst1;\n    } else if (lst1_set_len < lst2_set_len) {\n      return lst2;\n    } else {\n      let lst1_set_set = Set::from(lst1_set);\n      let lst2_set_set = Set::from(lst2_set);\n      let lst1_set_set_len = lst1_set_set.len();\n      let lst2_set_set_len = lst2_set_set.len();\n      if (lst1_set_set_len > lst2_set_set_len) {\n        return lst1;\n      } else if (lst1_set_set_len < lst2_set_set_len) {\n        return lst2;\n      } else {\n        let lst1_set_set_set = Set::from(lst1_set_set);\n        let lst2_set_set_set = Set::from(lst2_set_set);\n        let lst1_set_set_set_len = lst1_set_set_set.len();\n        let lst2_set_set_set_len = lst2_set_set_set.len();\n        if (lst1_set_set_set_len > lst2_set_set_set_len) {\n\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmph7wxt04t.rs:60:3\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                                                     - unclosed delimiter\n...\n22 |   } else {\n   |          - unclosed delimiter\n...\n31 |     } else {\n   |            - unclosed delimiter\n...\n40 |       } else {\n   |              - unclosed delimiter\n...\n45 |         if (lst1_set_set_set_len > lst2_set_set_set_len) {\n   |                                                          - this delimiter might not be properly closed...\n46 | \n47 | }\n   | - ...as it matches this but it has different indentation\n...\n60 | }\n   |   ^\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmph7wxt04t.rs:23:20\n   |\n23 |     let lst1_set = Set::from(lst1);\n   |                    ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmph7wxt04t.rs:24:20\n   |\n24 |     let lst2_set = Set::from(lst2);\n   |                    ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmph7wxt04t.rs:32:26\n   |\n32 |       let lst1_set_set = Set::from(lst1_set);\n   |                          ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmph7wxt04t.rs:33:26\n   |\n33 |       let lst2_set_set = Set::from(lst2_set);\n   |                          ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmph7wxt04t.rs:41:32\n   |\n41 |         let lst1_set_set_set = Set::from(lst1_set_set);\n   |                                ^^^ use of undeclared type `Set`\n\nerror[E0433]: failed to resolve: use of undeclared type `Set`\n  --> /tmp/tmph7wxt04t.rs:42:32\n   |\n42 |         let lst2_set_set_set = Set::from(lst2_set_set);\n   |                                ^^^ use of undeclared type `Set`\n\nwarning: unnecessary parentheses around `if` condition\n  --",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if lst1_len == lst2_len {\n        return lst1;\n    }\n    let lst1_count = 0;\n    let lst2_count = 0;\n    let result = Vec::new();\n    for i in lst1 {\n        if i.len() < lst2_len {\n            lst1_count += 1;\n        } else {\n            lst2_count += 1;\n        }\n        if lst1_count == lst2_len || lst2_count == lst1_len {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpy6tywz6x.rs:31:27\n   |\n31 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                         found struct `String`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  if (lst1.len() == 0) {\n    return lst2\n  }\n  if (lst2.len() == 0) {\n    return lst1\n  }\n  let total_chars = 0\n  for i in 0..lst1.len() {\n    total_chars += lst1[i].len()\n  }\n  for i in 0..lst2.len() {\n    if (total_chars < lst2[i].len()) {\n      return lst1\n    }\n  }\n  return lst2\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpvzimrw2v.rs:22:22\n   |\n22 |   let total_chars = 0\n   |                      ^ help: add `;` here\n23 |   for i in 0..lst1.len() {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvzimrw2v.rs:16:6\n   |\n16 |   if (lst1.len() == 0) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   if (lst1.len() == 0) {\n16 +   if lst1.len() == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvzimrw2v.rs:19:6\n   |\n19 |   if (lst2.len() == 0) {\n   |      ^               ^\n   |\nhelp: remove these parentheses\n   |\n19 -   if (lst2.len() == 0) {\n19 +   if lst2.len() == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpvzimrw2v.rs:27:8\n   |\n27 |     if (total_chars < lst2[i].len()) {\n   |        ^                           ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (total_chars < lst2[i].len()) {\n27 +     if total_chars < lst2[i].len() {\n   | \n\nerror: aborting due to previous error; 3 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count++;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count++;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpzjd1bh95.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpzjd1bh95.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpzjd1bh95.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpzjd1bh95.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpzjd1bh95.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzjd1bh95.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpzjd1bh95.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpzjd1bh95.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpzjd1bh95.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::chars);\n        let lst2_chars = lst2.map(String::chars);\n        let lst1_chars_len = lst1_chars.len();\n        let lst2_chars_len = lst2_chars.len();\n        if (lst1_chars_len < lst2_chars_len) {\n            return lst1;\n        } else if (lst1_chars_len > lst2_chars_len) {\n            return lst2;\n        } else {\n            let lst1_chars_set = lst1_chars.to_set();\n            let lst2_chars_set = lst2_chars.to_set();\n            let lst1_chars_set_len = lst1_chars_set.len();\n            let lst2_chars_set_len = lst2_chars_set.len();\n            if (lst1_chars_set_len < lst2_chars_set_len) {\n                return lst1;\n            } else if (lst1_chars_set_len > lst2_chars_set_len) {\n                return lst2;\n            } else {\n                let lst1_chars_set_set = lst1_chars_set.to_set();\n                let lst2_chars_set_set = lst2_chars_set.to_set();\n                let lst1_chars_set_set_len = lst1_chars_set_set.len();\n                let lst2_chars_set_set_len = lst2_chars_\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmpf_1uig9v.rs:58:3\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                                                     - unclosed delimiter\n...\n22 |     } else {\n   |            - unclosed delimiter\n...\n31 |         } else {\n   |                - unclosed delimiter\n...\n40 |             } else {\n   |                    - this delimiter might not be properly closed...\n...\n45 | }\n   | - ...as it matches this but it has different indentation\n...\n58 | }\n   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpf_1uig9v.rs:44:57\n   |\n44 |                 let lst2_chars_set_set_len = lst2_chars_\n   |                                                         ^ help: add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `lst2_chars_` in this scope\n  --> /tmp/tmpf_1uig9v.rs:44:46\n   |\n44 |                 let lst2_chars_set_set_len = lst2_chars_\n   |                                              ^^^^^^^^^^^ help: a local variable with a similar name exists: `lst2_chars`\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpf_1uig9v.rs:18:8\n   |\n18 |     if (lst1_len < lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len < lst2_len) {\n18 +     if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpf_1uig9v.rs:20:15\n   |\n20 |     } else if (lst1_len > lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len > lst2_len) {\n20 +     } else if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpf_1uig9v.rs:27:12\n   |\n27 |         if (lst1_chars_len < lst2_chars_len) {\n   |            ^                               ^\n   |\nhelp: remove these parentheses\n   |\n27 -         if (lst1_chars_len < lst2_chars_len) {\n27 +         if ls",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1\n  } else if (lst1_len < lst2_len) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmp682hzdzu.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if lst1_len < lst2_len {\n        return lst1;\n    } else if lst1_len > lst2_len {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for i in 0..lst1_len {\n            if lst1[i] < lst2[i] {\n                lst1_count += 1;\n            } else if lst1[i] > lst2[i] {\n                lst2_count += 1;\n            }\n        }\n        if lst1_count < lst2_count {\n            return lst1;\n        } else if lst1_count > lst2_count {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `lst1_count`\n  --> /tmp/tmpztarofdv.rs:27:17\n   |\n23 |         let lst1_count = 0;\n   |             ----------\n   |             |\n   |             first assignment to `lst1_count`\n   |             help: consider making this binding mutable: `mut lst1_count`\n...\n27 |                 lst1_count += 1;\n   |                 ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `lst2_count`\n  --> /tmp/tmpztarofdv.rs:29:17\n   |\n24 |         let lst2_count = 0;\n   |             ----------\n   |             |\n   |             first assignment to `lst2_count`\n   |             help: consider making this binding mutable: `mut lst2_count`\n...\n29 |                 lst2_count += 1;\n   |                 ^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_chars_lst1 = 0;\n  let total_chars_lst2 = 0;\n  for i in lst1 {\n    total_chars += i.length();\n  }\n  for i in lst2 {\n    total_chars_lst1 += i.length();\n  }\n  for i in lst1 {\n    total_chars_lst2 += i.length();\n  }\n  if total_chars_lst1 == total_chars_lst2 {\n    return lst1;\n  } else if total_chars_lst1 < total_chars_lst2 {\n    return lst2;\n  } else {\n    return lst1;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpaj9ug7fb.rs:20:22\n   |\n20 |     total_chars += i.length();\n   |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpaj9ug7fb.rs:23:27\n   |\n23 |     total_chars_lst1 += i.length();\n   |                           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpaj9ug7fb.rs:26:27\n   |\n26 |     total_chars_lst2 += i.length();\n   |                           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_chars = lst1.map(String::chars).reduce(0, (a, b) => a + b);\n    let lst2_chars = lst2.map(String::chars).reduce(0, (a, b) => a + b);\n    if (lst1_chars > lst2_chars) {\n      return lst1;\n    } else if (lst1_chars < lst2_chars) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpovnx7xd4.rs:23:63\n   |\n23 |     let lst1_chars = lst1.map(String::chars).reduce(0, (a, b) => a + b);\n   |                                                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let lst1_count = 0;\n    let lst2_count = 0;\n    let result = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n        if (lst1[i].length() < lst2[lst2_count].length()) {\n            lst1_count++;\n        } else if (lst1[i].length() > lst2[lst2_count].length()) {\n            lst2_count++;\n        } else {\n            result.push(lst1[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp_ajcsg7q.rs:24:10\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp_ajcsg7q.rs:24:14\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp_ajcsg7q.rs:24:16\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp_ajcsg7q.rs:24:15\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp_ajcsg7q.rs:24:16\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_ajcsg7q.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp_ajcsg7q.rs:16:25\n   |\n16 |     let lst1_len = lst1.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp_ajcsg7q.rs:17:25\n   |\n17 |     let lst2_len = lst2.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  if (lst1.len() == 0) {\n    return lst2\n  }\n  if (lst2.len() == 0) {\n    return lst1\n  }\n  let min_len = lst1.len()\n  if (lst2.len() < min_len) {\n    min_len = lst2.len()\n  }\n  let min_chars = vec![String::from(\"\")]\n  for i in 0..min_len {\n    let min_chars_i = vec![String::from(\"\")]\n    for j in 0..min_len {\n      if (lst1[i] == lst2[j]) {\n        min_chars_i = min_chars_i.append(lst1[i])\n      }\n    }\n    min_chars = min_chars.append(min_chars_i)\n  }\n  return min_chars\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `if`\n  --> /tmp/tmpsxswa89o.rs:22:27\n   |\n22 |   let min_len = lst1.len()\n   |                           ^ help: add `;` here\n23 |   if (lst2.len() < min_len) {\n   |   -- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsxswa89o.rs:26:41\n   |\n26 |   let min_chars = vec![String::from(\"\")]\n   |                                         ^ help: add `;` here\n27 |   for i in 0..min_len {\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `for`\n  --> /tmp/tmpsxswa89o.rs:28:45\n   |\n28 |     let min_chars_i = vec![String::from(\"\")]\n   |                                             ^ help: add `;` here\n29 |     for j in 0..min_len {\n   |     --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsxswa89o.rs:16:6\n   |\n16 |   if (lst1.len() == 0) {\n   |      ^               ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -   if (lst1.len() == 0) {\n16 +   if lst1.len() == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsxswa89o.rs:19:6\n   |\n19 |   if (lst2.len() == 0) {\n   |      ^               ^\n   |\nhelp: remove these parentheses\n   |\n19 -   if (lst2.len() == 0) {\n19 +   if lst2.len() == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsxswa89o.rs:23:6\n   |\n23 |   if (lst2.len() < min_len) {\n   |      ^                    ^\n   |\nhelp: remove these parentheses\n   |\n23 -   if (lst2.len() < min_len) {\n23 +   if lst2.len() < min_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsxswa89o.rs:30:10\n   |\n30 |       if (lst1[i] == lst2[j]) {\n   |          ^                  ^\n   |\nhelp: remove these parentheses\n   |\n30 -       if (lst1[i] == lst2[j]) {\n30 +       if lst1[i] == lst2[j] {\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsxswa89o.rs:31:42\n   |\n31 |         min_chars_i = min_chars_i.append(lst1[i])\n   |                                          ^^^^^^^ expected `&mut Vec<S",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  for i in lst1 {\n    total_chars += i.len();\n  }\n  for i in lst2 {\n    total_chars -= i.len();\n  }\n  if total_chars < 0 {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp3ozxiice.rs:18:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n17 |   for i in lst1 {\n18 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp3ozxiice.rs:21:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n21 |     total_chars -= i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp3ozxiice.rs:24:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n16  |   let total_chars = 0;\n17  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |     return lst1\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n17  |   for i in &lst1 {\n    |            +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp3ozxiice.rs:26:12\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n20 |   for i in lst2 {\n   |            ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n26 |     return lst2\n   |            ^^^^ value used here after move\n   |\nhelp: consider iterating over a s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = Vec::new();\n    for i in lst1 {\n        total_chars += i.len();\n    }\n    for i in lst2 {\n        if total_chars < i.len() {\n            total_match.push(i);\n        }\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmptp_vsv1o.rs:19:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n19 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `total_match` as mutable, as it is not declared as mutable\n  --> /tmp/tmptp_vsv1o.rs:23:13\n   |\n17 |     let total_match = Vec::new();\n   |         ----------- help: consider changing this to be mutable: `mut total_match`\n...\n23 |             total_match.push(i);\n   |             ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq3tfl7dq.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq3tfl7dq.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpq3tfl7dq.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpq3tfl7dq.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    total += i.len();\n  }\n  for i in lst2 {\n    if total < i.len() {\n      total += i.len();\n      result = result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpr7g64nbw.rs:24:16\n   |\n17 |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n24 |       result = result.push(i);\n   |                ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_count = 0;\n  let total_count_lst1 = 0;\n  let total_count_lst2 = 0;\n  for i in lst1 {\n    total_count += i.len();\n    total_count_lst1 += i.len();\n  }\n  for i in lst2 {\n    total_count += i.len();\n    total_count_lst2 += i.len();\n  }\n  if total_count_lst1 == total_count_lst2 {\n    return lst1;\n  } else if total_count_lst1 < total_count_lst2 {\n    return lst2;\n  } else {\n    return lst1;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: variable `total_count` is assigned to, but never used\n  --> /tmp/tmpnpl3up9i.rs:16:7\n   |\n16 |   let total_count = 0;\n   |       ^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_total_count` instead\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpnpl3up9i.rs:20:5\n   |\n16 |   let total_count = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_count`\n   |       help: consider making this binding mutable: `mut total_count`\n...\n20 |     total_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst1`\n  --> /tmp/tmpnpl3up9i.rs:21:5\n   |\n17 |   let total_count_lst1 = 0;\n   |       ----------------\n   |       |\n   |       first assignment to `total_count_lst1`\n   |       help: consider making this binding mutable: `mut total_count_lst1`\n...\n21 |     total_count_lst1 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpnpl3up9i.rs:24:5\n   |\n16 |   let total_count = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_count`\n   |       help: consider making this binding mutable: `mut total_count`\n...\n24 |     total_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst2`\n  --> /tmp/tmpnpl3up9i.rs:25:5\n   |\n18 |   let total_count_lst2 = 0;\n   |       ----------------\n   |       |\n   |       first assignment to `total_count_lst2`\n   |       help: consider making this binding mutable: `mut total_count_lst2`\n...\n25 |     total_count_lst2 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpnpl3up9i.rs:28:12\n    |\n15  | fn total_match(lst1: Vec<String>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_count = 0;\n    let total_count_lst2 = 0;\n    for i in lst1 {\n        total_count += i.len();\n    }\n    for i in lst2 {\n        total_count_lst2 += i.len();\n    }\n    if total_count == total_count_lst2 {\n        return lst1;\n    } else if total_count > total_count_lst2 {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpgviqku4s.rs:19:9\n   |\n16 |     let total_count = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_count`\n   |         help: consider making this binding mutable: `mut total_count`\n...\n19 |         total_count += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst2`\n  --> /tmp/tmpgviqku4s.rs:22:9\n   |\n17 |     let total_count_lst2 = 0;\n   |         ----------------\n   |         |\n   |         first assignment to `total_count_lst2`\n   |         help: consider making this binding mutable: `mut total_count_lst2`\n...\n22 |         total_count_lst2 += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpgviqku4s.rs:25:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n25  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpgviqku4s.rs:27:16\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |     for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n27 |         return lst2;\n   |                ^^^^ value us",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_count = 0;\n  let total_count_lst1 = 0;\n  let total_count_lst2 = 0;\n  for i in lst1 {\n    total_count += i.len();\n    total_count_lst1 += i.len();\n  }\n  for i in lst2 {\n    total_count += i.len();\n    total_count_lst2 += i.len();\n  }\n  if total_count_lst1 == total_count_lst2 {\n    return lst1;\n  } else if total_count_lst1 < total_count_lst2 {\n    return lst2;\n  } else {\n    return lst1;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: variable `total_count` is assigned to, but never used\n  --> /tmp/tmpnpl3up9i.rs:16:7\n   |\n16 |   let total_count = 0;\n   |       ^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_variables)]` on by default\n   = note: consider using `_total_count` instead\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpnpl3up9i.rs:20:5\n   |\n16 |   let total_count = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_count`\n   |       help: consider making this binding mutable: `mut total_count`\n...\n20 |     total_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst1`\n  --> /tmp/tmpnpl3up9i.rs:21:5\n   |\n17 |   let total_count_lst1 = 0;\n   |       ----------------\n   |       |\n   |       first assignment to `total_count_lst1`\n   |       help: consider making this binding mutable: `mut total_count_lst1`\n...\n21 |     total_count_lst1 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count`\n  --> /tmp/tmpnpl3up9i.rs:24:5\n   |\n16 |   let total_count = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_count`\n   |       help: consider making this binding mutable: `mut total_count`\n...\n24 |     total_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_count_lst2`\n  --> /tmp/tmpnpl3up9i.rs:25:5\n   |\n18 |   let total_count_lst2 = 0;\n   |       ----------------\n   |       |\n   |       first assignment to `total_count_lst2`\n   |       help: consider making this binding mutable: `mut total_count_lst2`\n...\n25 |     total_count_lst2 += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpnpl3up9i.rs:28:12\n    |\n15  | fn total_match(lst1: Vec<String>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::chars).reduce(0, (acc, char) => acc + char);\n        let lst2_chars = lst2.map(String::chars).reduce(0, (acc, char) => acc + char);\n        if (lst1_chars > lst2_chars) {\n            return lst1;\n        } else if (lst1_chars < lst2_chars) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpd__98qc2.rs:23:72\n   |\n23 |         let lst1_chars = lst1.map(String::chars).reduce(0, (acc, char) => acc + char);\n   |                                                                        ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_chars_lst1 = 0;\n    let total_chars_lst2 = 0;\n    for i in lst1 {\n        total_chars += i.length();\n        total_chars_lst1 += i.length();\n    }\n    for i in lst2 {\n        total_chars += i.length();\n        total_chars_lst2 += i.length();\n    }\n    if total_chars_lst1 < total_chars_lst2 {\n        return lst1;\n    } else if total_chars_lst2 < total_chars_lst1 {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpgsm5g84l.rs:20:26\n   |\n20 |         total_chars += i.length();\n   |                          ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpgsm5g84l.rs:21:31\n   |\n21 |         total_chars_lst1 += i.length();\n   |                               ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpgsm5g84l.rs:24:26\n   |\n24 |         total_chars += i.length();\n   |                          ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpgsm5g84l.rs:25:31\n   |\n25 |         total_chars_lst2 += i.length();\n   |                               ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count > lst2_count) {\n      return lst1;\n    } else {\n      return lst2;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp911ecne2.rs:27:10\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp911ecne2.rs:27:14\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp911ecne2.rs:27:16\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp911ecne2.rs:27:15\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp911ecne2.rs:27:16\n   |\n27 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp911ecne2.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp911ecne2.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_iter = Iterator::from(lst1);\n        let lst2_iter = Iterator::from(lst2);\n        let lst1_iter_len = Iterator::len(lst1_iter);\n        let lst2_iter_len = Iterator::len(lst2_iter);\n        let lst1_iter_index = 0;\n        let lst2_iter_index = 0;\n        let lst1_iter_index_len = Iterator::len(lst1_iter);\n        let lst2_iter_index_len = Iterator::len(lst2_iter);\n        let result = Vec::new();\n        while (lst1_iter_index < lst1_iter_index_len && lst2_iter_index < lst2_iter_index_len) {\n            let lst1_iter_val = Iterator::next(lst1_iter);\n            let lst2_iter_val = Iterator::next(lst2_iter);\n            if (lst1_iter_val < lst2_iter_val) {\n                result.append(lst1_iter_val);\n                lst1_iter_index += 1;\n            } else if (lst1_iter_val > lst2_iter_val) {\n                result.append(lst2_iter_val);\n                lst2_iter_index += 1;\n            } else {\n                result.append(lst1_iter_val);\n                lst1_iter_index += 1;\n                lst2_iter_index += 1;\n            }\n        }\n        while (l\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0h1nphuf.rs:63:3\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                                                     - unclosed delimiter\n...\n22 |     } else {\n   |            - this delimiter might not be properly closed...\n...\n50 | }\n   | - ...as it matches this but it has different indentation\n...\n63 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp0h1nphuf.rs:50:1\n   |\n49 |           while (l\n   |  _________-----_-\n   | |         |\n   | |         while parsing the body of this `while` expression\n50 | | }\n   | | ^\n   | | |\n   | |_expected `{`\n   |   this `while` condition successfully parsed\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp0h1nphuf.rs:49:15\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                                                     - closing delimiter possibly meant for this\n...\n49 |         while (l\n   |               ^ unclosed delimiter\n50 | }\n   | ^ mismatched closing delimiter\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0h1nphuf.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp0h1nphuf.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp0h1nphuf.rs:34:15\n   |\n34 |         while (lst1_iter_index < lst1_iter_index_len && lst2_iter_index < lst2_iter_index_len) {\n   |               ^                                                                              ^\n   |\nh",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  }\n  let lst1_total = 0;\n  let lst2_total = 0;\n  for (let i = 0; i < lst1_len; i++) {\n    lst1_total += lst1[i].len();\n  }\n  for (let i = 0; i < lst2_len; i++) {\n    lst2_total += lst2[i].len();\n  }\n  let result = Vec::new();\n  if (lst1_total < lst2_total) {\n    for (let i = 0; i < lst1_len; i++) {\n      result.push(lst1[i]);\n    }\n  } else {\n    for (let i = 0; i < lst2_len; i++) {\n      result.push(lst2[i]);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpsz9dqf43.rs:23:8\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpsz9dqf43.rs:23:12\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpsz9dqf43.rs:23:14\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpsz9dqf43.rs:23:13\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpsz9dqf43.rs:23:14\n   |\n23 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsz9dqf43.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1\n  } else if (lst1_len < lst2_len) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpycylxaqd.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpycylxaqd.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpycylxaqd.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpycylxaqd.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let count = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    count += i.len();\n  }\n  for i in lst2 {\n    count -= i.len();\n    if count < 0 {\n      result = result.concat(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpesclwifr.rs:24:23\n    |\n24  |       result = result.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpesclwifr.rs:24:23\n   |\n24 |       result = result.concat(i);\n   |                       ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0271.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        for (let i = lst1_len - 1; i >= lst2_len; i--) {\n            total_chars += lst1[i].len();\n        }\n    } else if (lst1_len < lst2_len) {\n        for (let i = lst2_len - 1; i >= lst1_len; i--) {\n            total_chars += lst2[i].len();\n        }\n    } else {\n        for (let i = lst1_len - 1; i >= 0; i--) {\n            total_chars += lst1[i].len();\n        }\n    }\n    let result = lst1.filter(x => x.len() < total_chars);\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp7sexq9g7.rs:20:14\n   |\n20 |         for (let i = lst1_len - 1; i >= lst2_len; i--) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp7sexq9g7.rs:20:18\n   |\n20 |         for (let i = lst1_len - 1; i >= lst2_len; i--) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp7sexq9g7.rs:20:20\n   |\n20 |         for (let i = lst1_len - 1; i >= lst2_len; i--) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp7sexq9g7.rs:20:19\n   |\n20 |         for (let i = lst1_len - 1; i >= lst2_len; i--) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp7sexq9g7.rs:20:20\n   |\n20 |         for (let i = lst1_len - 1; i >= lst2_len; i--) {\n   |                    ^ expected expression\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmp7sexq9g7.rs:24:14\n   |\n24 |         for (let i = lst2_len - 1; i >= lst1_len; i--) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp7sexq9g7.rs:24:18\n   |\n24 |         for (let i = lst2_len - 1; i >= lst1_len; i--) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp7sexq9g7.rs:24:20\n   |\n24 |         for (let i = lst2_len - 1; i >= lst1_len; i--) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp7sexq9g7.rs:24:19\n   |\n24 |         for (let i = lst2_len - 1; i >= lst1_len; i--) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp7sexq9g7.rs:24:20\n   |\n24 |   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count > lst2_count) {\n            return lst1;\n        } else if (lst1_count < lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplwq__3h8.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplwq__3h8.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplwq__3h8.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplwq__3h8.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplwq__3h8.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplwq__3h8.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplwq__3h8.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::length);\n        let lst2_chars = lst2.map(String::length);\n        let min_chars = lst1_chars.min();\n        let max_chars = lst2_chars.max();\n        if (min_chars < max_chars) {\n            return lst1;\n        } else if (min_chars > max_chars) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6cn6afoj.rs:18:8\n   |\n18 |     if (lst1_len < lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len < lst2_len) {\n18 +     if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6cn6afoj.rs:20:15\n   |\n20 |     } else if (lst1_len > lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len > lst2_len) {\n20 +     } else if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6cn6afoj.rs:27:12\n   |\n27 |         if (min_chars < max_chars) {\n   |            ^                     ^\n   |\nhelp: remove these parentheses\n   |\n27 -         if (min_chars < max_chars) {\n27 +         if min_chars < max_chars {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6cn6afoj.rs:29:19\n   |\n29 |         } else if (min_chars > max_chars) {\n   |                   ^                     ^\n   |\nhelp: remove these parentheses\n   |\n29 -         } else if (min_chars > max_chars) {\n29 +         } else if min_chars > max_chars {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp6cn6afoj.rs:16:25\n   |\n16 |     let lst1_len = lst1.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp6cn6afoj.rs:17:25\n   |\n17 |     let lst2_len = lst2.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmp6cn6afoj.rs:23:31\n    |\n23  |           let lst1_chars = lst1.map(String::length);\n    |                                 ^^^ `Vec<String>` is not an iterator\n    |\n    = note:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let result = Vec::new();\n    for i in lst1 {\n        if i.len() < lst2[0].len() {\n            count += 1;\n        }\n    }\n    for i in lst2 {\n        if i.len() < lst1[0].len() {\n            count += 1;\n        }\n    }\n    if count == 0 {\n        result = lst1;\n    } else {\n        result = lst2;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: value assigned to `result` is never read\n  --> /tmp/tmpj1z5p9x3.rs:17:9\n   |\n17 |     let result = Vec::new();\n   |         ^^^^^^\n   |\n   = note: `#[warn(unused_assignments)]` on by default\n   = help: maybe it is overwritten before being read?\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpj1z5p9x3.rs:20:13\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n20 |             count += 1;\n   |             ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: borrow of moved value: `lst1`\n   --> /tmp/tmpj1z5p9x3.rs:24:22\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |         if i.len() < lst1[0].len() {\n    |                      ^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |     for i in &lst1 {\n    |              +\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpj1z5p9x3.rs:25:13\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n25 |             count += 1;\n   |             ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `result`\n  --> /tmp/tmpj1z5p9x3.rs:29:9\n   |\n17 |     let result = Vec::new();\n   |         ------\n   |         |\n   |         first assignment to `result`\n   |         help: consider making this binding mutable: `mut result`\n...\n29 |         resu",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_match = Vec::new();\n  for i in lst1 {\n    total_chars += i.len();\n  }\n  for i in lst2 {\n    if total_chars < i.len() {\n      total_chars = i.len();\n      total_match = lst1;\n    }\n  }\n  return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp1gyqnznd.rs:19:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n19 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp1gyqnznd.rs:23:7\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n23 |       total_chars = i.len();\n   |       ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_match`\n  --> /tmp/tmp1gyqnznd.rs:24:7\n   |\n17 |   let total_match = Vec::new();\n   |       -----------\n   |       |\n   |       first assignment to `total_match`\n   |       help: consider making this binding mutable: `mut total_match`\n...\n24 |       total_match = lst1;\n   |       ^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp1gyqnznd.rs:24:21\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |       total_match = lst1;\n    |                     ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |   for i in &lst1 {\n    |            +\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0382, E0384.\nFor more information about an error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let count = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    count = count + i.len();\n  }\n  for i in lst2 {\n    count = count - i.len();\n    if count < 0 {\n      result = result.concat(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpb8_36fe_.rs:24:23\n    |\n24  |       result = result.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpb8_36fe_.rs:24:23\n   |\n24 |       result = result.concat(i);\n   |                       ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0271.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_count = 0;\n  let lst1_count = 0;\n  let lst2_count = 0;\n  for i in lst1 {\n    lst1_count += i.len();\n  }\n  for i in lst2 {\n    lst2_count += i.len();\n  }\n  if lst1_count > lst2_count {\n    return lst1;\n  } else if lst2_count > lst1_count {\n    return lst2;\n  } else {\n    for i in lst1 {\n      if i.len() < lst2_count {\n        total_count += i.len();\n      }\n    }\n    return Vec::new(total_count);\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpuzqkuu5s.rs:35:12\n    |\n35  |     return Vec::new(total_count);\n    |            ^^^^^^^^ ----------- supplied 1 argument\n    |            |\n    |            expected 0 arguments\n    |\nnote: associated function defined here\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxoe1bgfv.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxoe1bgfv.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxoe1bgfv.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxoe1bgfv.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxoe1bgfv.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxoe1bgfv.rs:18:8\n   |\n18 |     if (lst1_len < lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len < lst2_len) {\n18 +     if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxoe1bgfv.rs:20:15\n   |\n20 |     } else if (lst1_len > lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len > lst2_len) {\n20 +     } else if lst1_len > lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1\n  } else if (lst1_len < lst2_len) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpycylxaqd.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpycylxaqd.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpycylxaqd.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpycylxaqd.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len < lst2_len) {\n    return lst1\n  } else if (lst1_len > lst2_len) {\n    return lst2\n  } else {\n    let lst1_chars = lst1.map(String::chars).reduce(0, (a, b) => a + b);\n    let lst2_chars = lst2.map(String::chars).reduce(0, (a, b) => a + b);\n    if (lst1_chars < lst2_chars) {\n      return lst1\n    } else if (lst1_chars > lst2_chars) {\n      return lst2\n    } else {\n      return lst1\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpv486imyn.rs:23:63\n   |\n23 |     let lst1_chars = lst1.map(String::chars).reduce(0, (a, b) => a + b);\n   |                                                               ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let total = 0;\n    for i in lst1 {\n        count += 1;\n        total += i.len();\n    }\n    for i in lst2 {\n        count += 1;\n        total += i.len();\n    }\n    if count == 0 {\n        return lst1;\n    }\n    if total == 0 {\n        return lst2;\n    }\n    let result = Vec::new();\n    for i in lst1 {\n        if i.len() < lst2[0].len() {\n            result.push(i);\n        }\n    }\n    for i in lst2 {\n        if i.len() < lst1[0].len() {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzz_6juv7.rs:19:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n19 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmpzz_6juv7.rs:20:9\n   |\n17 |     let total = 0;\n   |         -----\n   |         |\n   |         first assignment to `total`\n   |         help: consider making this binding mutable: `mut total`\n...\n20 |         total += i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzz_6juv7.rs:23:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n23 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmpzz_6juv7.rs:24:9\n   |\n17 |     let total = 0;\n   |         -----\n   |         |\n   |         first assignment to `total`\n   |         help: consider making this binding mutable: `mut total`\n...\n24 |         total += i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpzz_6juv7.rs:27:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n27  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: conside",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_chars = lst1.map(String::chars);\n        let lst2_chars = lst2.map(String::chars);\n        let lst1_chars_len = lst1_chars.len();\n        let lst2_chars_len = lst2_chars.len();\n        let lst1_chars_count = 0;\n        let lst2_chars_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            let lst1_char = lst1[i];\n            let lst2_char = lst2[i];\n            if (lst1_char == lst2_char) {\n                lst1_chars_count += 1;\n                lst2_chars_count += 1;\n            } else {\n                break;\n            }\n        }\n        if (lst1_chars_count == lst2_chars_len) {\n            return lst1;\n        } else if (lst2_chars_count == lst1_chars_len) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmph_r0nnh2.rs:31:14\n   |\n31 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmph_r0nnh2.rs:31:18\n   |\n31 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmph_r0nnh2.rs:31:20\n   |\n31 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmph_r0nnh2.rs:31:19\n   |\n31 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmph_r0nnh2.rs:31:20\n   |\n31 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph_r0nnh2.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmph_r0nnh2.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: `Vec<String>` is not an iterator\n   --> /tmp/tmph_r0nnh2.rs:25:31\n    |\n25  |           let lst1_chars = lst1.map(String::chars);\n    |                                 ^^^ `Vec<String>` is not an iterator\n    |\n    = note: the following trait bounds were not satisfied:\n            `Vec<String>: Iterator`\n            which is required by `&mut Vec<String>: Iterator`\n            `[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1\n    } else if (lst1_len < lst2_len) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpiq5sci0h.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_lst1 = lst1.map(String::length);\n  let total_lst2 = lst2.map(String::length);\n  let total_lst1_length = total_lst1.reduce(0, (a, b) => a + b);\n  let total_lst2_length = total_lst2.reduce(0, (a, b) => a + b);\n  if (total_lst1_length == total_lst2_length) {\n    return lst1\n  } else if (total_lst1_length < total_lst2_length) {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp7h3kqvu6.rs:19:55\n   |\n19 |   let total_lst1_length = total_lst1.reduce(0, (a, b) => a + b);\n   |                                                       ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len > lst2_len) {\n    return lst1\n  } else if (lst1_len < lst2_len) {\n    return lst2\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1\n    } else if (lst1_count > lst2_count) {\n      return lst2\n    } else {\n      return lst1\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp99tbmohr.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp99tbmohr.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp99tbmohr.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp99tbmohr.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp99tbmohr.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp99tbmohr.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp99tbmohr.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp99tbmohr.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp99tbmohr.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len < lst2_len) {\n    return lst1;\n  } else if (lst1_len > lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    let result = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      result = lst1;\n    } else if (lst1_count > lst2_count) {\n      result = lst2;\n    } else {\n      result = lst1;\n    }\n    return result;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp6e5xztg_.rs:26:10\n   |\n26 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp6e5xztg_.rs:26:14\n   |\n26 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp6e5xztg_.rs:26:16\n   |\n26 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp6e5xztg_.rs:26:15\n   |\n26 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp6e5xztg_.rs:26:16\n   |\n26 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6e5xztg_.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp6e5xztg_.rs:20:13\n   |\n20 |   } else if (lst1_len > lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len > lst2_len) {\n20 +   } else if lst1_len > lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp6e5xztg_.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmp6e5xztg_.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::length);\n        let lst2_chars = lst2.map(String::length);\n        let lst1_chars_len = lst1_chars.reduce((a, b) => a + b);\n        let lst2_chars_len = lst2_chars.reduce((a, b) => a + b);\n        if (lst1_chars_len > lst2_chars_len) {\n            return lst1;\n        } else if (lst1_chars_len < lst2_chars_len) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmp8zlumxwp.rs:25:55\n   |\n25 |         let lst1_chars_len = lst1_chars.reduce((a, b) => a + b);\n   |                                                       ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count > lst2_count) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpze3s3eoy.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpze3s3eoy.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpze3s3eoy.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpze3s3eoy.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpze3s3eoy.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpze3s3eoy.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpze3s3eoy.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpze3s3eoy.rs:16:25\n   |\n16 |     let lst1_len = lst1.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpze3s3eoy.rs:17:25\n   |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = Vec::new();\n    for i in lst1 {\n        total_chars += i.length();\n    }\n    for i in lst2 {\n        if total_chars < i.length() {\n            total_match.push(i);\n        }\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvwv15w76.rs:19:26\n   |\n19 |         total_chars += i.length();\n   |                          ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvwv15w76.rs:22:28\n   |\n22 |         if total_chars < i.length() {\n   |                            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = Vec::new();\n    for i in lst1 {\n        total_chars += i.length();\n    }\n    for i in lst2 {\n        if total_chars < i.length() {\n            total_match.push(i);\n        }\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvwv15w76.rs:19:26\n   |\n19 |         total_chars += i.length();\n   |                          ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpvwv15w76.rs:22:28\n   |\n22 |         if total_chars < i.length() {\n   |                            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let count = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    count = count + i.len();\n  }\n  for i in lst2 {\n    count = count - i.len();\n    if count < 0 {\n      result = result.concat(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpb8_36fe_.rs:24:23\n    |\n24  |       result = result.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpb8_36fe_.rs:24:23\n   |\n24 |       result = result.concat(i);\n   |                       ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0271.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len < lst2_len) {\n    return lst1\n  } else if (lst1_len > lst2_len) {\n    return lst2\n  } else {\n    let lst1_chars = lst1.map(String::chars);\n    let lst2_chars = lst2.map(String::chars);\n    let lst1_chars_len = lst1_chars.len();\n    let lst2_chars_len = lst2_chars.len();\n    if (lst1_chars_len < lst2_chars_len) {\n      return lst1\n    } else if (lst1_chars_len > lst2_chars_len) {\n      return lst2\n    } else {\n      let lst1_chars_set = lst1_chars.to_set();\n      let lst2_chars_set = lst2_chars.to_set();\n      let lst1_chars_set_len = lst1_chars_set.len();\n      let lst2_chars_set_len = lst2_chars_set.len();\n      if (lst1_chars_set_len < lst2_chars_set_len) {\n        return lst1\n      } else if (lst1_chars_set_len > lst2_chars_set_len) {\n        return lst2\n      } else {\n        return lst1\n      }\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphfxxwrsc.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphfxxwrsc.rs:20:13\n   |\n20 |   } else if (lst1_len > lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len > lst2_len) {\n20 +   } else if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphfxxwrsc.rs:27:8\n   |\n27 |     if (lst1_chars_len < lst2_chars_len) {\n   |        ^                               ^\n   |\nhelp: remove these parentheses\n   |\n27 -     if (lst1_chars_len < lst2_chars_len) {\n27 +     if lst1_chars_len < lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphfxxwrsc.rs:29:15\n   |\n29 |     } else if (lst1_chars_len > lst2_chars_len) {\n   |               ^                               ^\n   |\nhelp: remove these parentheses\n   |\n29 -     } else if (lst1_chars_len > lst2_chars_len) {\n29 +     } else if lst1_chars_len > lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphfxxwrsc.rs:36:10\n   |\n36 |       if (lst1_chars_set_len < lst2_chars_set_len) {\n   |          ^                                       ^\n   |\nhelp: remove these parentheses\n   |\n36 -       if (lst1_chars_set_len < lst2_chars_set_len) {\n36 +       if lst1_chars_set_len < lst2_chars_set_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmphfxxwrsc.rs:38:17\n   |\n38 |       } else if (lst1_chars_set_len > lst2_chars_set_len) {\n   |                 ^                                       ^\n   |\nhelp: remove these parentheses\n   |\n38 -       } else if (lst1_chars_set_len > lst2_chars_set_len) {\n38 +       } else if lst1_chars_set_len > lst2_cha",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_total = 0;\n        let lst2_total = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            lst1_total += lst1[i].len();\n            lst2_total += lst2[i].len();\n            if (lst1_total < lst2_total) {\n                return lst1;\n            } else if (lst1_total > lst2_total) {\n                return lst2;\n            }\n        }\n    }\n    return lst1;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmp32pn10zd.rs:27:14\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmp32pn10zd.rs:27:18\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmp32pn10zd.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmp32pn10zd.rs:27:19\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmp32pn10zd.rs:27:20\n   |\n27 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp32pn10zd.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp32pn10zd.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let result = Vec::new();\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                result.push(lst1[i]);\n            }\n        }\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpodfje5ij.rs:24:14\n   |\n24 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpodfje5ij.rs:24:18\n   |\n24 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpodfje5ij.rs:24:20\n   |\n24 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpodfje5ij.rs:24:19\n   |\n24 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpodfje5ij.rs:24:20\n   |\n24 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpodfje5ij.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpodfje5ij.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len < lst2_len) {\n    return lst1;\n  } else if (lst1_len > lst2_len) {\n    return lst2;\n  } else {\n    let lst1_chars = lst1.map(String::length);\n    let lst2_chars = lst2.map(String::length);\n    let lst1_chars_count = lst1_chars.reduce((a, b) => a + b);\n    let lst2_chars_count = lst2_chars.reduce((a, b) => a + b);\n    if (lst1_chars_count < lst2_chars_count) {\n      return lst1;\n    } else if (lst1_chars_count > lst2_chars_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpxvnkzc3m.rs:25:53\n   |\n25 |     let lst1_chars_count = lst1_chars.reduce((a, b) => a + b);\n   |                                                     ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let total_len = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        total_len += lst1[i].len();\n    }\n    for (let i = 0; i < lst2_len; i++) {\n        total_len -= lst2[i].len();\n    }\n    if (total_len < 0) {\n        return lst2;\n    }\n    let lst3 = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n        if (lst1[i].len() <= total_len) {\n            lst3.push(lst1[i]);\n        }\n    }\n    for (let i = 0; i < lst2_len; i++) {\n        if (lst2[i].len() <= total_len) {\n            lst3.push(lst2[i]);\n        }\n    }\n    return lst3;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpopqc3kal.rs:22:10\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpopqc3kal.rs:22:14\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpopqc3kal.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpopqc3kal.rs:22:15\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpopqc3kal.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpopqc3kal.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let result = Vec::new();\n    for i in 0..lst1_len {\n        let lst1_chars = lst1[i];\n        let lst2_chars = lst2[i];\n        let lst1_chars_len = lst1_chars.len();\n        let lst2_chars_len = lst2_chars.len();\n        if (lst1_chars_len < lst2_chars_len) {\n            break;\n        }\n        if (lst1_chars_len > lst2_chars_len) {\n            continue;\n        }\n        let lst1_chars_match = lst1_chars.match(lst2_chars);\n        if (lst1_chars_match.is_none()) {\n            break;\n        }\n        result.push(lst1_chars);\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `match`\n  --> /tmp/tmp5mzebopb.rs:33:43\n   |\n33 |         let lst1_chars_match = lst1_chars.match(lst2_chars);\n   |                                           ^^^^^ expected identifier, found keyword\n   |\nhelp: escape `match` to use it as an identifier\n   |\n33 |         let lst1_chars_match = lst1_chars.r#match(lst2_chars);\n   |                                           ++\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5mzebopb.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5mzebopb.rs:27:12\n   |\n27 |         if (lst1_chars_len < lst2_chars_len) {\n   |            ^                               ^\n   |\nhelp: remove these parentheses\n   |\n27 -         if (lst1_chars_len < lst2_chars_len) {\n27 +         if lst1_chars_len < lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5mzebopb.rs:30:12\n   |\n30 |         if (lst1_chars_len > lst2_chars_len) {\n   |            ^                               ^\n   |\nhelp: remove these parentheses\n   |\n30 -         if (lst1_chars_len > lst2_chars_len) {\n30 +         if lst1_chars_len > lst2_chars_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5mzebopb.rs:34:12\n   |\n34 |         if (lst1_chars_match.is_none()) {\n   |            ^                          ^\n   |\nhelp: remove these parentheses\n   |\n34 -         if (lst1_chars_match.is_none()) {\n34 +         if lst1_chars_match.is_none() {\n   | \n\nerror[E0599]: no method named `r#match` found for struct `String` in the current scope\n  --> /tmp/tmp5mzebopb.rs:33:43\n   |\n33 |         let lst1_chars_match = lst1_chars.match(lst2_chars);\n   |                                           ^^^^^ help: there is an associated function with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    let lst1_total_chars = 0;\n    let lst2_total_chars = 0;\n    let result = Vec::new();\n    for i in 0..lst1_len {\n        lst1_total_chars += lst1[i].length();\n    }\n    for i in 0..lst2_len {\n        lst2_total_chars += lst2[i].length();\n    }\n    if lst1_total_chars < lst2_total_chars {\n        for i in 0..lst1_len {\n            result.push(lst1[i]);\n        }\n    } else if lst1_total_chars > lst2_total_chars {\n        for i in 0..lst2_len {\n            result.push(lst2[i]);\n        }\n    } else {\n        for i in 0..lst1_len {\n            result.push(lst1[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpd67363ik.rs:16:25\n   |\n16 |     let lst1_len = lst1.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpd67363ik.rs:17:25\n   |\n17 |     let lst2_len = lst2.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpd67363ik.rs:22:37\n   |\n22 |         lst1_total_chars += lst1[i].length();\n   |                                     ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpd67363ik.rs:25:37\n   |\n25 |         lst2_total_chars += lst2[i].length();\n   |                                     ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_count = 0;\n    let lst2_count = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      if (lst1[i] < lst2[i]) {\n        lst1_count += 1;\n      } else if (lst1[i] > lst2[i]) {\n        lst2_count += 1;\n      }\n    }\n    if (lst1_count < lst2_count) {\n      return lst1;\n    } else if (lst1_count > lst2_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxn9r8_xq.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxn9r8_xq.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxn9r8_xq.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxn9r8_xq.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxn9r8_xq.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxn9r8_xq.rs:18:6\n   |\n18 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len > lst2_len) {\n18 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxn9r8_xq.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpxn9r8_xq.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpxn9r8_xq.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        for (let i = 0; i < lst1_len - lst2_len; i++) {\n            total_chars += lst1[i].len();\n        }\n    } else if (lst1_len < lst2_len) {\n        for (let i = 0; i < lst2_len - lst1_len; i++) {\n            total_chars += lst2[i].len();\n        }\n    } else {\n        for (let i = 0; i < lst1_len; i++) {\n            total_chars += lst1[i].len();\n        }\n    }\n    let result = lst1.filter(x => x.len() < total_chars);\n    if (result.len() == 0) {\n        return lst2;\n    } else {\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpnq7tfop_.rs:20:14\n   |\n20 |         for (let i = 0; i < lst1_len - lst2_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpnq7tfop_.rs:20:18\n   |\n20 |         for (let i = 0; i < lst1_len - lst2_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpnq7tfop_.rs:20:20\n   |\n20 |         for (let i = 0; i < lst1_len - lst2_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpnq7tfop_.rs:20:19\n   |\n20 |         for (let i = 0; i < lst1_len - lst2_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpnq7tfop_.rs:20:20\n   |\n20 |         for (let i = 0; i < lst1_len - lst2_len; i++) {\n   |                    ^ expected expression\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpnq7tfop_.rs:24:14\n   |\n24 |         for (let i = 0; i < lst2_len - lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpnq7tfop_.rs:24:18\n   |\n24 |         for (let i = 0; i < lst2_len - lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpnq7tfop_.rs:24:20\n   |\n24 |         for (let i = 0; i < lst2_len - lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpnq7tfop_.rs:24:19\n   |\n24 |         for (let i = 0; i < lst2_len - lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpnq7tfop_.rs:24:20\n   |\n24 |         for",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        lst1_total += lst1[i].length();\n        lst2_total += lst2[i].length();\n        if (lst1_total < lst2_total) {\n            return lst1;\n        }\n    }\n    return lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyv6z2t8s.rs:23:10\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyv6z2t8s.rs:23:14\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyv6z2t8s.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyv6z2t8s.rs:23:15\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyv6z2t8s.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyv6z2t8s.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpyv6z2t8s.rs:16:25\n   |\n16 |     let lst1_len = lst1.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpyv6z2t8s.rs:17:25\n   |\n17 |     let lst2_len = lst2.length();\n   |                         ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2.filter(x => x.len() < lst1_len);\n    } else {\n        return lst1.filter(x => x.len() > lst2_len);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpc_muj0yt.rs:21:30\n   |\n21 |         return lst2.filter(x => x.len() < lst1_len);\n   |                              ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_match = false;\n  for i in lst1 {\n    total_chars += i.len();\n    if total_chars < lst2.len() {\n      total_match = true;\n      break;\n    }\n  }\n  if total_match {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp9onojna4.rs:19:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n19 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_match`\n  --> /tmp/tmp9onojna4.rs:21:7\n   |\n17 |   let total_match = false;\n   |       -----------\n   |       |\n   |       first assignment to `total_match`\n   |       help: consider making this binding mutable: `mut total_match`\n...\n21 |       total_match = true;\n   |       ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp9onojna4.rs:26:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n26  |     return lst1\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |   for i in &lst1 {\n    |            +\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0382, E0384.\nFor more information about an error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let count = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    count = count + i.len();\n  }\n  for i in lst2 {\n    count = count - i.len();\n    if count < 0 {\n      result = result.concat(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpb8_36fe_.rs:24:23\n    |\n24  |       result = result.concat(i);\n    |                       ^^^^^^ - supplied 1 argument\n    |                       |\n    |                       expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmpb8_36fe_.rs:24:23\n   |\n24 |       result = result.concat(i);\n   |                       ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0271.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        lst1_total += lst1[i].len();\n        lst2_total += lst2[i].len();\n        if (lst1_total < lst2_total) {\n            return lst1;\n        }\n    }\n    return lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpukximaal.rs:23:10\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpukximaal.rs:23:14\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpukximaal.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpukximaal.rs:23:15\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpukximaal.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpukximaal.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_match = false;\n  for i in lst1 {\n    total_chars += i.len();\n  }\n  for i in lst2 {\n    if total_chars < i.len() {\n      total_match = true;\n      break;\n    }\n  }\n  if total_match {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp7gfx8w1d.rs:19:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n19 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_match`\n  --> /tmp/tmp7gfx8w1d.rs:23:7\n   |\n17 |   let total_match = false;\n   |       -----------\n   |       |\n   |       first assignment to `total_match`\n   |       help: consider making this binding mutable: `mut total_match`\n...\n23 |       total_match = true;\n   |       ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp7gfx8w1d.rs:28:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n28  |     return lst1\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |   for i in &lst1 {\n    |            +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp7gfx8w1d.rs:30:12\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n21 |   for i in lst2 {\n   |            ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n30 |     return lst2\n   |            ^^^^ value used here after move\n   |\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len < lst2_len) {\n    return lst1\n  } else if (lst1_len > lst2_len) {\n    return lst2\n  } else {\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1_len; i++) {\n      lst1_total += lst1[i].len();\n      lst2_total += lst2[i].len();\n    }\n    if (lst1_total < lst2_total) {\n      return lst1\n    } else if (lst1_total > lst2_total) {\n      return lst2\n    } else {\n      return lst1\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmplothm68b.rs:25:10\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmplothm68b.rs:25:14\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmplothm68b.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmplothm68b.rs:25:15\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmplothm68b.rs:25:16\n   |\n25 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplothm68b.rs:18:6\n   |\n18 |   if (lst1_len < lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len < lst2_len) {\n18 +   if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmplothm68b.rs:20:13\n   |\n20 |   } else if (lst1_len > lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len > lst2_len) {\n20 +   } else if lst1_len > lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpixch8w20.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpixch8w20.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpixch8w20.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpixch8w20.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpixch8w20.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let len1 = lst1.length();\n    let len2 = lst2.length();\n    if (len1 > len2) {\n        return lst2;\n    } else if (len1 < len2) {\n        return lst1;\n    } else {\n        let res = Vec::new();\n        for (let i = 0; i < len1; i++) {\n            if (lst1[i] < lst2[i]) {\n                res.push(lst1[i]);\n            }\n        }\n        return res;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpua3gcz63.rs:24:14\n   |\n24 |         for (let i = 0; i < len1; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpua3gcz63.rs:24:18\n   |\n24 |         for (let i = 0; i < len1; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpua3gcz63.rs:24:20\n   |\n24 |         for (let i = 0; i < len1; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpua3gcz63.rs:24:19\n   |\n24 |         for (let i = 0; i < len1; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpua3gcz63.rs:24:20\n   |\n24 |         for (let i = 0; i < len1; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpua3gcz63.rs:18:8\n   |\n18 |     if (len1 > len2) {\n   |        ^           ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (len1 > len2) {\n18 +     if len1 > len2 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpua3gcz63.rs:20:15\n   |\n20 |     } else if (len1 < len2) {\n   |               ^           ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (len1 < len2) {\n20 +     } else if len1 < len2 {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpua3gcz63.rs:16:21\n   |\n16 |     let len1 = lst1.length();\n   |                     ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpua3gcz63.rs:17:21\n   |\n17 |     let len2 = lst2.length();\n   |                     ^^^^^^ help: there is an associ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst1.filter(x => x.len() < lst2_len);\n    } else {\n        return lst2.filter(x => x.len() < lst1_len);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmppveoshg1.rs:21:30\n   |\n21 |         return lst1.filter(x => x.len() < lst2_len);\n   |                              ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2.filter(x => x.len() < lst1_len);\n    } else {\n        return lst1.filter(x => x.len() < lst2_len);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpljg_mbvb.rs:21:30\n   |\n21 |         return lst2.filter(x => x.len() < lst1_len);\n   |                              ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let total_len = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        total_len += lst1[i].len();\n    }\n    for (let i = 0; i < lst2_len; i++) {\n        total_len -= lst2[i].len();\n    }\n    let result = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n        if (lst1[i].len() < total_len) {\n            result.push(lst1[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpw2a_e2tk.rs:22:10\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpw2a_e2tk.rs:22:14\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpw2a_e2tk.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpw2a_e2tk.rs:22:15\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpw2a_e2tk.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpw2a_e2tk.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let lst1_count = 0;\n    let lst2_count = 0;\n    let result = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n        let lst1_char = lst1[i];\n        let lst2_char = lst2[i];\n        if (lst1_char < lst2_char) {\n            lst1_count += 1;\n        } else if (lst1_char > lst2_char) {\n            lst2_count += 1;\n        } else {\n            result = result.concat(lst1);\n        }\n    }\n    if (lst1_count == lst2_count) {\n        return result.concat(lst1);\n    } else {\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxqb49mml.rs:24:10\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxqb49mml.rs:24:14\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxqb49mml.rs:24:16\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxqb49mml.rs:24:15\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxqb49mml.rs:24:16\n   |\n24 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxqb49mml.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    for (i in 0..lst1_len) {\n      total_chars += lst1[i].len();\n    }\n    for (i in 0..lst2_len) {\n      total_chars -= lst2[i].len();\n    }\n    if (total_chars < 0) {\n      return lst1;\n    } else {\n      return lst2;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmps23adie4.rs:24:12\n   |\n24 |     for (i in 0..lst1_len) {\n   |            ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmps23adie4.rs:24:9\n   |\n24 |     for (i in 0..lst1_len) {\n   |         ^                ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n24 -     for (i in 0..lst1_len) {\n24 +     for i in 0..lst1_len {\n   | \n\nerror: expected one of `)`, `,`, `@`, or `|`, found keyword `in`\n  --> /tmp/tmps23adie4.rs:27:12\n   |\n27 |     for (i in 0..lst2_len) {\n   |            ^^ expected one of `)`, `,`, `@`, or `|`\n\nerror: unexpected parentheses surrounding `for` loop head\n  --> /tmp/tmps23adie4.rs:27:9\n   |\n27 |     for (i in 0..lst2_len) {\n   |         ^                ^\n   |\nhelp: remove parentheses in `for` loop\n   |\n27 -     for (i in 0..lst2_len) {\n27 +     for i in 0..lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmps23adie4.rs:19:6\n   |\n19 |   if (lst1_len > lst2_len) {\n   |      ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n19 -   if (lst1_len > lst2_len) {\n19 +   if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmps23adie4.rs:21:13\n   |\n21 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n21 -   } else if (lst1_len < lst2_len) {\n21 +   } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmps23adie4.rs:30:8\n   |\n30 |     if (total_chars < 0) {\n   |        ^               ^\n   |\nhelp: remove these parentheses\n   |\n30 -     if (total_chars < 0) {\n30 +     if total_chars < 0 {\n   | \n\nerror: aborting due to 4 previous errors; 3 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_match = false;\n  for i in lst1 {\n    total_chars += i.len();\n  }\n  for i in lst2 {\n    if total_chars < i.len() {\n      total_chars = i.len();\n      total_match = true;\n    }\n  }\n  if total_match {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpmkrxaj9u.rs:19:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n19 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmpmkrxaj9u.rs:23:7\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n23 |       total_chars = i.len();\n   |       ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_match`\n  --> /tmp/tmpmkrxaj9u.rs:24:7\n   |\n17 |   let total_match = false;\n   |       -----------\n   |       |\n   |       first assignment to `total_match`\n   |       help: consider making this binding mutable: `mut total_match`\n...\n24 |       total_match = true;\n   |       ^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpmkrxaj9u.rs:28:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n28  |     return lst1;\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n18  |   for i in &lst1 {\n    |            +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmpmkrxaj9u.rs:30:12\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<Stri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len < lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2;\n    } else {\n        let lst1_count = 0;\n        let lst2_count = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            if (lst1[i] < lst2[i]) {\n                lst1_count += 1;\n            } else if (lst1[i] > lst2[i]) {\n                lst2_count += 1;\n            }\n        }\n        if (lst1_count < lst2_count) {\n            return lst1;\n        } else if (lst1_count > lst2_count) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpxoe1bgfv.rs:25:14\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpxoe1bgfv.rs:25:18\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpxoe1bgfv.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpxoe1bgfv.rs:25:19\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpxoe1bgfv.rs:25:20\n   |\n25 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxoe1bgfv.rs:18:8\n   |\n18 |     if (lst1_len < lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len < lst2_len) {\n18 +     if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpxoe1bgfv.rs:20:15\n   |\n20 |     } else if (lst1_len > lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len > lst2_len) {\n20 +     } else if lst1_len > lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 2 warnings emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.len();\n  let lst2_len = lst2.len();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len > lst2_len) {\n    return lst1.filter(x => x.len() < lst2_len);\n  } else {\n    return lst2.filter(x => x.len() < lst1_len);\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpc3eabopd.rs:21:26\n   |\n21 |     return lst1.filter(x => x.len() < lst2_len);\n   |                          ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let lst1_total = 0;\n    let lst2_total = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        lst1_total += lst1[i].len();\n    }\n    for (let i = 0; i < lst2_len; i++) {\n        lst2_total += lst2[i].len();\n    }\n    let lst1_less = lst1_total < lst2_total;\n    let lst2_less = lst2_total < lst1_total;\n    let result = lst1_less ? lst1 : lst2;\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmporp_j72e.rs:23:10\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmporp_j72e.rs:23:14\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmporp_j72e.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmporp_j72e.rs:23:15\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmporp_j72e.rs:23:16\n   |\n23 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmporp_j72e.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq3tfl7dq.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpq3tfl7dq.rs:20:13\n   |\n20 |   } else if (lst1_len < lst2_len) {\n   |             ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -   } else if (lst1_len < lst2_len) {\n20 +   } else if lst1_len < lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpq3tfl7dq.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpq3tfl7dq.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  let lst1_total = 0;\n  let lst2_total = 0;\n  let result = Vec::new();\n  for i in 0..lst1_len {\n    lst1_total += lst1[i].length();\n  }\n  for i in 0..lst2_len {\n    lst2_total += lst2[i].length();\n  }\n  if (lst1_total < lst2_total) {\n    for i in 0..lst1_len {\n      result.push(lst1[i]);\n    }\n  } else if (lst1_total > lst2_total) {\n    for i in 0..lst2_len {\n      result.push(lst2[i]);\n    }\n  } else {\n    for i in 0..lst1_len {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpununkvfj.rs:27:6\n   |\n27 |   if (lst1_total < lst2_total) {\n   |      ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n27 -   if (lst1_total < lst2_total) {\n27 +   if lst1_total < lst2_total {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpununkvfj.rs:31:13\n   |\n31 |   } else if (lst1_total > lst2_total) {\n   |             ^                       ^\n   |\nhelp: remove these parentheses\n   |\n31 -   } else if (lst1_total > lst2_total) {\n31 +   } else if lst1_total > lst2_total {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpununkvfj.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpununkvfj.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpununkvfj.rs:22:27\n   |\n22 |     lst1_total += lst1[i].length();\n   |                           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpununkvfj.rs:25:27\n   |\n25 |     lst2_total += lst2[i].length();\n   |                           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_len = lst1.len();\n        let lst2_len = lst2.len();\n        let lst1_index = 0;\n        let lst2_index = 0;\n        let result = Vec::new();\n        while (lst1_index < lst1_len && lst2_index < lst2_len) {\n            let lst1_char = lst1[lst1_index];\n            let lst2_char = lst2[lst2_index];\n            if (lst1_char == lst2_char) {\n                result.push(lst1_char);\n                lst1_index += 1;\n                lst2_index += 1;\n            } else if (lst1_char < lst2_char) {\n                lst1_index += 1;\n            } else {\n                lst2_index += 1;\n            }\n        }\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpa3_1fosv.rs:18:8\n   |\n18 |     if (lst1_len > lst2_len) {\n   |        ^                   ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len > lst2_len) {\n18 +     if lst1_len > lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpa3_1fosv.rs:20:15\n   |\n20 |     } else if (lst1_len < lst2_len) {\n   |               ^                   ^\n   |\nhelp: remove these parentheses\n   |\n20 -     } else if (lst1_len < lst2_len) {\n20 +     } else if lst1_len < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpa3_1fosv.rs:28:15\n   |\n28 |         while (lst1_index < lst1_len && lst2_index < lst2_len) {\n   |               ^                                              ^\n   |\nhelp: remove these parentheses\n   |\n28 -         while (lst1_index < lst1_len && lst2_index < lst2_len) {\n28 +         while lst1_index < lst1_len && lst2_index < lst2_len {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpa3_1fosv.rs:31:16\n   |\n31 |             if (lst1_char == lst2_char) {\n   |                ^                      ^\n   |\nhelp: remove these parentheses\n   |\n31 -             if (lst1_char == lst2_char) {\n31 +             if lst1_char == lst2_char {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpa3_1fosv.rs:35:23\n   |\n35 |             } else if (lst1_char < lst2_char) {\n   |                       ^                     ^\n   |\nhelp: remove these parentheses\n   |\n35 -             } else if (lst1_char < lst2_char) {\n35 +             } else if lst1_char < lst2_char {\n   | \n\nerror[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmpa3_1fosv.rs:29:29\n   |\n29 |             let lst1_char = lst1[lst1_index];\n   |                             ^^^^^^^^^^^^^^^^\n   |                             |\n   |                             move occurs because value has type `String`, which does no",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = Vec::new();\n    for i in lst1 {\n        total_chars += i.len();\n    }\n    for i in lst2 {\n        if total_chars < i.len() {\n            total_match.push(i);\n        }\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmptp_vsv1o.rs:19:9\n   |\n16 |     let total_chars = 0;\n   |         -----------\n   |         |\n   |         first assignment to `total_chars`\n   |         help: consider making this binding mutable: `mut total_chars`\n...\n19 |         total_chars += i.len();\n   |         ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `total_match` as mutable, as it is not declared as mutable\n  --> /tmp/tmptp_vsv1o.rs:23:13\n   |\n17 |     let total_match = Vec::new();\n   |         ----------- help: consider changing this to be mutable: `mut total_match`\n...\n23 |             total_match.push(i);\n   |             ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.length();\n    let lst2_len = lst2.length();\n    if (lst1_len > lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst2;\n    } else {\n        let lst1_chars = lst1.map(String::length).reduce(0, (a, b) => a + b);\n        let lst2_chars = lst2.map(String::length).reduce(0, (a, b) => a + b);\n        if (lst1_chars > lst2_chars) {\n            return lst1;\n        } else if (lst1_chars < lst2_chars) {\n            return lst2;\n        } else {\n            return lst1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmpofpfpk08.rs:23:68\n   |\n23 |         let lst1_chars = lst1.map(String::length).reduce(0, (a, b) => a + b);\n   |                                                                    ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total = 0;\n  let result = Vec::new();\n  for i in lst1 {\n    total += i.len();\n  }\n  for i in lst2 {\n    if total < i.len() {\n      total += i.len();\n      result = result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpr7g64nbw.rs:24:16\n   |\n17 |   let result = Vec::new();\n   |                ---------- expected due to this value\n...\n24 |       result = result.push(i);\n   |                ^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  let lst1_total = 0;\n  let lst2_total = 0;\n  let result = Vec::new();\n  for i in 0..lst1_len {\n    lst1_total += lst1[i].length();\n  }\n  for i in 0..lst2_len {\n    lst2_total += lst2[i].length();\n  }\n  if (lst1_total < lst2_total) {\n    for i in 0..lst1_len {\n      result.push(lst1[i]);\n    }\n  } else if (lst1_total > lst2_total) {\n    for i in 0..lst2_len {\n      result.push(lst2[i]);\n    }\n  } else {\n    for i in 0..lst1_len {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpununkvfj.rs:27:6\n   |\n27 |   if (lst1_total < lst2_total) {\n   |      ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n27 -   if (lst1_total < lst2_total) {\n27 +   if lst1_total < lst2_total {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpununkvfj.rs:31:13\n   |\n31 |   } else if (lst1_total > lst2_total) {\n   |             ^                       ^\n   |\nhelp: remove these parentheses\n   |\n31 -   } else if (lst1_total > lst2_total) {\n31 +   } else if lst1_total > lst2_total {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpununkvfj.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpununkvfj.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpununkvfj.rs:22:27\n   |\n22 |     lst1_total += lst1[i].length();\n   |                           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpununkvfj.rs:25:27\n   |\n25 |     lst2_total += lst2[i].length();\n   |                           ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    }\n    let total_chars = 0;\n    for (let i = 0; i < lst1_len; i++) {\n        total_chars += lst1[i].len();\n    }\n    for (let i = 0; i < lst2_len; i++) {\n        total_chars -= lst2[i].len();\n    }\n    let result = Vec::new();\n    for (let i = 0; i < lst1_len; i++) {\n        if (lst1[i].len() < total_chars) {\n            result.push(lst1[i]);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmprtpgzwl8.rs:22:10\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |          ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmprtpgzwl8.rs:22:14\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |             -^ expected one of `)`, `,`, `@`, or `|`\n   |             |\n   |             help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmprtpgzwl8.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmprtpgzwl8.rs:22:15\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |               ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmprtpgzwl8.rs:22:16\n   |\n22 |     for (let i = 0; i < lst1_len; i++) {\n   |                ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmprtpgzwl8.rs:18:8\n   |\n18 |     if (lst1_len == lst2_len) {\n   |        ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -     if (lst1_len == lst2_len) {\n18 +     if lst1_len == lst2_len {\n   | \n\nerror: aborting due to 5 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_count = 0;\n  let lst1_count = 0;\n  let lst2_count = 0;\n  for i in lst1 {\n    lst1_count += i.len();\n  }\n  for i in lst2 {\n    lst2_count += i.len();\n  }\n  if (lst1_count < lst2_count) {\n    return lst1;\n  } else if (lst1_count > lst2_count) {\n    return lst2;\n  } else {\n    for i in lst1 {\n      total_count += i.len();\n    }\n    for i in lst2 {\n      total_count += i.len();\n    }\n    if (total_count < lst1_count) {\n      return lst1;\n    } else if (total_count > lst1_count) {\n      return lst2;\n    } else {\n      return lst1;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpp4yd887_.rs:25:6\n   |\n25 |   if (lst1_count < lst2_count) {\n   |      ^                       ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n25 -   if (lst1_count < lst2_count) {\n25 +   if lst1_count < lst2_count {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpp4yd887_.rs:27:13\n   |\n27 |   } else if (lst1_count > lst2_count) {\n   |             ^                       ^\n   |\nhelp: remove these parentheses\n   |\n27 -   } else if (lst1_count > lst2_count) {\n27 +   } else if lst1_count > lst2_count {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpp4yd887_.rs:36:8\n   |\n36 |     if (total_count < lst1_count) {\n   |        ^                        ^\n   |\nhelp: remove these parentheses\n   |\n36 -     if (total_count < lst1_count) {\n36 +     if total_count < lst1_count {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpp4yd887_.rs:38:15\n   |\n38 |     } else if (total_count > lst1_count) {\n   |               ^                        ^\n   |\nhelp: remove these parentheses\n   |\n38 -     } else if (total_count > lst1_count) {\n38 +     } else if total_count > lst1_count {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `lst1_count`\n  --> /tmp/tmpp4yd887_.rs:20:5\n   |\n17 |   let lst1_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `lst1_count`\n   |       help: consider making this binding mutable: `mut lst1_count`\n...\n20 |     lst1_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `lst2_count`\n  --> /tmp/tmpp4yd887_.rs:23:5\n   |\n18 |   let lst2_count = 0;\n   |       ----------\n   |       |\n   |       first assignment to `lst2_count`\n   |       help: consider making this binding mutable: `mut lst2_count`\n...\n23 |     lst2_count += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to im",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let total_chars = 0;\n    let total_match = Vec::new();\n    for i in lst1 {\n        total_chars += i.length();\n    }\n    for i in lst2 {\n        if total_chars < i.length() {\n            total_chars = i.length();\n            total_match = Vec::new();\n        }\n        total_match.push(i);\n    }\n    return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpzo05qyw7.rs:19:26\n   |\n19 |         total_chars += i.length();\n   |                          ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpzo05qyw7.rs:22:28\n   |\n22 |         if total_chars < i.length() {\n   |                            ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpzo05qyw7.rs:23:29\n   |\n23 |             total_chars = i.length();\n   |                             ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if lst1_len == lst2_len {\n        return lst1\n    } else if lst1_len < lst2_len {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpgke62iam.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        let total_match = 0;\n        for (let i = 0; i < lst1_len; i++) {\n            let lst1_char = lst1[i];\n            let lst2_char = lst2[i];\n            if (lst1_char == lst2_char) {\n                total_match += 1;\n            }\n        }\n        return lst1.update(total_match);\n    } else {\n        let total_match = 0;\n        for (let i = 0; i < lst2_len; i++) {\n            let lst2_char = lst2[i];\n            let lst1_char = lst1[i];\n            if (lst1_char == lst2_char) {\n                total_match += 1;\n            }\n        }\n        return lst2.update(total_match);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpyfep_8er.rs:22:14\n   |\n22 |         for (let i = 0; i < lst1_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyfep_8er.rs:22:18\n   |\n22 |         for (let i = 0; i < lst1_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyfep_8er.rs:22:20\n   |\n22 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyfep_8er.rs:22:19\n   |\n22 |         for (let i = 0; i < lst1_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyfep_8er.rs:22:20\n   |\n22 |         for (let i = 0; i < lst1_len; i++) {\n   |                    ^ expected expression\n\nerror: expected identifier, found keyword `let`\n  --> /tmp/tmpyfep_8er.rs:32:14\n   |\n32 |         for (let i = 0; i < lst2_len; i++) {\n   |              ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpyfep_8er.rs:32:18\n   |\n32 |         for (let i = 0; i < lst2_len; i++) {\n   |                 -^ expected one of `)`, `,`, `@`, or `|`\n   |                 |\n   |                 help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpyfep_8er.rs:32:20\n   |\n32 |         for (let i = 0; i < lst2_len; i++) {\n   |                    ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpyfep_8er.rs:32:19\n   |\n32 |         for (let i = 0; i < lst2_len; i++) {\n   |                   ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpyfep_8er.rs:32:20\n   |\n32 |         for (let i = 0; i < lst2_len; i++) {\n   |                    ^ expected expression\n\nwarning: unnecessa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1\n  } else if (lst1_len > lst2_len) {\n    return lst2\n  } else {\n    let lst1_match = lst1.filter(x => x.length() < lst2.head().length());\n    return lst1_match.concat(total_match(lst1.tail(), lst2.tail()))\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpz3ene227.rs:23:36\n   |\n23 |     let lst1_match = lst1.filter(x => x.length() < lst2.head().length());\n   |                                    ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len > lst2_len) {\n    return lst1;\n  } else if (lst1_len < lst2_len) {\n    return lst2;\n  } else {\n    let lst1_chars = lst1.map(String::length);\n    let lst2_chars = lst2.map(String::length);\n    let lst1_chars_len = lst1_chars.reduce((a, b) => a + b);\n    let lst2_chars_len = lst2_chars.reduce((a, b) => a + b);\n    if (lst1_chars_len == lst2_chars_len) {\n      return lst1;\n    } else {\n      return lst2;\n    }\n  }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `.`, `?`, or an operator, found `=>`\n  --> /tmp/tmprk13rq89.rs:25:51\n   |\n25 |     let lst1_chars_len = lst1_chars.reduce((a, b) => a + b);\n   |                                                   ^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    let lst1_total = 0;\n    let lst2_total = 0;\n    let result = Vec::new();\n    for i in 0..lst1_len {\n        lst1_total += lst1[i].len();\n    }\n    for i in 0..lst2_len {\n        lst2_total += lst2[i].len();\n    }\n    if lst1_total < lst2_total {\n        return lst1;\n    } else if lst2_total < lst1_total {\n        return lst2;\n    } else {\n        for i in 0..lst1_len {\n            if lst1[i].len() < lst2[i].len() {\n                result.append(lst1[i]);\n            } else {\n                result.append(lst2[i]);\n            }\n        }\n        return result;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpe6zwvjw0.rs:34:31\n   |\n34 |                 result.append(lst1[i]);\n   |                               ^^^^^^^ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                         found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe6zwvjw0.rs:36:31\n   |\n36 |                 result.append(lst2[i]);\n   |                               ^^^^^^^ expected `&mut Vec<_>`, found struct `String`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                         found struct `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let lst1_len = lst1.length();\n  let lst2_len = lst2.length();\n  if (lst1_len == lst2_len) {\n    return lst1;\n  }\n  let result = Vec::new();\n  for (let i = 0; i < lst1_len; i++) {\n    let lst1_char = lst1[i];\n    let lst2_char = lst2[i];\n    if (lst1_char < lst2_char) {\n      result.push(lst1_char);\n    } else {\n      break;\n    }\n  }\n  for (let i = lst1_len; i < lst2_len; i++) {\n    let lst2_char = lst2[i];\n    if (lst2_char < lst1_char) {\n      result.push(lst2_char);\n    } else {\n      break;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `let`\n  --> /tmp/tmpsox3xwyd.rs:22:8\n   |\n22 |   for (let i = 0; i < lst1_len; i++) {\n   |        ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `i`\n  --> /tmp/tmpsox3xwyd.rs:22:12\n   |\n22 |   for (let i = 0; i < lst1_len; i++) {\n   |           -^ expected one of `)`, `,`, `@`, or `|`\n   |           |\n   |           help: missing `,`\n\nerror: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpsox3xwyd.rs:22:14\n   |\n22 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpsox3xwyd.rs:22:13\n   |\n22 |   for (let i = 0; i < lst1_len; i++) {\n   |             ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpsox3xwyd.rs:22:14\n   |\n22 |   for (let i = 0; i < lst1_len; i++) {\n   |              ^ expected expression\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsox3xwyd.rs:18:6\n   |\n18 |   if (lst1_len == lst2_len) {\n   |      ^                    ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n18 -   if (lst1_len == lst2_len) {\n18 +   if lst1_len == lst2_len {\n   | \n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpsox3xwyd.rs:16:23\n   |\n16 |   let lst1_len = lst1.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `Vec<String>` in the current scope\n  --> /tmp/tmpsox3xwyd.rs:17:23\n   |\n17 |   let lst2_len = lst2.length();\n   |                       ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    for i in lst1 {\n        count += i.len();\n    }\n    for i in lst2 {\n        count -= i.len();\n    }\n    if count == 0 {\n        return lst1;\n    }\n    return lst2;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp06xttwpd.rs:18:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n17 |     for i in lst1 {\n18 |         count += i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp06xttwpd.rs:21:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n21 |         count -= i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp06xttwpd.rs:24:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n16  |     let count = 0;\n17  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n17  |     for i in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp06xttwpd.rs:26:12\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n20 |     for i in lst2 {\n   |              ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n26 |     return lst2;\n   |            ^^^^ value used here after move\n   |\nhelp: consider iterating over a slice of the `Vec<String>`'s ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  let total_match = Vec::new();\n  for i in lst1 {\n    total_chars += i.length();\n  }\n  for i in lst2 {\n    if total_chars < i.length() {\n      total_match.push(i);\n    }\n  }\n  return total_match;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpygqas3y6.rs:19:22\n   |\n19 |     total_chars += i.length();\n   |                      ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror[E0599]: no method named `length` found for struct `String` in the current scope\n  --> /tmp/tmpygqas3y6.rs:22:24\n   |\n22 |     if total_chars < i.length() {\n   |                        ^^^^^^ help: there is an associated function with a similar name: `len`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len < lst2_len) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmpyagcc00s.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let result = Vec::new();\n    for i in lst1 {\n        if i.len() < lst2[count].len() {\n            count += 1;\n        } else if i.len() == lst2[count].len() {\n            result = result.concat(lst2[count]);\n            count += 1;\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp18gql4or.rs:22:29\n    |\n22  |             result = result.concat(lst2[count]);\n    |                             ^^^^^^ ----------- supplied 1 argument\n    |                             |\n    |                             expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch resolving `<[String] as Concat<str>>::Output == Vec<String>`\n  --> /tmp/tmp18gql4or.rs:22:29\n   |\n22 |             result = result.concat(lst2[count]);\n   |                             ^^^^^^ expected struct `String`, found struct `Vec`\n   |\n   = note: expected struct `String`\n              found struct `Vec<String>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0271.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let result = Vec::new();\n    for i in lst1 {\n        count += i.len();\n    }\n    for i in lst2 {\n        count -= i.len();\n        if count < 0 {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzkz4iwda.rs:19:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n19 |         count += i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzkz4iwda.rs:22:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n22 |         count -= i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0596]: cannot borrow `result` as mutable, as it is not declared as mutable\n  --> /tmp/tmpzkz4iwda.rs:24:13\n   |\n17 |     let result = Vec::new();\n   |         ------ help: consider changing this to be mutable: `mut result`\n...\n24 |             result.push(i);\n   |             ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0384, E0596.\nFor more information about an error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let count = 0;\n    let total = 0;\n    for i in lst1 {\n        count += 1;\n        total += i.len();\n    }\n    for i in lst2 {\n        count += 1;\n        total += i.len();\n    }\n    if count == 0 {\n        return lst1;\n    }\n    if total == 0 {\n        return lst2;\n    }\n    let result = Vec::new();\n    for i in lst1 {\n        if i.len() < lst2[0].len() {\n            result.push(i);\n        }\n    }\n    for i in lst2 {\n        if i.len() < lst1[0].len() {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzz_6juv7.rs:19:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n19 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmpzz_6juv7.rs:20:9\n   |\n17 |     let total = 0;\n   |         -----\n   |         |\n   |         first assignment to `total`\n   |         help: consider making this binding mutable: `mut total`\n...\n20 |         total += i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpzz_6juv7.rs:23:9\n   |\n16 |     let count = 0;\n   |         -----\n   |         |\n   |         first assignment to `count`\n   |         help: consider making this binding mutable: `mut count`\n...\n23 |         count += 1;\n   |         ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total`\n  --> /tmp/tmpzz_6juv7.rs:24:9\n   |\n17 |     let total = 0;\n   |         -----\n   |         |\n   |         first assignment to `total`\n   |         help: consider making this binding mutable: `mut total`\n...\n24 |         total += i.len();\n   |         ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmpzz_6juv7.rs:27:16\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |     for i in lst1 {\n    |              ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n27  |         return lst1;\n    |                ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: conside",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    let lst1_len = lst1.len();\n    let lst2_len = lst2.len();\n    if (lst1_len == lst2_len) {\n        return lst1;\n    } else if (lst1_len > lst2_len) {\n        return lst2.filter(x => x.len() < lst1_len);\n    } else {\n        return lst1.filter(x => x.len() < lst2_len);\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n  --> /tmp/tmpljg_mbvb.rs:21:30\n   |\n21 |         return lst2.filter(x => x.len() < lst1_len);\n   |                              ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that accepts two vectors of strings and returns the vector that has \n/// total number of chars in the all strings of the vector less than the other vector.\n/// if the two vectors have the same number of chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n/// Vec::<String>::new()\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n/// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n/// >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n  let total_chars = 0;\n  for i in lst1 {\n    total_chars += i.len();\n  }\n  for i in lst2 {\n    total_chars -= i.len();\n  }\n  if total_chars < 0 {\n    return lst1\n  }\n  return lst2\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\")]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\")]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(), vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n",
      "timestamp": 1664292698,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp8veov1vt.rs:18:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n17 |   for i in lst1 {\n18 |     total_chars += i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `total_chars`\n  --> /tmp/tmp8veov1vt.rs:21:5\n   |\n16 |   let total_chars = 0;\n   |       -----------\n   |       |\n   |       first assignment to `total_chars`\n   |       help: consider making this binding mutable: `mut total_chars`\n...\n21 |     total_chars -= i.len();\n   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp8veov1vt.rs:24:12\n    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n    |                ---- move occurs because `lst1` has type `Vec<String>`, which does not implement the `Copy` trait\n16  |   let total_chars = 0;\n17  |   for i in lst1 {\n    |            ---- `lst1` moved due to this implicit call to `.into_iter()`\n...\n24  |     return lst1\n    |            ^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n17  |   for i in &lst1 {\n    |            +\n\nerror[E0382]: use of moved value: `lst2`\n  --> /tmp/tmp8veov1vt.rs:26:10\n   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n   |                                   ---- move occurs because `lst2` has type `Vec<String>`, which does not implement the `Copy` trait\n...\n20 |   for i in lst2 {\n   |            ---- `lst2` moved due to this implicit call to `.into_iter()`\n...\n26 |   return lst2\n   |          ^^^^ value used here after move\n   |\nhelp: consider iterating over a slice",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}